I"ë<<p>When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This second post answers the following question: given that resource with id 123 actually exists in the underlying database, what should be the response to <code>GET /resources/123</code> when consumer is not allowed to access it? <code>401 Unauthorized</code>, <code>403 Forbidden</code> or <code>404 Not Found</code>?</p>

<!--more-->
<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">Choosing HTTP status codes Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.<div class="alert alert-info">
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use <a class="alert-link" href="https://webconcepts.info/concepts/http-status-code/">Erik Wilde's Web Concepts</a>.
</div>Very special thanks to all Twitter people participating to the <a href="https://twitter.com/search?q=%23choosehttpstatuscode&amp;src=typed_query">#choosehttpstatuscode</a> polls and discussions</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item"><a href="/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/">1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501</a></li>
          
        
          
          <li class="list-group-item active">2 - Hands off that resource, HTTP status code 401 vs 403 vs 404</li>
          
        
          
          <li class="list-group-item"><a href="/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/">3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410</a></li>
          
        
          
          <li class="list-group-item"><a href="/empty-lists-http-status-code-200-vs-204-vs-404/">4 - Empty list, HTTP status code 200 vs 204 vs 404</a></li>
          
        
        
      </ul>
    </div>
  </div>
</div>
<h1 id="the-context">The context</h1>

<p>Let‚Äôs say you‚Äôre creating an API for a mobile application that allows people to record phone calls.
Once calls are recorded, users can list them and listen to each individual recording.
Listing a user‚Äôs recorded calls could be done with a <code>GET /users/{phoneNumber}/calls</code>, for each phone call listed you get a random and unpredictable <code>id</code> that can be used to retrieve the actual audio recording with a <code>GET /calls/{callId}</code>.</p>

<p>Basically it means that when a user whose phone number is <code>123456789</code> uses the mobile application, the application sends a <code>GET /users/123456789/calls</code> API request to list available recorded calls.
The API responds with a <code>200 OK</code> along with the recorded calls belonging to user.
If user taps on one conversation which id is <code>Bnwgab</code>, the application sends a <code>GET /calls/Bnwgab</code> and the API responds with a <code>200 OK</code> along with the audio file</p>

<p>But what happens if some curious and maybe malicious user scan network traffic coming out of the application?
This hacker will easily understand how this ‚Äúnot so private‚Äù API works.
With very little effort, they will succeed to generate phone numbers that actually exist in the underlying system so send <code>GET /users/{phone number of another user}/calls</code> requests.
And with more effort, enough patience and adapted tools they may even generate valid random some <code>callId</code> and send <code>GET /calls/{callId that don't belong to their user account}</code> requests.</p>

<p>In either case, the API should prevent accessing resources that don‚Äôt belong to the caller and signify there‚Äôs a problem with caller‚Äôs request.
Note that if that sounds like a no-brainer for many people, that is actually not always the case and some APIs may return a <code>200 OK</code> along with the requested data.
Regularly, stories such as <a href="https://techcrunch.com/2021/03/09/iphone-thousands-calls-exposed/">this one</a> (which inspired the above use case) come out.
Never forget that when creating APIs and never refrain from double check that your colleagues are also aware of that.
And note also that using PII (Personnally Identifiable Information) or other sensitive data as ids can be very convenient but raises security concerns, especially if they appear in URLs as they can be logged almost everywhere.
I should write a post series about API security one day (<code>POST /writing-ideas</code> done!).</p>

<p>Let‚Äôs get back to what we are talking about today: HTTP status codes.
Obviously, when consumer make an API call on resource that actually exists but don‚Äôt belong to them, the API must respond with a <code>4xx Client Error Class</code>, but which one could be the more accurate?</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hands-off-that-resource-http-status-code-401-vs-403-vs-404/twitter-poll.png" class="figure-img img-fluid" alt="Twitter poll results" /></figure>
</div>

<p>According to my <a href="https://twitter.com/apihandyman/status/1382712503717728257?s=21">Twitter poll</a>, 54% of people would return a <code>403 Forbidden</code>, while 24% would return a <code>404 Not Found</code> and also 24% would return a <code>401 Unauthorized</code>.
Let‚Äôs see who is right and who is wrong based on what RFCs say.</p>

<h1 id="use-404-when-resource-is-none-of-consumers-business-and-never-will">Use 404 when resource is none of consumer‚Äôs business (and never will)</h1>

<blockquote class="blockquote">
    <p class="mb-0">The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><footer class="blockquote-footer">
        <cite title="Source Title"><a href="http://tools.ietf.org/html/rfc7231#section-6.5.4">RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4</a></cite>
    </footer></blockquote>

<p>Returning a <code>404 Not Found</code> means ‚Äúthe requested resource does not exists‚Äù.
Actually, there‚Äôs a subtlety, it could mean ‚Äúthe requested resource actually exists but it‚Äôs none of your business, you‚Äôre not allowed to access it and never will; actually, it does not exist for you‚Äù or ‚Äúthe requested resource does not exist at all‚Äù but the consumer will never know what is the true reason behind this HTTP status code.</p>

<p>That response is the best one for the introduction‚Äôs use case, granted that users want to use this application without sharing anything with others.
In that case, given that John and Emma use the application, if Emma ‚Äúhacks‚Äù the API, we will never ever want her to know that <code>/users/{John's phone number}/calls</code> may exists.
Because they are not supposed to know it exists and even though can‚Äôt do anything about it, so better tell her that it ‚Äúdoesn‚Äôt exist‚Äù (for her).</p>

<p>But if <code>404 Not Found</code> is usually my first idea when a consumer tries to access to a <code>/resources/1234</code> they shouldn‚Äôt (I admit I‚Äôm a little obsess with security and prone to not show what is not needed to be shown), there are cases where it could be interesting to let them know the target resource exists.</p>

<h1 id="use-403-when-consumer-can-do-something-about-it">Use 403 when consumer can do something about it</h1>

<blockquote class="blockquote">
    <p class="mb-0">The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it.  A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).</p><footer class="blockquote-footer">
        <cite title="Source Title"><a href="https://tools.ietf.org/html/rfc7231#section-6.5.3">RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.3</a></cite>
    </footer></blockquote>

<p>Returning a <code>403 Forbidden</code> signifies ‚Äúthe requested resource actually MAY exists but you cannot access it. You MAY access it by requesting adequate rights to someone, maybe an administrator for instance‚Äù.</p>

<p>Even if that is not very realistic, let‚Äôs say that the example application/API described in the introduction allows users to share recorded conversations with others. Given John has shared his conversations with Emma but not with Tara, Emma triggering a <code>GET /users/{John's phone number}/calls</code> API call will get a <code>200 OK</code> while Tara will get a <code>403 Forbidden</code>. Tara may request John the rights to access his conversations to fix that.</p>

<p>We have talk about <code>403 Forbidden</code> and <code>404 Not Found</code>, but what about the poll‚Äôs third option?</p>

<h1 id="never-ever-use-401-dont-be-fooled-by-its-reason">Never ever use 401 (don‚Äôt be fooled by its reason)</h1>

<blockquote class="blockquote">
    <p class="mb-0">The 401 (Unauthorized) status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.</p><footer class="blockquote-footer">
        <cite title="Source Title"><a href="https://tools.ietf.org/html/rfc7235#section-3.1">RFC 7235 Hypertext Transfer Protocol (HTTP/1.1): Authentication, section 3.1</a></cite>
    </footer></blockquote>

<p>As 24% of respondents to my poll, when a consumers tries to access a resource they shouldn‚Äôt access, you may be tempted to return a <code>401 Unauthorized</code> instead of a <code>403 Forbidden</code>.
Why would you do that?
Maybe because its reason phrase says <code>Unauthorized</code>.
But that would actually be an error, don‚Äôt be fooled by that reason phrase.</p>

<blockquote class="blockquote">
    <p class="mb-0">There are only two hard things in Computer Science: cache invalidation and naming things.</p><footer class="blockquote-footer">
        <cite title="Source Title"><a href="https://www.karlton.org/2017/12/naming-things-hard/">Phil Karlton</a></cite>
    </footer></blockquote>

<p>There‚Äôs a huge problem with <code>401 Unauthorized</code>, its reason phrase let think that it is tied to ‚Äúwrong authorization‚Äù while it is actually tied to ‚Äúlack of authentication‚Äù.
Actually the RFC that defines it is <a href="section 3.1">RFC 7235 - Hypertext Transfer Protocol (HTTP/1.1): Authentication</a>‚Ä¶ ‚ÄúAuthentication‚Äù and not ‚ÄúAuthorization‚Äù.
Even the description states that this status is about ‚Äúauthentication credentials‚Äù.</p>

<p>A <code>401</code> signifies there‚Äôs a problem with your credentials which usually are provided in an <code>Authorization</code> header (still wrong name, but at least it‚Äôs consistent with the reason).
This status is made to signify ‚Äúyou forgot to provide an Authorization header with some credentials‚Äù or ‚Äúyour credentials provided in the Authorization header are invalid/expired‚Äù.
In the API world, it basically says ‚ÄúYou can‚Äôt use the API at all, come back with a valid access token‚Äù.</p>

<p>It‚Äôs not meant to say ‚ÄúYou can use the API but not access that resource‚Äù, that is the job of <code>403 Forbidden</code>.
And that is clearly stated in its description in <a href="section 6.5.3">RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</a>:</p>

<blockquote class="blockquote">
    <p class="mb-0">If authentication credentials were provided in the request, the server considers them insufficient to grant access.  The client SHOULD NOT automatically repeat the request with the same credentials.  The client MAY repeat the request with new or different credentials.  However, a request might be forbidden for reasons unrelated to the credentials.</p></blockquote>

<p>To be even more sure that <code>403 Forbidden</code> is the right answer, let‚Äôs talk about Oauth 2 scopes.
Indeed, dealing with resource rights access is not always, let‚Äôs say ‚Äúinternal business rule‚Äù driven (checking in users table that the identified user has the requested phone number for example).
When consumers request an access token using the Oauth 2 framework (the token that goes into the not so well named <code>Authorization</code> header), they may request a token restricted to given elements thanks to scopes.
For instance, when using the Github API, you may request access to public repo only or to user data only.
What should happen when a consumer requests access to a resource without adapted scopes?
<a href="https://tools.ietf.org/html/rfc6750#section-3.1">Section 3.1 of RFC 6750 The OAuth 2.0 Authorization Framework: Bearer Token Usage</a> is quite clear:</p>

<blockquote class="blockquote">
    <p class="mb-0">The request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the "scope" attribute with the scope necessary to access the protected resource.</p><footer class="blockquote-footer">
        <cite title="Source Title">insufficient_scope error</cite>
    </footer></blockquote>

<h1 id="http-status-code-is-not-enough">HTTP Status code is not enough</h1>

<p>That means two things.
First <code>401 Unauthorized</code> is definitely not an option in the case we are studying today.
Second, HTTP status code is not enough.
Indeed, <code>403 Forbidden</code> could be returned because consumer lacks some scope to <code>GET /resources/{resourceId}</code> in general or does not comply to some business rule and cannot <code>GET /resource/1234</code> (a specific id).
Providing a message and maybe some structured data to explained the why of the error and how it can be solved (request access token with scope X in first case or contact some admin in second case) is mandatory.
Note that, this made me realized that <code>403 Forbidden</code> does not actually disclose that a resource exists, it totally depends on what is said beyond the HTTP status code.</p>

<h1 id="dont-forget-dx-and-context">Don‚Äôt forget DX and context</h1>

<p>Respecting HTTP and other RFCs is important to avoid surprising developers with behaviors that are against common practices, but most important, whatever the HTTP status code you‚Äôll choose to return, what matters above all is providing the response the most adapted for the context that will actually help the developer (and the consumer and even the end user) to know what is actually happening and help them solve the problem if they can.</p>

<p>So, when consumers want to access a resource they shouldn‚Äôt, don‚Äôt return a <code>401 Unauthorized</code>, you would go against the HTTP protocol.
Instead, return a <code>404 Not Found</code> if consumers can‚Äôt do anything about it (so from their perspective, it does not exist) and return a <code>403 Forbidden</code> along with a meaningful message if they can request access.</p>
:ET