I"1(<p>When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.
This first post answers the following question: given that a <code>GET /resources/123</code> request returns a <code>200 OK</code>, what should be the response to <code>DELETE /resources/123</code> if <code>DELETE</code> method is not implemented? <code>404 Not Found</code>, <code>405 Method Not Allowed</code> or <code>501 Not Implemented</code>?</p>

<!--more-->
<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">Choosing HTTP status codes Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.<div class="alert alert-info">
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use <a class="alert-link" href="https://webconcepts.info/concepts/http-status-code/">Erik Wilde's Web Concepts</a>.
</div>Very special thanks to all Twitter people participating to the <a href="https://twitter.com/search?q=%23choosehttpstatuscode&amp;src=typed_query">#choosehttpstatuscode</a> polls and discussions</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item active">1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501</li>
          
        
          
          <li class="list-group-item"><a href="/hands-off-that-resource-http-status-code-401-vs-403-vs-404/">2 - Hands off that resource, HTTP status code 401 vs 403 vs 404</a></li>
          
        
          
          <li class="list-group-item"><a href="/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/">3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410</a></li>
          
        
          
          <li class="list-group-item"><a href="/empty-lists-http-status-code-200-vs-204-vs-404/">4 - Empty list, HTTP status code 200 vs 204 vs 404</a></li>
          
        
        
      </ul>
    </div>
  </div>
</div>
<h1 id="the-context">The context</h1>

<p>In my <a class="post-link" href="/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/">Batch (Github) API calls with CSV and Postman runner and visualizer</a> post, I used the Github REST API and discovered it was impossible to delete an issue on a repository with a <code>DELETE /{user}/{repository}/issues/{issueId}</code> request simply because it was not implemented.
Unfortunately, the Github API warned me with a quite awkward <code>404 Not Found</code> though a <code>GET</code> on the very same issue returned a <code>200 OK</code> that tells “this issue exists”.
That’s quite a contradiction.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/twitter-poll.png" class="figure-img img-fluid" alt="Twitter poll results" /></figure>
</div>

<p>According to a Twitter poll I made, a few voters (10%) agreed with Github REST API’s <code>404 Not Found</code> response, most people (56%) would use a <code>405 Method Not Allowed</code>, but a significant amount (34%) would use <code>501 Not Implemented</code>.
Let’s see which HTTP status code(s) can be used when a resource actually exists but the method provided in the request is not available.</p>

<h1 id="use-405-method-not-allowed-when-method-isnt-defined-in-contract">Use 405 Method Not Allowed when method isn’t defined in contract</h1>

<blockquote class="blockquote">
    <p class="mb-0">The 405 (Method Not Allowed) status code indicates that the method received in the request-line is known by the origin server but not supported by the target resource.</p><footer class="blockquote-footer">
        <cite title="Source Title"><a href="http://tools.ietf.org/html/rfc7231#section-6.5.5">RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.5</a></cite>
    </footer></blockquote>

<p>A <code>405</code> is a <code>4xx</code> class status code, which means it’s client’s fault.
Receiving such a response means the client sent to the origin server a request with a method that is not allowed/supported by the target resource.
Let’s rephrase that definition in the context of an API:
a consumer will get a <code>405 Method Not Allowed</code> response when sending a request with a method which is not explicitly mentioned in in the contract or documentation on the target resource.
For instance, that means if the API’s contract or documentation states the only method supported by a resource <code>/resource</code> is <code>GET</code>, a consumer sending a request on this resource using any other method, like <code>DELETE /resource</code> for instance, will get a <code>405 Method Not Allowed</code> response.</p>

<p>Therefore, the <code>405</code> status code is the one I would have expected from the Github REST API when I tried to delete an issue.
Indeed, the API’s documentation describing the API’s contract of the issue resource (<code>/{user}/{repository}/issues/{issueId}</code>) only mentions <code>GET</code> and I sent <code>DELETE</code>.
It’s clearly my fault, though it’s quite surprising to NOT be able to delete an issue (but that’s another story).</p>

<p>A <code>405 Method Not Allowed</code> is the right choice when the method is not defined in contract, but sending a “wrong” method is not always consumer’s fault, that’s where a <code>501 Not Implemented</code> could be interesting.</p>

<h1 id="use-501-not-implemented-when-partially-implementing-a-standard">Use 501 Not Implemented when partially implementing a “standard”</h1>

<blockquote class="blockquote">
    <p class="mb-0">The 501 (Not Implemented) status code indicates that the server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.</p><footer class="blockquote-footer">
        <cite title="Source Title"><a href="http://tools.ietf.org/html/rfc7231#section-6.6.2">RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, Section 6.6.2</a></cite>
    </footer></blockquote>

<p>A <code>5xx</code> class error means the server is at fault.
A <code>501 Not Implemented</code> basically says “we’re deeply sorry but <code>METHOD</code> has not been implemented on this resource and maybe has not been implemented at all on any resource”.</p>

<p>Sending a <code>TOTALLY-UNKNOWN-METHOD /whatever-resource</code> could result in getting a <code>501</code> if the method does not match any <a href="https://webconcepts.info/concepts/http-method/">generally known one</a>, but in that case I would prefer to return a <code>405 Method Not Allowed</code> as it’s not the server’s fault if the consumer really sent a bullshit method in its request and must send an acceptable one.</p>

<p>But, imagine you are implementing a “more or less standard” interface contract.
It could be because you work in a regulated industry like banking or an highly inter-connected one like travel or logistics.
It could be because you want to implement a protocol such as WebDAV, which is a extended version of HTTP adding new methods.
It could also be simply because inside your company several components have to share a common interface in order to facilitate communication.</p>

<p>Imagine now that standard contract you need to implement says consumer can use <code>GET</code> and <code>PUT</code> on <code>/resource</code> but you only implement <code>GET</code> in your version 1 for whatever reasonable reason.
In that case, returning a <code>501 Not Implemented</code> would be the perfect answer as the “standard” contract says that <code>PUT /whatever-resource</code> is possible but it has not been implemented by the actual provider.</p>

<p>If a <code>501 Not Implemented</code> is a very good answer in such a context of partially implementing a “more or less standard” API, returning a <code>404 Not Found</code> is totally out of question in any HTTP method related error.</p>

<h1 id="never-use-404-not-found-when-receiving-wrong-or-unknown-method">Never use 404 Not Found when receiving wrong or unknown method</h1>

<blockquote class="blockquote">
    <p class="mb-0">The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><footer class="blockquote-footer">
        <cite title="Source Title"><a href="http://tools.ietf.org/html/rfc7231#section-6.5.4">RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4</a></cite>
    </footer></blockquote>

<p>The Github REST API responded with a <code>404 Not Found</code> to my <code>DELETE /issue-resource-path</code> request.
According to RFC 7231, that tells the issue identified by the path doesn’t exist (A) or Github is not willing to disclose that issue actually exists (B).
Unfortunately, both options were contradicted by the <code>GET /issue-resource-path</code> returning a <code>200 OK</code>.
Indeed, getting this <code>200</code> tells the issue actually exists (Not A) and Github is willing to disclose it exists (Not B).</p>

<p>And even if for any reason I was actually not able to see this issue (we’ll talk about that in a later post) and so get a <code>404</code> on my <code>GET</code>, I still would prefer to get a <code>405</code> on my <code>DELETE</code>, that way I could have quickly know that whatever the issue I want to delete, I will never be able to delete it as it’s not possible according to the API’s contract.</p>
:ET