I"uG<p>Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. In this 4 parts post series, you’ll discover why and how I use JQ with OpenAPI Specification files. But more important, you’ll get some basic and more advanced example of how to use JQ on any JSON document to get and modify JSON data as you want. In this first part we’ll focus on what is JQ, why I use it with OpenAPI files and we’ll learn how to invoke JQ and discover some of the many JQ filters that can be used to extract data from JSON.<!--more--></p>

<p>This 4 parts post is the first one of a new API Toolbox category in which I’ll talk about the tools I use when doing API related stuff, why I use them and how. This post is also my first one using <a href="https://asciinema.org/">Asciinema</a>, an awesome tool allowing to record and share terminal sessions.</p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">JQ and OpenAPI Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">
JQ's <a href="https://stedolan.github.io/jq/manual/v1.6/" target="jq">documentation</a> is quite complete and there are many tutorials and Stackoverflow answers, so why bother writing this series? First reason, I regularly meet people working with APIs and/or JSON files who actually don't know JQ exists and how it could save their life (or at least their time). Second reason, I often use it with OpenAPI specification files and I found that showing how JQ can be used on such a widely adopted and familiar JSON based format could help to learn how to use it (and also writing this post actually helped me to improve my JQ skills!).
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item active">1 - Using JQ to extract data from OpenAPI files</li>
          
        
          
          <li class="list-group-item"><a href="/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/">2 - Using JQ command line arguments, functions and modules</a></li>
          
        
          
          <li class="list-group-item"><a href="/api-toolbox-jq-and-openapi-part-3-modifying-openapi-files-with-jq/">3 - Modifying OpenAPI files with JQ</a></li>
          
        
          
          <li class="list-group-item"><a href="/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/">4 - Bonus: Coloring JQ's raw output</a></li>
          
        
        
          
          
          
        
          
          
          
        
      </ul>
    </div>
  </div>
</div>

<h1 id="what-is-jq-and-why-i-use-it-on-openapi-files">What is JQ and why I use it (on OpenAPI files)</h1>

<p>According to <a href="https://stedolan.github.io/jq/" target="jq">JQ’s website</a>, <em>jq can mangle the data format that you have into the one that you want with</em> and also <em>jq is like <code>sed</code> for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that <code>sed</code>, <code>awk</code>, <code>grep</code> and friends let you play with text.</em></p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-jq.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<p>I have been using JQ to transform JSON data when making API calls on the command line for quite a while, but lately I have been using it to manipulate OpenAPI Specification files. This is the use case I will focus on in this post (I’ll keep the API calls use case for another post).</p>

<p>The OpenAPI Specification (or OAS) is a standard and programming-language agnostic REST API description format. It can be used during the design of an API to formally describe the API’s contract. It can also be used to generate documentation, generate code or to configure tools such as API gateways. An OpenAPI file can be in YAML or JSON format. If you want to learn more about this format, read <a href="/openapi/" target="openapi">What is the OpenAPI Specification</a>. In order to have a good understanding of an OpenAPI document structure, you should check my <a href="http://openapi-map.apihandyman.io/" target="openapi">OpenAPI Map</a>.</p>

<p>In my daily job I have to work with OpenAPI files when doing API design reviews. Tools such as SwaggerUI or ReDoc easily provide a user friendly view of OpenAPI files, but when it comes to have a more specific view to check various design concerns, you need to use something else. I can use JQ when I want to know  which operations can be used with a given Oauth Scope, where a reusable schema is used or checking if an API or multiples APIs are consistent.
I also have to deal with OpenAPI files when working on my company’s API catalog. I had to generate API calls body to load OpenAPI files into it, I had to extract some data from them with JQ to do so. I also had to modify them to remove deprecated elements in order to avoid showing them in their documentation.</p>

<p>The examples shown in this post are based on my regular use of JQ+OpenAPI but I expanded my original JQ scripts set with other ones in order to show more of JQ’s features.</p>

<h1 id="installation">Installation</h1>

<p>If you want to play with JQ and OpenAPI as you read this post, you’ll need to install JQ and download this post’s related content(JQ scripts, OpenAPI demo files and Asciinema sessions and their underlying scripts).</p>

<h2 id="install-jq">Install JQ</h2>

<p>JQ is a portable command line tool that’s very easy to install. Its website states that <em>jq is written in portable C, and it has zero runtime dependencies. You can download a single binary, <code>scp</code> it to a far away machine of the same type, and expect it to work</em> (<code>scp</code> is a file transfer tool). This is actually true, I have tested it on Linux servers, Windows CMD terminal, Windows Gitbash (standalone and inside VS Code) and MacOS terminal: never had a problem with it.</p>

<p>To install JQ on my personnal Macbook, I used <code>brew install jq</code>. On my professional Windows laptop, I simply downloaded the binary and added it to my PATH environment variable. Check <a href="https://stedolan.github.io/jq/download/" target="jq">JQ’s download page</a> to see all available versions and ways to install it.</p>

<p>Once installed, open a terminal and run <code>jq --help</code> to check if everything is OK.</p>

<h2 id="get-posts-content">Get post’s content</h2>

<p>All examples shown in this post are based on JQ 1.6 and OpenAPI 3. All examples can be copied using the <span class="icon-inline icon-text" aria-label="copy button icon"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M14,2V0H6v2H2v18h16V2H14z M12,2v2H8V2H12z M16,18H4V4h2v2h8V4h2V18z"></path></svg></span> button and downloaded using the <span class="icon-inline icon-text" aria-label="download button icon"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><g><polygon points="15,11 13.6,9.6 11,12.2 11,0 9,0 9,12.2 6.4,9.6 5,11 10,16  "></polygon><polygon points="18,12 18,18 2,18 2,12 0,12 0,20 20,20 20,12  "></polygon></g></svg></span> one on code snippets. All source code can be retrieved from the <a href="https://github.com/arno-di-loreto/jq-and-openapi/" target="jq">JQ and OpenAPI post series’ github repository</a>.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">git clone https://github.com/arno-di-loreto/jq-and-openapi/
cd jq-and-openapi
git checkout part-1

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title"></p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ git clone https://github.com/arno-di-loreto/jq-and-openapi/
[apihandyman.io]$ cd jq-and-openapi
[apihandyman.io]$ git checkout part-1</code></pre>
  </div>
</div>

<p>Most of this post’s examples are run against the same OpenAPI file (<code>demo-api-openapi.json</code>) which is a slightly modified version of an example coming from my book <em>The Design of Web APIs</em>, I added a few elements here and there, convert it from YAML to JSON and uglify it.</p>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">demo-api-openapi.json (uglyfied OpenAPI 3.0)</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/api-toolbox-jq-and-openapi/part-1/demo-api-openapi.json" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy"><code class="code-block">{"openapi":"3.0.0","info":{"title":"Banking API","version":"1.0.0-snapshot","description":"The Banking API provides access to the [Banking Company](http://www.bankingcompany.com) services, which include bank account information, beneficiaries, and money transfer management.&#60;!--more--&#62;\n\n# Authentication\n\n## How to \n- Register\n- Create an APP\n- Request credentials\n\n# Use cases\n\n## Transferring money to an account or preexisting beneficiary\n\nThe _transfer money_ operation allows one to transfer an `amount` of money from a `source` account to a `destination` account or beneficiary.\nIn order to use an appropriate `source` and `destination`, we recommend to use _list sources_ and _list source's destinations_ as shown in the figure below (instead of using _list accounts_ and _list beneficiaries_).\n\n![Diagram](http://localhost:9090/12.2-operation-manual-diagram.svg)\n\n## Cancelling a delayed or recurring money transfer\n\n- List money transfers: To list existing money transfers and select the one to delete\n- Cancel a money transfer: To cancel the selected money transfer\n","contact":{"name":"The Banking API team","email":"api@bankingcompany.com","url":"developer.bankingcompany.com"}},"tags":[{"name":"Transfers","description":"Everything you need to manage money transfers. A money transfer consists in transferring money from a source account to a destination account."},{"name":"Beneficiaries","description":"Everything you need to manage money transfer beneficiaries. Beneficiaries are pre-registred external accounts that can be used as destinations for money transfers."}],"paths":{"/accounts":{"get":{"tags":["Accounts"],"summary":"List accounts","responses":{"200":{"description":"User's accounts","content":{"application/json":{"schema":{"required":["properties"],"properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Account"}}}}}}}}}},"/accounts/{id}":{"get":{"tags":["Accounts"],"summary":"Get an account","parameters":[{"name":"id","in":"path","description":"Account's id","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The account","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Account"}}}}},"x-implementation":{"security":{"description":"Only accounts belonging to user referenced in security data;\nreturn a 404 if this is not the case\n","source":{"system":"security","location":"jwt.sub"},"fail":404}}}},"/beneficiaries":{"post":{"tags":["Beneficiaries"],"summary":"Register a beneficiary","security":[{"BankingAPIScopes":["beneficiary:create","beneficiary:admin"]}],"responses":{"201":{"description":"Beneficiary added"}}},"get":{"tags":["Beneficiaries"],"summary":"List beneficiaries","security":[{"BankingAPIScopes":["beneficiary:read","beneficiary:admin"]}],"responses":{"200":{"description":"The beneficiaries list"}}}},"/beneficiaries/{id}":{"parameters":[{"name":"id","in":"path","description":"Beneficiary's id","required":true,"schema":{"type":"string"}}],"delete":{"deprecated":true,"tags":["Beneficiaries"],"summary":"Delete a beneficiary","security":[{"BankingAPIScopes":["beneficiary:delete","beneficiary:admin"]}],"responses":{"204":{"description":"Beneficiary deleted"}}},"patch":{"deprecated":true,"tags":["Beneficiaries"],"summary":"Updates a beneficiary","security":[{"BankingAPIScopes":["beneficiary:admin"]}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeneficiaryUpdate"}}}},"responses":{"200":{"description":"The updated beneficiary"}}},"get":{"tags":["Beneficiaries"],"summary":"Get a beneficiary","security":[{"BankingAPIScopes":["beneficiary:read","beneficiary:admin"]}],"responses":{"200":{"description":"The beneficiary"}}}},"/sources":{"get":{"summary":"List transfer sources","tags":["Transfers"],"description":"Not all bank accounts can be used as a source\nfor a money transfers. This operation returns\nonly the accounts elligible as a money transfer\nsource.\n","responses":{"200":{"description":"The transfer sources"}}}},"/sources/{id}/destinations":{"parameters":[{"name":"id","in":"path","description":"Source's id","required":true,"schema":{"type":"string"}}],"get":{"summary":"List transfer source's destinations","tags":["Transfers"],"description":"Depending on the source account, only specific\nbeneficiaries or accounts can be used as a money\ntransfer destination.\nThis operation returns them.\n","responses":{"200":{"description":"The transfer destination"}}}},"/transfers":{"post":{"summary":"Transfer money","security":[{"BankingAPIScopes":["transfer:create","transfer:admin"]}],"tags":["Transfers"],"description":"This operation allows one to transfer an `amount` of money from a `source` account to a `destination` account.\nThere are three different types of money transfer:\n  - Immediate -- these are executed as soon as the request is received \n  - Delayed -- these are executed upon a given future `date`\n  - Recurring -- these are executed a given `occurrences` number of times at a given `frequency` -- the first occurrence being executed immediately or at a given `date`\n","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferRequest"},"examples":{"immediate":{"summary":"Immediate transfer","description":"The money transfer is executed immediately","value":{"source":"000534115776675","destination":"000567689879878","amount":456.2}},"delayed":{"summary":"Delayed transfer","description":"The money transfer is executed at a given date","value":{"source":"000534115776675","destination":"000567689879878","amount":456.2,"date":"2019-03-19"}},"recurring":{"summary":"Recurring transfer","description":"The money transfer is executed at a given date reurringly","value":{"source":"000534115776675","destination":"000567689879878","amount":456.2,"date":"2019-03-19","occurrences":1,"frequency":"MONTHLY"}}}}}},"responses":{"201":{"description":"Immediate or recurring transfer executed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferResponse"},"examples":{"immediate":{"summary":"Immediate transfer","description":"The money transfer is executed immediately","value":{"source":"000534115776675","destination":"000567689879878","amount":456.2}},"recurring":{"summary":"Recurring transfer","description":"The first occurence is executed immediately","value":{"source":"000534115776675","destination":"000567689879878","amount":456.2,"date":"2019-03-19","occurrences":1,"frequency":"MONTHLY"}}}}}},"202":{"description":"Delayed or recurring delayed transfer accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferResponse"},"examples":{"delayed":{"summary":"Delayed transfer","description":"The money transfer is executed at a given date","value":{"source":"000534115776675","destination":"000567689879878","amount":456.2,"date":"2019-03-19"}},"recurring":{"summary":"Recurring transfer","description":"The money transfer is executed at a given date reurringly","value":{"source":"000534115776675","destination":"000567689879878","amount":456.2,"date":"2019-03-19","occurrences":1,"frequency":"MONTHLY"}}}}}},"400":{"description":"The transfer is rejected due to an error in the request properties or an insufficient balance.\nEach error provides the property `source` of the error along with a human-readable `message` and its `type`:\n\n- MANDATORY_PROPERTY: The property indicated in `source` is missing\n- INVALID_FORMAT: The format of the property indicated in `source` is invalid\n- INVALID_VALUE: The value of the property indicated in `source` is invalid\n- INSUFFICIENT_BALANCE: The `amount` property is higher than the `source` account balance\n","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConsumerError"}}}}}},"get":{"summary":"List money transfers","tags":["Transfers"],"security":[{"BankingAPIScopes":["transfer:read","transfer:admin"]}],"responses":{"200":{"description":"Transfers list","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferList"}}}}}}},"/transfers/{id}":{"parameters":[{"name":"id","in":"path","description":"Transfer's id","required":true,"schema":{"type":"string"}}],"get":{"summary":"Get a money transfer","tags":["Transfers"],"security":[{"BankingAPIScopes":["transfer:read","transfer:admin"]}],"responses":{"200":{"description":"The money transfer"},"404":{"description":"The money transfer does not exist"}}},"x-tension-example":{"some":"value"},"patch":{"tags":["Transfers"],"responses":{"200":{"description":"The money transfer has been update"}}},"delete":{"summary":"Cancel a money transfer","tags":["Transfers"],"security":[{"BankingAPIScopes":["transfer:delete","transfer:admin"]}],"description":"Only delayed or recurring money transfer can be canceled","responses":{"204":{"description":"The money transfer has been deleted"},"404":{"description":"The money transfer does not exist"}}}}},"components":{"securitySchemes":{"BankingAPIScopes":{"type":"oauth2","flows":{"implicit":{"authorizationUrl":"https://auth.bankingcompany.com/authorize","scopes":{"transfer:create":"Create transfers","transfer:read":"Read transfers","transfer:delete":"Delete transfers","transfer:admin":"Create, read, and delete transfers","beneficiary:create":"Create beneficiaries","beneficiary:read":"List beneficiaries","beneficiary:delete":"delete beneficiaries","beneficiary:admin":"Create, read, and delete beneficiaries","account:read":"Read accounts","account:admin":"Read accounts"}}}}},"schemas":{"BeneficiaryUpdate":{"description":"A beneficiary update parameter","properties":{"name":{"type":"string"}}},"UselessSchema":{"description":"An unused useless schema","type":"string"},"TransferRequest":{"description":"A money transfer request","required":["source","destination","amount"],"properties":{"deprecatedPropertyExample":{"deprecated":true,"type":"string","description":"An example of a deprecated property"},"source":{"type":"string","description":"Source account number","minLength":15,"maxLength":15,"pattern":"^\\d{15}$","example":"000534115776675"},"destination":{"type":"string","description":"Destination account number","minLength":15,"maxLength":15,"pattern":"^\\d{15}$","example":"000567689879878"},"amount":{"type":"number","example":456.2,"minimum":0,"exclusiveMinimum":true},"date":{"type":"string","format":"date","description":"Execution date for a delayed transfer\nor first execution date for a recurring one\n","example":"2019-03-19"},"occurrences":{"type":"integer","description":"Number of times a recurring transfer will be executed\n","example":2,"minimum":2,"maximum":100},"frequency":{"type":"string","description":"Frequency of recurring transfer's execution","example":"MONTHLY","enum":["WEEKLY","MONTHLY","QUARTERLY","YEARLY"]}}},"TransferResponse":{"allOf":[{"required":["id","type","status"],"properties":{"id":{"type":"string","example":"1611e71f-1bb2-412f-8c43-92b275a5c321"},"type":{"type":"string","enum":["IMMEDIATE","DELAYED","RECURRING"],"example":"RECURRING"},"status":{"type":"string","description":"An immediate transfer is always `EXECUTED`, a delayed transfer can be `EXECUTED` or `PENDING` and a recurring one is always `PENDING`\n","enum":["EXECUTED","PENDING"],"example":"PENDING"},"requestDate":{"type":"string","example":"2019-09-19"}}},{"$ref":"#/components/schemas/TransferRequest"}]},"TransferList":{"properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/TransferResponse"}}}},"ConsumerError":{"required":["errors"],"properties":{"errors":{"description":"A list of errors providing detailed information about the problem","type":"array","minItems":1,"items":{"required":["source","type","message"],"properties":{"source":{"description":"the property source of the error","type":"string","example":"amount","enum":["source","destination","amount","date","occurrences","frequency"]},"type":{"type":"string","example":"MANDATORY_PROPERTY","enum":["MANDATORY_PROPERTY","INVALID_FORMAT","INVALID_VALUE","INSUFFICIENT_BALANCE"]},"message":{"description":"a human-readable error message","type":"string","example":"The money transfer's amount must be provided"}}}}}},"ProviderError":{"properties":{"errors":{"type":"array","minItems":1,"maxItems":1,"items":{"properties":{"message":{"type":"string"}}}}}},"Account":{"properties":{"balance":{"description":"The balance in the account's default currency","type":"object","title":"Amount","required":["value","currency"],"properties":{"value":{"description":"Balance's value using the number of decimal places defined by ISO 4217","externalDocs":{"description":"Decimal places table","url":"https://www.currency-iso.org/en/home/tables/table-a1.html"},"type":"number","x-implementation":{"description":"The real time balance (not the daily one!)","source":{"system":"Core Banking","data":"ZBAL0.RTBAL"}}},"currency":{"description":"An ISO 4217 code","externalDocs":{"url":"https://www.iso.org/iso-4217-currency-codes.html"},"type":"string","example":"USD","x-implementation":{"source":{"system":"Core Banking","data":"ZBAL0.RTCUR"}}}}}}}}}}</code></pre>
  </div>
</div>

<p>There are also two other almost empty examples used when working on multiple files.</p>

<h1 id="invoke-jq">Invoke JQ</h1>

<p>In this first section, we’ll learn how to invoke JQ and its basic principles. The whole content of this section has been recorded with Asciinema (but is available as regular text right after the player).</p>

<div class="card card-code card-bash text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Invoking JQ</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="bash session player controls">
          
          <div class="dropdown">
            <a role="button" class="btn btn-secondary border-0 rounded-0" id="dropdownPlaylistButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="playlist toggler">
              <img class="btn-icon" src="/images/commons/icons/list.svg" data-toggle="tooltip" data-placement="top" title="Playlist" />
            </a>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownPlaylistButton">
              <span class="dropdown-item-text">Chapters</span>
              <div class="dropdown-divider"></div>
              
              
                
                <a class="dropdown-item" onclick="javascript:bashPlayerGoTo(this, 11)">Beautify and color JSON</a>
              
                
                <a class="dropdown-item" onclick="javascript:bashPlayerGoTo(this, 66)">Extract data with JQ filters</a>
              
                
                <a class="dropdown-item" onclick="javascript:bashPlayerGoTo(this, 90)">Generate JSON</a>
              
                
                <a class="dropdown-item" onclick="javascript:bashPlayerGoTo(this, 108)">Generate text</a>
              
                
                <a class="dropdown-item" onclick="javascript:bashPlayerGoTo(this, 156)">Pipe filters</a>
              
                
                <a class="dropdown-item" onclick="javascript:bashPlayerGoTo(this, 227)">Use JQ files</a>
              
            </div>
          </div>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body bash-player">
    <asciinema-player id="player" title="Invoking JQ" author="Arnaud Lauret" rows="24" cols="125" src="/code/api-toolbox-jq-and-openapi/part-1/invoke-jq.cast"></asciinema-player>
  </div>
</div>

<h2 id="beautify-and-color-json">Beautify and color JSON</h2>

<p>As shown in the following listing, the <code>demo-api-openapi.json</code> file is quite complex to read when printed on a terminal when using <code>cat demo-api-openapi.json</code>.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">cat demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Let's see what's inside the demo-api-openapi.json OpenAPI file</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ cat demo-api-openapi.json
{&quot;openapi&quot;:&quot;3.0.0&quot;,&quot;info&quot;:{&quot;title&quot;:&quot;Banking API&quot;, ...}
# The whole document is printed one a single line
# That&#39;s totally unreadable 😱</code></pre>
  </div>
</div>

<p>Of course we could open our favorite code editor and beautify it. But this can also be done on the command line thanks to JQ. All we need to do is piping (with <code>|</code>) the file content to JQ like this <code>cat api-openapi.json | jq '.'</code>. Icing on the cake, the output is colored. Note that you can also simply call JQ with the JSON’s filename like this: <code>jq '.' demo-api-openapi.json</code>.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">cat demo-api-openapi.json | jq &#39;.&#39;

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Let's pipe this into JQ to see if it's better</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ cat demo-api-openapi.json | jq &#39;.&#39;
{
  &quot;openapi&quot;: &quot;3.0.0&quot;,
  &quot;info&quot;: {
    &quot;title&quot;: &quot;Banking API&quot;,
    ...
}
# JSON is beautified and colored 😍</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq &#39;.&#39; demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">JQ can also be called with a file parameter</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq &#39;.&#39; demo-api-openapi.json
{
  &quot;openapi&quot;: &quot;3.0.0&quot;,
  &quot;info&quot;: {
    &quot;title&quot;: &quot;Banking API&quot;,
    ...
}
# JSON is beautified and colored 😍</code></pre>
  </div>
</div>

<p>The first parameter of a JQ command, here <code>'.'</code>, is the JQ filter that will be used to process the provided JSON. This <code>.</code> filter, named identity, is the most simple one, it only returns what it gets. Obviously, I wouldn’t write such a huge blog post to talk about a tool that only beautifies and colors JSON. Let’s see some basic JQ filtering in action.</p>

<h2 id="extract-data-from-json">Extract data from JSON</h2>

<p>Even beautified and colored, the file is still quite complex to read. Indeed, the beautified JSON file is around 750 lines long. What if we only want to see the info section? It’s dead simple, we only need to use the <code>.info</code> JQ filter on the file with <code>jq '.info' demo-api-openapi.json</code> as shown below. And you probably already guessed how to get only the API’s name (called title in OpenAPI): <code>.info.title</code>.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq &#39;.&#39; demo-api-openapi.json | wc -l
jq &#39;.info&#39; demo-api-openapi.json
jq &#39;.info.title&#39; demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Only showing the info section or the API's name (title)</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq &#39;.&#39; demo-api-openapi.json | wc -l
     753
# Beautified JSON is 750 lines long 
[apihandyman.io]$ jq &#39;.info&#39; demo-api-openapi.json
{
  &quot;title&quot;: &quot;Banking API&quot;,
  &quot;version&quot;: &quot;1.0.0-snapshot&quot;,
  &quot;description&quot;: &quot;The Banking API provides access ...&quot;,
  &quot;contact&quot;: {
    &quot;name&quot;: &quot;The Banking API team&quot;,
    &quot;email&quot;: &quot;api@bankingcompany.com&quot;,
    &quot;url&quot;: &quot;developer.bankingcompany.com&quot;
  }
}

[apihandyman.io]$ jq &#39;.info.title&#39; demo-api-openapi.json
&quot;Banking API&quot;</code></pre>
  </div>
</div>

<p>The most simple JQ filters simply consist in describing the paths of the element you want to get.</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-basic-filter.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<p>Being able to simply extract a value from a JSON is quite interesting, but that’s only the tip of the tip of the tip the iceberg.</p>

<h2 id="generate-tailor-made-json">Generate tailor made JSON</h2>

<p>With a JQ filter, you can generate tailor made JSON containing exactly what you want, how you want it. To do so, use the <code>{}</code> object constructor and describe what you want in it almost just like you would write a JSON object. The following listing show how to create an object containing the API name, its version and the contact’s name. Each value is the result of a JQ filter applied to the JSON provided to the filter.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq &#39;{name: .info.title, version: .info.version, contact: .info.contact.name}&#39; demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">JQ can totally transform the provided JSON</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq &#39;{name: .info.title, version: .info.version, contact: .info.contact.name}&#39; demo-api-openapi.json
{
  &quot;name&quot;: &quot;Banking API&quot;,
  &quot;version&quot;: &quot;1.0.0-snapshot&quot;,
  &quot;contact&quot;: &quot;The Banking API team&quot;
}</code></pre>
  </div>
</div>

<h2 id="generate-raw-text">Generate raw text</h2>

<p>JQ is also able to output raw text instead of JSON. To do so, a filter just need to return a value. The following listing shows three attempts of printing text. The first example (line 1) simply prints the API name (<code>.info.title</code>) as we already have done before. The output contains no JSON structure, only the requested value as a quoted string (<code>"Banking API"</code>). The second one (line 4) tries to outputs tab separated API’s name, version and contact’s name. Note that the <code>+</code> operator is used to concatenate the different values which can come from the provided JSON (<code>.info.title</code> for example) but can also be static ones (<code>"\t"</code>, the tab separator). Unfortunately, the result is not what is expected, the tabs (<code>\t</code>) are not interpreted. In order to actually get raw text that will be fully interpreted by the terminal, the <code>-r</code> flag must be provided to JQ. This is what is shown in the last example (line 10): there is no more quotes, and the value are separated by tabs.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq &#39;.info.title&#39; demo-api-openapi.json
jq &#39;.info.title + &quot;\t&quot; + .info.version + &quot;\t&quot; + .info.contact.name&#39; demo-api-openapi.json
jq -r &#39;.info.title + &quot;\t&quot; + .info.version + &quot;\t&quot; + .info.contact.name&#39; demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">JQ can generate raw text (don't forget -r flag)</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq &#39;.info.title&#39; demo-api-openapi.json
&quot;Banking API&quot;

[apihandyman.io]$ jq &#39;.info.title + &quot;\t&quot; + .info.version + &quot;\t&quot; + .info.contact.name&#39; demo-api-openapi.json
&quot;Banking API\t1.0.0-snapshot\tThe Banking API team&quot;

[apihandyman.io]$ jq -r &#39;.info.title + &quot;\t&quot; + .info.version + &quot;\t&quot; + .info.contact.name&#39; demo-api-openapi.json
Banking API     1.0.0-snapshot  The Banking API team</code></pre>
  </div>
</div>

<h2 id="pipe-jq-commands-and-filters">Pipe JQ commands and filters</h2>

<p>Piping is a powerful command line concept: the result of a first command can be forwarded to another one using a pipe (<code>|</code>) . This is what we have done on our first JQ command: we took the result of a <code>cat</code> command (which outputs the content of a file) to provided it to JQ and the output of JQ can be forwarded to another command which could be, for example, another JQ one, as shown in the following listing.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">cat demo-api-openapi.json | jq &#39;{name: .info.title, version: .info.version, contact: .info.contact.name}&#39; | jq -r &#39;.name + &quot;\t&quot; + .version&#39;

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">JQ commands can be chained with pipe (like many other command line ones)</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ cat demo-api-openapi.json | \
jq &#39;{name: .info.title, version: .info.version, contact: .info.contact.name}&#39; | \
jq -r &#39;.name + &quot;\t&quot; + .version&#39;
Banking API     1.0.0-snapshot</code></pre>
  </div>
</div>

<p>JQ also takes advantage of this piping concept. Indeed, JQ filters can be chained using pipe as shown in the following listing. The full JSON document is (implicitly) provided to the first filter which creates an object containing a name, version and title and its result is forwarded, using <code>|</code>, to another filter which return a string containing tab separated name and version.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -r &#39;{name: .info.title, version: .info.version, contact: .info.contact.name} | .name + &quot;\t&quot; + .version&#39; demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">More interesting, JQ filters can be chained too with (also with pipe)</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq -r &#39;{name: .info.title, version: .info.version, contact: .info.contact.name} | .name + &quot;\t&quot; + .version&#39; demo-api-openapi.json
Banking API     1.0.0-snapshot</code></pre>
  </div>
</div>

<h2 id="use-jq-files">Use JQ files</h2>

<p>As a JQ filter chain becomes complex, writing it on the command line can become cumbersome and error prone. Fortunately, JQ comes with a useful <code>-f file</code> flag allowing to load filters from a file as shown in the following listing. The new command line gives the same result as the one before, the only difference is that the filters are now loaded from the <code>basics.jq</code> file (files containing JQ filters usually have a <code>.jq</code> extension).</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -r -f basics.jq demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">When JQ scripts become complex, better use a JQ file (-f file.jq)</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq -r -f basics.jq demo-api-openapi.json
Banking API     1.0.0-snapshot</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">basics.jq</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/api-toolbox-jq-and-openapi/part-1/basics.jq" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-jq line-numbers code-copy"><code class="code-block"># Files are easier to read and can be commented
# Creates an object
{
  name: .info.title, 
  version: .info.version, 
  contact: .info.contact.name
} |
# Outputs tab separated name and version
# + can be used to concatene almost everything
# (as you will see in later examples)
# Don't forget the -r flag
.name + "\t" + .version</code></pre>
  </div>
</div>

<p>Now that we know the basics of JQ, let’s try more complex stuff on OpenAPI JSON files.</p>

<h1 id="use-jq-filters-on-an-openapi-file">Use JQ filters on an OpenAPI file</h1>

<p>In this section, we’ll learn to use some of the many JQ filters by extracting data from an OpenAPI file. For each example, you get:</p>

<ul>
  <li>A fully detailed, step by step asciinema bash session explaining how the result is achieved</li>
  <li>An OpenAPI structure figure and description (based on the <a href="http://openapi-map.apihandyman.io/">OpenAPI Map</a>)</li>
  <li>A list of (new) JQ filters used</li>
  <li>A summarized explanation of how the result is achieved (⚠️ far less details than in the asciinema bash session)</li>
  <li>A fully commented JQ file</li>
</ul>

<h2 id="list-paths">List paths</h2>

<p>Let’s start by extracting the API’s paths:</p>

<div class="card card-code card-bash text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">List API's paths</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="bash session player controls">
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body bash-player">
    <asciinema-player id="player" title="List API's paths" author="Arnaud Lauret" rows="24" cols="125" src="/code/api-toolbox-jq-and-openapi/part-1/list-paths.cast"></asciinema-player>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -r -f list-paths.jq demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">List API's paths</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq -r -f list-paths.jq demo-api-openapi.json 
/accounts
/accounts/{id}
/beneficiaries
/beneficiaries/{id}
/sources
/sources/{id}/destinations
/transfers
/transfers/{id}</code></pre>
  </div>
</div>

<p>In an OpenAPI file, the available paths are the keys of the <code>paths</code> object.</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-paths.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<p>To get these paths, we’ll use the following JQ filters:</p>

<table class="table-documentation-links">
  
  <thead>
    <tr>
      <th colspan="3" scope="col">JQ Filters</th>
    </tr>
  </thead>
  
  <tbody>



    <tr>
      <td><code>.foo</code><br /><code>.foo.bar</code></td>
      <td>Returns element targeted by period separated path</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#ObjectIdentifier-Index:.foo,.foo.bar" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>keys</code></td>
      <td>Returns object's keys (properties names)</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#keys,keys_unsorted" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>.[]</code><br /><code>.[index]</code></td>
      <td>Returns all or some elements of an object or array identified by an index</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Array/ObjectValueIterator:.[]" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>

  </tbody>
</table>

<p>To extract the paths, we only need to use the <code>keys</code> filter on the paths object identified by <code>.paths</code>. This <code>keys</code> filter returns an array containing the keys (property names, hence the paths in our case) of an object. Then we use <code>[]</code> on the result to flatten the array in order to get raw text.</p>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">list-paths.jq</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/api-toolbox-jq-and-openapi/part-1/list-paths.jq" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-jq line-numbers code-copy"><code class="code-block"># 1 - Selects the paths object
#-----------------------------
.paths
# 2 - Keeps only the keys in paths (/whatever)
#---------------------------------------------
| keys
# 3 - Flattens the array (for raw output)
#---------------------------------------- 
[]</code></pre>
  </div>
</div>

<h2 id="list-http-methods">List HTTP methods</h2>

<p>Let’s go a level deeper to list all HTTP methods used in an API:</p>

<div class="card card-code card-bash text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">List HTTP methods</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="bash session player controls">
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body bash-player">
    <asciinema-player id="player" title="List HTTP methods" author="Arnaud Lauret" rows="24" cols="125" src="/code/api-toolbox-jq-and-openapi/part-1/list-http-methods.cast"></asciinema-player>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -r -f list-http-methods.jq demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">List used HTTP methods</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq -r -f list-http-methods.jq demo-api-openapi.json
delete
get
patch
post</code></pre>
  </div>
</div>

<p>In an OpenAPI file, HTTP methods are keys inside a path object. Unfortunately, path objects may have other properties than HTTP methods ones, like <code>summary</code>, <code>description</code>, <code>parameters</code> or <code>x-</code> custom properties (we take for granted that there is no <code>$ref</code> properties). So we’ll need to clean this array to get rid of all other properties than HTTP methods.</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-http-methods.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<p>To list all of these HTTP methods, we’ll use 4 new  JQ filters:</p>

<table class="table-documentation-links">
  
  <thead>
    <tr>
      <th colspan="3" scope="col">JQ Filters</th>
    </tr>
  </thead>
  
  <tbody>



    <tr>
      <td><code>[]</code><br /><code>[1, 2, 3]</code><br /><code>[.foo, .bar]</code><br /><code>[.items[].name]</code></td>
      <td>Creates an array</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Arrayconstruction:[]" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>map(filter)</code></td>
      <td>Applies a filter to each element of an array</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#map(x),map_values(x)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>select(filter returning boolean)</code></td>
      <td>Returns element for which filter returns true</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#select(boolean_expression)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>IN(value1, value2, value3)</code></td>
      <td>Returns true if element is one of the values</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#SQL-StyleOperators" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>

  </tbody>
</table>

<p>The JQ file that follows can be roughly split in 4 steps:</p>

<ol>
  <li>
    <p>(Line 1) To create the array of path objects properties, we use the array constructor <code>[filter]</code> and inside it do the necessary with various filters to get all keys of all path objects. Note how <code>[]</code> is used on <code>.paths</code> to only keep its properties content without caring about the actual paths names.</p>
  </li>
  <li>
    <p>(Line 11) Then to clean the array of unwanted values, we use the <code>map</code> filter which allows to apply a filter to each element of a list. The filter executed by <code>map</code> consists in <code>select(. | IN("value 1", ..., "value N"))</code>. The <code>select</code> filter let pass values for which its parameter filter returns true. In our case, the <code>select</code> parameter filter use <code>IN</code> which returns true if the provided value is one of its parameter (here, all possible HTTP methods). Note that inside select <code>.</code> represents the current element of the array being processed.</p>
  </li>
  <li>
    <p>(Line 23) Then, we apply the <code>unique</code> filter to the array of all HTTP methods of all paths in order to keep a single occurrence of each.</p>
  </li>
  <li>
    <p>(Line 27) And eventually the resulting array is flatten with <code>[]</code> for raw output.</p>
  </li>
</ol>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">list-http-methods.jq</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/api-toolbox-jq-and-openapi/part-1/list-http-methods.jq" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-jq line-numbers code-collapsed code-copy" data-line="1-4,11-13,23-25,27-28"><code class="code-block"># 1 - Creates an array of all HTTP methods
#     inside paths["/whatever"]
#-----------------------------------------
# It returns ["get", "post","summary","x-example", "post"]
[
  .paths[] # Selects the paths["/whatever"] properties content
           # to keeps only the operations
  | keys[] # Keeps only the keys (HTTP methods and few other things)
           # and flattens array
]
# 2 - Cleans keys to keep only HTTP method
#-----------------------------------------
# It returns ["get", "post", "post"]
| map( # Applies a filter to each element
  select( # Keeps only elements for which the following is true
   # With IN, which returns true if the value is one of its
   # parameters, we can get rid of x- , parameters
   # description and summary properties
   IN("get", "put", "post", "delete", 
      "options", "head", "patch", "trace")
  )
)
# 3 - Keeps an occurrence of each HTTP method
#--------------------------------------------
# It returns ["get", "post"]
| unique # Keeps only an occurence of each element
# 4 - Generates raw string
#-------------------------
[] # Flattens array for raw output</code></pre>
  </div>
</div>

<h2 id="count-http-status-codes-usage">Count HTTP status codes usage</h2>

<p>Now we take another step deeper into the OpenAPI file by listing all HTTP status codes and sorting them by how many times they are used.</p>

<div class="card card-code card-bash text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Count HTTP status codes usage</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="bash session player controls">
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body bash-player">
    <asciinema-player id="player" title="Count HTTP status codes usage" author="Arnaud Lauret" rows="24" cols="125" src="/code/api-toolbox-jq-and-openapi/part-1/list-http-status-codes.cast"></asciinema-player>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -r -f list-http-status-codes.jq demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Count how many times HTTP status codes are used</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq -r -f list-http-status-codes.jq demo-api-openapi.json
200     10
201     2
204     2
404     2
202     1
400     1</code></pre>
  </div>
</div>

<p>In an OpenAPI files, HTTP status codes used to signify how went the API call are located in the <code>responses</code> properties of all operations (identified by an HTTP method) which are located inside all paths (identified by a path like <code>/whatever</code>) in the <code>paths</code> property. In the responses object, each response object is identified by its HTTP status code or by “default”. Note that the response object can also contains <code>x-</code> custom properties that we’ll need to get rid of.</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-http-status-codes.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<p>To list HTTP status codes and how many times they are used, we’ll learn how to use the following new JQ filters:</p>

<table class="table-documentation-links">
  
  <thead>
    <tr>
      <th colspan="3" scope="col">JQ Filters</th>
    </tr>
  </thead>
  
  <tbody>



    <tr>
      <td><code>.foo?</code></td>
      <td>Does not return an error if targeted element does not exist</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#OptionalObjectIdentifier-Index:.foo?" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>test(regex)</code><br /><code>test(regex;flags)</code></td>
      <td>Returns true if element matches regex</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#test(val),test(regex;flags)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>not</code></td>
      <td>Returns opposite boolean element</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#and/or/not" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>group_by(path_expression)</code><br /><code>group_by(.foo)</code></td>
      <td>Groups array elements according to provided path (returns array of array)</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#group_by(path_expression)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>{}</code><br /><code>{name1: filter, name2: another_filter}</code></td>
      <td>Creates an object</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#ObjectConstruction:{}" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>length</code></td>
      <td>Returns the length of element (array, object, string, null)</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#length" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>sort_by</code></td>
      <td>Returns element sort by value or path_expression</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#sort,sort_by(path_expression)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>tostring</code></td>
      <td>Turns any element into a string</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#tostring" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>

  </tbody>
</table>

<p>The JQ file that follows is split in 5 steps:</p>

<ol>
  <li>
    <p>(Line 1) The first step looks like previous example’s, but this time we go 2 levels deeper. We also use <code>?</code> when getting responses property content because not all properties inside a path object are actual operations. Indeed some of them can be simple string (summary, description), object (servers) or array (parameters) and therefore not have a responses properties. Without <code>?</code>, using <code>.responses</code> would return an error when used on properties such as summary or description. With <code>?</code>, no error but a null value is returned. The same goes for <code>keys?</code> which may be fed with a null values having no keys at all.</p>
  </li>
  <li>
    <p>(Line 12) On the second step, we need to get rid of possible <code>x-</code> properties. This is done like in previous example with a <code>map(select(filter))</code>. In this case, the select’s filter checks if the value does not start by <code>x-</code> using the <code>test</code> filter which return true if the value matches the regex parameter and then <code>not</code> to negate this result.</p>
  </li>
  <li>
    <p>(Line 21) Now we have an array containing all HTTP status codes of all operations, we can count how many times each one is used. This is done using <code>group_by</code> which group equal values together. It takes an array of something and returns an array of array of something. Each internal array containing equal values. Once that is done we can create on object for each internal array using <code>map</code>. It contains the HTTP status code which is the first value in the array (which contains the same value multiple times) and a count which is the <code>length</code> of the array.</p>
  </li>
  <li>
    <p>(Line 32) Then we can sort this array of {code, count} by descending count using <code>sort_by(-.count)</code>.</p>
  </li>
  <li>
    <p>(Line 37) And eventually we generate the tab separated raw text output with <code>map</code> and <code>[]</code>. Note how count is converted into a string before being concatenated.</p>
  </li>
</ol>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">list-http-status-codes.jq</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/api-toolbox-jq-and-openapi/part-1/list-http-status-codes.jq" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-jq line-numbers code-collapsed code-copy" data-line="1-3,12-14,21-24,32-34,37-38"><code class="code-block"># 1 - Selects all properties of all responses
#--------------------------------------------
# It returns ["404", "200", "200", "x-example"]
[
  .paths[][].responses? # ? avoid getting an error if
                        # responses does not exist
  | keys? # ? avoid getting an error if . is not an
          # object and has no keys
  | .[] # [ ["404", "200"], ["200", "x-example"] ] ⤵️
      #                     ["404", "200", "200", "x-example"]
]
# 2 - Removes x- properties
#--------------------------
# It returns ["200", "404", "200"]
| map( # Applies a filter to each element
  select( # Keep elements for which what follows return true
    test("^x-") # Returns true if value match the regex parameter
    | not # Returns the opposite of a boolean value
  )
) 
# 3 - Counts how many times each code is used
#--------------------------------------------
# It returns [ {"code": "404", "count": 1}, 
#              {"code": "200", "count": 2} ]
| group_by(.) # ["404", "200", "200"] ➡️ [["400"],["200", "200"]]
| map( # Applies a filter to each element
  { # Creates an object
    code: .[0], # ["200", "200"] ➡️ ["200"] ➡️ "200"
    count: length # ["200", "200"] ➡️ 2
  }
)
# 4 - Sorts by descending count
#------------------------------
# It returns [ {"code": "200", "count": 2}, 
#              {"code": "404", "count": 1} ]
| sort_by(-.count) # Sort array by parameter value
# 5 - Generates tab separated string output
#------------------------------------------
| map( # Applies a filter to each element
  .code + 
  "\t" + 
  (.count | tostring) # count is a number
                      # it must be converted to string
                      # to be concatenated to other string
)[] # Flattens array for raw output</code></pre>
  </div>
</div>

<h2 id="list-operations">List operations</h2>

<p>Now, let’s try something more interesting: extracting the API’s operation list.</p>

<div class="card card-code card-bash text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">List operations</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="bash session player controls">
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body bash-player">
    <asciinema-player id="player" title="List operations" author="Arnaud Lauret" rows="24" cols="125" src="/code/api-toolbox-jq-and-openapi/part-1/list-operations.cast"></asciinema-player>
  </div>
</div>

<p>As the following listing shows, we will extract for each operation, its HTTP method, path, summary and indicate if the operation is deprecated.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -r -f list-operations.jq demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">List operations</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq -r -f list-operations.jq demo-api-openapi.json 
get     /accounts       List accounts
get     /accounts/{id}  Get an account
post    /beneficiaries  Register a beneficiary
get     /beneficiaries  List beneficiaries
delete  /beneficiaries/{id}     Delete a beneficiary (deprecated)
patch   /beneficiaries/{id}     Updates a beneficiary (deprecated)
get     /beneficiaries/{id}     Get a beneficiary
get     /sources        List transfer sources
get     /sources/{id}/destinations      List transfer source&#39;s destinations
post    /transfers      Transfer money
get     /transfers      List money transfers
get     /transfers/{id} Get a money transfer
patch   /transfers/{id}
delete  /transfers/{id} Cancel a money transfer</code></pre>
  </div>
</div>

<p>Thanks to previous examples, we start to know an OpenAPI file structure. The operation’s paths come first, then their HTTP method and a level below, we can access to summary and deprecated properties which are both optional.</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-operations.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<p>To generate the operations list, we’ll learn how to use the following new JQ filters:</p>

<table class="table-documentation-links">
  
  <thead>
    <tr>
      <th colspan="3" scope="col">JQ Filters</th>
    </tr>
  </thead>
  
  <tbody>



    <tr>
      <td><code>to_entries</code></td>
      <td>Takes an object and returns an array of key and value objects</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#to_entries,from_entries,with_entries" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>.foo as $some_variable</code></td>
      <td>Defines a reusable variable</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Variable/SymbolicBindingOperator:...as$identifier|..." target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>if condition then filter else another_filter end</code></td>
      <td>Conditions filter execution</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#if-then-else" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>

  </tbody>
</table>

<p>The following JQ script is split in 3 steps:</p>

<ol>
  <li>
    <p>(Line 1) We start by creating an array of {<code>key: /path, value: path content}</code> using <code>to_entries</code> on <code>.paths</code>. Then we filter this array to get rid of possible x-tensions checking the key value does not start by “x-“ using <code>map</code>, <code>select</code>, <code>test</code> and <code>not</code> as already seen in a previous example.</p>
  </li>
  <li>
    <p>(Line 11) Then we create an array of {path, method, summary, deprecated} objects. To get rid of possible extensions we reuse the <code>IN</code> filter seen previously. The interesting thing in this step is how we define (line 15) and use (line 35) the <code>$path</code> variable. Such variable definition is very useful to keep some values for later use without impacting the data flow. Indeed the data coming out of <code>.key as $ path</code> is the exactly the same as the one that came in.</p>
  </li>
  <li>
    <p>(Line 42) And to finish, we output tab separated raw text (adding deprecated mention when necessary). See line 48 how an <code>if then else</code> can be used.</p>
  </li>
</ol>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">list-operations.jq</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/api-toolbox-jq-and-openapi/part-1/list-operations.jq" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-jq line-numbers code-collapsed code-copy"><code class="code-block"># 1 - Selects paths objects
#--------------------------
# returns [{key: path, value: path value}]
.paths # Selects the paths property content
| to_entries # Transforms
             # { "/resources": { "get": {operation data}}} 
             # to 
             # [ { "key": "/resources", 
             #     "value": { "get": {operation data}} ]
| map(select(.key | test("^x-") | not)) # Gets rid of x-tensions
# 2 - Creates an array of operations
#-----------------------------------
# returns [{path, method, summary, deprecated}]
| map ( # Applies a transformation to each element
  .key as $path # Stores the path value (.key) 
                  # in a variable ($path) for later use
  | .value # Keeps only the path's content 
           # { "get": {operation data}}
  | to_entries # Transforms 
               # { "get": {operation data}}
               # to
               # [ { "key": "get", 
               #     "value": {operation data}} ]
  | map( # Applies a transformation to each element
    select( # Keeps only elements for which the following is true
      # With IN, which returns true if the value is one of its
      # parameters, we can get rid of x- , parameters
      # description and summary properties
      .key | IN("get", "put", "post", "delete", 
         "options", "head", "patch", "trace")
    )
    | # Creates a new JSON object
    {
      method: .key,
      path: $path, # Using the variable defined on line 4
      summary: .value.summary?,
      deprecated: .value.deprecated?
    }
  )[] # Flattens array to avoid having an array 
      # of array of {path, method, summary, deprecated}
) # Now we have an array of {path, method, summary, deprecated}
# 3 - Outputs tab separated raw text
#-----------------------------------
| map( # Applies a transformation to each element
  .method + "\t" + 
  .path + "\t" + 
  .summary + 
  (if .deprecated then " (deprecated)" else "" end)
)
[] # Flattens array for raw output</code></pre>
  </div>
</div>

<h2 id="list-x-tensions">List x-tensions</h2>

<p>It can be of interest to know which extensions are used in an OpenAPI document, where they are located and what are their values.</p>

<div class="card card-code card-bash text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">List x-tensions</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="bash session player controls">
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body bash-player">
    <asciinema-player id="player" title="List x-tensions" author="Arnaud Lauret" rows="24" cols="125" src="/code/api-toolbox-jq-and-openapi/part-1/list-xtensions.cast"></asciinema-player>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -r -f list-xtensions.jq demo-api-openapi.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Listing extensions, their locations and values</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers code-collapsed"><code class="code-block">[apihandyman.io]$ jq -r -f list-xtensions.jq demo-api-openapi.json
[
  {
    &quot;name&quot;: &quot;x-implementation&quot;,
    &quot;path&quot;: [
      &quot;paths&quot;,
      &quot;/accounts/{id}&quot;,
      &quot;get&quot;,
      &quot;x-implementation&quot;
    ],
    &quot;ref&quot;: &quot;#/paths/~1accounts~1{id}/get/x-implementation&quot;,
    &quot;value&quot;: {
      &quot;security&quot;: {
        &quot;description&quot;: &quot;Only accounts belonging to user referenced in security data;\nreturn a 404 if this is not the case\n&quot;,
        &quot;source&quot;: {
          &quot;system&quot;: &quot;security&quot;,
          &quot;location&quot;: &quot;jwt.sub&quot;
        },
        &quot;fail&quot;: 404
      }
    }
  },
  {
    &quot;name&quot;: &quot;x-tension-example&quot;,
    &quot;path&quot;: [
      &quot;paths&quot;,
      &quot;/transfers/{id}&quot;,
      &quot;x-tension-example&quot;
    ],
    &quot;ref&quot;: &quot;#/paths/~1transfers~1{id}/x-tension-example&quot;,
    &quot;value&quot;: {
      &quot;some&quot;: &quot;value&quot;
    }
  },
  {
    &quot;name&quot;: &quot;x-implementation&quot;,
    &quot;path&quot;: [
      &quot;components&quot;,
      &quot;schemas&quot;,
      &quot;Account&quot;,
      &quot;properties&quot;,
      &quot;balance&quot;,
      &quot;properties&quot;,
      &quot;value&quot;,
      &quot;x-implementation&quot;
    ],
    &quot;ref&quot;: &quot;#/components/schemas/Account/properties/balance/properties/value/x-implementation&quot;,
    &quot;value&quot;: {
      &quot;description&quot;: &quot;The real time balance (not the daily one!)&quot;,
      &quot;source&quot;: {
        &quot;system&quot;: &quot;Core Banking&quot;,
        &quot;data&quot;: &quot;ZBAL0.RTBAL&quot;
      }
    }
  },
  {
    &quot;name&quot;: &quot;x-implementation&quot;,
    &quot;path&quot;: [
      &quot;components&quot;,
      &quot;schemas&quot;,
      &quot;Account&quot;,
      &quot;properties&quot;,
      &quot;balance&quot;,
      &quot;properties&quot;,
      &quot;currency&quot;,
      &quot;x-implementation&quot;
    ],
    &quot;ref&quot;: &quot;#/components/schemas/Account/properties/balance/properties/currency/x-implementation&quot;,
    &quot;value&quot;: {
      &quot;source&quot;: {
        &quot;system&quot;: &quot;Core Banking&quot;,
        &quot;data&quot;: &quot;ZBAL0.RTCUR&quot;
      }
    }
  }
]</code></pre>
  </div>
</div>

<p>The OpenAPI Specification is extensible, it means that custom data can be added to it for various purpose. The custom data structures can either be called extensions, x-tensions or vendor extension. In order to allow standard parsers to not raise an error, such custom data structure must be added using a specific key name starting by “x-“ in order to identify them. The tricky part with extensions in our case, is that they can be located (almost) anywhere in a document, the only sure thing is that they have a key name starting by “x-“. To learn more about this, check <a href="/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/" target="openapi">OpenAPI (Swagger) 2.0 Tutorial - Part 9 - Extending the OpenAPI Specification</a> (note: extension management did not change between version 2.0 and 3).</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-extensions.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<p>To list all extensions as shown in the terminal listing above, we’ll learn how to use the following JQ filters:</p>

<table class="table-documentation-links">
  
  <thead>
    <tr>
      <th colspan="3" scope="col">JQ Filters</th>
    </tr>
  </thead>
  
  <tbody>



    <tr>
      <td><code>paths</code></td>
      <td>Lists all possible paths in documents, each path is represented as an array</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#paths,paths(node_filter),leaf_paths" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>+</code><br /><code>value1 + value2</code></td>
      <td>Adds/concatenates/merges numbers/strings/arrays or objects</td>
      <td><a class="btn-documentation" href="Addition:+" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>map_values(filter)</code></td>
      <td>Updates all provided values with filter</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#map(x),map_values(x)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>gsub(regex;replacement)</code><br /><code>gsub("toreplace";"replaced)</code></td>
      <td>Replaces a string within a string</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#gsub(regex;string),gsub(regex;string;flags)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>join(separator)</code><br /><code>join(",")</code></td>
      <td>Joins string with a separator</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#join(str)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>getpath(path)</code><br /><code>getpath(["a","path"])</code></td>
      <td>Returns value corresponding to a path (defined as an array), see also paths</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#getpath(PATHS)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>

  </tbody>
</table>

<p>The following JQ script consist in 3 steps:</p>

<ol>
  <li>(Line 1) First, we need to store the full document for later use (to get the extensions value)</li>
  <li>(Line 5) Then we list all extensions paths by using <code>paths</code> which returns all possible paths and removing the ones that do not have a leaf starting with a “x-“.</li>
  <li>(Line 18) And last step, we build an object containing data for each found extension. This data consists in a name, a path, a JSON pointer named ref and the value.
    <ol>
      <li>(Line 26) A in-file JSON pointer starts with “#/” and then each level is separated from its neighbour by a “/”. This is easily achieved by using <code>+</code> and <code>join</code>. But a JSON pointer cannot contains “/”. That’s why we use <code>map_values</code> in order to replace them by <code>~1</code> with <code>gsub</code>. The <code>map_values</code> works like <code>map</code> but do not return result in an array and therefore allows to do in place modification.</li>
      <li>(Line 42) In order to get the extension value we use <code>getpath</code> on the saved document. Note how we have to define a <code>$path</code> variable to use it in getpath.</li>
    </ol>
  </li>
</ol>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">list-xtensions.jq</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/api-toolbox-jq-and-openapi/part-1/list-xtensions.jq" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-jq line-numbers code-collapsed code-copy"><code class="code-block"># 1 - Stores document for later use
#----------------------------------
. as $document # Variable used on line 23 to get 
               # extension value from its path
# 2 - Lists extensions paths
#---------------------------
| [
  paths # Lists ALL possible paths in documents 
        # (each path is represented as an array)
  | select( # Keeps only the values for which 
            # what follows return true
    .[-1] # Gets the path leaf (last item in array)
          # Equivalent to .[.|length-1]
    | tostring # Converts to string for next step 
    | test("^x-") # Checks if leaf name starts with x-
  )
]
# 3 - Sets all data for each extension occurence
#-----------------------------------------------
# returns an array of {name, path, ref, value}
| map( # Applies a filter to each element
  {
    name: .[-1], # Gets the path leaf (last item in array)
                 # Equivalent to .[.|length-1]
    path: .,
    # 3.1 - Creates a JSON pointer to extension
    #------------------------------------------
    ref: (
      "#/" + # adds numbers, strings, arrays or objects
      (
        . 
        | map_values( # Applies a filter on each value
                      # (in place modification)
          gsub("/";"~1" ) # replaces a value in a string
                          # / must be replace by ~1
                          # in a JSON pointer
        )
        | join("/") # concatenates string with 
                  # a separator
      )
    ), 
    # 3.2 - Gets extension value from original document
    #--------------------------------------------------
    value: (
      . as $path # storing value path in 
                 # a variable for next step
      | $document | getpath($path) # extracting value 
                                   # from original document
                                   # variable defined on line 3
    )
  }
)</code></pre>
  </div>
</div>

<h1 id="process-multiple-openapi-files">Process multiple OpenAPI files</h1>

<p>So, we have learned to use JQ filters on a single OpenAPI file, but what if we need to work on multiple files? In this section we’ll learn how to invoke JQ on multiple files and see it in action on two OpenAPI files.</p>

<h2 id="invoke-jq-on-multiple-files">Invoke JQ on multiple files</h2>

<p>JQ’s filename parameter can contain wildcards, allowing to work on multiple files at once.</p>

<div class="card card-code card-bash text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Invoke JQ on multiple files</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="bash session player controls">
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body bash-player">
    <asciinema-player id="player" title="Invoke JQ on multiple files" author="Arnaud Lauret" rows="24" cols="125" src="/code/api-toolbox-jq-and-openapi/part-1/invoke-jq-multiple-files.cast"></asciinema-player>
  </div>
</div>

<p>We can, for example, extract the API name of each OpenAPI file using the following command as shown in the following listing (the github repository contains two OpenAPI demo files, both having the <code>.json</code> extension).</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -r &#39;.info.title&#39; *.json

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Processing multiple files with JQ</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ jq -r &#39;.info.title&#39; *.json 
Banking API
Another Example API</code></pre>
  </div>
</div>

<p>That’ looks good, but if the filter outputs JSON, the result is a concatenation of the JSONs returned for each file, which is not a valid JSON document, as shown on line 1 of the following listing. In order to get something valid, like an array containing all results, you can pipe this result to a <code>jq -s</code> command (line 11) which will magically creates a valid JSON array. The <code>-s</code> flag (or <code>--slurp</code>) reads the entire input stream into a large array and run the filter just once instead of running the filter for each JSON object in the input. Not also that we didn’t provide any filter to the second JQ command. The ‘.’ filter is actually optional (either you use the -s flag or not).</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq &#39;{name: .info.title, file: .info.version}&#39; *.json
jq &#39;{name: .info.title, file: .info.version}&#39; *.json | jq -s

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Pipe to jq -s (or --slurp) to create arrays</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers code-collapsed" data-line="1,11"><code class="code-block">[apihandyman.io]$ jq &#39;{name: .info.title, file: .info.version}&#39; *.json
{
  &quot;name&quot;: &quot;Another API&quot;,
  &quot;file&quot;: &quot;1.2&quot;
}
{
  &quot;name&quot;: &quot;Banking API&quot;,
  &quot;file&quot;: &quot;1.0.0-snapshot&quot;
}

[apihandyman.io]$ jq &#39;{name: .info.title, file: .info.version}&#39; *.json \
                | jq -s
[
  {
    &quot;name&quot;: &quot;Another API&quot;,
    &quot;file&quot;: &quot;1.2&quot;
  },
  {
    &quot;name&quot;: &quot;Banking API&quot;,
    &quot;file&quot;: &quot;1.0.0-snapshot&quot;
  }
]</code></pre>
  </div>
</div>

<p>Obviously, when it comes to work with multiple elements on the command line, you can use your favorite commands such as xargs and/or find as shown below.</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">ls *.json | xargs jq -r &#39;.info.title&#39;
find . -type f -name &quot;*.json&quot; -exec jq -r &#39;.info.title&#39; {} \;
find . -type f -name &quot;*.json&quot; | xargs jq -r &#39;.info.title&#39;

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Use JQ with xargs and find</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers"><code class="code-block">[apihandyman.io]$ ls *.json | \
                  xargs jq -r &#39;.info.title&#39;
Banking API
Another Example API

[apihandyman.io]$ find . -type f -name &quot;*.json&quot; -exec \
                  jq -r &#39;.info.title&#39; {} \;
Banking API
Another API

[apihandyman.io]$ find . -type f -name &quot;*.json&quot; | \
                xargs jq -r &#39;.info.title&#39;
Banking API
Another API
# Note that find -exec is far less faster than
# find | xargs when working a large number of files</code></pre>
  </div>
</div>

<h2 id="list-basic-api-information-from-multiple-files">List basic API information from multiple files</h2>

<p>For this last (but not least) example, we’ll gather basic information from different OpenAPI files.</p>

<div class="card card-code card-bash text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">List APIs</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="bash session player controls">
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body bash-player">
    <asciinema-player id="player" title="List APIs" author="Arnaud Lauret" rows="24" cols="125" src="/code/api-toolbox-jq-and-openapi/part-1/list-apis.cast"></asciinema-player>
  </div>
</div>

<p>We’ll build an array of objects containing for each file:</p>

<ul>
  <li>Information about the file itself (its type, version and name),</li>
  <li>A subset of the info section (API’s name, version and a shorten description)</li>
  <li>The number of operations</li>
</ul>

<p>Note that now jq is used on <code>*.json</code> files and its results is piped into another jq with <code>-s</code> flag in order to generate an array (as seen in previous section).</p>

<div class="card card-code text-white bg-dark border-dark">
  <pre class="copy-hidden code-copy">jq -f list-apis.jq *.json | jq -s

</pre>
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Getting some basic information about different APIs</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-bash line-numbers code-collapsed"><code class="code-block">[apihandyman.io]$ jq -f list-apis.jq *.json | jq -s
[
  {
    &quot;specification&quot;: {
      &quot;type&quot;: &quot;swagger&quot;,
      &quot;version&quot;: &quot;2.0&quot;,
      &quot;file&quot;: &quot;demo-another-api-swagger.json&quot;
    },
    &quot;name&quot;: &quot;Another API&quot;,
    &quot;version&quot;: &quot;1.2&quot;,
    &quot;summary&quot;: &quot;Does almost nothing&quot;,
    &quot;operations&quot;: 1
  },
  {
    &quot;specification&quot;: {
      &quot;type&quot;: &quot;openapi&quot;,
      &quot;version&quot;: &quot;3.0.0&quot;,
      &quot;file&quot;: &quot;demo-api-openapi.json&quot;
    },
    &quot;name&quot;: &quot;Banking API&quot;,
    &quot;version&quot;: &quot;1.0.0-snapshot&quot;,
    &quot;summary&quot;: &quot;The Banking API provides access to the [Banking Company](http://www.bankingcompany.com) services, which include bank account information, beneficiaries, and money transfer management&quot;,
    &quot;operations&quot;: 14
  }
]</code></pre>
  </div>
</div>

<p>To get that result, we need to use the following new JQ filters:</p>

<table class="table-documentation-links">
  
  <thead>
    <tr>
      <th colspan="3" scope="col">JQ Filters</th>
    </tr>
  </thead>
  
  <tbody>



    <tr>
      <td><code>input_filename</code></td>
      <td>Returns the name of the file being processed</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#input_filename" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>indices(string)</code><br /><code>indices("foo")</code><br /><code>indices(.foo)</code></td>
      <td>Returns the list indices (in array of string) where a string is found</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#indices(s)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>.[start:end]</code><br /><code>.[10:15]</code></td>
      <td>Returns a subset of an array or a substring</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Array/StringSlice:.[10:15]" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>

  </tbody>
</table>

<p>The following JQ scripts which generates an array of objects containing information about the specification file itself, the API and its number of operations is composed of 3 parts:</p>

<ol>
  <li>(Line 2) Part 1 deals with file information. When working on multiple files, it can be very interesting to know from which file comes the data. It’s the case here, hopefully, the <code>input_filename</code> returns the name of the file being processed (line 8).</li>
  <li>(Line 11) Part 2 deals with data coming from the info section. The summary is a shorter version of <code>.info.description</code>. If it contains a <code>&lt;!--more--&gt;</code> tag (found using <code>indices</code>) we split right before it using <code>.[0:tag position]</code>. If not we take the first hundred characters (or the whole string if shorter). Note how <code>elif</code> is used to have more conditions.</li>
  <li>(Line 28) Part 3 concerns counting operations, it is done almost like counting HTTP status codes.</li>
</ol>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">list-apis.jq</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/api-toolbox-jq-and-openapi/part-1/list-apis.jq" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-jq line-numbers code-collapsed code-copy"><code class="code-block">{ 
  # 1 - Information about the file itself
  #--------------------------------------
  specification: {
    # Determines the type of specification and the version used
    type: (if has("openapi") then "openapi" else "swagger" end),
    version: (if has("openapi") then .openapi else .swagger end),
    file: input_filename # The file name because we work
                         # on multiple files
  },
  # 2 - Information about the API (.info)
  #--------------------------------------
  name: .info.title,
  version: .info.version,
  summary: (
    # indices returns an array containing all indices of the
    # provided string found in the input value
    (.info.description | indices("&#60;!--more--&#62;")[0]) as $more |
    if $more != null then 
      .info.description[0:$more]
      # summary cannot be longer than 100 characters
    elif (.info.description | length) &#60;= 100 then
      .info.description
    else
      .info.description[0:100] + "[...]"
    end
  ),
  # 3 - Number of operations (an operation is get /path for example)
  #-----------------------------------------------------------------
  operations: (
    [ # Creates an array containing all HTTP methods
      # to count the number of operations
      .paths[] | # Returns the content of eah path object
      keys[] | # Returns the keys of the returned object
               # and flattens the array
      select( # Keeps only the value for which what follows is true
         IN("get", "put", "patch", "post", 
            "delete", "head", "options")
      )
    ] | length # Return the length of the array,
               # hence the number of operations
  )
}</code></pre>
  </div>
</div>

<h1 id="summary">Summary</h1>

<p>That’s it for this first JQ and OpenAPI post. You know now how to invoke JQ on one or more files and you know how to use the 30ish following JQ filters. These are only a subset of all available filters, check <a href="https://stedolan.github.io/jq/manual/v1.6/" target="jq">JQ’s documentation</a> to discover them all.</p>

<table class="table-documentation-links">
  
  <thead>
    <tr>
      <th colspan="3" scope="col">JQ Filters</th>
    </tr>
  </thead>
  
  <tbody>



    <tr>
      <td><code>.</code></td>
      <td>Returns what is provided</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Identity:." target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>.foo</code><br /><code>.foo.bar</code></td>
      <td>Returns element targeted by period separated path</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#ObjectIdentifier-Index:.foo,.foo.bar" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>.foo?</code></td>
      <td>Does not return an error if targeted element does not exist</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#OptionalObjectIdentifier-Index:.foo?" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>keys</code></td>
      <td>Returns object's keys (properties names)</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#keys,keys_unsorted" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>{}</code><br /><code>{name1: filter, name2: another_filter}</code></td>
      <td>Creates an object</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#ObjectConstruction:{}" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>[]</code><br /><code>[1, 2, 3]</code><br /><code>[.foo, .bar]</code><br /><code>[.items[].name]</code></td>
      <td>Creates an array</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Arrayconstruction:[]" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>map(filter)</code></td>
      <td>Applies a filter to each element of an array</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#map(x),map_values(x)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>select(filter returning boolean)</code></td>
      <td>Returns element for which filter returns true</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#select(boolean_expression)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>IN(value1, value2, value3)</code></td>
      <td>Returns true if element is one of the values</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#SQL-StyleOperators" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>test(regex)</code><br /><code>test(regex;flags)</code></td>
      <td>Returns true if element matches regex</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#test(val),test(regex;flags)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>not</code></td>
      <td>Returns opposite boolean element</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#and/or/not" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>group_by(path_expression)</code><br /><code>group_by(.foo)</code></td>
      <td>Groups array elements according to provided path (returns array of array)</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#group_by(path_expression)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>sort_by</code></td>
      <td>Returns element sort by value or path_expression</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#sort,sort_by(path_expression)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>length</code></td>
      <td>Returns the length of element (array, object, string, null)</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#length" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>tostring</code></td>
      <td>Turns any element into a string</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#tostring" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>to_entries</code></td>
      <td>Takes an object and returns an array of key and value objects</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#to_entries,from_entries,with_entries" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>.foo as $some_variable</code></td>
      <td>Defines a reusable variable</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Variable/SymbolicBindingOperator:...as$identifier|..." target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>if condition then filter else another_filter end</code></td>
      <td>Conditions filter execution</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#if-then-else" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>paths</code></td>
      <td>Lists all possible paths in documents, each path is represented as an array</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#paths,paths(node_filter),leaf_paths" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>getpath(path)</code><br /><code>getpath(["a","path"])</code></td>
      <td>Returns value corresponding to a path (defined as an array), see also paths</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#getpath(PATHS)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>map_values(filter)</code></td>
      <td>Updates all provided values with filter</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#map(x),map_values(x)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>+</code><br /><code>value1 + value2</code></td>
      <td>Adds/concatenates/merges numbers/strings/arrays or objects</td>
      <td><a class="btn-documentation" href="Addition:+" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>gsub(regex;replacement)</code><br /><code>gsub("toreplace";"replaced)</code></td>
      <td>Replaces a string within a string</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#gsub(regex;string),gsub(regex;string;flags)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>join(separator)</code><br /><code>join(",")</code></td>
      <td>Joins string with a separator</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#join(str)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>indices(string)</code><br /><code>indices("foo")</code><br /><code>indices(.foo)</code></td>
      <td>Returns the list indices (in array of string) where a string is found</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#indices(s)" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>.[]</code><br /><code>.[index]</code></td>
      <td>Returns all or some elements of an object or array identified by an index</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Array/ObjectValueIterator:.[]" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>.[start:end]</code><br /><code>.[10:15]</code></td>
      <td>Returns a subset of an array or a substring</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#Array/StringSlice:.[10:15]" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>


    <tr>
      <td><code>input_filename</code></td>
      <td>Returns the name of the file being processed</td>
      <td><a class="btn-documentation" href="https://stedolan.github.io/jq/manual/v1.6/#input_filename" target="jq" aria-label="open documentation in a new tab" data-toggle="tooltip" data-placement="right" title="Open documentation in a new tab"><svg height="100px" width="100px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"><path d="M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z"></path></svg></a></td>
    </tr>

  </tbody>
</table>

<p>You may also have learn a few things about an OpenAPI document structure. If you want to fully master it, look at the <a href="http://openapi-map.apihandyman.io/" target="openapi">OpenAPI Map</a>.</p>

<div class="text-center">
      <figure class="figure">
        <a href="http://openapi-map.apihandyman.io/" target="openapi">
        <img src="/images/commons/openapi/openapi-map-v3.png" class="figure-img img-fluid" />
        </a>
        
      </figure>
    </div>

<h1 id="whats-next">What’s next</h1>

<p>In next post, we’ll learn to search into OpenAPI files and simplify JQ code by using command line arguments, functions and modules.</p>
:ET