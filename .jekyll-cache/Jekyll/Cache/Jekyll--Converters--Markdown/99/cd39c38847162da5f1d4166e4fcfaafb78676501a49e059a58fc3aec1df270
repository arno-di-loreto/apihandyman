I"¶<<p>This is the end, my OpenAPI friends, the end. The end? Not really. This last part of the OpenAPI tutorial is a new beginning. With previous parts we have learned to master the OpenAPI specification but thereâ€™s a last thing to learn to unleash its full power: extensions. This format is easily extensible, it allows to add custom data within an API description. But for what purposes? Letâ€™s have a glimpse of these extensions endless possibilities.
<!--more--></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">Writing OpenAPI (Swagger) Specification Tutorial Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">
This tutorial teaches everything about the OpenAPI 2.0 Specification (fka. as Swagger), most of what you'll read here can still be applied on version 3.

If you're a bit lost in the <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md">specification</a> (version 2 or 3), take a look at the <a href="http://openapi-map.apihandyman.io/?version=2.0)">OpenAPI Map</a>:
<div class="text-center">
      <figure class="figure">
        <a href="http://openapi-map.apihandyman.io/?version=2.0">
        <img src="/images/commons/openapi/openapi-map-v2.png" class="figure-img img-fluid" />
        </a>
        
      </figure>
    </div>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item"><a href="/writing-openapi-swagger-specification-tutorial-part-1-introduction/">1 - Introduction</a></li>
          
        
          
          <li class="list-group-item"><a href="/writing-openapi-swagger-specification-tutorial-part-2-the-basics/">2 - The basics</a></li>
          
        
          
          <li class="list-group-item"><a href="/writing-openapi-swagger-specification-tutorial-part-3-simplifying-specification-file/">3 - Simplifying specification file</a></li>
          
        
          
          <li class="list-group-item"><a href="/writing-openapi-swagger-specification-tutorial-part-4-advanced-data-modeling/">4 - Advanced Data</a></li>
          
        
          
          <li class="list-group-item"><a href="/writing-openapi-swagger-specification-tutorial-part-5-advanced-input-and-output-modeling/">5 - Advanced Input And Output Modeling</a></li>
          
        
          
          <li class="list-group-item"><a href="/writing-openapi-swagger-specification-tutorial-part-6-defining-security/">6 - Defining Security</a></li>
          
        
          
          <li class="list-group-item"><a href="/writing-openapi-swagger-specification-tutorial-part-7-documentation/">7 - Documentation</a></li>
          
        
          
          <li class="list-group-item"><a href="/writing-openapi-swagger-specification-tutorial-part-8-splitting-specification-file/">8 - Splitting specification file</a></li>
          
        
          
          <li class="list-group-item active">9 - Extending the OpenAPI specification</li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<p>In this final part weâ€™ll learn how to extend the OpenAPI specification to add custom data and most important, weâ€™ll discover why we would do that.</p>

<h1 id="one-size-may-not-fit-all">One size may not fit all</h1>

<p>After working for a while with the OpenAPI format, you WILL want to add other data into you API descriptions, this is your destiny. Fortunately, the creator of the format had foreseen that:</p>

<blockquote>
  <p>While the Swagger Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.<br />
<em><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#vendorExtensions">OpenAPI Specification</a></em></p>
</blockquote>

<p>Once known as <em>Vendor Extensions</em>, these <em>Specification Extensions</em> can be created by anyone, donâ€™t be fooled by their original name.</p>

<h2 id="custom-property">Custom property</h2>

<p>To add a custom property with an OpenAPI definition file you only need to prefix its name by <code>x-</code>:</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title"></p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-yaml line-numbers code-copy"><code class="code-block">x-&lt;what you want&gt;: &lt;value&gt;</code></pre>
  </div>
</div>

<p>Hereâ€™s a custom property <code>x-custom-info</code> in the <code>info</code> section of an OpenAPI file:</p>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title"></p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_53_custom_property.yaml" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-yaml line-numbers code-copy" data-line="5" data-start="3"><code class="code-block">info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info: Here's some custom information
</code></pre>
  </div>
</div>

<p>If a standard Swagger/OpenAPI parser encounters such property, it will ignore it because itâ€™s prefixed with <code>x-</code>. This <code>info</code> section with a custom property is valid:</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/custom-property.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<h2 id="custom-object">Custom object</h2>

<p>Extensions are not only meant to be atomic properties, they can also be objects:</p>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title"></p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_54_custom_object.yaml" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-yaml line-numbers code-copy" data-line="5-11" data-start="3"><code class="code-block">info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info:
    comment: Here's some custom information
    authors:
      - name: John Doe
        email: john@doe.com
      - name: Jane Doe
        email: jane@doe.com
</code></pre>
  </div>
</div>

<p>Note that sub-properties names do not need to be prefixed with <code>x-</code>.</p>

<h2 id="extensions-almost-anywhere">Extensions almost anywhere</h2>

<p>These custom data structures can be added almost anywhere in the specification. You can test if a location is ok by simply adding your extension where you want within the online editor and see if the validator complains or not.</p>

<p>You can also take a look at my <a href="http://openapi-specification-visual-documentation.apihandyman.io/">visual documentation</a> to check if the location you want to use allows extension or not:</p>

<div class="text-center">
      <figure class="figure">
        <a href="http://openapi-specification-visual-documentation.apihandyman.io/">
        <img src="/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/almost-anywhere.png" class="figure-img img-fluid" />
        </a>
        
      </figure>
    </div>

<p>Hereâ€™s an example using various location (non-exhaustive example):</p>

<div class="card card-code text-white bg-dark border-dark">
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title"></p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code file controls">
          <a role="button" class="btn btn-secondary border-0 rounded-0" aria-label="download file" target="_blank" href="/code/writing-openapi-swagger-specification-tutorial/simple_openapi_specification_55_extensions_almost_anywhere.yaml" data-toggle="tooltip" data-placement="top" title="Download"><img class="btn-icon" src="/images/commons/icons/download.svg" /></a>
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-yaml line-numbers code-collapsed code-copy" data-line="3,9-15,24,32,37"><code class="code-block">swagger: '2.0'

x-root: some custom root data

info:
  version: 1.0.0
  title: x-tended OpenAPI Specification
  description: An OpenAPI specification containing custom data
  x-custom-info:
    comment: Here's some custom information
    authors:
      - name: John Doe
        email: john@doe.com
      - name: Jane Doe
        email: jane@doe.com

paths:
  /resources:
    get:
      description: gets some resource
      responses:
        200:
          description: everything is ok
          x-custom-response-data: I told you everything was really OK!
          schema:
            type: array
            items:
              $ref: "#/definitions/Resource"

definitions:
  Resource:
    x-custom-definition-data: some.dummy.class.Resource
    properties:
      data:
        description: some data
        type: string
        x-custom-property-data: More blah blah about this property</code></pre>
  </div>
</div>

<h1 id="why-customizing-the-openapi-specification">Why customizing the OpenAPI specification?</h1>

<p>So, adding custom information within an OpenAPI specification file is fairly easy. But the question is less about the how and more about the why. Why would you add custom data to your OpenAPI files?</p>

<p>You can use some extensions provided by open source or commercial tools or create your own. You can simply add custom data without processing them for documentation purpose or use these informations to generate documentation, client code, server code or tests or even configure some tools.</p>

<p>Letâ€™s see some examples.  <br />
<em>nb: This post is not a sponsored one.</em></p>

<h2 id="example-1-documentation">Example 1: Documentation</h2>
<p><a href="https://docs.gelato.io/guides/control-grouping-with-swagger">Gelato, the Mashape Developer Portal solution</a>, uses the <a href="https://docs.gelato.io/guides/control-grouping-with-swagger"><code>x-gelato-group</code></a> extension to group operations in the portal navigation.</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/gelato.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<p>Of course, as an OpenAPI expert you would have use tags to do that. Beware to not reinvent the wheel when creating your extensions.</p>

<h2 id="example-2-client-code-generation">Example 2: Client code generation</h2>

<p><a href="https://docs.apimatic.io/advanced/swagger-test-cases-extensions/">API Matic, a SDK/DX kits generator</a> uses extension ton control SDK generation.</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/apimatic.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<h2 id="example-3-server-code-generation">Example 3: Server code generation</h2>

<p><a href="https://github.com/swagger-api/swagger-node">Swagger Node, a node module which help to build API implementation with a design first approach</a> uses a <code>x-swagger-router-controller</code> extension to link an API endpoint to its controller implementation.</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/swagger-node.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<h2 id="example-4-api-gateway-configuration">Example 4: API gateway configuration</h2>

<p>Not only the AWS API gateway allows to import a Swagger/OpenAPI file but it also provides a <a href="(http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html)">complete set of extensions</a> to configure how the API is linked to backend systems (like lambda).</p>

<div class="text-center">
      <figure class="figure">
        
        <img src="/images/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/aws-api-gateway.png" class="figure-img img-fluid" />
        
        
      </figure>
    </div>

<h1 id="conclusion">Conclusion</h1>
<p>This post concludes the OpenAPI/Swagger specification tutorial. You master now every single aspect of the OpenAPI specification and with this last post I hope to have given you some ideas to be creative to include this format in each step of the API lifecycle.</p>
:ET