<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-10-20T07:11:58-05:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">Excuse my French API, or being an English as a second language API designer</title><link href="https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer/" rel="alternate" type="text/html" title="Excuse my French API, or being an English as a second language API designer" /><published>2021-10-13T00:00:00-05:00</published><updated>2021-10-13T00:00:00-05:00</updated><id>https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer</id><content type="html" xml:base="https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer/">&lt;p&gt;This post is dedicated to all English as a Second, or Foreign, Language (ESL, EFL) API designers. 
Et tout spécialement mes compatriotes français!
Designing APIs is already not that easy when you design them using your native language.
But, it’s even more difficult when using a second one.
So let’s see how to avoid design frenglish, itaglish or whateverglish APIs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-should-i-care-about-english&quot;&gt;Why should I care about english&lt;/h1&gt;

&lt;p&gt;Your API is public, well unless your a government that MUST use local language because of some law, use english.
Why?
English is the lingua franca of software.
Using it will make your API easily understandable by most people using APIs on earth.
That’s quite a huge market you don’t want to miss.&lt;/p&gt;

&lt;p&gt;Your API is private?
My very first post was about &lt;a href=&quot;https://apihandyman.io/why-you-must-design-your-private-api-in-english/&quot;&gt;why (private) APIs should be designed in English&lt;/a&gt;.
To make it short: your private API will not be private forever, so better use english just like for public APIs.&lt;/p&gt;

&lt;p&gt;Ok, APIs MUST be design in english, but why should we really care about translations?
Well, it would be a pity to ruin the success of your API just because people actually don’t understand what it is talking about.
And once your API is consumed … it will be hard to fix its awkward whateverglish design.
So you better take care about english translation.&lt;/p&gt;

&lt;h1 id=&quot;when-should-i-use-english-during-design-process&quot;&gt;When should I use english during design process&lt;/h1&gt;

&lt;p&gt;In order to avoid loosing time when designing an API, I use the following path:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Analyse needs and decompose them to identify a list of goals/jobs to be done, the function that will compose the API using natural language and native language&lt;/li&gt;
  &lt;li&gt;Identify business concepts (resource) and action that apply to them (still using natural language and native language)&lt;/li&gt;
  &lt;li&gt;Translate the business concepts and action in english&lt;/li&gt;
  &lt;li&gt;Design resource paths (in english) and choose HTTP methods corresponding to actions&lt;/li&gt;
  &lt;li&gt;Model data in native language&lt;/li&gt;
  &lt;li&gt;Translate data in English&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s the actual method I describe in my book that allows to avoid HTTP heated discussion while investigating needs, I just added extra steps for translation.
The idea is the same, keeping the translation complexity AFTER the actual need investigation and design in order to avoid being polluted during that very important steps.
It’s easier to think and discuss using a language you master than English.&lt;/p&gt;

&lt;h1 id=&quot;api-design-translation-tips--tricks&quot;&gt;API Design translation tips &amp;amp; tricks&lt;/h1&gt;

&lt;p&gt;Here are a few tips and tricks that should help you avoid terrible translation mistakes.&lt;/p&gt;

&lt;h2 id=&quot;use-us-english&quot;&gt;Use US english&lt;/h2&gt;

&lt;p&gt;The lingua franca of software is not just “English”, but US English, don’t forget that during translation.&lt;/p&gt;

&lt;h2 id=&quot;hire-professional-translators&quot;&gt;Hire professional translators&lt;/h2&gt;

&lt;p&gt;For public APIs, if you’re not sure about your english, don’t think to much: hire professional translators.
For private APIs, that could be overkill but remember that sooner or later &lt;a href=&quot;https://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/&quot;&gt;your private APIs mays become public&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;take-advantage-of-more-or-less-official-translations&quot;&gt;Take advantage of more or less official translations&lt;/h2&gt;

&lt;p&gt;If you’re lucky enough you can find official translations for your domain.
You could take advantage of glossary but also be inspired by existing APIs or standard.
For instance, if you work in banking/finance, you should take a look at the ISO20022 standard.&lt;/p&gt;

&lt;h2 id=&quot;use-online-dictionary-wisely&quot;&gt;Use online dictionary wisely&lt;/h2&gt;

&lt;p&gt;Unfortunately, you won’t always find the ready to use translation and you’ll have to use one of the many online your language to english dictionaries.
But depending on the one you use and how you use it, the result may not be as good as expected.
Here’s how I proceed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I translate full sentences giving more context about the words I want to translate, using either https://www.linguee.fr/ (beware of the translations examples coming from non-english websites shown in Linguee’s results) and https://www.deepl.com/ (from the Linguee creator, pretty good one).&lt;/li&gt;
  &lt;li&gt;I check the definition of the english word found using a US English dictionary such as https://www.lexico.com/. If you don’t do that, you may have some really bad surprises&lt;/li&gt;
  &lt;li&gt;I do a final check by looking for the word I found using Google. Reading documents using the found word can help to choose between various options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, the idea is to never, ever just rely on word for word translation.&lt;/p&gt;

&lt;h2 id=&quot;translate-or-not-acronyms&quot;&gt;Translate (or not) acronyms&lt;/h2&gt;

&lt;p&gt;There are two types of acronyms, the ones that can be translated and the ones that can’t.
For instance, in french we use TVA for “Taxe sur la Valeur Ajoutée”, which can easily be translated into “Value Added Tax”, giving the VAT acronym.
VAT is being a well know acronym, across many countries, you can actually use it in your API design instead of TVA.&lt;/p&gt;

&lt;p&gt;But what about more specific concepts that only exists in your country?
I’w working with teams creating APIs in the employee savings domain.
This domain deals with highly specific concept; the PERCO, “Plan d’Epargne pour la Retraite COllectif”, for instance.
If I translate this literally, I get “Group Retirement Savings Plan” or GRSP … which means nothing for people outside of France AND for french people.
In that case, it would be better to keep the french acronym in the design, adding a description might help non french people to understand what this means.&lt;/p&gt;

&lt;p&gt;But just think about this last option: not using this highly specific acronym?
Could it be replaced by a more generic word like “saving plan”?
This is not something that will always work, but it’s worth the try because keeping acronym that are specific to your country could be a burden for your design and annoy many users.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">This post is dedicated to all English as a Second, or Foreign, Language (ESL, EFL) API designers. Et tout spécialement mes compatriotes français! Designing APIs is already not that easy when you design them using your native language. But, it’s even more difficult when using a second one. So let’s see how to avoid design frenglish, itaglish or whateverglish APIs.</summary></entry><entry><title type="html">We Need Specialized Tools For Api Design Reviews</title><link href="https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews/" rel="alternate" type="text/html" title="We Need Specialized Tools For Api Design Reviews" /><published>2021-10-06T00:00:00-05:00</published><updated>2021-10-06T00:00:00-05:00</updated><id>https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews</id><content type="html" xml:base="https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews/">&lt;p&gt;Doing an API design review is not only about that, but it will require, sooner or later, to analyze an interface contract.
Use the wrong tools to do so, and reviews will become a terrible, never-ending burden.
Use the right tools, and you’ll become a formidable machine, doing reviews at light speed, never missing the tiniest problem or question.
But, after dozens of reviews, you may realize that, despite using the “right” existing tools, the API space actually lacks API design reviews specialized tools.
&lt;!--more--&gt;
This post is a slightly write up of my “Taking advantage of OpenAPI for API design reviews” talk I gave at the 2021 API Specification Conference.&lt;/p&gt;

&lt;h1 id=&quot;reviewing-api-designs-helping-people&quot;&gt;&lt;del&gt;Reviewing API designs&lt;/del&gt; Helping people&lt;/h1&gt;

&lt;p&gt;I work with many different teams helping them create and evolve many different APIs.
I can do around 150 API design reviews per year on average.&lt;/p&gt;

&lt;p&gt;When I do an API design review, I’m not being the API police.
I’m here to help people create the best possible API in their context.
I’m here to provide guidance and help people grow their design skills so that one day I won’t be needed anymore.&lt;/p&gt;

&lt;p&gt;Though I’m not a API policeman, the closer to our API design guidelines the design is, the better.
Because having consistent APIs make them easier to use.
But that’s not the only thing to look at, an API must be reviewed beyond the guidelines.
It’s important to investigate what it is made for, what needs this API is supposed to fulfil.
And then to check if the design is actually responding to all that.
But not just “responding to all” that but doing it in the best possible fashion.
So, I also check if the design is easy to understand, easy to use and easy to evolve.&lt;/p&gt;

&lt;p&gt;And how do I do all that?
Well, by investigating business domain and IT concerns, asking stupid questions (tons of them), making people talk together, listening, showing empathy, challenging beliefs and ideas … and obviously analyzing interface contracts.&lt;/p&gt;

&lt;h1 id=&quot;analyzing-an-interface-contract&quot;&gt;Analyzing an interface contract&lt;/h1&gt;

&lt;p&gt;Depending on the size and number of APIs you review, the task of reviewing API designs will be more or less complicated.
But if analyzing a single interface contract can be quite complicated by itself, it can be even more complicated if it’s described in a non standard format such as a wiki page or a spreadsheet.
Hopefully most people I’m working with use the OpenAPI specification to describe their APIs.&lt;/p&gt;

&lt;h2 id=&quot;reading-openapi-files-is-a-terrible-idea&quot;&gt;Reading OpenAPI files is a terrible idea&lt;/h2&gt;

&lt;p&gt;I’ve seen people making API design reviews by directly reading OpenAPI files such as the one below.
That’s not something I actually do, you can give it a try, read this file and tell me what you think.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Let's read this OpenAPI file&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-design-reviews/motu-openapi.yaml&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;openapi: 3.0.0
info:
  title: MOTU
  version: 1.0.3_build156
  description: The Masters of the Universe Web Site API
paths:
  /v1/charsBySide:
    get:
      summary: charBySide
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sides'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-charById
      tags:
        - searchController
      parameters: []
      description: For &quot;all characters&quot; screen
    parameters: []
  /v1/charaters-with-name:
    get:
      summary: Search characters by name
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Char'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-characters-by-name
      description: For &quot;search by name&quot; screen
      parameters:
        - schema:
            type: string
          in: query
          name: name
          required: true
    parameters: []
  '/v1/tpyt/{year}/{type}':
    parameters:
      - schema:
          type: string
        name: year
        in: path
        required: true
      - schema:
          type: string
        name: type
        in: path
        required: true
    get:
      summary: Toys per year and type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/toysPerYearAndTypeDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-toys-per-year-year-type
      tags:
        - searchController
      description: ''
  /v1/search/flying/vehicles/with/filters:
    post:
      summary: List flying toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlyingToysResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Flying Toys Found
        '500':
          description: Internal Server Error
      operationId: post-flying-vehicles-byId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlyingFilters'
    parameters: []
  '/v1/sidekick/{name}':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
    get:
      summary: Get character's sidekick
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sidekick'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-characters-sidekick-name
  /v1/buildings/all:
    get:
      summary: Building toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingListDto'
      operationId: get-buildings
    parameters: []
  '/v2/episode/{num}/{year}/{producer}':
    parameters:
      - schema:
          type: string
        name: num
        in: path
        required: true
      - schema:
          type: string
        name: year
        in: path
        required: true
      - schema:
          type: string
        name: producer
        in: path
        required: true
    get:
      summary: get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode_Single'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-ep-num-year-producer
      tags:
        - tvShowController
      description: ''
  /v2/episodes:
    get:
      summary: List episodes
      tags:
        - tvShowController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producers'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-eps
      description: ''
    parameters: []
    post:
      summary: Insert episode in database
      operationId: post-v2-episodes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/episode-added'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-epsode'
      tags:
        - tvShowController
  /v1/search/ground/vehicles/with/filters:
    post:
      summary: Search ground vehicle toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroundToyResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: post-v1-ground-vehicles-with-filters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroundFilter'
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
    parameters: []
  /v1/buildings/filters:
    get:
      summary: Search buildings
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingListDto'
      operationId: get-v1-buildings-filters
      parameters:
        - schema:
            type: string
          in: query
          name: name
components:
  schemas:
    Char:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        toys:
          $ref: '#/components/schemas/toy'
        creation_dte:
          type: string
          format: date-time
        evil:
          type: boolean
        good:
          type: boolean
    toy:
      title: ''
      type: object
      properties:
        ToyId:
          type: string
        ToyType:
          type: number
          enum:
            - '1'
            - '2'
            - '3'
        ToyReference:
          type: string
        ToyOriginalPrice:
          type: string
        ToyManufacturer:
          type: string
        ToyName:
          type: string
    prd:
      title: ''
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        years:
          type: array
          items:
            $ref: '#/components/schemas/Years'
    Epsd:
      title: ''
      type: object
      properties:
        number:
          type: string
        title:
          type: string
        firstAir:
          type: number
    Years:
      title: ''
      type: object
      properties:
        year:
          type: string
        episodes:
          type: array
          items:
            $ref: '#/components/schemas/Epsd'
    Episode_Single:
      type: object
      properties:
        name:
          type: string
        first_air_date:
          type: string
        alternate_name_1:
          type: string
        alternate_name_2:
          type: string
    add-epsode:
      title: ''
      type: object
      properties:
        name:
          type: string
        firstArDate:
          type: string
        producerId:
          type: string
        year:
          type: integer
    SearchResponse:
      title: ''
      type: array
      items:
        $ref: '#/components/schemas/Char'
    Sides:
      title: ''
      type: object
      properties:
        good:
          type: array
          items:
            $ref: '#/components/schemas/SideChar'
        evil:
          type: array
          items:
            $ref: '#/components/schemas/SideChar'
    SideChar:
      title: ''
      type: object
      properties:
        id:
          type: string
        nom:
          type: string
        icon:
          type: string
    Sidekick:
      title: ''
      type: object
      properties:
        name:
          type: string
    FlyingFilters:
      title: Filters
      type: object
      properties:
        year:
          type: string
        brand:
          type: string
        name:
          type: string
        evil:
          type: boolean
        good:
          type: boolean
        id:
          type: string
    FlyingToysResponse:
      type: array
      items:
        $ref: '#/components/schemas/FlyingToy'
    FlyingToy:
      type: object
      properties:
        flyingToyName:
          type: string
        flyingToyBox:
          type: string
    toysPerYearAndTypeDto:
      title: toysPerYearAndTypeDto
      type: array
      items:
        $ref: '#/components/schemas/toy'
    GroundToyResponseDto:
      type: array
      items:
        $ref: '#/components/schemas/GroundToy'
    GroundToy:
      type: object
      properties:
        name:
          type: string
        boxArt:
          type: string
    GroundFilter:
      title: GroundFilter
      type: object
      properties:
        id:
          type: string
        manufacturer:
          type: string
    building:
      title: building
      type: object
      properties:
        name:
          type: string
        art:
          type: string
        width:
          type: number
        height:
          type: number
        depth:
          type: number
    BuildingListDto:
      title: BuildingListDto
      type: object
      properties:
        buildings:
          type: array
          items:
            $ref: '#/components/schemas/building'
    episode-added:
      title: episode-added
      type: string
    Producers:
      title: ''
      type: object
      properties:
        producers:
          $ref: '#/components/schemas/prd'
servers:
  - description: base path
    url: /api
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I don’t know how you feel, but reading this raw OpenAPI file do not really help me to make a complete review of the design.
Oh, I can still spot useful but disturbing pieces of information based on the &lt;code&gt;info&lt;/code&gt; section:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Because of version number &lt;code&gt;1.0.3_build156&lt;/code&gt;, I can guess this file has been generated from code, which is usually not a good sign. Maybe the team has coded everything and just want a green light to deploy their API on the API gateway (Sorry, that’s not my job, and too bad, it’s probably too late to fix something as everything has already been coded)&lt;/li&gt;
  &lt;li&gt;The “The Masters of the Universe Web Site API” &lt;code&gt;description&lt;/code&gt; let me think that this API could be been design solely to be the backend of this specific website and thus may not be reusable in other contexts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s interesting, but when I do an API design review my first move is trying to guess what the API is made for by looking at all of its operations, all GET /this and POST /that and their summaries.
And that is not easy to do just reading the raw OpenAPI file.
Using a code editor, I could close a few sections but even doing so I can’t have this overview totally.&lt;/p&gt;

&lt;p&gt;I also like to have an overview of the data models in operations’ responses, evaluate their complexity, their depth.
But reading a raw OpenAPI file all I have is a flat perspective of each model.
I have to jump from one &lt;code&gt;$ref&lt;/code&gt; to another to “see” a full schemas … 
And so ,I actually don’t see anything here.
Or worse, just like in the parable of the 3 blind men the elephant, I could see a snake or a wall instead of an elephant.&lt;/p&gt;

&lt;p&gt;So, reading a raw OpenAPI file is definitely not for me.
And I highly doubt that anyone could actually do an efficient API design review doing so.&lt;/p&gt;

&lt;h2 id=&quot;not-all-documentation-tools-are-equals&quot;&gt;Not all documentation tools are equals&lt;/h2&gt;

&lt;p&gt;As far as I remember, I always took advantage of documentation tools to do API design reviews.
I especially use the good old SwaggerUI.
I don’t use it only because it was the only one available when I started being an API design reviewer and I don’t want to change my habits.
No, I use it because it’s the one that fulfils my needs for this specific task.&lt;/p&gt;

&lt;p&gt;I actually don’t like SwaggerUI API documentation when I learn to use an API, I prefer ReDoc or Stoplight Elements renderings. But reading API documentation is different from reviewing an interface contract.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/swaggerui-overview.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;SwaggerUI allows me to easily get the overview of operations, I can see all GET /this and POST /that and their summaries in a quick glance.
That helps me to confirm the intent of the API, if it was explained to me before, or guess it if not.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/swaggerui-operation.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Using SwaggerUI I can also check that the returned schema name actually match the resource path.
In ReDoc the name of the returned schema is not shown and when doing a review, that’s quite annoying.&lt;/p&gt;

&lt;p&gt;Once I’ve made this first pass, I analyze in depth each operation.
Checking parameters, responses and their schemas.
Regarding the analysis of schemas, I would prefer ReDoc of Stoplight Elements.
Whatever the tool, I can easily spot data models where everything if optional (typical on generated interface contracts).
I can also check schema depth.&lt;/p&gt;

&lt;p&gt;When I started doing reviews I had to carefully analyze every bit of the contract in one of those documentation tools.
Especially to ensure that the design was conforming to our API design guidelines.
Checking every single property is in lowerCamelCase, path structure is valid, no HTTP status code is missing, etc, etc, etc, …&lt;/p&gt;

&lt;p&gt;Doing those repetitive (mostly dumb) checks, review after review, hundreds of times, I nearly lost sanity.
And there are not only dumb checks that need to be done.
Checking consistency between schemas for instance is extremely hard to do with regular documentation tools.&lt;/p&gt;

&lt;h2 id=&quot;beyond-linting&quot;&gt;Beyond linting&lt;/h2&gt;

&lt;p&gt;Hopefully, Stoplight Spectral just came out at that time.
I will not go in all the details here (You can watch my &lt;a href=&quot;/the-augmented-api-design-reviewer/&quot;&gt;“Augmented API Design Reviewer” talk&lt;/a&gt; for that), but to make it short, Spectral is a JSON/YAML linter.
You can define rules that Spectral will run against a document to spot if some elements are breaking them.
You can check path structure, property names case, if all expected HTTP status codes are defined on all operations, or if all 4xx and 5xx error response return a data model matching your standard error schema.&lt;/p&gt;

&lt;p&gt;For instance the following ruleset contains a single that scans all properties to detect if some of them have a name containing a number:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Spectral Demo Ruleset&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-design-reviews/demo-ruleset.yaml&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;rules:
  property-name-no-number:
    given: $..properties
    severity: warn
    description: Property name must not contain number (maybe you can use an array)
    message: &quot;{{description}} {{path}}&quot;
    then:
      - field: &quot;@key&quot;
        function: pattern
        functionOptions:
          notMatch: &quot;/[0-9]+/i&quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can run the following command after installing Spectral to see it in action:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;Spectral lint -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using escape variable&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $ Spectral lint -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml
OpenAPI 3.x detected

https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml
 358:26  warning  property-name-no-number  Property name must not contain number (maybe you can use an array) #/components/schemas/Episode_Single/properties/alternate_name_1
 360:26  warning  property-name-no-number  Property name must not contain number (maybe you can use an array) #/components/schemas/Episode_Single/properties/alternate_name_2

✖ 2 problems (0 errors, 2 warnings, 0 infos, 0 hints)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What’s the problem with property names containing numbers?
What’s the problem with &lt;code&gt;alternate_name_1&lt;/code&gt; and &lt;code&gt;alternate_name_2&lt;/code&gt; properties in the &lt;code&gt;Episode_Single schema&lt;/code&gt; for instance?
If there’s a 1 and 2, why not a 3? And a 4?
So better put those alternate names in a list, that way no problem, there can be 1 to 4 … or 5.
But that’s if those alternate names 1 and 2 actually are just “alternate names” and not “production name” and “some other name”. 
If so, I would rename them accordingly.&lt;/p&gt;

&lt;p&gt;As you can see linting an OpenAPI file is not only about doing dumb checks (even if only just that actually changed my life), you can use Spectral to spot possible design patterns and business domain concerns.&lt;/p&gt;

&lt;p&gt;The problem with linting an OpenAPI file is that you can end with hundreds of problems detected.
Actually, running my usual ruleset (working on open sourcing it) on this post’s demo OpenAPI file would return almost 200 problems.
A raw list of 200 problems is not really usable.
And Spectral can’t handle all of my checks, I still need to analyze the contract with my very eyes.&lt;/p&gt;

&lt;p&gt;And so I realized that I needed to render OpenAPI files and Spectral results in a new way.&lt;/p&gt;

&lt;h2 id=&quot;looking-for-new-perspectives&quot;&gt;Looking for new perspectives&lt;/h2&gt;

&lt;p&gt;This research of new perspectives actually started with a command line like this one:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;Spectral lint -q -f json -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml | jq .

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using escape variable&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $  Spectral lint -q -f json -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml | jq .&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can tell Spectral to return its results as JSON and pipe it to &lt;a href=&quot;https://apihandyman.io/toolbox/jq/&quot;&gt;jq&lt;/a&gt; and do whatever you want with them. Just don’t forget the &lt;code&gt;-q&lt;/code&gt; flag, if not there are some non JSON data screwing everything.&lt;/p&gt;

&lt;p&gt;So I tinkered with JQ, extracting data from Spectral results and turning them into csv.
Then I did the same with OpenAPI files (see my series about &lt;a href=&quot;/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/&quot;&gt;OpenAPI + JQ&lt;/a&gt;), I extracted operations and schemas into csv.&lt;/p&gt;

&lt;p&gt;Then all these csv files are imported into … an Excel file (Google Sheet or Apple Number are no match, and don’t even dare to talk about OpenOffice/Libroffice alternatives).&lt;/p&gt;

&lt;p&gt;For the Spectral problems, I can easily filter problems by type or level, I can do text search.
And I can easily get stats using a pivot table.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/linter.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/linter-stats.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;For the operations, I can at last have “my overview” as I need it, I can see all operations in a quick glance.
I can see all parameters, response data model or used HTTP status code.
I can easily compare paths (and spot typos).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/operations.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Having the schemas put flat in Excel is a very powerful tool.
I can see all schema names easily.
By sorting the data by property names, I can easily spot inconsistencies.
I can check number/integer properties and check if they are not-easy-to-interpret codes, more easily spotted when there’s an enum (line 68 in the above capture).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/schemas.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The possibilities are endless.
Well I exaggerate a bit, but you can do crazy stuff with just csv files and an Excel file.&lt;/p&gt;

&lt;p&gt;Obviously, though I added some shell scripts and VS Code action around that to quickly analyze an OpenAPI file and open my Excel report, this is not really industrial.
My JQ stuff works only a basic files, I would need to replace that by more robust code.
Same for Excel, I hope to replace it by something else one day…&lt;/p&gt;

&lt;h1 id=&quot;and-thats-just-for-analyzing-the-contract&quot;&gt;And that’s just for analyzing the contract&lt;/h1&gt;

&lt;p&gt;I hope that what was shown here will give you some ideas about how analyze OpenAPI files but more important, I hope you’ll understand that we, API designer reviewers, need specialized tools to do our job.
We cannot just rely on raw OpenAPI files or documentation tools.
We need tools that take advantage of this machine readable format, tools such as Spectral, but we need new way of rendering OpenAPI files and linter results.&lt;/p&gt;

&lt;p&gt;And I didn’t talked about how to formalize the result of such analysis … we need specialized tools for that too. But that’s another story I’ll tell another time.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Doing an API design review is not only about that, but it will require, sooner or later, to analyze an interface contract. Use the wrong tools to do so, and reviews will become a terrible, never-ending burden. Use the right tools, and you’ll become a formidable machine, doing reviews at light speed, never missing the tiniest problem or question. But, after dozens of reviews, you may realize that, despite using the “right” existing tools, the API space actually lacks API design reviews specialized tools.</summary></entry><entry><title type="html">Barely surviving my first live (non recorded) demo session</title><link href="https://apihandyman.io/barely-surviving-my-first-live-non-recorded-demo-session/" rel="alternate" type="text/html" title="Barely surviving my first live (non recorded) demo session" /><published>2021-09-29T00:00:00-05:00</published><updated>2021-09-29T00:00:00-05:00</updated><id>https://apihandyman.io/barely-surviving-my-first-live-non-recorded-demo-session</id><content type="html" xml:base="https://apihandyman.io/barely-surviving-my-first-live-non-recorded-demo-session/">&lt;p&gt;Yesterday, I live demoed how I take advantage of the OpenAPI Specification during an API Design review at the API Specification Conference.
This session was really live, not recorded like my previous one, and that didn’t totally went well.
Though I was quite happy to discover new tricks, I had problems preparing this session and worse I also had problems giving it.
Nothing that terrible hopefully, but still terribly annoying and stressful.
I need a cathartic post to talk about all that.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;facing-obs-browser-cache-issues&quot;&gt;Facing OBS browser cache issues&lt;/h1&gt;

&lt;p&gt;During my previous (and first) live demo session I started to use &lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS&lt;/a&gt;, you can read the whole story &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/#discovering-obs-studio&quot;&gt;here&lt;/a&gt;).
I decided to reuse what I had done, especially my &lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;pseudo-slide-deck system&lt;/a&gt; in order to have section titles and speaker notes.
To explain this shortly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s a &lt;code&gt;steps&lt;/code&gt; folder containing &lt;code&gt;step-1&lt;/code&gt; to &lt;code&gt;step-X&lt;/code&gt; folders&lt;/li&gt;
  &lt;li&gt;Each &lt;code&gt;step-X&lt;/code&gt; folder contains at least an index.html (the sections title) and todo.html (my speaker’s notes) HTML files (plus some other files if needed)&lt;/li&gt;
  &lt;li&gt;A next.sh shell script copy the content of the next &lt;code&gt;step-X&lt;/code&gt; folder to &lt;code&gt;steps&lt;/code&gt;, I run it when needed with a shortcut in VS Code&lt;/li&gt;
  &lt;li&gt;Both “current” HTML files can be loaded and live-reloaded automatically thanks to the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Live Server&lt;/a&gt; VS Code extension&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;index.html&lt;/code&gt; file is visible in OBS via a browser source&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;todo.html&lt;/code&gt; is just opened in a browser (on my iPad in sidecar mode)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/barely-surviving-my-first-live-non-recorded-demo-session/tweet.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This time the &lt;code&gt;index.html&lt;/code&gt;was not containing text but a PNG image with a transparent background (top right corner in the screenshot above).
At my first attempt, I simply gave the same name to all the different images &lt;code&gt;steps/step-X/title.png&lt;/code&gt;, the HTML containing &lt;code&gt;&amp;lt;img src=&quot;title.png&quot;&amp;gt;&lt;/code&gt;.
The problem was that the browser inside OBS was not reloading the image because it was cached.
To solve this problem I simply stored all images in &lt;code&gt;steps/images&lt;/code&gt; with different names and targeted &lt;code&gt;steps/images/specific-name.png&lt;/code&gt; in the &lt;code&gt;img&lt;/code&gt; tag.&lt;/p&gt;

&lt;h1 id=&quot;adding-scene-switching-to-my-system&quot;&gt;Adding scene switching to my system&lt;/h1&gt;

&lt;p&gt;In my previous live session, I didn’t needed to use scene switching but this time I wanted to be able to switch between a scene showing my Macbook display and another one with only my webcam when needed while still being able to use my “next slide” script.
I did that by configuring the “Title” tab of the Advanced Scene Switcher as follow:&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/barely-surviving-my-first-live-non-recorded-demo-session/scene-switch-title-regex.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The first line targets a terminal window whose title may change, so I used a regex (the &lt;code&gt;.*&lt;/code&gt; part of the title).
The second line targets my VS Code window.
That configuration means: if I click on my terminal, OBS shows the Camera scene and if click on VS Code, the VSCode scene is shown.
While having the focus on the terminal I was able to launch the &lt;code&gt;next.sh&lt;/code&gt; command to go to next step if needed.&lt;/p&gt;

&lt;p&gt;Then a few hours before the conference, I wanted to add a third scene for the introduction.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/barely-surviving-my-first-live-non-recorded-demo-session/tweet-intro-scene.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I was able to handle that by simply adding a &lt;code&gt;scene.txt&lt;/code&gt; in all of my &lt;code&gt;steps/step-X&lt;/code&gt; folders and then configure the “File” tab of the advanced scene switcher plugin to change the scene based on the content of &lt;code&gt;steps/scene.txt&lt;/code&gt;.
Depending on the scene, the file may contain “Intro” or “Camera” (the scene’s name) or be empty.
In this last case, the scene switcher fallback to “title” mode.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/barely-surviving-my-first-live-non-recorded-demo-session/scene-switch-file.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;noticing-epoccam-lag-in-obs&quot;&gt;Noticing EpocCam lag in OBS&lt;/h1&gt;

&lt;p&gt;I my previous &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/#looking-good-enough&quot;&gt;“live” series&lt;/a&gt;, I explained how an iPhone could be used as a webcam with EpocCam.
I actually did not used it that time, but I did use my iPhone as Webcam several times for video calls and podcast recordings (yes, video is recorded sometimes for podcasts).
I had absolutely no problem at all.
But this time, I don’t know yet why, I faced some lag issue: the video not sync with my audio when using OBS.
I realized that 2 hours before the conference 🤦🏻‍♂️.
So, as I had not much time to figure what the problem was and how to solve it, I decided to use my terrible Macbook webcam … and plan to buy a descent camera.&lt;/p&gt;

&lt;h1 id=&quot;chaotic-sessions-content-preparation&quot;&gt;Chaotic session’s content preparation&lt;/h1&gt;

&lt;p&gt;Maybe having 3 totally different conference talk for this year was too much, it take me an awfully long time and dedication to prepare one. 
I had too much work to do these last weeks and not enough time to prepare … and was not in the mood for it.
That happens sometimes, not being in the mood, but it was not a blog post I could postpone, people were expecting to see this session.&lt;/p&gt;

&lt;p&gt;The idea was to design an API having a few design issues that would allow me to showcase how I review a design and my tools. 
I really struggled to prepare this API and was not totally satisfied in the end.
The resulting API looked too much artificial.&lt;/p&gt;

&lt;p&gt;I hadn’t much time to prepare my speech and do the rehearsal.
Hopefully, lastly I was able to practice quite often “presenting without any notes” while doing API design training sessions.
So though I was not totally confident, I felt I could let go my “word for word” preparation and be more spontaneous.
Once the sections of my talk were defined I did a few tests and was quickly able to evaluate the time for each one, added the timing to my speakers notes and was “ready” for the show.&lt;/p&gt;

&lt;h1 id=&quot;facing-technical-issue-during-the-session&quot;&gt;Facing technical issue during the session&lt;/h1&gt;

&lt;p&gt;And the show didn’t go so well but not because of my lack of preparation…&lt;/p&gt;

&lt;p&gt;I did an audio/video test 30 minutes before my session and there was something wrong.
The person I did the test with told me there was a small random delay with my video (I was sharing my 27 inches display screen showing a fullscreen OBS projector and not using my webcam directly).
I took time to do some tests and I noticed a few things (the platform used was Hopin in Chrome):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sharing a just a window instead of the screen was terrible. Huge video lag&lt;/li&gt;
  &lt;li&gt;Reducing the resolution of my screen apparently allowed to remove the lag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here I was ready for the show and I started to talk: “Hello, everyone…” …
But some friends in the chat told me my audio was “scratching” or doing static sound.
Not knowing what to do, I switched to the MacBook audio instead of my super cool Shure SM7B then switched back to the Shure.
Problem solved … 30 seconds.
I switched back again to MacBook audio, it was working, “Don’t touch anything” someone told me 😅.
I lost 2 to 3 minutes I think, but I started the session.&lt;/p&gt;

&lt;p&gt;Everything was working well, though I noticed some lag in VS Code scrolling.
Slowly but surely my MacBook was becoming less responsive.
It seems that both OBS and Chrome were using much CPU, but I suspect there were some other process slowing my Machine (I was telling to myself “it’s a f&lt;strong&gt;**&lt;/strong&gt; gazillion cores MacBook Pro 16, how can it be so slowed down!”).
I think the mic problem was caused by high CPU usage.
Whatever, I was unable to fully demoed my final tool (in Excel, yes, Excel) but was able to explain the spirit.&lt;/p&gt;

&lt;p&gt;So, it didn’t went so well BUT, I don’t know how, I succeeded to keep my calm and people were happy with the session’s content, so I can live with that.
I’ll need to figure what was the problem in order to avoid having it again.
And I’ll need to prepare a plan B just in case, because Murphy’s law.
Oh, and I must not forget to buy a f&lt;strong&gt;**&lt;/strong&gt; camera.
But for now, I’ll take some rest.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Yesterday, I live demoed how I take advantage of the OpenAPI Specification during an API Design review at the API Specification Conference. This session was really live, not recorded like my previous one, and that didn’t totally went well. Though I was quite happy to discover new tricks, I had problems preparing this session and worse I also had problems giving it. Nothing that terrible hopefully, but still terribly annoying and stressful. I need a cathartic post to talk about all that.</summary></entry><entry><title type="html">3 common APIfication problems: complexity, security, capacity</title><link href="https://apihandyman.io/3-common-apification-problems-complexity-security-capacity/" rel="alternate" type="text/html" title="3 common APIfication problems: complexity, security, capacity" /><published>2021-09-22T00:00:00-05:00</published><updated>2021-09-22T00:00:00-05:00</updated><id>https://apihandyman.io/3-common-apification-problems-complexity-security-capacity</id><content type="html" xml:base="https://apihandyman.io/3-common-apification-problems-complexity-security-capacity/">&lt;p&gt;API all the things! 
Whatever the reason, IT optimization or digital transformation, it’s nowadays fairly common to APIfy an existing system, making it available through APIs.
What is also very common is to not totally grasp the implications of doing so and especially overlooking complexity, security and capacity concerns.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;context&quot;&gt;Context&lt;/h1&gt;

&lt;p&gt;Though (Web) APIs have been there for quite a long time, though the API economy is in the air for almost as long, there are still some companies that take the API train today.
It could be because they want to refresh their IT systems, to replace old JSP web sites by brand new JS/HTML SPAs (Single Page Applications) for instance.
They could also want to participate to the API economy, by providing their services through APIs.&lt;/p&gt;

&lt;p&gt;Unfortunately, not all companies can rebuild themselves from scratch to provides those APIs, they have to deal with existing systems that sometimes cannot be replaced easily.
And so they have to keep them.
Hopefully, that does not mean they can’t do new stuff with it, that means they will have to compose with them, maybe to build around them.
(Actually it is sometimes more interesting from an architecture perspective to work on such system than just to build brand new stuff, you can learn a lot doing so.)
But APIfying existing system must be done having 3 concerns in mind: complexity, security and capacity.&lt;/p&gt;

&lt;h1 id=&quot;complexity&quot;&gt;Complexity&lt;/h1&gt;

&lt;p&gt;Building APIs to provide access to an existing system is unfortunately prone to actually create APIs that just give access to an existing system.
That means the APIs will just be technical connectors brutally exposing underlying complexity.&lt;/p&gt;

&lt;p&gt;If the system that needs to be exposed is a good old corporate software solution, some may be tempted to give a direct access to its APIs (hoping it has some).
Unfortunately, corporate software usually provide terrible APIs that are awfully complex and require to be an expert of both the related business domain and the software solution itself to use them.
And that’s definitely not how modern APIs should be.&lt;/p&gt;

&lt;p&gt;Old systems can be the result of years if not decades of IT, business and organization evolutions, they may simply not make any sense at all for people outside of the team owning them or outside the organization.
I have seen places where 2 different software solutions would handle the same business domain because of historical and organizational constraints.
Years of evolutions in a close environments may have lead to creating a local business dialect only understood inside the organization.
That must not be shown to the outside&lt;/p&gt;

&lt;p&gt;And these are only a few examples of the complexity that could be exposed to the outside, if care is not taken.
Always try to look at what you want to expose with a fresh eye, focusing on an outside-in business perspective approach.
Then find the means to plug this new perspective to the existing system whatever the means: API redesign, adding new layers, adapting architecture or organization, …&lt;/p&gt;

&lt;h1 id=&quot;security&quot;&gt;Security&lt;/h1&gt;

&lt;p&gt;An other major problem too often neglected when exposing existing systems is security.&lt;/p&gt;

&lt;p&gt;A typical example would be to bluntly reuse existing purely internal (SOAP) web service, restify them and use them in a JS/HTMl SPA … 
Totally forgetting that the replaced good old web applications was actually handling all of the security like “is this user allowed to make a wire transfer from this bank account?” or “is this user allowed to make a 1 million euros wire transfer?”.
You can’t delegate such controls outside of your walls.
(Note that I never have actually seen this specific use case. It’s purely hypothetical. Really. Please, no questions.).&lt;/p&gt;

&lt;p&gt;Exposing an existing system requires to rethink security to ensure that the consumers won’t be able to harm it.
And by security I mean regular access controls but also business controls.&lt;/p&gt;

&lt;h1 id=&quot;capacity&quot;&gt;Capacity&lt;/h1&gt;

&lt;p&gt;And last but not least problem: capacity.
You must ensure that the existing system is actually able to handle the new solicitations coming through the new APIs.&lt;/p&gt;

&lt;p&gt;It’s not that rare to see old systems that were made to only run at office hours.
But exposing them through APIs may requires to do some modifications to make them available 24/7.
In last resort you may include those constraints in your SLA but in 2021 that may seem awkward depending on your business domain and who the consumers of your APIs are.&lt;/p&gt;

&lt;p&gt;And more tricky: the infrastructure.
Exposing an existing system requires to know its capacity and its current charge.
How many of this new solicitations through APIs can it handle?
Aren’t you putting the other usages of the system at risk by opening the new API channel?
Can you easily add more horse power?
Systems that have been creating prior the cloud era are probably still hosted on not easily extensible infrastructure or worse may have an architecture that makes them not extensible to handle more requests.&lt;/p&gt;

&lt;h1 id=&quot;only-solutions&quot;&gt;Only solutions&lt;/h1&gt;

&lt;p&gt;All that looks very pessimistic.
But you must be aware of it in order to avoid screwing your API initiative and find the solutions to solves those problems.
And don’t be afraid, based on my experience, there are always solutions.
I have worked on systems that ended mixing non extensible mainframe, not easily extensible unix servers and unlimited horse power cloud infrastructure. 
Oh, it’s a little bit more complicated than just building from scratch, but that’s how you can actually have fun as an architecture-problem-solver.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">API all the things! Whatever the reason, IT optimization or digital transformation, it’s nowadays fairly common to APIfy an existing system, making it available through APIs. What is also very common is to not totally grasp the implications of doing so and especially overlooking complexity, security and capacity concerns.</summary></entry><entry><title type="html">Analyzing a software solution from an API perspective</title><link href="https://apihandyman.io/analyzing-a-software-solution-from-an-api-perspective/" rel="alternate" type="text/html" title="Analyzing a software solution from an API perspective" /><published>2021-09-15T00:00:00-05:00</published><updated>2021-09-15T00:00:00-05:00</updated><id>https://apihandyman.io/analyzing-a-software-solution-from-an-api-perspective</id><content type="html" xml:base="https://apihandyman.io/analyzing-a-software-solution-from-an-api-perspective/">&lt;p&gt;I regularly participate to CFP (Call For Proposals) aiming to choose a software solution.
My role is to analyze solutions from an API perspective.
And I do that even if there’s no specific API concern regarding the context in which the CFP is made.
Why doing so and what to look at?
This should be of interest for people having to choose a solution but also to people proposing them.
Indeed, some (corporate) software solution vendors should take this seriously …
Unless they want to finish at the bottom of the list. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-systematically-include-the-api-perspective&quot;&gt;Why systematically include the API perspective&lt;/h1&gt;

&lt;p&gt;Before explaining what to look at when analyzing a software solution from an API perspective, maybe we should talk about why doing so even when there is no obvious and/or specific API concern.&lt;/p&gt;

&lt;p&gt;Most companies having IT systems couldn’t build those IT systems without APIs.
Indeed, most IT systems are composed or more than one brick, more than one software solution.
Some of them being built, some other being bought and deployed on premise or used as a service (SAAS).
But either built or bought, installed or used as a service, a company will have to connect all these pieces of software together.
And what can be used to connect all these pieces across a local network or the internet?
APIs.&lt;/p&gt;

&lt;p&gt;Oh, some may think that this new piece of software, especially a SAAS one which magically solves some needs, will be used totally independently from any other of the IT system’s bricks.
And that may actually be the case … in the beginning.
But in the end, for one reason or another it WILL need to be connected to other pieces of software. 
It’s not a risk, it’s a certainty.&lt;/p&gt;

&lt;p&gt;And if that solutions does not provide APIs …
That may hinder severely an important project, critical for the company.
A pity as one of the competing solutions seen during the CFP 2 years ago actually provided APIs …&lt;/p&gt;

&lt;h1 id=&quot;what-to-look-at&quot;&gt;What to look at&lt;/h1&gt;

&lt;p&gt;Note that this post is based on my “corporate solutions” evaluation experience, you may find totally unexpected elements that would be total science fiction for true API companies like Twilio or Stripe.
So, here are the various topics I look at when analyzing a software solution from an API perspective:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are there APIs?&lt;/li&gt;
  &lt;li&gt;What is the quality of documentation?&lt;/li&gt;
  &lt;li&gt;What is the quality of the design?&lt;/li&gt;
  &lt;li&gt;How the API is secured?&lt;/li&gt;
  &lt;li&gt;Do the APIs cover 100% of features?&lt;/li&gt;
  &lt;li&gt;Can the APIs fulfill hypothetical needs?&lt;/li&gt;
  &lt;li&gt;What is the overall developer experience?&lt;/li&gt;
  &lt;li&gt;What is the pricing model?&lt;/li&gt;
  &lt;li&gt;What are the terms of use?&lt;/li&gt;
  &lt;li&gt;Does the company shows an API Mindset?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;are-there-apis&quot;&gt;Are there APIs?&lt;/h2&gt;

&lt;p&gt;Very first and obvious verification: is there one or more APIs coming with the solution?
That looks like a dead simple question, but you can’t imagine how it is difficult sometimes to verify this.
Sometimes, it’s because the information is deeply hidden somewhere on the company’s website.
That’s why my first move is simple to google “company name API”.&lt;/p&gt;

&lt;p&gt;But it’s not that rare to look at (or google) the company’s website or product’s webpage and find absolutely no information about APIs.
And there are 2 reasons.
First one, there’s absolutely no API at all.
That puts the company to the bottom of the list.
Second one, there are APIs, but you can’t see them unless you ask the sales people.
That’s really annoying, and will make the company loose points in the rankings.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-quality-of-documentation&quot;&gt;What is the quality of documentation?&lt;/h2&gt;

&lt;p&gt;A good API documentation is not only a documentation that explains what you can do with the API (use case documentation), what are all the available operations (reference documentation), or how to get an access token.
A good API documentation starts by being at least visible publicly!
That sounds crazy right?
Unfortunately what we’re used too with most API companies is not yet that obvious for many companies providing corporate solutions.
Having to contact sales to get an access to documentation is really annoying (and that makes you loose points in the rankings).&lt;/p&gt;

&lt;p&gt;And beyond access and content, the form is important too.
I prefer to get a bare Swagger 2.0 (OpenAPI 2.0) JSON file sent by email than an indigestible PDF accessible on the website.
Actually, a documentation that does not comes with a standard OpenAPI (or Swagger) file is quite annoying for me because I need it to make some automatic controls on the design.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-quality-of-the-design&quot;&gt;What is the quality of the design?&lt;/h2&gt;

&lt;p&gt;Having access to the documentation I can evaluate the quality of the design.
Does it respect common practices, it is easy to use, easy to understand.
I practically do an API design review, I’m not looking for perfection but just a good looking API.&lt;/p&gt;

&lt;h2 id=&quot;how-the-api-is-secured&quot;&gt;How the API is secured?&lt;/h2&gt;

&lt;p&gt;What I want is APIs using state of the art security mechanism.
Unfortunately, some companies don’t seem to care about security, providing good old basic authentication for instance.
And that puts the company to the bottom of the list.&lt;/p&gt;

&lt;h2 id=&quot;do-the-apis-cover-100-of-features&quot;&gt;Do the APIs cover 100% of features?&lt;/h2&gt;

&lt;p&gt;Once I know what the API is capable of, I can check if it actually cover 100% of the product features.
It’s not that rare to see solutions that propose APIs only covering a subset of all of their features.
That could be a real problem unless the company shows a roadmap to achieve the 100% (but beware of promises…).&lt;/p&gt;

&lt;h2 id=&quot;can-the-apis-fulfill-hypothetical-needs&quot;&gt;Can the APIs fulfill hypothetical needs?&lt;/h2&gt;

&lt;p&gt;Once I know what the API does (thanks to the documentation), I can imagine some hypothetical but realistic needs that would require to connect the solution to others.
I speak with the business people involved in the CFP to get some ideas.
Then I evaluate if it’s possible and the complexity of such project (if the product lacks of useful APIs/operations you may have to do a lot of work for a simple project).&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-overall-developer-experience&quot;&gt;What is the overall developer experience?&lt;/h2&gt;

&lt;p&gt;Doing all that (checking documentation, analyzing design and imagining hypothetical needs), I’m able to start evaluating the developer experience.
If doing all that was simple, the experience is good, if not, the experience is terrible.
When I see a company providing a state of the art self-service developer portal, that’s a total nirvana (that doesn’t happen often unfortunately)
Being able to actually test the API at this stage is a plus (even if there’s no true dev portal).&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-pricing-model&quot;&gt;What is the pricing model?&lt;/h2&gt;

&lt;p&gt;When evaluating a solution’s API, you have to look beyond the API itself and especially how much it would cost to use them.
That’s probably the most difficult information to find when dealing with corporate software vendors: it’s almost never shown publicly.&lt;/p&gt;

&lt;p&gt;Be aware that most of the time, especially for SAAS solutions but also for on premise (totally crazy!), using the API is not included in the pricing proposal (because the request sent for the CFP usually don’t include the API perspective).
Using the hypothetical needs, you should be able to get an idea of what could cost using the solution’s API.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-terms-of-use&quot;&gt;What are the terms of use?&lt;/h2&gt;

&lt;p&gt;Another thing that is really important to check is the terms of use.
I check what is the API evolution policy (how are handled breaking changes, the delay to update).
There can be too strict limitations regarding the number of API calls, making the solution to your hypothetical needs highly complex to build because you would need to add some cache systems for instance.
But my concerns are not only technical.
For instance a software solution may grant you access to some data that you can’t resell without a huge bump on the bill.&lt;/p&gt;

&lt;h2 id=&quot;does-the-company-shows-an-api-mindset&quot;&gt;Does the company shows an API Mindset?&lt;/h2&gt;

&lt;p&gt;And finally I evaluate the company’s API mindset.
I prefer a company publicly showing it’s work-in-progress-well-designed API than a company hiding its mess hoping customers will not notice it before it’s too late (and that actually exist, I put them to the bottom of the list).
I love when a company actually communicates about its API strategy or its roadmap, it’s not mandatory to actually talk about APIs you just need to show that you want to be part of an ecosystem, that your products can easily be connected to others.&lt;/p&gt;

&lt;h1 id=&quot;analyze-this&quot;&gt;Analyze this&lt;/h1&gt;

&lt;p&gt;For those who have to choose solutions, I hope you found that interesting and that it will help you to choose the right solutions from an API perspective.
For solution vendors, now you know what puts you to the bottom of the list when you see me on a CFP (and so, how to avoid that).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">I regularly participate to CFP (Call For Proposals) aiming to choose a software solution. My role is to analyze solutions from an API perspective. And I do that even if there’s no specific API concern regarding the context in which the CFP is made. Why doing so and what to look at? This should be of interest for people having to choose a solution but also to people proposing them. Indeed, some (corporate) software solution vendors should take this seriously … Unless they want to finish at the bottom of the list.</summary></entry><entry><title type="html">An Api Design Review Is Based On Facts Not Opinions</title><link href="https://apihandyman.io/an-api-design-review-is-based-on-facts-not-opinions/" rel="alternate" type="text/html" title="An Api Design Review Is Based On Facts Not Opinions" /><published>2021-09-08T00:00:00-05:00</published><updated>2021-09-08T00:00:00-05:00</updated><id>https://apihandyman.io/an-api-design-review-is-based-on-facts-not-opinions</id><content type="html" xml:base="https://apihandyman.io/an-api-design-review-is-based-on-facts-not-opinions/">&lt;p&gt;If you’re an API design reviewer and, like the Who, you got a feeling inside that you can’t explain during an API design review, maybe you’re falling in love with the API designer… or more probably: you’re on the verge of giving an opinion.
And that is a problem.
What is the role of an API design reviewer?
Distort API designs to their liking or objectively analyze them based on facts?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;that-annoying-feeling&quot;&gt;That annoying feeling&lt;/h1&gt;

&lt;p&gt;As an API design reviewer, I analyze, more often than, not designs that must be fixed because of wrong needs, some blatant violation of our guidelines, use of totally cryptic vocabulary, unnecessary steps in an API call flow or missing operations, use of non extensible array of string, or a simple typo.
But sometimes, they’re just “not good” and I can’t really explain it unless by saying I would have done it differently.
Sometimes, it’s so different from what I would have done it becomes a really annoying feeling.&lt;/p&gt;

&lt;p&gt;If I try to keep a professional stance, I could say It becomes annoying because I feel in my guts that the designers are heading the wrong way and I want to help them avoid falling into some terrible trap… 
But, to be honest, it’s just because I want to scream “it’s different from my idea, I hate it, that sucks!”.&lt;/p&gt;

&lt;p&gt;Engaging the discussion on such a feeling and with such a state of mind can lead to a sterile argument, because the designers feel that their design is “good”.
And they probably are right to think so, because there’s no problem, no trap.
Hopefully, I’ve learned to avoid such arguments and overcome that really annoying feeling.&lt;/p&gt;

&lt;h1 id=&quot;how-to-live-with-it&quot;&gt;How to live with it&lt;/h1&gt;

&lt;p&gt;I do not remember fondly of the time I was a manager, I’m not made for that, but I learned a few things that are still useful in my daily expert/coach job.
I’ve learned that when you give a task to someone, you don’t tell them how to do it, you describe the expected outcomes.
I have also learned that all people do not think/work the same way and so how the task is done can be different from how you would have done it.
The solution could also be different because you don’t have all the context when giving the task.
All you have to do is actually evaluate if the expected outcome are there to judge the quality of what has been done.&lt;/p&gt;

&lt;p&gt;So, when I have that annoying feeling, just because an API is different from what I would have done, I rethink to what are the expected outcomes of an API design.
An API design is supposed to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fulfill the right needs&lt;/li&gt;
  &lt;li&gt;Be easy to understand&lt;/li&gt;
  &lt;li&gt;Be easy to use&lt;/li&gt;
  &lt;li&gt;Be easily evolvable&lt;/li&gt;
  &lt;li&gt;Conforms to guidelines and common practices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the design currently reviewed objectively checks all those items, there’s no need to argue.
But you can still propose your alternative design just to propose another perspective, but don’t forget to precise that the provided is design is actually correct.
Sometimes designer will says “oh yes, I prefer your version”, or maybe make a counter proposition mixing the 2 options and sometimes they’ll keep their design.
In that case, don’t take that as an insult, be a grown up person, it’s actually their API, not yours (and it’s normal if that still stings a little, you’ll be less an less annoyed as you practice).&lt;/p&gt;

&lt;p&gt;Reviewing that checklist may help you to factually figure the real problem you were feeling in your guts.
If something is factually not checked, then you can dig into that based on facts not just an opinion.
And that is the real job of an API design reviewer.&lt;/p&gt;

&lt;h1 id=&quot;help-people--dont-do-their-job&quot;&gt;Help people , don’t do their job&lt;/h1&gt;

&lt;p&gt;So as an API designer reviewer, you may have feelings and opinions like other humans.
But learn to overcome them by factually thinking about what makes an API design objectively good.
Indeed, you’re not here to design an API but to help people design it.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">If you’re an API design reviewer and, like the Who, you got a feeling inside that you can’t explain during an API design review, maybe you’re falling in love with the API designer… or more probably: you’re on the verge of giving an opinion. And that is a problem. What is the role of an API design reviewer? Distort API designs to their liking or objectively analyze them based on facts?</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 5</title><link href="https://apihandyman.io/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 5" /><published>2021-09-01T00:00:00-05:00</published><updated>2021-09-01T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-5</id><content type="html" xml:base="https://apihandyman.io/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/">&lt;p&gt;Fifth and last post about my first ever (recorded) live coding session given at the Manning API Conference.
Thanks to all the work done, I had a good setup, great visual style, titles over VS Code, speaker’s notes and was able to code at light speed.
But I was hesitant and not fast enough when presenting, I needed to train myself and fine tune, optimize or remove content to make things smooth and keep in given time frame.
And once again VS Code went to the rescue.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference: &lt;a href=&quot;/supercharge-openapi-to-efficiently-describe-apis/&quot;&gt;Supercharge OpenAPI to efficiently describe APIs (click to what it!)&lt;/a&gt;.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;training-as-usual-was-not-easy&quot;&gt;Training as usual was not easy&lt;/h1&gt;

&lt;p&gt;It’s not specific to this coding session, but when I prepare a talk there are always parts that needs more training than others.
It is quite easy when working on slides to just jump to the first slide of the part I need to work on, and again, and again until satisfied.
I can go 1 or 2 slides back if I want.
And I can work on parts almost randomly depending on my mood.
While training, I can also adapt content to shorten/remove some element because it’s too long.&lt;/p&gt;

&lt;p&gt;It was not that easy to do that here.
Jump back and forth was complicated and modifying the content also.&lt;/p&gt;

&lt;h1 id=&quot;jumping-back-and-forth-to-any-step&quot;&gt;Jumping back and forth to any step&lt;/h1&gt;

&lt;p&gt;Jumping to any part of the presentation was complicated in the beginning because when I wanted to practice a specific part I had to re-prepare the OpenAPI file to put it in the state needed for this part. 
If I wanted to go “1 or 2 slides” back I had to carefully remember what to remove in my OpenAPI file.&lt;/p&gt;

&lt;p&gt;At first I thought using branches or tagged commits, but based on a previous experience (for my JQ and OpenAPI series) I knew this was not going to work here.
Indeed, it’s complicated to do a “replace all” across files in separate branches, while it’s dead simple to do that on multiple files in a folder (even when there are sub folders).&lt;/p&gt;

&lt;p&gt;And I already had a good part of the solution: I just had to create a &lt;code&gt;motu.yaml&lt;/code&gt; file in each &lt;code&gt;steps/step-X&lt;/code&gt; folder.
Thanks to the “Next step” task, the OpenAPI file corresponding to the step was copied to the root folder just like index and todo files.
VS Code handled the &lt;code&gt;motu.yaml&lt;/code&gt; file reloading totally seamlessly.
That trick also allowed to magically add code (actual code or comments) when switching to a new step, that was really convenient. 
That also ensured that when switching to a new step, the OpenAPI file was in the expected status even if I had to skip something in previous step.&lt;/p&gt;

&lt;p&gt;I also added new bash scripts and new tasks to be able to go to previous step and restart.
That way I could easily go to the step I wanted to practice.
After a while, once content has been stabilized I also added other scripts and tasks and ended with the followings:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Script triggered&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Go to step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/go.sh $step&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/step-{$step}&lt;/code&gt; content to root level (does nothing if step doesn’t exist). The &lt;code&gt;$step&lt;/code&gt; can be either a number or the step’s name coming from the todo.html files, &lt;code&gt;&quot;More accurate data description (4/15)&quot;&lt;/code&gt; for instance. The tasks shows the list of available steps (hardcoded in &lt;code&gt;tasks.json&lt;/code&gt; file)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Next step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/next.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/step-{current step + 1}&lt;/code&gt; content to root level (does nothing if step doesn’t exist)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Previous step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/previous.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/step-{current step - 1}&lt;/code&gt; content to root level (does nothing if step doesn’t exist)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reload step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/reload.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/step-{current step}&lt;/code&gt; content to root level (useful to check modifications done on current step)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reset step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/reset.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/reset&lt;/code&gt; content to root level (to restart from the beginning)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clean before commit&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/clean.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Remove &lt;code&gt;index.css&lt;/code&gt;, &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;todo.html&lt;/code&gt;, &lt;code&gt;motu.yaml&lt;/code&gt; files from root folder&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I only defined key bindings for Next and Previous step tasks.
The “Go to step” is quite convenient but unfortunately the step list is hardcoded and I only had the idea after the recording (I added it so people using the repo could go to the step they want).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/go-to-step.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;removing-stuff-was-a-pain&quot;&gt;Removing stuff was a pain&lt;/h1&gt;

&lt;p&gt;As I was able to work on each step, I could easily train myself on each step and evaluate the best possible time for each step.
And so I came to the conclusion that I was still not fitting into the time frame, though I had an extra 5 minutes granted by conference organizers, saperlipopette! (french polite curse word).
Thanks to my list of steps and their timing, I had a better vision of what I should modify and so I:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shorten some steps, by for instance starting with a pre-filled basic OpenAPI files or adding snippets&lt;/li&gt;
  &lt;li&gt;Removed some steps not bringing interesting information (like spending 30s explaining the various use of the OpenAPI Spec)&lt;/li&gt;
  &lt;li&gt;Removed some steps that were kind of duplicating other steps or not bringing interesting information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The modifications were easy to do on my list … but handling the impacts on my various files was a bit laborious.
Especially the todo files containing the useful “step X/Y” information.
If I was not in a rush I would have redo everything in order to make such modification simpler …
But sometimes it is better to leave well enough alone (“the best is the enemy of good” as we say in french), it took me less time to fix all that the ugly way than rethink the entire system.&lt;/p&gt;

&lt;h1 id=&quot;recording-celebrating-and-recovering&quot;&gt;Recording, celebrating and recovering&lt;/h1&gt;

&lt;p&gt;And after all that, working weekends and nights (I have a day job and a blog to handle), I was able to do the recording at last, and that went well on second take (the first one was 95% good but I forgot something just in the end… saperlipopette again).
I did not really practiced the full session before the actual recording, as I worked more on separated steps, but with more time to practice I should be able to do this session totally live without problem.
By the way, final tips: don’t forget to put you phone AND you computer in do not disturb mode in order to avoid unwanted notifications when giving or recording a presentation.&lt;/p&gt;

&lt;p&gt;I was really happy when it was at last done.
I was quite proud of this very first coding session though it did not looked as expected and I always see some imperfections and possible improvements.
Being able to talk without having my word for word speech was a also great achievement.&lt;/p&gt;

&lt;p&gt;I was happy but that left me totally exhausted.
I felt just like if I had traveled to the other side of earth, spoke and attended at a in person 2 days conference and suffered jet lag.
It took me more than a week to recover.&lt;/p&gt;

&lt;h1 id=&quot;sharing-successes-and-failures&quot;&gt;Sharing successes and failures&lt;/h1&gt;

&lt;p&gt;But all this was worth the cost; I learned a lot, attendees were happy and I hope that this 5 posts series will help others doing coding sessions!
I hope also that I was able to show you that behind what may look like total perfection, total mastery, there is practice, simple tools but also failures, doubts, curse words … and magic tricks.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Fifth and last post about my first ever (recorded) live coding session given at the Manning API Conference. Thanks to all the work done, I had a good setup, great visual style, titles over VS Code, speaker’s notes and was able to code at light speed. But I was hesitant and not fast enough when presenting, I needed to train myself and fine tune, optimize or remove content to make things smooth and keep in given time frame. And once again VS Code went to the rescue.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 4</title><link href="https://apihandyman.io/live-coding-at-light-speed-with-vs-code/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 4" /><published>2021-08-25T00:00:00-05:00</published><updated>2021-08-25T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-4</id><content type="html" xml:base="https://apihandyman.io/live-coding-at-light-speed-with-vs-code/">&lt;p&gt;This is the fourth post about my first ever (recorded) live coding session given at the Manning API conference.
In this series &lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;second post&lt;/a&gt;, I listed some problems I encountered and started to solve them in &lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;previous post&lt;/a&gt;.
But there are other problems to solve, one of them was that I was not coding and using VS Code fast enough.
In this post, I’ll show you how I solved that using a few VS Code tricks, the most important one being: the absolutely &lt;a href=&quot;https://aarongilbreath.medium.com/a-brief-history-of-the-word-rad-972a989617c8&quot;&gt;rad&lt;/a&gt; custom code snippet feature.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference: &lt;a href=&quot;/supercharge-openapi-to-efficiently-describe-apis/&quot;&gt;Supercharge OpenAPI to efficiently describe APIs (click to what it!)&lt;/a&gt;.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;4 - Live coding at light speed with VS Code&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;mastering-the-command-palette&quot;&gt;Mastering the command palette&lt;/h1&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/palette.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If there is one thing you need to master with VS Code, it’s the command palette.
This is what allows to access all VS Code and its extensions functions quickly.
Use &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on Windows to open it.
Then type what you want to do, the palette will show you relevant actions.&lt;/p&gt;

&lt;p&gt;Once you have used some actions, the palette will show them first, so you just have to use the arrow keys to move down to the one you want.
That allowed me to quickly show the Redoc or SwaggerUI renderings coming with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&quot;&gt;42 Crunch OpenAPI Editor extension&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;copypaste-and-indent&quot;&gt;Copy/Paste and indent&lt;/h1&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/copy-paste-indent.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;At some moment, I had to copy/paste sections of code but that requires fixing indentation, and I was not good at that.
In the beginning I was relying to the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&quot;&gt;Indent Rainbow extension&lt;/a&gt; to give me indications on how to indent after pasting (that extension can really save your life when working with indent-based formats), but it was taking too much time.
Hopefully, I found a faster way to fix indentation on copy/paste:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the lines, but carefully include the full first list. It’s easier to start by the end of selection of go up (do not start selecting at the first word of first line)&lt;/li&gt;
  &lt;li&gt;Put cursor at the beginning of the line where you need to paste&lt;/li&gt;
  &lt;li&gt;Paste&lt;/li&gt;
  &lt;li&gt;Format whole file using &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt; (MacOS) or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt; (Windows). This will fix indentation based on the line above the one where you pasted. But that only works if the whole pasted block is already correctly indenting (relatively).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While writing this post, I realized that I could probably have defined keybindings (as I did to run my custom tasks) to show Redoc or SwaggerUI and gain a few milliseconds.&lt;/p&gt;

&lt;h1 id=&quot;the-tip-you-need-when-openingclosing-terminal&quot;&gt;The tip you need when opening/closing terminal&lt;/h1&gt;

&lt;p&gt;Showing and hiding the terminal can be done with the &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt; shortcut.
That seems quite simple but strangely I had hard time showing and hiding the terminal.
Sometimes it was working, and sometimes not; and that was making me loosing precious seconds.
I was starting to get mad until I figured out what the problem was.
The problem is if the terminal is shown, but has not the focus, the &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt; shortcut will just give it focus. 
Once I started to take care about that and NOT clicking elsewhere than in the terminal when using it, I no more had this problem.&lt;/p&gt;

&lt;h1 id=&quot;the-magic-of-code-snippets&quot;&gt;The magic of code snippets&lt;/h1&gt;

&lt;p&gt;The trick that made me gain much time while coding is &lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets&quot;&gt;user defined snippets&lt;/a&gt;.
That’s a totally rad feature.
Thanks to some configuration, just type “some magic keyword” and boom a complex regex or 20 lines of code appears magically.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/rad.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You can define global or local snippets.
I used local ones defined in &lt;code&gt;.vscode/supercharged-openapi.code-snippets&lt;/code&gt; which is a json file.
A snippet can be a static text but you can also use variables and even choices list (probably among other awesome things I didn’t used yet, check the &lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets&quot;&gt;documentation&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/snippets.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The following example allows to add a “Read an element” operation in the form of the &lt;code&gt;GET /somethings/{somethingId}&lt;/code&gt;.
It is triggered when typing “Read” (&lt;code&gt;prefix&lt;/code&gt;) then hitting the tab key.
There are two variables &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; to provide, note how &lt;code&gt;$1&lt;/code&gt; appears multiple times.
Once you hit tab, you type the first variable value which is filled wherever there’s a &lt;code&gt;$1&lt;/code&gt; in the body.
Hit tab to set &lt;code&gt;$2&lt;/code&gt;.
And don’t forget to hit tab another time to finish.
If you don’t do that last tab, you’ll be unable to use another snippet, it took me a moment to figure that.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;A snippet with variables&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
	&amp;quot;Read an element&amp;quot;: {
		&amp;quot;scope&amp;quot;: &amp;quot;yaml&amp;quot;,
		&amp;quot;prefix&amp;quot;: &amp;quot;Read&amp;quot;,
		&amp;quot;body&amp;quot;: [
			&amp;quot;/$1s/{$1Id}:&amp;quot;,
			&amp;quot;\tget:&amp;quot;,
			&amp;quot;\t\tsummary: Read a $1&amp;quot;,
			&amp;quot;\t\tparameters:&amp;quot;,
			&amp;quot;\t\t\t- name: $1Id&amp;quot;,
			&amp;quot;\t\t\t  in: path&amp;quot;,
			&amp;quot;\t\t\t  required: true&amp;quot;,
			&amp;quot;\t\t\t  schema:&amp;quot;,
			&amp;quot;\t\t\t  \ttype: $2&amp;quot;,
			&amp;quot;\t\tresponses:&amp;quot;,
			&amp;quot;\t\t\t&amp;#39;200&amp;#39;:&amp;quot;,
			&amp;quot;\t\t\t\tdescription: OK&amp;quot;,
			&amp;quot;\t\t\t\tcontent:&amp;quot;,
			&amp;quot;\t\t\t\t\tapplication/json:&amp;quot;,
			&amp;quot;\t\t\t\t\t\tschema:&amp;quot;,
			&amp;quot;\t\t\t\t\t\t\ttype: object&amp;quot;
		]
	},
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Beware of tabs count, the snippet will be magically indented correctly based on where you put it, so there’s no need to add extra tabs.
The example above is supposed to go into &lt;code&gt;paths:&lt;/code&gt; which is at the root level of the document.
So I thought the first line would need a tab (and all the the other ones below too), but no.
The whole body is indented based on first line having no indentation.&lt;/p&gt;

&lt;p&gt;Note also that multiple snippets can match a keyword/key sentence, there will be a drop list to let you choose the one you want (with a full view of the body).
Just don’t forget to look at the one that is chosen to add the right snippet to your code.&lt;/p&gt;

&lt;p&gt;Using snippets generator such as &lt;a href=&quot;https://snippet-generator.app/?description=&amp;amp;tabtrigger=&amp;amp;snippet=&amp;amp;mode=vscode&quot;&gt;this one&lt;/a&gt; can be useful to turn your code template into a snippet.&lt;/p&gt;

&lt;h1 id=&quot;heading-to-last-problem&quot;&gt;Heading to last problem!&lt;/h1&gt;

&lt;p&gt;VS Code never stops to amaze.
I remember that I was totally skeptical at the beginning but as I was using Atom which was not totally meeting my expectations and had huge problem when VS Code showed up (it was 5 years ago I think), I decided to gave it a try and never left it since. 
With all of the extensions, tasks, snippets that’s not only a coding tool but a huge problem solver as you can see in this post series.
And VS Code actually helped me to solve my last problem: rehearsing and fine tuning the presentation before recording.
But that’s a story you’ll see in next and final post of this Surviving my first (recorded) live session series.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">This is the fourth post about my first ever (recorded) live coding session given at the Manning API conference. In this series second post, I listed some problems I encountered and started to solve them in previous post. But there are other problems to solve, one of them was that I was not coding and using VS Code fast enough. In this post, I’ll show you how I solved that using a few VS Code tricks, the most important one being: the absolutely rad custom code snippet feature.</summary></entry><entry><title type="html">Electro Monkeys Podcast - Le Design des APIs Web</title><link href="https://apihandyman.io/electro-monkeys-podcast-le-design-des-apis-web/" rel="alternate" type="text/html" title="Electro Monkeys Podcast - Le Design des APIs Web" /><published>2021-08-25T00:00:00-05:00</published><updated>2021-08-25T00:00:00-05:00</updated><id>https://apihandyman.io/electro-monkeys-podcast--le-design-des-apis-web</id><content type="html" xml:base="https://apihandyman.io/electro-monkeys-podcast-le-design-des-apis-web/">&lt;p&gt;C’est avec un grand plaisir que j’ai répondu à l’invitation de Stéphane Beuret pour parler d’API (en français pour une fois) dans son podcast Electro Monkeys.
On y parle de lavabo, de mon livre (The Design of Web APIs, en anglais lui) mais aussi et surtout de design d’API, de sécurité, cycle de vie et gestion des erreurs.
Toutes ces choses auxquelles il faut penser pour faire de bonnes API Web.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>Stéphane Beuret &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">C’est avec un grand plaisir que j’ai répondu à l’invitation de Stéphane Beuret pour parler d’API (en français pour une fois) dans son podcast Electro Monkeys. On y parle de lavabo, de mon livre (The Design of Web APIs, en anglais lui) mais aussi et surtout de design d’API, de sécurité, cycle de vie et gestion des erreurs. Toutes ces choses auxquelles il faut penser pour faire de bonnes API Web.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 3</title><link href="https://apihandyman.io/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 3" /><published>2021-08-18T00:00:00-05:00</published><updated>2021-08-18T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-3</id><content type="html" xml:base="https://apihandyman.io/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/">&lt;p&gt;Third post about my first ever (recorded) live coding session given at the Manning API conference.
In &lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;previous post&lt;/a&gt;, I encountered various problems.
Two of them were related to not delivering the session like one of my regular slide deck presentation.
I wanted to add titles and have speaker’s notes.
In this post, I’ll show you how I solved those two problems with OBS, VS Code and a little bit of magic.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference: &lt;a href=&quot;/supercharge-openapi-to-efficiently-describe-apis/&quot;&gt;Supercharge OpenAPI to efficiently describe APIs (click to what it!)&lt;/a&gt;.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;adding-titles-to-avoid-loosing-attendees&quot;&gt;Adding titles to avoid loosing attendees&lt;/h1&gt;

&lt;p&gt;OK, that was not the most important problem, but I care a lot about how my presentations look like: how they can be beautiful but also readable. 
So though this was a no slides session, I wanted to provide some indications about what was happening.
I needed to show some title, like “Describe once (EXPERT): Read/Write with same schema”, as I have on my regular slide.
But this time, I was not showing pre-made slides using Google Slides but coding in VS Code.
How to add good looking titles in that context?
By taking advantage of both OBS and VS Code features.&lt;/p&gt;

&lt;h2 id=&quot;showing-titles-above-vs-code&quot;&gt;Showing titles above VS Code&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/magic.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In OBS, you can add various sources in a scene, I already had 3 in my MacBook scene:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An &lt;em&gt;Image&lt;/em&gt; source: the foreground Manning provided to me&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;Video Capture Device&lt;/em&gt; source: my webcam (or my IPhone)&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;Display Capture&lt;/em&gt; source: my MacBook display cropped on VS Code window titled “Supercharged OpenAPI” (By the way, regarding capturing VS Code, during my tests I also tried the &lt;em&gt;Window Capture&lt;/em&gt; source and was not really satisfied with it. There was a huge lag, especially when I was scrolling.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But there are other types of sources, as you can see in the screen capture above, the one that caught my eye when trying to find a solution for my idea was the &lt;em&gt;Browser&lt;/em&gt; source.
I created a simple &lt;code&gt;index.html&lt;/code&gt; file containing a “WTF it works!” level 1 header in the body (yes, I tend to curse in my code when testing) then started a &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;simple web server&lt;/a&gt; in the folder containing that file. 
In OBS, I added a &lt;em&gt;Browser&lt;/em&gt; source to my MacBook scene.
In the configuration window, I set up the URL to target &lt;code&gt;http://localhost:8080/index.html&lt;/code&gt;, and set width to 1980 (pixels) and height to 100.
There’s some custom CSS that comes by default, I didn’t modify it and hit OK.
Once added, I moved the new source in the scene on top of the zone for my screen and resized it to fit in the reserved space.
Finally in the “Sources” panel, I renamed the new source to “Title” (by right clicking on it and choosing rename).
And I reordered the sources to put “Title” in the “Template” folder, putting above the Display Capture Source (the new source hiding the VS Code window title) but below the Image source.&lt;/p&gt;

&lt;p&gt;So I had my title, but it was a static one.&lt;/p&gt;

&lt;h2 id=&quot;updating-titles-poc&quot;&gt;Updating titles POC&lt;/h2&gt;

&lt;p&gt;I thought I could find a configuration to trigger a refresh at regular interval in OBS, but there’s actually no such configuration.
Hopefully, I remembered that while I was reading some post about useful VS Code extensions, the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Live Server&lt;/a&gt; extension caught my eye.
This extension allows to start a web server in your workspace and it includes a live refresh out of the box.
That means a webpage loaded through this web server will be updated automatically in the browser when something change in the workspace.
So once the extension installed and started, I modified the Browser source configuration in OBS to target this web server, and I was still able to see the “WTF it works!” title.
Then I modified the HTML file by replacing the title with “WTF it has been updated!”, hit save …
And the title has been updated in OBS seamlessly!&lt;/p&gt;

&lt;p&gt;Now that my proof of concept (POC) worked, I needed to show the real titles and switch to the next one when needed but without the attendees noticing anything.&lt;/p&gt;

&lt;h2 id=&quot;updating-titles-magically-during-the-session&quot;&gt;Updating titles magically during the session&lt;/h2&gt;

&lt;p&gt;What I did is quite ugly, it’s a very first solution that would deserve to be improved (it will be improved!).
But it works.
The solution is based on static files, an ugly shell script, VS Code custom tasks and custom key bindings.&lt;/p&gt;

&lt;h3 id=&quot;first-write-some-ugly-shell&quot;&gt;First, write some ugly shell&lt;/h3&gt;

&lt;p&gt;In a &lt;code&gt;steps&lt;/code&gt; folder, I created sub-folders named &lt;code&gt;step-1&lt;/code&gt; to &lt;code&gt;step-19&lt;/code&gt; (because there were 19 steps in my TOC … at that time) and then put an &lt;code&gt;index.html&lt;/code&gt; file in each one.
Obviously, each file contained the title to be shown at each step (title coming from my TOC).&lt;/p&gt;

&lt;p&gt;Then I wrote the ugliest possible bash script named &lt;code&gt;next.sh&lt;/code&gt; (in &lt;code&gt;steps&lt;/code&gt;).
In its most basic version, this script did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checking if a &lt;code&gt;current.txt&lt;/code&gt; file exists, if not creating it and putting &lt;code&gt;0&lt;/code&gt; in it&lt;/li&gt;
  &lt;li&gt;Reading the &lt;code&gt;current.txt&lt;/code&gt; file, adding &lt;code&gt;1&lt;/code&gt; to its value and updating it&lt;/li&gt;
  &lt;li&gt;Copying the content of &lt;code&gt;step-{new value}&lt;/code&gt; to workspace root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Afterward, I added some controls to do nothing and output some warning when the next step actually doesn’t exist in the &lt;code&gt;steps&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;The ugly next.sh script&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# That&amp;#39;s a trick I use in all my shell script
# To get the script actual folder
SCRIPT_DIR=&amp;quot;$( cd &amp;quot;$( dirname &amp;quot;${BASH_SOURCE[0]}&amp;quot; )&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; pwd )&amp;quot;

# Setting root dir and current.txt variables
ROOT_DIR=$SCRIPT_DIR/..
CURRENT_FILE=$SCRIPT_DIR/current.txt

# If current.txt doesn&amp;#39;t exist, creating it
if [[ -f $CURRENT_FILE ]]
then
    echo &amp;quot;not first step&amp;quot;
else
    echo &amp;quot;first step&amp;quot;
    echo &amp;quot;0&amp;quot; &amp;gt; $CURRENT_FILE
fi

# Adding 1 to current.txt value
CURRENT_STEP=`cat $CURRENT_FILE`
CURRENT_STEP=$((CURRENT_STEP+1))
CURRENT_DIR=&amp;quot;$SCRIPT_DIR/step-$CURRENT_STEP&amp;quot;
echo $CURRENT_STEP &amp;gt; $CURRENT_FILE
echo &amp;quot;step $CURRENT_STEP, DIR $CURRENT_DIR&amp;quot;

# Checking the next step actually exists
if [[ -d &amp;quot;$CURRENT_DIR&amp;quot; ]]
then
    # Copying everything in step-X folder to root folder
    echo &amp;quot;step exists&amp;quot;
    cp &amp;quot;$CURRENT_DIR&amp;quot;/* &amp;quot;$ROOT_DIR&amp;quot;
else
    echo &amp;quot;no more steps&amp;quot;
fi&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So, running the &lt;code&gt;steps/next.sh&lt;/code&gt; script (don’t forget to &lt;code&gt;chmod u+x&lt;/code&gt; it, like I always do) I could change title from step X to step X+1.&lt;br /&gt;
But how to run this script while doing the session?
I couldn’t open a terminal and run it when needed, that wouldn’t be very convenient.&lt;/p&gt;

&lt;h3 id=&quot;second-automate-with-vs-code-task&quot;&gt;Second, automate with VS Code task&lt;/h3&gt;

&lt;p&gt;Hopefully, I already partially knew how to solve that because in order to optimize my Jekyll workspace for the apihandyman.io blog I use &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks#_custom-tasks&quot;&gt;VS Code Custom tasks&lt;/a&gt; to run bach scripts.
So I created a &lt;code&gt;.vscode&lt;/code&gt; folder (its the standard folder holding VS Code stuff) and added the following &lt;code&gt;tasks.json&lt;/code&gt; file. 
This file define the custom tasks that will be available when this workspace/folder is opened in VS Code.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;.vscode/tasks.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;2.0.0&amp;quot;,
  &amp;quot;tasks&amp;quot;: [
    {
      &amp;quot;label&amp;quot;: &amp;quot;Next step&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;steps/next.sh&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
        &amp;quot;reveal&amp;quot;: &amp;quot;never&amp;quot;,
        &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;
      },
      &amp;quot;problemMatcher&amp;quot;: []
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now instead of opening a terminal and typing a command line to run the script, I could open VS Code command palette (&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on Windows) and choose &lt;code&gt;Tasks: Run task&lt;/code&gt;, then choose the “Next step” one.
That actually runs the shell command &lt;code&gt;steps/next.sh&lt;/code&gt; and that is done silently thanks to the &lt;code&gt;presentation.reveal: never&lt;/code&gt;.
In the beginning, I actually set &lt;code&gt;presentation.reveal: always&lt;/code&gt; to be sure that something was actually happening.
That’s better but still cumbersome, I didn’t want people watching me do that even if that’s really quick.&lt;/p&gt;

&lt;h3 id=&quot;third-add-a-little-bit-of-shortcut-magic&quot;&gt;Third, add a little bit of shortcut magic&lt;/h3&gt;

&lt;p&gt;VS Code allows to customize keyboard shortcuts and even define ones to trigger tasks (check &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks#_binding-keyboard-shortcuts-to-tasks&quot;&gt;documentation here&lt;/a&gt;).
Note that unlike tasks that can be configured locally inside a workspace/folder, key bindings are only defined globally.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/shortcuts.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To show shortcuts configuration use &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt; on Windows.
Then click on the file icon on top right corner to see the json content of your custom configuration (&lt;code&gt;keybindings.json&lt;/code&gt; file).&lt;/p&gt;

&lt;p&gt;In order to trigger my “Next step” task when typing &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, I modified my configuration as follow:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;keybindings.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;// Place your key bindings in this file to override the defaults
[
    {
        &amp;quot;key&amp;quot;: &amp;quot;ctrl+m&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.action.tasks.runTask&amp;quot;,
        &amp;quot;args&amp;quot;: &amp;quot;Next step&amp;quot;
    }
]&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that before choosing &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, I actually tested a few other shortcuts before finding one that was not already used.
To check if a key binding already exists, type it in the text field above the lists as shown in the screenshot above.&lt;/p&gt;

&lt;p&gt;That way, I could be like “blah blah blah, and now &lt;em&gt;next topic&lt;/em&gt;” … while magically changing the title with &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;styling-titles&quot;&gt;Styling titles&lt;/h2&gt;

&lt;p&gt;I could change my title but it was simple black text on white background, I wanted something with more style and if possible matching VS Code Style.
Hopefully, while configuring VS Code to use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=webrender.synthwave-x-fluoromachine&quot;&gt;Synthwave x Fluoromachine theme&lt;/a&gt;, I discovered that VS Code theming relies on good old CSS and that this theme CSS was located in &lt;code&gt;$HOME/.vscode/extensions/webrender.synthwave-x-fluoromachine-0.0.12/synthwave-x-fluoromachine.css&lt;/code&gt;.
I copy/pasted the file’s content into a &lt;code&gt;index.css&lt;/code&gt; file in my workspace and added it to my index.html files then used some css classes defined for this theme: &lt;code&gt;monaco-editor&lt;/code&gt; on body then &lt;code&gt;mtk6&lt;/code&gt;, &lt;code&gt;mtk7&lt;/code&gt; and &lt;code&gt;mtk8&lt;/code&gt; on the various elements in my title, et voilà!
I now had shiny neon styled titles.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Styling index.html&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-html line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;index.css&amp;quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class=&amp;quot;monaco-editor&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;
            &amp;lt;span class=&amp;quot;mtk7&amp;quot;&amp;gt;@apihandyman&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;mtk6&amp;quot;&amp;gt; Supercharged OpenAPI&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;quot;section&amp;quot; class=&amp;quot;mtk8&amp;quot;&amp;gt;A basic OpenAPI File&amp;lt;/span&amp;gt;
        &amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I was quite satisfied until I realized that the blue text (&lt;code&gt;mtk6&lt;/code&gt;) had not the neon effect (attention to details is both my super power and my curse).
I’m definitely not a CSS expert, but I’m damn good at copy/pasting.
So, I compared its definition with the two other &lt;code&gt;mtk&lt;/code&gt;, and notice a difference: the &lt;code&gt;text-shadow&lt;/code&gt; of the blue class had less parameters.
The neon effect is actually achieved by adding shadows of different colors. 
So I added the missing values, struggle a bit to choose the various colors but I ended with the following &lt;code&gt;text-shadow&lt;/code&gt; that looked great!&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Styling index.html&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-html line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;text-shadow: 0 0 2px #100c0f, 0 0 3px #61e2ff, 0 0 5px #61e2ff, 0 0 10px #03edf933;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;adding-speakers-note-to-avoid-forgetting-something&quot;&gt;Adding speaker’s note to avoid forgetting something&lt;/h1&gt;

&lt;p&gt;When I do a “regular” presentation, you may not notice it when seeing me on stage or watching me on a video, but I heavily rely on my speaker’s notes.
There’s my full speech there on each slide with some other information such as timing or “CLICK” when there is an animation or a transition to trigger at a specific moment in a sentence.
The more I practice a talk, the less I need them but I’m relieved to just know they are there if needed.&lt;/p&gt;

&lt;p&gt;Unfortunately, there are no “speaker’s notes” in VS Code and I was struggling to not forget something to say or to do.&lt;/p&gt;

&lt;h2 id=&quot;the-todo-attempt&quot;&gt;The Todo+ attempt&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/todo-v1.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;My first attempt in order to avoid forgetting something was to use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-todo-plus&quot;&gt;Todo+&lt;/a&gt; extension.
I created a steps.todo file basically containing my TOC.
The idea was to have the Todo+ panel opened while coding the OpenAPI file.
But that was not really convenient because it was visible to attendees and occupying space that I desperately needed.
I though to hide it by cropping the VS Code window in OBS but that would have possible hidden a space where I could have wanted to show something.
It was also not really convenient as, in order to keep the todo list usable for me, I had to open/close tasks folders.&lt;/p&gt;

&lt;h2 id=&quot;the-todohtml--ipad-solution&quot;&gt;The todo.html + iPad solution&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/todo-v2.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;My second idea was to use almost the same trick as for the titles.
I added a &lt;code&gt;todo.html&lt;/code&gt; file in each &lt;code&gt;steps/step-x&lt;/code&gt; folder.
That way when I was using the “Next step” task, not only it was copying the &lt;code&gt;index.html&lt;/code&gt; file of the step to the root folder, it was also copying the &lt;code&gt;todo.html&lt;/code&gt; file too.
Having a browser showing &lt;code&gt;http://localhost:5500/todo.html&lt;/code&gt; allowed to me have speaker’s notes updated at each step just like titles.&lt;/p&gt;

&lt;p&gt;In order to keep those notes out of the way but still allowing me to look at them without loosing eye contact with my main screen and its web cam, I used the “sidecar” feature of my iPad.
All that is needed is to plug the iPad to the MacBook with a USB cable then go to display preferences, choose the iPad as an Airplay display.
Don’t forget to position it relatively to other screens as it is in reality in order to keep moving mouse to it simple.
And you’re done you have a third (or second) display screen.
Note that sidecar can be used over wifi but I never had satisfying result with it (maybe my wifi is not fast enough).&lt;/p&gt;

&lt;p&gt;Note that as OBS is able to crop on a specific window, I probably could had both VS Code and todo on my MacBook display.
But I wanted to test the side car, and it was working, so I moved on to next problem to solve.&lt;/p&gt;

&lt;p&gt;I choose to use the same style as for the titles though is was only visible to my eyes.
I also used various emojis to “type” the actions to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✏️ (pen) to write code&lt;/li&gt;
  &lt;li&gt;⌨️ (keyboard) to use the terminal&lt;/li&gt;
  &lt;li&gt;📺 (old TV) to show a rendering og the file (with Redoc or SwaggerUI)&lt;/li&gt;
  &lt;li&gt;💬 (Speech bubble) to say something&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-to-next-problem&quot;&gt;Heading to next problem&lt;/h1&gt;

&lt;p&gt;With all that I was totally satisfied with the style of the session and I was as comfortable as delivering a regular slide deck session thanks to my speaker’s note.
In next post, I’ll show you how I was able to code at light speed.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Third post about my first ever (recorded) live coding session given at the Manning API conference. In previous post, I encountered various problems. Two of them were related to not delivering the session like one of my regular slide deck presentation. I wanted to add titles and have speaker’s notes. In this post, I’ll show you how I solved those two problems with OBS, VS Code and a little bit of magic.</summary></entry></feed>