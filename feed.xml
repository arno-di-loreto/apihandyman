<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-07-21T07:10:01-05:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">An API Gateway alone will not secure your API</title><link href="https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api/" rel="alternate" type="text/html" title="An API Gateway alone will not secure your API" /><published>2021-07-21T00:00:00-05:00</published><updated>2021-07-21T00:00:00-05:00</updated><id>https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api</id><content type="html" xml:base="https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api/">&lt;p&gt;How many times people realized that an API was not so secured despite being exposed on an API gateway?
Too many times.
While being a must have to securely expose APIs, an API gateway will not do all the security work for you.
Security in general, and API security in particular, is a matter for everyone.
Let’s see what is the job of an API gateway and what you still have to do to actually securely expose APIs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;whats-an-api-gateways-job&quot;&gt;What’s an API gateway’s job?&lt;/h1&gt;

&lt;p&gt;In its most usual form, an API gateway is a proxy that sits between server applications exposing APIs and their consumer applications (they could be other server applications, mobile applications, web applications or whatever).
An API gateway may bring features such as logging, monitoring, rate limiting, simple connection to API catalogue or API developer portal (sometimes bundled with it), request/response transformations (we’ll talk more about that terrible idea in a later post) and more.
But these are only &lt;em&gt;additional&lt;/em&gt; features, an API gateway’s core job is security.&lt;/p&gt;

&lt;h2 id=&quot;a-guard-at-the-gate&quot;&gt;A guard at the gate&lt;/h2&gt;

&lt;p&gt;An API gateway’s fundamental role is to ensure that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only registered consumer applications can consume the exposed APIs&lt;/li&gt;
  &lt;li&gt;Each registered consumer application only consumes the API(s) it is allowed to&lt;/li&gt;
  &lt;li&gt;And each registered consumer application only use an API’s operations it is allowed to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, if an API gateway exposes a CRM (Customer Relationship Management) and a Contract APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unregistered consumers won’t be able to consume any of those APIs&lt;/li&gt;
  &lt;li&gt;A registered consumer may be allowed to consume only the CRM API and not the Contract one.&lt;/li&gt;
  &lt;li&gt;This registered consumer allowed to consume the CRM API may be allowed to only call “Search customers” and “Read customer” operations but not the “Create customer” one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-security-languages-interpret&quot;&gt;A “security languages” interpret&lt;/h2&gt;

&lt;p&gt;In order to make API calls, a consumer must provide a valid access token along with its requests.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;You must return here with a shrubbery... or else you will never pass through this wood... &lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;Knight of Ni, Monty Python's and The Holy Grail&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;A registered consumer request an access token using its credentials, if end users are involved the API gateway will talk to an identity provider to authenticate them.
The obtained access token is a proof that this consumer is allowed to consume some APIs exposed on the gateway in the name of someone.
On every call, the consumer sends this access token along with its request.
A call will only be transmitted to the implementation if the token is still valid (it may have expired) and linked to a consumer being allowed to use the API’s operation mentioned in the request.&lt;/p&gt;

&lt;p&gt;To achieve that, an API gateway may have to speak “Oauth 1.0”, “Oauth 2.0”, “Oauth 2.1”, “SAML”, “OpenID Connect”, etc… with consumer applications and/or identity providers.
It handles that complexity on the behalf of the server application exposing the API.
This server application, the API’s implementation, will receive only authorized calls without having to care about which “security languages” are involved.&lt;/p&gt;

&lt;h1 id=&quot;whats-your-job&quot;&gt;What’s your job?&lt;/h1&gt;

&lt;p&gt;An API gateway simplifies heavily the work for teams building the server applications exposing APIs as they don’t have to code to manage complex security protocols or frameworks.
But it does not mean at all that an API gateway handles ALL security aspects.
Yes, I’m deeply sorry, but even when using an API gateway, you still have to work on security.&lt;/p&gt;

&lt;h2 id=&quot;configure-and-administrate-consumers&quot;&gt;Configure and administrate consumers&lt;/h2&gt;

&lt;p&gt;It’s still up to you to actually configure and administrate consumers.
Indeed, you must ensure that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adapted granularity is used when declaring consumers. For a “customer mobile application” will you declare a single consumer (terrible idea), or one for each mobile OS (less terrible but still terrible) or one for each OS and application version (better) or …&lt;/li&gt;
  &lt;li&gt;Only the API owners can actually let consumers use their APIs. It’s not unusual to forget that when building more or less centralized API gateway platform.&lt;/li&gt;
  &lt;li&gt;Consumers access rights are revoked when they should. When an old version of a mobile application becomes unsupported for instance.&lt;/li&gt;
  &lt;li&gt;Adapted security mode are used. Letting people use the Oauth 2.0 Customer Credentials flow in a mobile application or single page web application is a terrible idea that is too often seen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But even doing that is not enough, there is still work to do beyond the API gateway.&lt;/p&gt;

&lt;h2 id=&quot;build-secured-implementations&quot;&gt;Build secured implementations&lt;/h2&gt;

&lt;p&gt;When the API’s implementation receives a call from the API gateway that means the API gateway considers it’s a valid one.
But that does not means it’s actually valid from the implementation’s perspective.
Basically, at implementation level you have to check every single piece of data to ensure that it is coherent with what you know about the consumer and end user.&lt;/p&gt;

&lt;p&gt;If a consumer sends a &lt;code&gt;GET /crm/customers/12345&lt;/code&gt;, the gateway checks the access token is linked to a consumer that is allowed to call the CRM API and more precisely the “Read customer” operation, hence &lt;code&gt;GET /crm/customers/{customerId}&lt;/code&gt;.
But the API gateway will not check that the consumer or the end user (if any) are actually allowed to get information about that specific &lt;code&gt;12345&lt;/code&gt; customer.
It’s up to the implementation to check that.
This can be done as long as the API gateway provides information about the consumer and end user along the transmitted request.
And just in case: no, replacing &lt;code&gt;12345&lt;/code&gt; by a more complex id such as &lt;code&gt;7a31bfa6-463e-47e0-bf20-193086d5a29d&lt;/code&gt;, does not allow to not do this check.&lt;/p&gt;

&lt;p&gt;And the same goes for a &lt;code&gt;POST /contract/contracts&lt;/code&gt; request which is supposed to create a 1 billion Euros life insurance contract.
It’s up to the implementation to check that consumer or end user are allowed to create a contract with such amount and not the API gateway.&lt;/p&gt;

&lt;p&gt;By the way, do we actually need to expose those two features?&lt;/p&gt;

&lt;h2 id=&quot;design-secured-apis&quot;&gt;Design secured APIs&lt;/h2&gt;

&lt;p&gt;Before API implementation and API gateway, security must be dealt with during the design of APIs.&lt;/p&gt;

&lt;p&gt;It’s up to you to choose if you’ll create an API or not and which feature you’ll put in it or not.
You’re under no obligation to create APIs for everything and expose every feature of any system.&lt;/p&gt;

&lt;p&gt;And once you’re sure about what you want to expose, be sure sure to choose secured design and representation.
For instance avoid putting sensitive data such as personal data in path or query parameters, indeed a &lt;code&gt;GET /customers/{socialSecurityNumber}&lt;/code&gt; will be logged by any equipment between consumer and provider.&lt;/p&gt;

&lt;p&gt;And last but not least, it is also up to you to choose how the access to the API will be partitioned.
You have to design the scopes that grants access to all of or a subset of the API’s operations.
These scopes will be used by the gateway to decide if a consumer is allowed to use an operation or not.
For instance, you can put all of the read operations of the CRM API under the “crm:read_only” scope, the “Create customer” operation under the “crm:partner” and the “Create customer”, “Update customer” and “Delete customer” under the “crm:admin” scope.
A consumer which has been granted the “crm:partner” scope can only do “Create customer” and not do “Search customers” or “Delete customer”.&lt;/p&gt;

&lt;h1 id=&quot;an-api-gateway-is-not-the-api-security-panacea&quot;&gt;An API gateway is not the API security panacea&lt;/h1&gt;

&lt;p&gt;So, putting an API gateway in front of your API’s implementation may makes your life easier but don’t be fooled, you’ll still have to actively work on security yourself.
API security concerns the API gateway configuration (consumers, security mode, lifecycle), the implementation (application/fine grained security) and the design (what you expose and how you expose it).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">How many times people realized that an API was not so secured despite being exposed on an API gateway? Too many times. While being a must have to securely expose APIs, an API gateway will not do all the security work for you. Security in general, and API security in particular, is a matter for everyone. Let’s see what is the job of an API gateway and what you still have to do to actually securely expose APIs.</summary></entry><entry><title type="html">What’s the problem with required query parameters?</title><link href="https://apihandyman.io/what-s-the-problem-with-required-query-parameters/" rel="alternate" type="text/html" title="What’s the problem with required query parameters?" /><published>2021-07-14T00:00:00-05:00</published><updated>2021-07-14T00:00:00-05:00</updated><id>https://apihandyman.io/avoid-required-query-parameters-when-designing-apis</id><content type="html" xml:base="https://apihandyman.io/what-s-the-problem-with-required-query-parameters/">&lt;p&gt;When reviewing API designs, I often encounter operations such as &lt;code&gt;GET /resources?queryParameter=value&lt;/code&gt; where the query parameter is required.
Consumers won’t be able to make that request without providing this parameter and a correct value; that’s usually a problem.
Indeed, at best it will ruin developer experience and at worst it is a sign of design smell.
Let’s see why.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-are-query-parameters-and-how-they-are-usually-used&quot;&gt;What are query parameters and how they are usually used&lt;/h1&gt;

&lt;p&gt;According to &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-3.4&quot;&gt;RFC3986 Uniform Resource Identifier (URI): Generic Syntax&lt;/a&gt;, the “query component” of a URI is everything that goes after a question mark (&lt;code&gt;?&lt;/code&gt;).
The elements coming after that question mark are often in the form of a &lt;code&gt;key=value&lt;/code&gt; pair. 
That means in &lt;code&gt;https://api.eternia.com/characters?hasMagicalPowers=true&lt;/code&gt;, &lt;code&gt;hasMagicalPowers&lt;/code&gt; is a query parameter and its value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Query parameters can be used in any type of HTTP requests but in most REST/RESTful/RESTish APIs, such query parameters are added on operations such as &lt;code&gt;GET /characters&lt;/code&gt;, that represents something like “list characters” or “search for characters”, in order to allow consumers to filter the results.
While a &lt;code&gt;GET /characters&lt;/code&gt; is supposed to return all characters, a &lt;code&gt;GET /characters?hasMagicalPowers=true&lt;/code&gt; will only return the ones having magical powers.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt;
    If you wonder why &lt;code&gt;/characters&lt;/code&gt; and not &lt;code&gt;/character&lt;/code&gt;
, read &lt;a class=&quot;post-link&quot; href=&quot;/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/&quot;&gt;/resources rules and /resource sucks ... or is it the other way around?&lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&quot;required-query-parameters-ruin-dx&quot;&gt;Required query parameters ruin DX&lt;/h1&gt;

&lt;p&gt;I have a rule of thumb when designing APIs: whatever the type of inputs, the less you request, the better because that help people do their first request and later ones without having to think too much.
That is key when you want to build the best possible DX (developer experience).
And query parameters are no exception.&lt;/p&gt;

&lt;p&gt;In the example above, turning &lt;code&gt;hasMagicalPowers&lt;/code&gt; into a required query parameters will first lead to people failing their very first request because they expect that a &lt;code&gt;GET /characters&lt;/code&gt; can be done without any query parameters.
Why would they expect that?
Because it’s the most encountered behavior.
That does not seem much, that’s not exactly “ruining” the developer experience but that’s quite annoying.
This could be the straw that breaks the camel’s back, people may go elsewhere especially if there are other APIs offering the same services without such silly behavior.&lt;/p&gt;

&lt;p&gt;And second problem, that leads to consumers having to make at least 2 requests in order to get all characters (pagination set aside), one to get those having magical powers and another one to those who haven’t.
That is not really good for developer experience, it may actually ruin it.
Obviously, in such situation, most of designers would never do that as beyond crippling developer experience, such design does not make any sense at all from this domain (Masters of the Universe franchise’s characters) perspective.&lt;/p&gt;

&lt;p&gt;But there are other use cases that are less obvious.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Masters_of_the_Universe&quot;&gt;Masters of the Universe&lt;/a&gt; franchise had multiple TV cartoon installments (and no, the live action movie does not exist).
Let’s take for granted that the original one made at the beginning of the 80s is the most known and loved one.
Let’s take also for granted one that people looking for information about that franchise’s characters want to be able to get information about the characters of that specific version.&lt;/p&gt;

&lt;p&gt;That means when calling &lt;code&gt;GET /characters&lt;/code&gt;, it could make sense to filter the results based on the TV show and so add a &lt;code&gt;tvShow&lt;/code&gt; query parameter that could take values such as &lt;code&gt;80s_original_that_rules&lt;/code&gt;, &lt;code&gt;90s_version_that_sucks&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;.
Some designer could be tempted to make this query parameter a required one, letting consumers choose which characters list they want.
But the rule of thumb is to request the less possible information to consumers.
So let’s avoid this by keeping the &lt;code&gt;tvShow&lt;/code&gt; parameter optional and using the most expected default value, obviously &lt;code&gt;80s_original_that_rules&lt;/code&gt;.
That way, consumers could do a successful &lt;code&gt;GET /characters&lt;/code&gt; without thinking much, the implementation filling the gap returning the results that would please most consumers (characters from the 80s version).
After that, having read the documentation further, consumers may use the other possible values of &lt;code&gt;tvShow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In a more real use case, the problem could come from a date filter on time series data.
Let’s say that for performance reasons for instance, the implementation absolutely needs a date to returns a subset of all available data.
In such a case, keep the parameter optional but choose the “best” default date to use if it is not provided by consumers.
It could be today, first day of the month, last whatever processing date or whatever date will make sense from a business rule perspective and that will please most consumers.&lt;/p&gt;

&lt;p&gt;Whatever the query parameter, there is most of the time a way to keep it optional… if that parameter is not the sign of something more nasty.&lt;/p&gt;

&lt;h1 id=&quot;required-query-parameters-can-be-signs-of-design-smells&quot;&gt;Required query parameters can be signs of design smells&lt;/h1&gt;

&lt;p&gt;Indeed besides possibly “ruining” the developer experience, a required parameter can be a sign of design smell.&lt;/p&gt;

&lt;p&gt;Let’s analyse the &lt;code&gt;GET /enemies?of=characterId&lt;/code&gt; request which has an &lt;code&gt;of&lt;/code&gt; required query parameter.
It is supposed to return the enemies of someone, for example Skeletor and Beast Man are enemies of He-Man (&lt;code&gt;GET /enemies?of=he-man&lt;/code&gt;) while He-Man and Teela are enemies of Beast Man (&lt;code&gt;GET /enemies?of=beast-man&lt;/code&gt;).
The &lt;code&gt;of&lt;/code&gt; parameter being required, my API design reviewer senses tell me there’s something wrong without even thinking about the purpose of this operation.&lt;/p&gt;

&lt;p&gt;My first attempt is usually to check if the required parameter can be turned into an optional one.
Here, returning the enemies of “no one” doesn’t make sense.
Returning the enemies of a default character also makes no sense at all.
So that does not smell good.&lt;/p&gt;

&lt;p&gt;Indeed, if any character can be seen as an enemy by any other character, the resource that should be manipulated when representing “listing the enemies of someone”, is not just “enemies” but the “enemies of someone”.
That means the resource path should be something like &lt;code&gt;/characters/{characterId}/enemies&lt;/code&gt; instead of just &lt;code&gt;/enemies&lt;/code&gt; (the character).&lt;/p&gt;

&lt;p&gt;Based on my experience, when the query parameter cannot be removed that is most of the time the sign of a “wrong resource identified” and the fix is usually adding a level in the resource’s path hierarchy.&lt;/p&gt;

&lt;h1 id=&quot;think-twice-before-adding-a-required-query-parameter&quot;&gt;Think twice before adding a required query parameter&lt;/h1&gt;

&lt;p&gt;So the next time you’re tempted to make a query parameter required, double check that you’re using the right resource and especially not missing a level in your resources hierarchy.
If the parameter actually makes sense, think about what could be the more useful value for most consumers and use it as default when that parameter is not provided.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">When reviewing API designs, I often encounter operations such as GET /resources?queryParameter=value where the query parameter is required. Consumers won’t be able to make that request without providing this parameter and a correct value; that’s usually a problem. Indeed, at best it will ruin developer experience and at worst it is a sign of design smell. Let’s see why.</summary></entry><entry><title type="html">API Designer Experience, the other DX</title><link href="https://apihandyman.io/api-designer-experience-the-other-dx/" rel="alternate" type="text/html" title="API Designer Experience, the other DX" /><published>2021-07-07T00:00:00-05:00</published><updated>2021-07-07T00:00:00-05:00</updated><id>https://apihandyman.io/designer-experience--the-other-dx</id><content type="html" xml:base="https://apihandyman.io/api-designer-experience-the-other-dx/">&lt;p&gt;Nobody expects the API inquisition!
Literally.
When creating public or private APIs, an organization must work hard on creating the best possible developer experience or DX.
That requires to ensure that API designers “do their job well”: creating APIs that fulfill actual needs and are easy to understand and use.
This is the aim of governance which may help creating the best APIs or may slowly killing the organization, depending on the designer experience, the other DX, it provides.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-usually-is-dx&quot;&gt;What usually is DX&lt;/h1&gt;

&lt;p&gt;In the API world, DX stands for Developer eXperience.
It consists in providing APIs that fullfil their needs but that also are easy to understand and easy to use in a matter of minutes if not seconds.
Developers should be able to understand the purpose of an API in 3 seconds, identify the operation in 30 seconds and be able to make their first API call within 3 minutes.
That latter time including creating an account, getting credentials and then calling the API.&lt;/p&gt;

&lt;p&gt;Achieving such a great DX does not only rely on the API itself, its purpose and its design.
It relies also on everything that comes around:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The way people will find it&lt;/li&gt;
  &lt;li&gt;Its various documentations from high level description (that allows to understand what the API does) to instruction manual (ready to use recipes) and reference documentation (describing all operations and how the API works)&lt;/li&gt;
  &lt;li&gt;And the tools provided (in a broad sense: account creation and management, credentials, billing, …)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Working on DX is basically aiming at making developers life simpler.
That’s the usual DX, but there’s another one, that an organization creating public but also private APIs, should care about.&lt;/p&gt;

&lt;h1 id=&quot;the-other-dx-designer-experience&quot;&gt;The other DX: Designer eXperience&lt;/h1&gt;

&lt;p&gt;Those APIs are actually designed in order to make them easy to understand and easy to use.
Succeeding in consistently and in the long run creating such APIs at scale requires governance.
Governance implies defining rules, controls and processes that will ensure that all APIs will share a common look and feel, be consistent and have the same level of quality.&lt;/p&gt;

&lt;p&gt;The problem with governance is that sometimes it is so focused on rules, controls and processes that people, and especially API designers, actually dealing with it are totally forgotten resulting in the most terrible Design eXperience, the other DX.&lt;/p&gt;

&lt;h1 id=&quot;create-user-friendly-design-guidelines&quot;&gt;Create user friendly design guidelines&lt;/h1&gt;

&lt;p&gt;API design guidelines are the set of rules that will define the look and feel of an organization’s APIs.
They can be compared to an organization’s graphic charter and also to &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_system&quot;&gt;design system&lt;/a&gt;, but instead of defining its visual identity that will be used when creating websites or mobile apps for instance, it defines its APIs identity.
These guidelines are mandatory to build a good developer experience because consistent APIs are easier to understand and use.&lt;/p&gt;

&lt;p&gt;But they also matter for people who will design APIs. Defining a common design base allows each designer to avoid wasting time and trying to find a solution to a design problem that has already been solved. But that will only work if those guidelines apply the same principles used to create APIs: guidelines must be simple to understand, simple to use and fulfill actual designers needs.&lt;/p&gt;

&lt;p&gt;So do not reinvent the wheel, do not reuse your possibly outdated and highly specific practices, follow outside world standards and common practices. Define rules only when that is actually necessary, if you’re unable to explain a rule, don’t put it in your guidelines. Design rules must exist only to help people not unnecessarily constrain them.&lt;/p&gt;

&lt;p&gt;Do not write your guidelines in an “incomprehensible super expert that loves to hear themselves” style. Make them simple to use, just like you would do when creating API documentation. Once you have defined rules, create use case oriented design patterns describing in one place all rules that actually apply to a specific use case.&lt;/p&gt;

&lt;p&gt;And listen to people. Accept changes, evolutions. Rules are not set in stone, you must never hesitate to make them evolve by adjusting or completing them based on API designers and implementers feedback.&lt;/p&gt;

&lt;h1 id=&quot;conduct-user-friendly-design-reviews-workshops&quot;&gt;Conduct user friendly design &lt;del&gt;reviews&lt;/del&gt; workshops&lt;/h1&gt;

&lt;p&gt;But even with the user friendly-est guidelines are not enough, designers may make mistakes and most important a consistent style is only a fraction of what makes an API a good one.
Consistency goes beyond style, inside an API one must ensure that all data models are consistent for example, as we say in french, a cat must always be called a cat for instance.
And worse, one can create an API complying a 100% to guidelines that will be a terrible one.
Indeed, guidelines do not guarantee that an API will meet the right need in an efficient way. 
Do we have the right vision of the need? Is the resulting API really user friendly? Easy to understand, easy to use for someone outside the organization (another team or a partner or a customer)?&lt;/p&gt;

&lt;p&gt;So, irremediably coming along with guidelines, there are the mandatory API design reviews.
It is important that several people can look at and challenge a design.
An API must be analyzed from different perspectives: business, technical, developer experience to guarantee its success.
And it is important that at least one “external” person, or one who can act as if, participates in this analysis, because we can quickly fall into the creation of specialist APIs like Kitchen Radar if we are not careful.&lt;/p&gt;

&lt;p&gt;But beware, this exercise can quickly turn into a counterproductive trial if you are not careful.
A design review is not about policing and beating up on people because their design is “breaking the law”,  “non-compliant” or worse “sucks” from the reviewer’s perspective.
An API design reviewer is not the inquisition of API design.
Actually, nobody expects the API inquisition, literally.&lt;/p&gt;

&lt;p&gt;An API design review must be seen more as a design workshop.
Being an API design reviewer is more about being a consultant, helping people identify their needs, choosing the best possible representation, helping them make decisions adapted to their context, explaining the consequences of going in one direction or another.
Once everything is analyzed and explained, API designer reviewers must let designers choose because they are the owners of their APIs.&lt;/p&gt;

&lt;p&gt;API design reviewers must help designers and respect API ownership.&lt;/p&gt;

&lt;h1 id=&quot;build-user-friendly-organization-processes-and-tools&quot;&gt;Build user friendly organization, processes and tools&lt;/h1&gt;

&lt;p&gt;Just like a terrible registration process can ruin the best API’s developer experience, there are other aspects of API governance to take care of to ensure creating the best possible developer experience.
Indeed, if guidelines and reviews are the most obvious aspects of API governance participating in building the better or the worst designer experience, wrong human organization, processes and tools can cripple all efforts.&lt;/p&gt;

&lt;p&gt;When possible, prefer decentralized organization, aim on training all designers in order to make them the most autonomous possible.
It’s far better for the organization that people add to their expertise than having a small set of not always available experts.
That can be done gradually by identifying local experts that will be trained and then help and train other themselves.&lt;/p&gt;

&lt;p&gt;When defining processes, never lose sight that governance is there to enable designers to the right thing simply.
If it takes weeks if not month to do an API design review, it’s a terrible designer experience.
If processes lead to designers losing ownership, it’s an even more terrible design experience.&lt;/p&gt;

&lt;p&gt;When creating tools, ensure they are user friendly.
Take advantage of standard/common practices, using the OpenAPI specification instead of wiki pages or spreadsheet to describe an API for instance.
Ensure also they are the most open possible, providing APIs for instance, so designers can use them in a wide range of context because not all teams build APIs in the same way.&lt;/p&gt;

&lt;h1 id=&quot;fear-the-consequences-of-terrible-designer-experience&quot;&gt;Fear the consequences of terrible Designer eXperience&lt;/h1&gt;

&lt;p&gt;Just in case you think that’s not something you should care about because you think governance should be strong and only care about ensuring nobody breaks the law, let’s briefly talk about the consequences of not caring about this other DX.&lt;/p&gt;

&lt;p&gt;A terrible designer experience will irremediably lead to designers not learning how to actually create good APIs, they may even loose interest in designing APIs and delegate that to the governance zealot henchmen.
It will irremediably lead to terrible APIs created by outsider experts only caring about not breaking the law and totally not caring about creating actually good APIs.
Terrible private APIs mean higher costs, increase of technical debt, less flexible IT, longer time to market.
Terrible public APIs mean not used APIs…
And in the end, people who actually care will just leave the organization that may just collapse in the end.&lt;/p&gt;

&lt;p&gt;So, don’t underestimate the importance of the other DX, Designer eXperience.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Nobody expects the API inquisition! Literally. When creating public or private APIs, an organization must work hard on creating the best possible developer experience or DX. That requires to ensure that API designers “do their job well”: creating APIs that fulfill actual needs and are easy to understand and use. This is the aim of governance which may help creating the best APIs or may slowly killing the organization, depending on the designer experience, the other DX, it provides.</summary></entry><entry><title type="html">Automate all the things (like Cloudflare cache purge) with Github actions, Postman and APIs</title><link href="https://apihandyman.io/automate-all-the-things-with-github-actions-postman-and-apis/" rel="alternate" type="text/html" title="Automate all the things (like Cloudflare cache purge) with Github actions, Postman and APIs" /><published>2021-06-30T00:00:00-05:00</published><updated>2021-06-30T00:00:00-05:00</updated><id>https://apihandyman.io/automate-all-the-things-with-github-actions-postman-and-apis</id><content type="html" xml:base="https://apihandyman.io/automate-all-the-things-with-github-actions-postman-and-apis/">&lt;p&gt;What if I tell you can run Postman collection inside Github Actions and so easily automate all the things as long as they provide APIs? Sounds interesting right? So let me show you how I migrated my Jekyll blog publication workflow to Github Actions and how I used Postman collection to clear my Cloudflare cache. Bonus: You may also learn a few things about DX and API design.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;migrating-to-github-actions-and-solving-an-old-problem&quot;&gt;Migrating to Github Actions and solving an old problem&lt;/h1&gt;

&lt;p&gt;Since 2016, the API Handyman blog is powered by Jekyll, built by travis-ci.org, hosted on Github Pages and cached with Cloudflare CDN.
On May 31, 2021, &lt;a href=&quot;https://blog.travis-ci.com/2021-05-07-orgshutdown&quot;&gt;travis-ci.org has been shot down&lt;/a&gt;.
This has been announced for quite a long time… but I managed to totally forgot to do something about it; I actually realized it simply because my 1st of June’s post has not been published. I was going to migrate to travis-ci.com but because (or thanks) to an obscure bug I wasn’t able to do it … and as I wanted to test &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt;, I took the few necessary minutes to switch my build on it, and that was a blast. Ready to use actions that you can build upon, clear and simple format, good documentation, I was totally delighted.&lt;/p&gt;

&lt;p&gt;As changing the build system was faster than expected, I decided to tinker a bit more and solve a problem I had with my system: to ensure publication, I had to go to Cloudflare dashboard and manually clear the cache. If by chance Cloudflare propose an API, I thought I could include clearing cache after the build with a curl command, but as always I did a little bit more than that.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-a-jekyll-github-action-worflow&quot;&gt;Setting up a Jekyll Github &lt;del&gt;Action&lt;/del&gt; Worflow&lt;/h1&gt;

&lt;p&gt;Migrating from travis-ci.org to Github actions was done at the speed of light.
I will not go through all details, Github Actions, format, UI and &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;documentation&lt;/a&gt; are quite clear, but I will show you a few tips I discovered while setting up my first Github Workflow (yes, naming is hard, it’s called Github Actions but you create … Workflows, actually “actions” seems to be the reusable components that you can use in workflows).&lt;/p&gt;

&lt;h2 id=&quot;default-jekyll-workflow&quot;&gt;Default Jekyll workflow&lt;/h2&gt;

&lt;p&gt;Starting with Github Actions as a total beginner is dead simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to your repository&lt;/li&gt;
  &lt;li&gt;Click on the &lt;em&gt;Actions&lt;/em&gt; tab, you should see a “Get started with Github Actions” page&lt;/li&gt;
  &lt;li&gt;Scroll down to “Continuous integration workflows” and look for “Jekyll”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That should create the following workflow in &lt;code&gt;.github/workflows/jekyll.yml&lt;/code&gt;in your repository:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Default Jekyll workflow&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;name: Jekyll site CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build the site in the jekyll/builder container
      run: |
        docker run \
        -v $:/srv/jekyll -v $/_site:/srv/jekyll/_site \
        jekyll/builder:latest /bin/bash -c &amp;quot;chmod -R 777 /srv/jekyll &amp;amp;&amp;amp; jekyll build --future&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;According to the &lt;code&gt;on&lt;/code&gt; property, This workflow will be triggered by pushes and pull requests on main branch.
It contains a single job (in &lt;code&gt;jobs&lt;/code&gt;) named &lt;code&gt;build&lt;/code&gt; which is composed of 2 &lt;code&gt;steps&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first one checkouts the repo taking advantage of the &lt;code&gt;actions/checkout@v2&lt;/code&gt; action (that means you can call actions inside &lt;del&gt;actions&lt;/del&gt; workflows! Check the &lt;a href=&quot;https://github.com/marketplace?type=actions&quot;&gt;Market Place&lt;/a&gt;, there are dozens of them already)&lt;/li&gt;
  &lt;li&gt;The second step &lt;code&gt;run&lt;/code&gt;s a jekyll build using Docker (that will prove to be useful) but does not publish anything (you can basically run any Linux commands with &lt;code&gt;run&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;customizing-jekyll-workflow&quot;&gt;Customizing Jekyll workflow&lt;/h2&gt;

&lt;p&gt;My publication &lt;a href=&quot;https://github.com/arno-di-loreto/apihandyman.io/blob/master/.github/workflows/publish.yml&quot;&gt;workflow&lt;/a&gt; is quite simple, each Wednesday à noon (UTC) or on demand, I want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checkout repository on default branch&lt;/li&gt;
  &lt;li&gt;Run Jekyll build&lt;/li&gt;
  &lt;li&gt;Commit build’s result on gh-pages branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I started by customizing the &lt;code&gt;on&lt;/code&gt; section:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To &lt;code&gt;schedule&lt;/code&gt; build every Wednesday at noon using cron syntax (&lt;a href=&quot;https://docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events&quot;&gt;Schedule Events documentation&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;And I also activated “on demand” execution with the empty &lt;code&gt;workflow_dispath&lt;/code&gt; (&lt;a href=&quot;https://docs.github.com/en/actions/reference/events-that-trigger-workflows#manual-events&quot;&gt;Manual Events documentation&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Customized Jekyll workflow&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;name: Publish

on:
  schedule:
    - cron: &amp;quot;0 12 * * WED&amp;quot;
  workflow_dispatch:&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then I customized (and renamed) the &lt;code&gt;build&lt;/code&gt; job as &lt;code&gt;build_and_publish&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I added &lt;code&gt;PUBLISH_BRANCH_FOLDER&lt;/code&gt; (target folder for build) and &lt;code&gt;PUBLISH_BRANCH&lt;/code&gt; (publication branch) environment variables (&lt;a href=&quot;https://docs.github.com/en/actions/reference/environment-variables&quot;&gt;documentation&lt;/a&gt;) in &lt;code&gt;env&lt;/code&gt;. They are later used with the &lt;code&gt;${{env.VARIABLE_NAME}}&lt;/code&gt; syntax.&lt;/li&gt;
  &lt;li&gt;I tweaked the checkout step to make it faster by only downloading the last version of the code (&lt;code&gt;fetch-depth: 1&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;I removed the &lt;code&gt;--future&lt;/code&gt; flag on Jekyll build step to avoid having future date being published (actually I did that after realizing that future post had been published)&lt;/li&gt;
  &lt;li&gt;I modified build target directory (the second &lt;code&gt;-v&lt;/code&gt; in the Docker command) and set it to &lt;code&gt;${{ github.workspace }}/${{env.PUBLISH_BRANCH_FOLDER}}&lt;/code&gt;. The &lt;code&gt;github.workspace&lt;/code&gt; is a variable of &lt;a href=&quot;https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context&quot;&gt;github context&lt;/a&gt;, this context provides information about the workflow and the event that triggered it.&lt;/li&gt;
  &lt;li&gt;And finally, I added the publication step which consists in pushing build on &lt;code&gt;gh-pages&lt;/code&gt;. This is done using the wonderful &lt;a href=&quot;https://github.com/JamesIves/github-pages-deploy-action&quot;&gt;JamesIves/github-pages-deploy-action&lt;/a&gt; which can take the content of any folder and push it on any repository’s branch (the &lt;code&gt;clean: true&lt;/code&gt; is a very convenient option that removes what should be removed from the target branch based on source folder)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Customized Jekyll workflow&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;jobs:
  build_and_publish:
    env:
      PUBLISH_BRANCH: gh-pages
      PUBLISH_BRANCH_FOLDER: _site
    runs-on: ubuntu-latest
    steps:
    - name: ⬇️ Checkout current branch
      uses: actions/checkout@v2
      with:
          fetch-depth: 1
    - name: 👷🏻‍♂️ Build with jekyll/builder container
      run: |
        docker run \
        -v ${{ github.workspace }}:/srv/jekyll \
        -v ${{ github.workspace }}/${{env.PUBLISH_BRANCH_FOLDER}}:/srv/jekyll/_site \
        jekyll/builder:latest /bin/bash -c &amp;quot;chmod -R 777 /srv/jekyll &amp;amp;&amp;amp; jekyll build&amp;quot;
    - name: 🚀 Push on ${{env.PUBLISH_BRANCH}}
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
        branch: ${{env.PUBLISH_BRANCH}} # The branch the action should deploy to.
        folder: ${{ github.workspace }}/${{env.PUBLISH_BRANCH_FOLDER}} # The folder the action should deploy.        
        clean: true
        commit-message: Publish&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;clearing-cloudflare-cache-by-api-with-postman&quot;&gt;Clearing Cloudflare cache by API with Postman&lt;/h1&gt;

&lt;p&gt;Now that the blog is published, let’s see how to clear Cloudflare cache.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Spoiler: Do Cloudflare offers a good DX (Developer eXperience)?
Yes, definitely, I was able to do what I wanted in a matter of minutes.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;finding-the-api-documentation&quot;&gt;Finding the API documentation&lt;/h2&gt;

&lt;p&gt;I opened &lt;a href=&quot;https://cloudflare.com&quot;&gt;cloudflare.com&lt;/a&gt; website to locate their API documentation but was quite disappointed, no mention of any Cloudflare API at all.
That was not starting well; don’t do that at home, if you have API(s) advertize them on your homepage.
Hopefully, I found the link to &lt;a href=&quot;https://api.cloudflare.com/&quot;&gt;Cloudflare API documentation&lt;/a&gt; once I logged in my account and … scrolled all the way down to the page footer.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-hidden-api-link.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Log in your Cloudflare account and scroll all the way down&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To be honest, I could simply have googled Clouflare API and I would have arrived directly on the documentation, searching “company name api” is the best way to find a company’s API documentation.&lt;/p&gt;

&lt;p&gt;Though, Cloudflare doesn’t advertize them on their homepage, they did a great job on their APIs.
Crystal clear documentation going straight to the point; it took me a few seconds to arrive to the &lt;a href=&quot;https://api.cloudflare.com/#getting-started-requests&quot;&gt;“Getting start -&amp;gt; Requests”&lt;/a&gt; section explaining how to make API calls using an API token.
Icing on the cake: the direct link to your user profile for &lt;a href=&quot;https://dash.cloudflare.com/profile/api-tokens&quot;&gt;token configuration&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-documentation.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;How to do a Cloudflare API request&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-an-access-token&quot;&gt;Configuring an access token&lt;/h2&gt;

&lt;p&gt;Once arrived on the &lt;em&gt;API Tokens&lt;/em&gt; tab of your profile, click on the &lt;em&gt;Create Token&lt;/em&gt; blue button, the following page will appear:&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-create-token.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Create Cloudflare API Token&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Cloudflare allows to create tailor made tokens with only the permissions you actually need which is great for security.
The create token page propose pre-configured token templates which is good, but there was no template matching my need, so I created a custom token.&lt;/p&gt;

&lt;h3 id=&quot;configuring-a-custom-token&quot;&gt;Configuring a custom token&lt;/h3&gt;

&lt;p&gt;Configuring an access token is dead simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Give it a name (useful when wanting to delete a token)&lt;/li&gt;
  &lt;li&gt;Select permissions Zone -&amp;gt; Cache Purge -&amp;gt; Purge&lt;/li&gt;
  &lt;li&gt;Select resources to purge, I chose to include only the apihandyman.io domain&lt;/li&gt;
  &lt;li&gt;Click on continue to summary&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-token-configuration.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Configure Cloudflare API Token&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Cloudflare allows to generate tokens with really fine grain permissions and the way they are organized and what you can do with them is crystal clear.
Github should get inspired by this, their &lt;a href=&quot;/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/#getting-a-github-personal-access-token&quot;&gt;token configuration&lt;/a&gt; is light years behind this.&lt;/p&gt;

&lt;h3 id=&quot;checking-configuration&quot;&gt;Checking configuration&lt;/h3&gt;

&lt;p&gt;Once configuration is done, you’ll get a summary of permissions granted by this token.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-token-summary.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Cloudflare API Token Summary&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;token-created&quot;&gt;Token created&lt;/h3&gt;

&lt;p&gt;And when token is created, you can copy it to use it, but quite convenient, you get a ready to use curl command to check it actually works (I wouldn’t have designed the endpoint like this though, but that’s not the point here).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-token-created.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Cloudflare API Token Created&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;no-interactive-documentation-is-not-a-problem-here&quot;&gt;No interactive documentation is not a problem here&lt;/h2&gt;

&lt;p&gt;Ok, Cloudflare could propose an interactive documentation using pre-generated tokens.
But in that context and as the API is quite simple I was not annoyed at all by the static documentation.
I even wonder if that would be a good idea to have such dynamic documentation based on the terrible actions you can trigger with their API.&lt;/p&gt;

&lt;h2 id=&quot;verifying-the-token&quot;&gt;Verifying the Token&lt;/h2&gt;

&lt;p&gt;Instead of using curl to verify token, I used &lt;a href=&quot;/toolbox/postman&quot;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re not familiar with Postman, follow the detailed steps described in my &lt;a href=&quot;/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/#configuring-authorization-in-postman-and-make-a-successful-first-api-call&quot;&gt;Batch (Github) API calls with CSV and Postman&lt;/a&gt; to setup workspace, collection and environment variables&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I created a &lt;em&gt;Cloudflare&lt;/em&gt; workspace and a &lt;em&gt;Cloudflare Clear Cache&lt;/em&gt; collection in Postman to tinker with the Cloudflare API.
I added a collection variable called &lt;code&gt;root&lt;/code&gt; containing the url (https://api.cloudflare.com/client/v4) of Cloudflare API 
And I added a &lt;em&gt;Cloudflare&lt;/em&gt; environment containing my newly created &lt;code&gt;token&lt;/code&gt; (and saved and selected it in the upper right environment drop list!).&lt;/p&gt;

&lt;p&gt;In the collection, I set up Authorization type to Bearer Token (as stated by Cloudflare API documentation) and set the Token value to &lt;code&gt;{{token}}&lt;/code&gt;.
And the I created a Verify Token request as a &lt;code&gt;GET {{root}}/user/tokens/verify&lt;/code&gt;.
Before hitting the &lt;em&gt;Send&lt;/em&gt; button, I added a Test snippet to check that the response is a &lt;code&gt;200 OK&lt;/code&gt; by going to the request’s &lt;em&gt;Tests&lt;/em&gt; tab then click on the “Status code: Code is 200” snippet as shown below.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/postman-verify-token.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Verifying Cloudflare Token in Postman&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reading-purge-cache-documentation&quot;&gt;Reading purge cache documentation&lt;/h2&gt;

&lt;p&gt;Now that we’re all set to make Cloudflare API calls, let’s see how to purge cache.
Finding out how to do that is again dead simple, go to Cloudflare API documentation, type “purge” in the top left search box, and click on “Purge All Files”.
Note that depending on your Cloudflare subscriptions, you can get access to more sophisticated purge cache features.
As I have a small github hosted website, I can afford to do a brutal total cache purge, I may use the purge files by URL to make this more efficient.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-documentation-purge.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Verifying Cloudflare Token in Postman&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So purging cache requires to send a &lt;code&gt;POST {{root}}/zones/{zone identifier}/purge_cache&lt;/code&gt; request, according to the curl example, that will be the technical identifier of my apihandyman.io zone.
I think I could get that identifier from the dashboard but I’m too lazy to do that.&lt;/p&gt;

&lt;h2 id=&quot;guessing-how-cloudflare-api-works-thanks-to-its-design&quot;&gt;Guessing how Cloudflare API works thanks to its design&lt;/h2&gt;

&lt;p&gt;Though I wouldn’t have design the Cloudflare API that way, it is still a little bit predictable.
I can get what I want (my apihandyman.io zone identifier) without reading the documentation.
First, based on the &lt;code&gt;{{root}}/zones/{zone identifier}/purge_cache&lt;/code&gt;, I can guess that doing a &lt;code&gt;GET {{root}}/zones&lt;/code&gt; will let me list all my zones, and the guess is correct!
I get a list of zone and the &lt;code&gt;name&lt;/code&gt; property contains the domain name, so let’s try a &lt;code&gt;GET {{root}}/zones?name=apihandyman.io&lt;/code&gt; to get only the zone I need, that works too!&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/postman-get-zone.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Getting apihandyman.io zone and storing in zone_id environment variable&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In order to make all this reusable, I set the website name as an environment variable.
And in the Tests tab, I add some code based on Postman’s snippets to check that I get a successful response with a non empty list and then I store the zone identifier in a environment variable.&lt;/p&gt;

&lt;p&gt;Now that I have my zone identifier, I can easily purge cache using the &lt;code&gt;zone_id&lt;/code&gt; variable:&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/postman-purge-cache.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Purging apihandyman.io cache&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I just add a new &lt;code&gt;{{root}}/zones/{{zone_id_}}/purge_cache&lt;/code&gt; request with a body containing the &lt;code&gt;purge_everything&lt;/code&gt; set to true and I’m done.
Well, almost done, I also added a test to check that the request is successful using the snippet “code is 200”.&lt;/p&gt;

&lt;h2 id=&quot;purge-cache-collection&quot;&gt;Purge cache collection&lt;/h2&gt;

&lt;p&gt;Now I have collection that contains 3 requests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Verify token&lt;/li&gt;
  &lt;li&gt;Get zone identifier for website name&lt;/li&gt;
  &lt;li&gt;Purge cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those requests relies on the following variables&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Variable&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;root&lt;/td&gt;
      &lt;td&gt;collection&lt;/td&gt;
      &lt;td&gt;The root URL of Cloudflare API (collection hard coded)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;token&lt;/td&gt;
      &lt;td&gt;environment&lt;/td&gt;
      &lt;td&gt;The Cloudflare API bearer token (set by user)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;website&lt;/td&gt;
      &lt;td&gt;environment&lt;/td&gt;
      &lt;td&gt;The website name to purge (set by user)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zone_id&lt;/td&gt;
      &lt;td&gt;environment&lt;/td&gt;
      &lt;td&gt;The zone identifier of the website (set by Get zone identifier request)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now we know how to purge Cloudflare cache, let’s see how to do it with a Github action.&lt;/p&gt;

&lt;h1 id=&quot;running-a-postman-collection-within-a-github-action&quot;&gt;Running a Postman collection within a Github action&lt;/h1&gt;

&lt;p&gt;In the beginning my idea was to simply do a curl command to call cloudflare API and possibly use &lt;a href=&quot;/toolbox/jq/&quot;&gt;jq&lt;/a&gt; if needed between calls but once I have seen that you can use Docker withing Github Actions and so run almost anything you want, I came to the idea of using &lt;a href=&quot;/toolbox/newman/&quot;&gt;Newman&lt;/a&gt;, Postman’s CLI, to run a Postman collection.
I exported my &lt;em&gt;Cloudflare Clear Cache&lt;/em&gt; Postman collection as &lt;code&gt;cloudflare-clearcache.postman_collection.json&lt;/code&gt; in the &lt;code&gt;scripts&lt;/code&gt; folder of my &lt;code&gt;apihandyman.io&lt;/code&gt; Github repository.&lt;/p&gt;

&lt;h2 id=&quot;passing-variables-to-newman&quot;&gt;Passing variables to Newman&lt;/h2&gt;

&lt;p&gt;Running “Clearing Cloudflare cache” collection on the command line is as simple as running &lt;code&gt;newman run scripts/cloudflare-clearcache.postman_collection.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Failed run&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;Cloudflare Clear Cache

→ Verify Token
  GET https://api.cloudflare.com/client/v4/user/tokens/verify [400 Bad Request, 1.08KB, 1034ms]
  1. Status code is 200&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Oops, got a 400 instead of 200 when verifying token because there simply was no token provided.
Newman is unaware of Postman’s environment variables.
This is simply fixed as follow using &lt;code&gt;--env-var name=value&lt;/code&gt; for each user defined variable of my &lt;em&gt;Cloudflare Clear Cache&lt;/em&gt; Postman collection:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Setting environment variables&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;newman run \
    --env-var token=REDACTED_CLOUDFLARE_TOKEN \
    --env-var website=apihandyman.io \
    scripts/cloudflare-clearcache.postman_collection.json&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;running-newman-with-docker&quot;&gt;Running Newman with Docker&lt;/h2&gt;

&lt;p&gt;Running Newman with Docker is almost as simple using the &lt;a href=&quot;https://hub.docker.com/r/postman/newman/&quot;&gt;postman/newman&lt;/a&gt; image.
The thing you need to know is that when running a local collection file, the &lt;code&gt;newman&lt;/code&gt; CLI inside  Docker expects to find it in &lt;code&gt;/etc/newman&lt;/code&gt;.
That’s why there’s a &lt;code&gt;-v&lt;/code&gt; parameter in the following command, which mounts the folder containing the &lt;code&gt;cloudflare-clearcache.postman_collection.json&lt;/code&gt; on &lt;code&gt;/etc/newman&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Newman, Docker and Variables&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;docker run \
    -v /path/to/scripts:/etc/newman \
    -t postman/newman:alpine run \
    --env-var token=REDACTED_CLOUDFLARE_TOKEN \
    --env-var website=apihandyman.io \
    cloudflare-clearcache.postman_collection.json&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;running-newman-in-github-action-workflow&quot;&gt;Running Newman in Github Action Workflow&lt;/h2&gt;

&lt;p&gt;Now that we know how to run the &lt;code&gt;cloudflare-clearcache.postman_collection.json&lt;/code&gt; with Newman and Docker, let’s add a job doing so to the Github workflow:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Newman in Github Actions&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;jobs:
  build_and_publish:
    [...]
  clear_cdn_cache:
    needs: [ build_and_publish ]
    env:
      POSTMAN_COLLECTION_BRANCH: main
      POSTMAN_COLLECTION_FOLDER: scripts
      CLOUDFLARE_WEBSITE: apihandyman.io
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Download Cloudflare Clear Cache Postman collection
        uses: actions/checkout@v2
        with:
          ref: ${{env.POSTMAN_COLLECTION_BRANCH}}
          fetch-depth: 1
      - name: 💥 Clear Cloudflare cache
        run: |
          docker run \
          -v ${{ github.workspace }}/${{env.POSTMAN_COLLECTION_FOLDER}}:/etc/newman \
          -t postman/newman:alpine run \
          --env-var token=${{secrets.CLOUDFLARE_TOKEN}} \
          --env-var website=${{env.CLOUDFLARE_WEBSITE}} \
          cloudflare-clearcache.postman_collection.json&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I added &lt;code&gt;clear_cdn_cache&lt;/code&gt; job after the &lt;code&gt;build_and_publish&lt;/code&gt; one:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;needs&lt;/code&gt; property says this job will only start AFTER &lt;code&gt;build_and_publish&lt;/code&gt; success (without that both jobs start in parallel)&lt;/li&gt;
  &lt;li&gt;In &lt;code&gt;env&lt;/code&gt; I declare a few variables and especially the &lt;code&gt;CLOUDFLARE_WEBSITE&lt;/code&gt; needed by the Postman collection&lt;/li&gt;
  &lt;li&gt;The first step downloads the collection, it’s in current repo, but it could be elsewhere&lt;/li&gt;
  &lt;li&gt;The second step runs the collection with newman, note that I obviously didn’t put my Cloudflare token there, instead I’m using a secret &lt;code&gt;${{secrets.CLOUDFLARE_TOKEN}}&lt;/code&gt;. To configure a secret, go to the repository’s &lt;em&gt;Settings&lt;/em&gt; tab, then &lt;em&gt;Secrets&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And 🎉:&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/github-clear-cdn-cache.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Purging apihandyman.io cache done!&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Note that, on line 5, the token value (&lt;code&gt;${{secrets.CLOUDFLARE_TOKEN}}&lt;/code&gt;) is (hopefully) not printed as it is as secret.&lt;/p&gt;

&lt;h1 id=&quot;automate-all-the-things&quot;&gt;Automate all the things!&lt;/h1&gt;

&lt;p&gt;Being able to run Postman collection within Github actions opens endless possibilities but more important, all what I’ve done here can be done because people actually worked hard to bring the best possible user experience at every level:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Regarding APIs DX, the Cloudflare API and its documentation can be taken as a good example (even though I would tweak a thing or 2 in their design), it’s a shame they don’t advertize their wonderful API on their homepage.&lt;/li&gt;
  &lt;li&gt;Postman and Newman easily help me to avoid writing painful bash/curl scripting.&lt;/li&gt;
  &lt;li&gt;Github actions being so well documented and simple are a pleasure to use, being able to use others’ actions and the Docker capability are killer features&lt;/li&gt;
  &lt;li&gt;And so Docker participates greatly in this awesome user experience, making it easy to run absolutely everything wherever you want&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">What if I tell you can run Postman collection inside Github Actions and so easily automate all the things as long as they provide APIs? Sounds interesting right? So let me show you how I migrated my Jekyll blog publication workflow to Github Actions and how I used Postman collection to clear my Cloudflare cache. Bonus: You may also learn a few things about DX and API design.</summary></entry><entry><title type="html">4 Good Reasons To Do Api Design Reviews</title><link href="https://apihandyman.io/3-good-reasons-to-do-api-design-reviews/" rel="alternate" type="text/html" title="4 Good Reasons To Do Api Design Reviews" /><published>2021-06-23T00:00:00-05:00</published><updated>2021-06-23T00:00:00-05:00</updated><id>https://apihandyman.io/4-good-reasons-to-do-api-design-reviews</id><content type="html" xml:base="https://apihandyman.io/3-good-reasons-to-do-api-design-reviews/">&lt;p&gt;More often than not when people hear “let’s do an API design review”, they hear “let’s check that an API design conforms to API design guidelines”.
That’s only partially true and reducing API design reviews to that is a terrible mistake.
Actually, doing API design reviews only to do that may even not make any sense at all.
Let’s see 3 really good reasons to do API design reviews.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h1 id=&quot;im-gonna-need-a-bigger-boat&quot;&gt;I’m gonna need a bigger boat&lt;/h1&gt;

&lt;p&gt;People following me on Twitter might have expect another post this week.
Indeed, I tweeted something like “lately, I slightly changed the way I summarize my API design reviews, that looks promising and I’m going to write about this next week”.
But, that would be putting the cart before the horse and I have so many things to say about API design reviews that I think this topic deserves a (probably long) series.
So before diving into how I summarize API Design Reviews, we’ll talk about the reviews themselves and especially why you should (even must) do them.&lt;/p&gt;

&lt;p&gt;And we start with what most people think an API design review is …&lt;/p&gt;

&lt;h1 id=&quot;check-guidelines-conformance-ensure-consistency&quot;&gt;&lt;del&gt;Check guidelines conformance&lt;/del&gt; Ensure consistency&lt;/h1&gt;

&lt;p&gt;So, more often than not when people hear “API design review”, they hear “checking that an API design conforms to API design guidelines”.
That’s only partially true, the aim of an API design review is actually less about checking guidelines conformance (which is the “how doing a review”) and more about ensuring an overall consistency (which is the “why doing a review”).&lt;/p&gt;

&lt;p&gt;Consistency in API design is important because if all of your APIs and more important all operations, behaviors and data models (and whatever forms an API design) share the same look and feel, that will make your APIs easier to understand and to use.
Once people have learned to use one of your APIs, they feel at home when switching to the next one because it looks and behaves like the previous one.&lt;/p&gt;

&lt;p&gt;That’s why guidelines are important; they are many good (and wrong) ways to design (REST or other) APIs but you need to choose one (preferably a good one). 
Guidelines define an API design look and feel, and by the way if they are well made, those guidelines are consistent with outside world common practices and so that makes your APIs even more easy to use.&lt;/p&gt;

&lt;p&gt;But while guidelines may help to achieve a certain level of consistency at high level, there is still much place to introduce inconsistency.
Indeed, your guidelines will probably not cover every single and more local design concerns.
For instance, it’s up to the API owners (the team, not a single person) to ensure that “a cat is always called a cat” (as we say in french).
If it’s randomly called a &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;felisCatus&lt;/code&gt; or &lt;code&gt;felidae&lt;/code&gt; across same domain APIs or worse inside an API, that will puzzle more than one consumer (and owner by the way). 
So API designers must take care to use the same vocabulary throughout a single API and across their domain APIs (who said &lt;a href=&quot;https://martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;ubiquitous language&lt;/a&gt;?).&lt;/p&gt;

&lt;p&gt;So, ensuring consistency not only requires to observes API design guidelines but also the rest of the API and other related APIs.
But reducing API design review to “ensuring API design consistency” is a terrible mistake.&lt;/p&gt;

&lt;h1 id=&quot;help-people-shape-the-right-apis&quot;&gt;Help people shape the right APIs&lt;/h1&gt;

&lt;p&gt;If an API is 100% consistent with itself, with outside world common practices, with design guidelines and existing APIs, it unfortunately still can be a terrible API.
Indeed, it can be as simple as choosing the wrong vocabulary (&lt;code&gt;cat&lt;/code&gt; vs &lt;code&gt;felisCatus&lt;/code&gt;), making the API hard to understand for non experts.
But it can be also less obvious, like exposing purely internal concerns that shouldn’t be exposed to the outside, making the API complex to use (if not dangerous).
It can be even worse: choosing a totally wrong purpose, making the API a total failure.
And everything in between (and beyond).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/3-good-reasons-to-do-api-design-reviews/kitchenradar.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;&lt;a href=&quot;https://livebook.manning.com/book/the-design-of-everyday-apis/chapter-2/16&quot;&gt;The Kitchen Radar 3000 (from my book The Design of Web APIs)&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Hopefully, it’s not a fatality, a well conducted API design review allows to avoid such dark fates.
Put around a table people having functional knowledge, people knowing how the software work (existing) or should work (new), and people knowing nothing about the topic (usually the reviewer, or Jon Snow) and you should be able to decipher what the API should actually do (to solve someone’s problems) and how it should actually looks like.
With all these people discussing during the API design review, the resulting API will be the right API, or at least it shouldn’t be that far (do a final check with potential consumers to confirm).&lt;/p&gt;

&lt;h1 id=&quot;improve-api-design-skills&quot;&gt;Improve &lt;del&gt;API&lt;/del&gt; design skills&lt;/h1&gt;

&lt;p&gt;The more you do API design reviews, the more people involved improve their API design skills.
I have witnessed it myself, after a few months, all people involved (including myself as a reviewer) have improved their API design skills.
At the beginning, there can be a lot of basic mistakes (HTTP, guidelines, consistency), but review after review people understand how API design works, how the guidelines works.
In the process, reviewers learn also a lot by confronting their views to others, discovering new patterns, new use cases.
And in the end, reviews can focus more on doing the right APIs than doing the APIs right.&lt;/p&gt;

&lt;p&gt;Icing on the cake, API design reviews may have interesting side effects on other areas.
One day someone told me that doing API design improved their software design skills, they changed the way they designed class, methods, databases, … and even software architecture.
That’s also true on the functional perspective, building APIs that are easy to understand, easy to use, easy to evolve, can trigger new ways of thinking that can be applied when designing business processes too.&lt;/p&gt;

&lt;h1 id=&quot;api-design-review-is-a-must-do&quot;&gt;API design review is a MUST do&lt;/h1&gt;

&lt;p&gt;So, API design review is a MUST do.
It will irremediably lead to consistency across APIs.
More important, it will lead to building the right APIs.
And even more important, it will help people grow API design skills that, icing on the cake, can be applied to other areas.&lt;/p&gt;

&lt;p&gt;But, there’s always a but, that will only work if the API designer review is conducted the right way, especially with the right mindset.
But that’s another story (if not stories) I’ll keep for one or more later post(s).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">More often than not when people hear “let’s do an API design review”, they hear “let’s check that an API design conforms to API design guidelines”. That’s only partially true and reducing API design reviews to that is a terrible mistake. Actually, doing API design reviews only to do that may even not make any sense at all. Let’s see 3 really good reasons to do API design reviews.</summary></entry><entry><title type="html">Handling breaking ch-ch-changes</title><link href="https://apihandyman.io/handling-breaking-ch-ch-changes/" rel="alternate" type="text/html" title="Handling breaking ch-ch-changes" /><published>2021-06-16T00:00:00-05:00</published><updated>2021-06-16T00:00:00-05:00</updated><id>https://apihandyman.io/breaking-changes</id><content type="html" xml:base="https://apihandyman.io/handling-breaking-ch-ch-changes/">&lt;p&gt;In (Ch-ch-) Changes, David Bowie sang “Every time I thought I’d got it made, it seemed the taste was not so sweet”, that’s a good metaphor for API design.
An API will irremediably evolve because it will lack some features or because of mistakes, and so sooner or later, you may have to introduce a “breaking change”.
That’s usually when people start to run in circle, scream and shout “Oh! Please no! Please, not a breaking ch-ch-change”.
But, what is it actually? How to handle it? And should you always be afraid of it?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-is-a-breaking-change&quot;&gt;What is a breaking change&lt;/h1&gt;

&lt;p&gt;A breaking change is non backward-compatible modification that requires consumers to modify their code in order to continue using an API (or at least modify the part of their code using the modified part of the API).
There are many different ways to introduce breaking changes in APIs, some are obvious, some are not.&lt;/p&gt;

&lt;p&gt;The most common obvious way to introduce a breaking change is to rename or remove something in the interface contract.
Rename &lt;code&gt;GET /usrs&lt;/code&gt; to &lt;code&gt;GET /users&lt;/code&gt; or remove the &lt;code&gt;isAdmin&lt;/code&gt; property from the User data model and there’s a huge risk that it will break some if not all of the API’s consumers.
There are also less obvious interface contract’s breaking changes. Turning an optional parameter into a required one or adding new values to enumerations that consumer is supposed to interpret. And there are even less obvious and far more treacherous breaking changes:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://www.hyrumslaw.com/&quot;&gt;Hyrum Wright, Hyrum's Law&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/handling-breaking-ch-ch-changes/xkcd.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;&lt;a href=&quot;https://xkcd.com/1172/&quot;&gt;XKCD: Workflow&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;A breaking change can happen without actually modifying the API’s interface contract.
Change a business rule so that given the same conditions a user’s “asshole level” is set to orange instead of green when analyzing their last comments and that may break something. 
Pushing the concept to the extreme, that also means some consumers could depend on an API’s long response time and optimizing the API’s implementation to make things go faster on provider’s side could put them at risk.
That’s probably going a little bit too far, but keep that in mind, just in case.&lt;/p&gt;

&lt;p&gt;So a breaking change is a change that could literally break something on the consumer side.
That does not sound good but is it actually always that bad?&lt;/p&gt;

&lt;h1 id=&quot;evaluating-the-cost-of-breaking-change&quot;&gt;Evaluating the cost of breaking change&lt;/h1&gt;

&lt;p&gt;As an architect, my favorite answer to any question is “it depends”.
And in that case, it applies yet another time.
Depending on the context, the cost of a breaking change vary.&lt;/p&gt;

&lt;p&gt;If the API is in early stage and not even yet consumed, you can break whatever you want without even thinking about it.
If the API is consumed only by a single application that you build yourself, you can most probably do it with not much work.
On the opposite, if the API is consumed by many consumers that are “far” from you, another team, another business unit or worse partners or customers.
The cost will be high.&lt;/p&gt;

&lt;p&gt;The less consumers and the more you control them, the less will cost a breaking change. 
The more consumers and the less you control them, the more will cost a breaking change.&lt;/p&gt;

&lt;h1 id=&quot;how-to-avoid-it&quot;&gt;How to avoid it&lt;/h1&gt;

&lt;p&gt;Before requiring consumers to update their code, maybe you should think twice and find a way to avoid that.
Here are 3 ways to more or less “avoid” introducing breaking changes.&lt;/p&gt;

&lt;h2 id=&quot;dont-do-it&quot;&gt;Don’t do it&lt;/h2&gt;

&lt;p&gt;First, triple check that you actually desperately need to make this breaking change.
Evaluate the value it brings versus its cost.
You want to fix some mistake (like a typo or a terrible name) to make a perfectly clean API?
That’s nice but probably counter-productive, perfection is not of this world, especially in API design.
Live with it for the time being, you may be able to fix that when introducing actually awaited new features that your consumers will be totally crazy about.
In the meanwhile, you may try to limit problems by improving the documentation if that help.&lt;/p&gt;

&lt;h2 id=&quot;make-it-backward-compatible&quot;&gt;Make it backward-compatible&lt;/h2&gt;

&lt;p&gt;If there are good reason to introduce this change, maybe there’s a way to make it in a non-breaking way.
The usual strategy to do that is only to “add” in a clever way.&lt;/p&gt;

&lt;p&gt;Instead of modifying an existing operation, you may simply add a new one.
Why not adding a &lt;code&gt;POST /administrators&lt;/code&gt; instead of modifying &lt;code&gt;POST /users&lt;/code&gt; to introduce the new administrator user type?
On the inputs, always add optional properties/parameters with default values.
Let’s say you have a “create user” features and want introduce different service level (regular vs gold).
Instead of required &lt;code&gt;serviceLevel&lt;/code&gt; that will hold &lt;code&gt;regular&lt;/code&gt; or &lt;code&gt;gold&lt;/code&gt;, set it optional with &lt;code&gt;regular&lt;/code&gt; as default value.
On the output, it’s simpler, just add, it doesn’t really matter if the new data is always returned or not.&lt;/p&gt;

&lt;p&gt;There’s more often than not a way to turn a backward-incompatible change into a backward-compatible one, it may not lead to the best design but sometimes you have to make compromises.&lt;/p&gt;

&lt;h2 id=&quot;use-breaking-change-proof-design&quot;&gt;Use breaking change proof design&lt;/h2&gt;

&lt;p&gt;The third way to avoid breaking change is a little bit different: it’s about to preemptively ensure that breaking changes have less risk to happen by choosing a breaking change proof design.&lt;/p&gt;

&lt;p&gt;You can work on data types, avoid using booleans or arrays of atomic (string, number, …) for instance.
A &lt;code&gt;isAdmin&lt;/code&gt; property is less extensible than a &lt;code&gt;role: &quot;admin&quot;&lt;/code&gt; one, indeed, there may be more roles than admin and non admin users in the future.
Which is less extensible than a &lt;code&gt;roles: [&quot;admin&quot;]&lt;/code&gt;, because a user may have more than one role in the future.
Which is less extensible than a &lt;code&gt;roles: [{ type: &quot;admin&quot;}]&lt;/code&gt;, because a role may need more features such as a start and end date for example.&lt;/p&gt;

&lt;p&gt;You can work building self sufficient features by adding data or new operations.
When accessing a user, consumer may need to know what their role mean, at the beginning they can hardcode that an admin user can do everything while a non admin one can only read data for example.
But if you provide the role description along with its type, you may seamlessly introduce new user types.
When creating a user, consumer need to know the available types of user they can create, they can hardcode that based on an enumeration provided in your documentation or they could call a &lt;code&gt;GET /userTypes&lt;/code&gt; and get up to date data.&lt;/p&gt;

&lt;p&gt;And last but not least, you can also lessen the risk of breaking changes by hiding as much as possible what happens inside your API, inside your domain.
The less the outside world know about your internal business rules and way of working, the less coupled with consumers you’ll be.&lt;/p&gt;

&lt;h1 id=&quot;how-to-handle-it&quot;&gt;How to handle it&lt;/h1&gt;

&lt;p&gt;When the breaking change cost is low or when it is unavoidable even though its cost is high, you have to actually handle it.
Here are a few good practices and tips to have in mind in such a situation.&lt;/p&gt;

&lt;h2 id=&quot;synchronized-modifications&quot;&gt;Synchronized modifications&lt;/h2&gt;

&lt;p&gt;The most simple way to handle breaking change is to synchronize modified API and consumers deployment.
This strategy will only work when you have full control on consumers.
While it is fairly easy to do that with a web application, it can be more trick for rich clients such as mobile application as end users may not want to update them if they are not forced to do it.
My rule of thumb: always implement a “force update” in your mobile application, let it check regularly or at startup if it is still up to date and if not refuse to start and request update to user.
That will allow you to synchronize its update with the underlying API.&lt;/p&gt;

&lt;h2 id=&quot;wait-for-the-right-moment&quot;&gt;Wait for the right moment&lt;/h2&gt;

&lt;p&gt;A corollary to the “make it backward compatible even that is not totally clean” strategy is to wait for the right moment.
I always recommend to the team I work with to let their API live and evolve possibly introducing API design compromises.
Then after a while, once they have sufficient experience with the domain of the API and if there’s a killer new feature to introduce, that’s the right moment to clean all this mess and break everything.&lt;/p&gt;

&lt;h2 id=&quot;create-a-separated-new-api-and-migrate-or-not&quot;&gt;Create a separated new API and migrate (or not)&lt;/h2&gt;

&lt;p&gt;Breaking everything does not actually mean removing the previous version of the API.
You can create a new one and then request consumers migrate to the new version.
There are many things to say about that, we’ll talk more about API versioning and its implication in a later post.&lt;/p&gt;

&lt;h2 id=&quot;include-breaking-change-policy-in-your-terms-of-services&quot;&gt;Include breaking change policy in your terms of services&lt;/h2&gt;

&lt;p&gt;And last tip, don’t forget to include your breaking change policy in your terms of service: how you define a breaking change, when you’ll warn people about an upcoming one and how long time they’ll have to migrate to a new API version if they have to.
Depending on your context, you may not want to let consumers stay on an outdated previous version for too long but think about their context, below a year could be tricky for many consumers as their budget are annualized.&lt;/p&gt;

&lt;p&gt;Note while that’s a must have for a public/partner API that you sell to people outside of your organization, it that could be interesting to define terms of service including such policy for your private APIs too.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">In (Ch-ch-) Changes, David Bowie sang “Every time I thought I’d got it made, it seemed the taste was not so sweet”, that’s a good metaphor for API design. An API will irremediably evolve because it will lack some features or because of mistakes, and so sooner or later, you may have to introduce a “breaking change”. That’s usually when people start to run in circle, scream and shout “Oh! Please no! Please, not a breaking ch-ch-change”. But, what is it actually? How to handle it? And should you always be afraid of it?</summary></entry><entry><title type="html">Pink Fluffy Unicorn API? WTF? (or 3 reasons why choosing a not meaningful API name can be a problem)</title><link href="https://apihandyman.io/pink-fluffy-unicorn-api-wtf-or-3-reasons-why-choosing-a-not-meaningful-API-name-can-be-a-problem/" rel="alternate" type="text/html" title="Pink Fluffy Unicorn API? WTF? (or 3 reasons why choosing a not meaningful API name can be a problem)" /><published>2021-06-09T00:00:00-05:00</published><updated>2021-06-09T00:00:00-05:00</updated><id>https://apihandyman.io/pink-fluffy-unicorn</id><content type="html" xml:base="https://apihandyman.io/pink-fluffy-unicorn-api-wtf-or-3-reasons-why-choosing-a-not-meaningful-API-name-can-be-a-problem/">&lt;p&gt;It is usually considered a terrible practice to name a property or a function with a meaningless name when writing code.
But surprisingly, when it comes to choosing application or API name, some people tend to choose names in a more artistic way (says the “API Handyman” who can name some tool “OpenAPI Chainsaw”).
So let’s see 3 reasons why choosing a not meaningful API name can be a problem.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This post is a follow up of a tweet I did a few weeks ago: &lt;em&gt;“Pink Fluffy Unicorn” is a cute but totally wrong name for an API unless it actually deals with pink fluffy unicorns. Please choose a meaningful name that tells what the API does&lt;/em&gt;.
Someone asked some arguments to back this statement because they seem to have to deal with such cute but counter-productive if not dangerous naming strategy.
And I realized that I have never formalized my thoughts on this topic, hence this post (thanks so much Twitter people!)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Very special thanks to &lt;a href=&quot;https://twitter.com/mrlapindesign&quot;&gt;@mrlapingdesign&lt;/a&gt; for drawing this post’s banner.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;it-needs-explanations&quot;&gt;It needs explanations&lt;/h1&gt;

&lt;p&gt;First and most obvious reason why choosing a not totally meaningful name is a terrible idea: it needs explanations.&lt;/p&gt;

&lt;p&gt;When starting a new job in a another company/organization, don’t you ever have grumbled when discovering that all internal tools such as the credential manager or the leave management tool have totally awkward not obvious names?
Of course, after someone explained you all that (for the 99th time) and if you use them everyday, you may remember their names.
But your new colleague, who arrived a few months later, will also struggle to understand what does what at the beginning.
And someone will have to explain all that (again, for the 100th time).
And if you don’t use them often, you’ll forget their name and struggle to find them when you desperately need them.&lt;/p&gt;

&lt;p&gt;And that applies to anything, including APIs.
If I’m looking for the API managing users, I will not search for Pink Fluffy Unicorn API.
And if I’m looking for the API managing file transfers, I will not search for Blue Fluffy Unicorn API.
When I see a Pink Fluffy Unicorn API, I have absolutely no clue about what it does by just reading its name, and that is really annoying.&lt;/p&gt;

&lt;p&gt;Of course, some may object that I could use our awesome API catalog search engine or read the documentation to see that, so using such a not so meaningful name may not be such a big problem.
Maybe, so let’s see the second reason, which is major no-go for me.&lt;/p&gt;

&lt;h1 id=&quot;it-does-not-set-boundaries&quot;&gt;It does not set boundaries&lt;/h1&gt;

&lt;p&gt;Second reason why choosing a not totally meaningful name is a terrible idea: it does not set boundaries.
And that’s a major concerns.
Indeed, a well defined and designed API is supposed to be a independent set of operations covering a meaningful set of related use cases.&lt;/p&gt;

&lt;p&gt;If this set of operations don’t have a meaningful name such as User but is named Pink Fluffy Unicorn, what stops someone to add new features related to a completely different topic such as file transfers?
What stops someone transforming this well defined API into a big ball of mud, a do-it-all API that will make no sense at all and be more complex to maintain?
What stops someone to create a dangerous mixtures composed of internal facing and external facing operations.
Not its name.
Some experienced API designers and developers having working in the team for quite a long time, taking their time to think, actually knowing the purpose of the Pink Fluffly Unicorn, probably won’t do such a mistake but what about beginners or people in a rush?&lt;/p&gt;

&lt;p&gt;Using a meaningful name creates boundaries that will make most people think twice before adding new features into an API while a meaningless name will open doors to anything.&lt;/p&gt;

&lt;h1 id=&quot;it-is-possibly-a-sign-of-api-design-smell&quot;&gt;It is possibly a sign of API design smell&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;Ce que l'on conçoit bien s’énonce clairement, Et les mots pour le dire arrivent aisément (What is well understood is clearly stated, And the words to say it come easily)&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;Nicolas Boileau-Despréaux, L'art poétique&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;The third reason why choosing a not totally meaningful name is a terrible idea is a corollary to the second one: it can be a sign of API design smell.&lt;/p&gt;

&lt;p&gt;Did you choose a meaningless name because you’re actually unable to find a meaningful one?
We all know that choosing names is hard, but if you are really struggling to find a meaningful name for your API, your API Designer senses should tell you that there’s something wrong. 
That could mean your API is not solving the good problem, or solving too much problems or not enough of them.&lt;/p&gt;

&lt;p&gt;Easily finding a meaningful name can comfort your vision of the use case/problems you’re trying to solve with it.&lt;/p&gt;

&lt;h1 id=&quot;sometimes-you-have-to-deal-with-it&quot;&gt;Sometimes you have to deal with it&lt;/h1&gt;

&lt;p&gt;There are cases where a domain, a team or a tool has a not so meaningful name that you would like to keep for reasons such as not totally changing people habits.
Indeed, some people working there for a long time know what means Pink Fluffy Unicorn.
So how to satisfy newcomers and seasoned colleagues?
In such a case you can use a middle ground approach and name your API(s) “Pink Fluffy Unicorn - Meaningful Name”.
That way you ensure seasoned colleagues won’t be surprised.
But most important you ensure that your API surface (your APIs) is well defined (not a big ball of mud) and understandable by newcomers.
Icing on the cake, you also ensure that people easily connect APIs together which can be interesting in a big organization or when providing public/partner APIs (“Twilio” doesn’t mean anything to me but I can get what the “Twilio Messaging API” does).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">It is usually considered a terrible practice to name a property or a function with a meaningless name when writing code. But surprisingly, when it comes to choosing application or API name, some people tend to choose names in a more artistic way (says the “API Handyman” who can name some tool “OpenAPI Chainsaw”). So let’s see 3 reasons why choosing a not meaningful API name can be a problem.</summary></entry><entry><title type="html">200 Vs 204 Vs 404</title><link href="https://apihandyman.io/empty-lists-http-status-code-200-vs-204-vs-404/" rel="alternate" type="text/html" title="200 Vs 204 Vs 404" /><published>2021-06-02T00:00:00-05:00</published><updated>2021-06-02T00:00:00-05:00</updated><id>https://apihandyman.io/200-vs-204-vs-404</id><content type="html" xml:base="https://apihandyman.io/empty-lists-http-status-code-200-vs-204-vs-404/">&lt;p&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.
This fourth post answers the following question: given that /users is a collection (a list) and no users are named Spock, what should return GET /users?name=spock? 
&lt;code&gt;200 OK&lt;/code&gt;, &lt;code&gt;204 No Content&lt;/code&gt; or &lt;code&gt;404 Not Found&lt;/code&gt;&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Choosing HTTP status codes Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.&lt;div class=&quot;alert alert-info&quot;&gt;
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use &lt;a class=&quot;alert-link&quot; href=&quot;https://webconcepts.info/concepts/http-status-code/&quot;&gt;Erik Wilde's Web Concepts&lt;/a&gt;.
&lt;/div&gt;Very special thanks to all Twitter people participating to the &lt;a href=&quot;https://twitter.com/search?q=%23choosehttpstatuscode&amp;amp;src=typed_query&quot;&gt;#choosehttpstatuscode&lt;/a&gt; polls and discussions&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/&quot;&gt;1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/&quot;&gt;3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;4 - Empty list, HTTP status code 200 vs 204 vs 404&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-context&quot;&gt;The context&lt;/h1&gt;

&lt;p&gt;When you need to represent lists (aka collection resources) in a REST/RESTful/RESTish API, a usual design pattern is to represented with them a &lt;code&gt;/resources&lt;/code&gt; (or &lt;code&gt;/resource&lt;/code&gt;, read &lt;a class=&quot;post-link&quot; href=&quot;/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/&quot;&gt;/resources rules and /resource sucks … or is it the other way around?&lt;/a&gt;).
More often than not, you’ll need to be able to return a subset of the list’s elements.
To do so, a usual (if not standard) design pattern is to add query parameters to provide search filters.
If a &lt;code&gt;GET /users&lt;/code&gt; is supposed to return a list containing all (actually accessible to the consumer and possibly to the end user) users, a &lt;code&gt;GET /users?name=spock&lt;/code&gt; is supposed to return a list containing only the users whose name is &lt;code&gt;spock&lt;/code&gt;.
The question we will answer today basically is: which HTTP status code respond with when returning an empty list.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/empty-lists-http-status-code-200-vs-204-vs-404/twitter-poll.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Twitter poll results&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;According to my Twitter pool, 51% of respondents would return a &lt;code&gt;200 OK&lt;/code&gt;, while 24% would return a &lt;code&gt;204 No Content&lt;/code&gt; and 25% would return a &lt;code&gt;404 Not Found&lt;/code&gt;.
Let’s see what could be the correct answers according to RFC(s) and common practice.&lt;/p&gt;

&lt;h1 id=&quot;the-obvious-200-ok&quot;&gt;The obvious 200 OK&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 200 (OK) status code indicates that the request has succeeded.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.3.1&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.3.1&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Let’s start with the most common and valid response in such a case: &lt;code&gt;200 OK&lt;/code&gt;.
When responding to &lt;code&gt;GET /users&lt;/code&gt;, the API will respond with that HTTP status code along with a list of all (actually accessible to the consumer and possibly to the end user) users users.
When responding to &lt;code&gt;GET /users?name=smith&lt;/code&gt;, the API will respond also that with HTTP status code along with a list contains all users named &lt;code&gt;smith&lt;/code&gt;.
And finally when responding to &lt;code&gt;GET /users?name=spock&lt;/code&gt; and if there are no user name &lt;code&gt;spock&lt;/code&gt;, the API will respond yet another time with that HTTP status code but this time along with an empty list.
That is actually the most common response I have ever seen, probably because most people consider that the &lt;code&gt;/users&lt;/code&gt; collection/list resource exists and &lt;code&gt;name&lt;/code&gt; query param is used to filter the content of the list.&lt;/p&gt;

&lt;p&gt;But there is a more specific HTTP status code that could do the trick too.&lt;/p&gt;

&lt;h1 id=&quot;the-not-so-current-204&quot;&gt;The not so current 204&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 204 (No Content) status code indicates that the server has successfully fulfilled the request and that there is no additional content to send in the response payload body.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.3.5&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.3.5&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;While &lt;code&gt;200 OK&lt;/code&gt; being a valid and the most common answer, returning a &lt;code&gt;204 No Content&lt;/code&gt; could make sense as there is absolutely nothing to return.
It is indeed more often used when responding to a &lt;code&gt;PUT&lt;/code&gt; (replace) or a &lt;code&gt;PATCH&lt;/code&gt; (partial update), when servers don’t want to bother returning the replaced/updated resource or on a &lt;code&gt;DELETE&lt;/code&gt; because there is usually nothing to return after a deletion.
But it can be used on a &lt;code&gt;GET&lt;/code&gt; too.
If the request is valid, has been successfully fulfilled and if there is no additional content to send (which is the case as the returned list would be empty),  &lt;code&gt;204 No Content&lt;/code&gt; is perfectly understandable and valid answer.&lt;/p&gt;

&lt;p&gt;It’s a valid response but I personally will not use it and do not recommend to use it in that case in my context.
Because it is not that common (based on my experience, it’s not absolute truth) and may imply more work.
Actually, I try to avoid using specific/uncommon HTTP status when a more generic/common one works too, that usually simplifies consumer’s job and also designer’s one as there are less possible choices and behaviors (I’ll write a post about that).
Though a consumer must be able to interpret any &lt;code&gt;2xx&lt;/code&gt; as as success and fallback to treat it as &lt;code&gt;200 OK&lt;/code&gt;, that means there will be no response body, so no empty list.
That could easily lead to to possible “null pointer exception” or any equivalent requiring more controls in code.
A &lt;code&gt;200 OK&lt;/code&gt; with an empty list can be treated the same as non empty list without thinking about it.
Note that, consumer may obviously have to check il the list is empty or not to possibly show a message to end user, but the exact same code will work without that control.&lt;/p&gt;

&lt;p&gt;But while simplifying choices, note that using that “simplified HTTP” stance, you’ll loose some “HTTP semantic out of the box”. 
Indeed tne major argument in favor of &lt;code&gt;204 No Content&lt;/code&gt; is that is allows to check empty search results (especially in logs) vs non empty ones without relying on specific response body’s semantic.
That’s quite an interesting feature.
Maybe we need more APIs actually fully using HTTP semantic to make this &lt;code&gt;204 No Content&lt;/code&gt; response more common and a no brainer.&lt;/p&gt;

&lt;p&gt;So choosing between &lt;code&gt;200 OK&lt;/code&gt; and &lt;code&gt;204 No Content&lt;/code&gt;, depends on you and your context.&lt;/p&gt;

&lt;h1 id=&quot;the-not-recommended-404&quot;&gt;The not recommended 404&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.4&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;I just realized that’s the fourth post in this series and &lt;code&gt;404 Not Found&lt;/code&gt; has been involved in all posts so far.
Let’s see what say the HTTP RFCs (with an s) about using it in that use case.&lt;/p&gt;

&lt;p&gt;If we look at this status code definition in RFC 7231 and if we consider that &lt;code&gt;/users&lt;/code&gt; is the resource used even when doing a &lt;code&gt;GET /users?name=spock&lt;/code&gt;, returning that HTTP status code makes no sense at all because the resource &lt;code&gt;/users&lt;/code&gt; exists, it’s just that the list it contains may be empty.&lt;/p&gt;

&lt;p&gt;But is this definition of a resource identifier (excluding query parameters) is actually the correct one?
&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7231#section-2&quot;&gt;Section 2 of RFC 7231&lt;/a&gt; states &lt;em&gt;each resource is identified by a Uniform Resource Identifier (URI), as described in Section 2.7 of &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7230#section-2.7&quot;&gt;RFC 7230&lt;/a&gt;&lt;/em&gt;.
That section 2.7 of RFC 7230 says the “query” (what is between the first &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;) is a part of the resource identifier.
If we follow the link (it’s quite a maze!) conducting to complete description of the query, we eventually arrive at &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.4&quot;&gt;Section 3.4 of RFC 3986&lt;/a&gt; that says &lt;em&gt;the query component contains non-hierarchical data that, along with data in the path component (Section 3.3), serves to identify a resource&lt;/em&gt;.
That basically means that &lt;code&gt;/users?name=spock&lt;/code&gt; is a resource identifier, so returning 404 is valid according to HTTP RFCs if we want to say “sorry no resource match the strict identifier provided in your query” or “there is no such a users list containing users named spock”.
But using that HTTP status code being valid from a pure HTTP perspective, is it actually a good idea to use it in that use case?&lt;/p&gt;

&lt;p&gt;In my humble opinion, based on my experience designing APIs, reading and listening to many API practitioners, analyzing many APIs and doing hundreds of API design reviews, I do not recommend to use it in that case because that would break a common practice.
In most REST/RESTful/RESTish APIs, a “resource identifier” is actually the resource path without the query part, that may be wrong when speaking strictly HTTP but that is the current state of common practice.
In most APIs, &lt;code&gt;404 Not Found&lt;/code&gt; is strongly attached to “there is nothing for the requested path (excluding query parameters)”.
It is returned in case involving &lt;code&gt;/path-that-does-not-exist&lt;/code&gt; or &lt;code&gt;/collection/{id that does not exist}&lt;/code&gt; (see &lt;a class=&quot;post-link&quot; href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;Choosing HTTP status codes Part 2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/a&gt; or &lt;a class=&quot;post-link&quot; href=&quot;/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/&quot;&gt;Choosing HTTP status codes Part 3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410&lt;/a&gt;) but not for empty lists (that’s usually a &lt;code&gt;2xx Success class&lt;/code&gt;).
Also, returning a &lt;code&gt;4xx Client Error Class&lt;/code&gt; says that consumer made an error, is that really the case here?
I don’t think so, the consumer just provided search filters that don’t match any element in a list.&lt;/p&gt;

&lt;p&gt;That’s my reasoned opinion of not using &lt;code&gt;404 Not Found&lt;/code&gt; for empty lists, but if you have valid reasons to use this HTTP status code for this use case, don’t forget to be consistent and provide informative error feedback.
Indeed, if we take for granted that &lt;code&gt;GET /users?name=spock&lt;/code&gt; returns a &lt;code&gt;404 Not Found&lt;/code&gt; if there are no users named spock.
What about &lt;code&gt;GET /users&lt;/code&gt; if there are no users at all? 
It should return the same HTTP status code.
And differentiating this it from a more common &lt;code&gt;/path-that-does-not-exist&lt;/code&gt; will require to add some information in the response body to explain the actual cause of this response.&lt;/p&gt;

&lt;h1 id=&quot;dx-above-all&quot;&gt;DX above all&lt;/h1&gt;

&lt;p&gt;The lesson of today is that following the HTTP protocol is one thing but there are sometimes various options with pros and cons and sometimes being overly strict can lead to design that are less easy to understand.
The question is not about achieving the most perfect design (regarding HTTP) but just achieve a design that makes sense for most people involved and proposes the best as possible DX.
And that D in DX includes developers but also designers.
Simple design rules that makes sense for most are a key factor in your APIs success.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="HTTP Status Codes" /><summary type="html">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This fourth post answers the following question: given that /users is a collection (a list) and no users are named Spock, what should return GET /users?name=spock? 200 OK, 204 No Content or 404 Not Found</summary></entry><entry><title type="html">Generating OpenAPI Descriptions. When is it a good idea?</title><link href="https://apihandyman.io/generating-openapi-descriptions-when-is-it-a-good-idea/" rel="alternate" type="text/html" title="Generating OpenAPI Descriptions. When is it a good idea?" /><published>2021-06-01T00:00:00-05:00</published><updated>2021-06-01T00:00:00-05:00</updated><id>https://apihandyman.io/generating-openapi-descriptions-with-erik-wilde</id><content type="html" xml:base="https://apihandyman.io/generating-openapi-descriptions-when-is-it-a-good-idea/">&lt;p&gt;As a follow up of my “6 reasons why generating OpenAPI sucks” post, I had the pleasure to talk about “is it a good idea to generate OpenAPI descriptions?” with &lt;a href=&quot;https://twitter.com/dret&quot;&gt;Erik Wilde&lt;/a&gt;. In this discussion, we answer this questions at various stages of the API lifecycle: design time, code time, and runtime.
&lt;!--more--&gt;
Watch on &lt;a href=&quot;https://youtu.be/YaiGbEZ0EH4&quot;&gt;Erik Wilde’s Youtube Channel&lt;/a&gt;&lt;/p&gt;</content><author><name>Erik Wilde &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">As a follow up of my “6 reasons why generating OpenAPI sucks” post, I had the pleasure to talk about “is it a good idea to generate OpenAPI descriptions?” with Erik Wilde. In this discussion, we answer this questions at various stages of the API lifecycle: design time, code time, and runtime.</summary></entry><entry><title type="html">/resources rules and /resource sucks … or is it the other way around?</title><link href="https://apihandyman.io/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/" rel="alternate" type="text/html" title="/resources rules and /resource sucks … or is it the other way around?" /><published>2021-05-26T00:00:00-05:00</published><updated>2021-05-26T00:00:00-05:00</updated><id>https://apihandyman.io/resources-vs-resource</id><content type="html" xml:base="https://apihandyman.io/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/">&lt;p&gt;Using singular or plural to represent a list of something is an old debate in computer science, especially in the database field.
But what about APIs then?
It’s still the same, if you look at various APIs, you’ll see that something like “list/search resources” could be either represented by a &lt;code&gt;GET /resources&lt;/code&gt; or a &lt;code&gt;GET /resource&lt;/code&gt;.
Who is right?
Who is wrong?
I have a preference, you may have another, but should we really give importance to such a debate?
Aren’t we missing something?
Let’s investigate that topic and discover what’s really important when choosing collection resource path.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;is-there-a-right-rest-solution&quot;&gt;Is there a “right” REST solution?&lt;/h1&gt;

&lt;p&gt;Regarding choosing between &lt;code&gt;/customer&lt;/code&gt; and &lt;code&gt;/customers&lt;/code&gt;, I often meet people who ask me “is &lt;em&gt;whatever solution&lt;/em&gt; RESTful?” which basically means “what is the &lt;em&gt;right&lt;/em&gt; solution?”.
When doing a choice, I always try to refer to a RFC, standard or common practice in order to make the “right” choice.
So, let’s see what the &lt;a href=&quot;https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;REST Architectural Style dissertation&lt;/a&gt; says about that.&lt;/p&gt;

&lt;p&gt;In short, REST is an architectural style which has been created by Roy Fielding to explain how distributed applications should interact with each other.
He did that to explain how the HTTP protocol work and analyze factually the impact of its possible evolutions.
Actually, he chose to describe factually a model and confront others ideas to this model, rather than just saying “my way is the best”, which is something that we all should think about.
This architectural style defines a set of constraints (client/server separation, statelessness, cacheability, layered system, uniform interface and code on demand)that a REST system must conforms to.&lt;/p&gt;

&lt;p&gt;REST APIs (or RESTful) APIs are supposed to embrace the REST Architectural Style and its constraints.
Actually, this more often than not means those APIs try to conform more or less to HTTP semantic without thinking too much about all REST constraints.
Speaking of constraints, does Mr Fielding dissertation talks about choosing resources paths?
Resource paths (or resource identifiers) are not precisely identified as a constraint but there are some guidance provided:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The definition of resource in REST is based on a simple premise: identifiers should change as infrequently as possible. Because the Web uses embedded identifiers rather than link servers, authors need an identifier that closely matches the semantics they intend by a hypermedia reference, allowing the reference to remain static even though the result of accessing that reference may change over time. REST accomplishes this by defining a resource to be the semantics of what the author intends to identify, rather than the value corresponding to those semantics at the time the reference is created. It is then left to the author to ensure that the identifier chosen for a reference does indeed identify the intended semantics.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://www.ics.uci.edu/~fielding/pubs/dissertation/evaluation.htm#sec_6_2_1&quot;&gt;Roy Fielding, Architectural Styles and the Design of Network-based Software Architectures&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;For what matters in this post, this could be summarized by saying resource identifiers (or path) should change as infrequently as possible and it is up to the author to choose the most adapted semantics.
So as you can see, nothing about singular or plural, according to the REST architectural style, it’s up to us to choose as long as it means something.&lt;/p&gt;

&lt;h1 id=&quot;what-is-sure-dont-do-both&quot;&gt;What is sure: don’t do both&lt;/h1&gt;

&lt;p&gt;So according to REST principles, &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/resource&lt;/code&gt;, you can choose the one you like.
But you have to choose one, you can’t use both, for the sake of consistency and predictability.&lt;/p&gt;

&lt;p&gt;Indeed, it would be quite awkward to do &lt;code&gt;GET /customers&lt;/code&gt; to search or list customers and a &lt;code&gt;GET /order&lt;/code&gt; to list orders.
APIs are supposed to be consistent with themselves and other APIs of the same domain/organization.
Choose one format, write it down in your API design guidelines and ensure that everyone designing APIs in your organization stick to this choice.&lt;/p&gt;

&lt;p&gt;And for those who would come to the idea of using &lt;code&gt;GET /customers&lt;/code&gt; to search or list customers and a &lt;code&gt;GET /customer/{customerId}&lt;/code&gt; to read a specific customer, because “oh, we are reading a single element so let’s go singular now”.
Please don’t do that.&lt;/p&gt;

&lt;p&gt;If people do a &lt;code&gt;GET /whatever&lt;/code&gt; to get a list of whatever they’re used to brainlessly do a &lt;code&gt;GET /whatever/{whateverId}&lt;/code&gt; to get a specific element.
You’ll disturb many people by breaking habits.
But there are more than habits involved here, doing that simply breaks the semantic of paths.
In a file system, do folder names change when you target a file inside them?
In a database, do you change table name when doing a &lt;code&gt;select * where id=whateverId&lt;/code&gt;?
No.
So, please chose one side or the other, no middle ground here.&lt;/p&gt;

&lt;h1 id=&quot;my-reasoned-opinion-plural&quot;&gt;My reasoned opinion: plural&lt;/h1&gt;

&lt;p&gt;I use plural names for collections mostly because of semantics: plural means “it contains multiple elements”. 
Note that I use plural in both path (&lt;code&gt;/customers&lt;/code&gt; is a path of collection resource) but also in data models (&lt;code&gt;customers&lt;/code&gt; is a property representing a list of customers inside a data model).&lt;/p&gt;

&lt;p&gt;Using plural name for a collection also avoid surprise when having singleton resources, for instance &lt;code&gt;GET /customers/{customerId}/address&lt;/code&gt;, I know by reading this that I’ll manipulate a single address and not a list of address.
That’s the main reason why I’m not using singular.
Using singular for collection name would make that less obvious, though the data returned by a &lt;code&gt;GET /customer/{customerId}/address&lt;/code&gt; would give more than a hints about what is actually returned (list or single element).
But that requires to trigger a read operation call to know that (if we don’t rely on documentation at all).&lt;/p&gt;

&lt;p&gt;But let’s be objective, the plural option is not without drawbacks.
Obviously as a machine getting data containing a &lt;code&gt;customerId&lt;/code&gt; (singular) and trying to guess how the API work without taking advantage of the documentation, I have some work to do to “know” that the plural of customer is customers in order to try a &lt;code&gt;GET /customers/{customerId}&lt;/code&gt; (which is quite simple here but determine singular or plural is not always that simple).
But if your API is a true REST API that shouldn’t be a problem because it provides the ready to use links to other resources.
Problem solved if that’s actually a problem, which is not the case most of the time.
Indeed most people don’t care about hypermedia nor automatic API discovery and rely on the API documentation to write code that actually use the API (even for testing).&lt;/p&gt;

&lt;p&gt;Regarding the singular option, I also wonder how then would be called a customer list inside a data model?
I would probably add a suffix (&lt;code&gt;customerList&lt;/code&gt;) but then that introduce inconsistency between path and data, that is another reason why I prefer the plural option.&lt;/p&gt;

&lt;h1 id=&quot;the-truth-is-elsewhere&quot;&gt;The truth is elsewhere&lt;/h1&gt;

&lt;p&gt;I think the lesson to learn here is not determining which one is “better” between &lt;code&gt;/resources&lt;/code&gt; and &lt;code&gt;/resource&lt;/code&gt;, I’m sure someone using singular name has plenty of good reason doing so.
No, the lesson here is that when there is non refutable standard solution, you have to reason to choose one that makes sense.
Avoid “just because” solutions that you can’t explain.
Avoid at all costs “wtf” solutions (like &lt;code&gt;GET /customers&lt;/code&gt; + &lt;code&gt;GET /customer/{customerId}&lt;/code&gt;) introducing complexity or inconsistency.
And don’t forget to put it in your guidelines and ensure that everyone in your organization stick to that decision for the sake of consistency.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Using singular or plural to represent a list of something is an old debate in computer science, especially in the database field. But what about APIs then? It’s still the same, if you look at various APIs, you’ll see that something like “list/search resources” could be either represented by a GET /resources or a GET /resource. Who is right? Who is wrong? I have a preference, you may have another, but should we really give importance to such a debate? Aren’t we missing something? Let’s investigate that topic and discover what’s really important when choosing collection resource path.</summary></entry></feed>