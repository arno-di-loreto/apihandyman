<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-01-03T03:21:21+00:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">The Augmented API Design Reviewer</title><link href="https://apihandyman.io/the-augmented-api-design-reviewer/" rel="alternate" type="text/html" title="The Augmented API Design Reviewer" /><published>2020-12-13T00:00:00+00:00</published><updated>2020-12-13T00:00:00+00:00</updated><id>https://apihandyman.io/the-augmented-api-design-reviewer</id><content type="html" xml:base="https://apihandyman.io/the-augmented-api-design-reviewer/">&lt;p&gt;My 2020 talk, &lt;em&gt;The Augmented API Design Reviewer&lt;/em&gt; is about (partial) API Design review automation with the OpenAPI Specification and Spectral.&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;API Design Reviews can be a total nightmare when it comes to check API Design Guidelines conformance. Hopefully, this can be automated using the OpenAPI Specification and Spectral, a JSON/YAML linter. Using these tools, you’ll be able to focus on other more interesting tasks such as investigating if the API fullfils the identified needs. But that will only work if you know how to build and use Spectral rulesets. During this session you’ll discover the basics of Spectral and how to actually use it at scale by discovering how to design rules and rulesets, how to ensure they actually work, and also by learning the differents ways of using Spectral.&lt;/p&gt;

&lt;h1 id=&quot;video&quot;&gt;Video&lt;/h1&gt;

&lt;div id=&quot;MAHW5DmM9j4&quot; class=&quot;third-party-content third-party-content-youtube&quot;&gt;
    &lt;div class=&quot;card third-party-content-warning&quot;&gt;
        &lt;img class=&quot;card-img&quot; src=&quot;/images/thirdpartycontents/the-augmented-api-design-reviewer-asc.jpg&quot; alt=&quot;Card image&quot; /&gt;
        &lt;div class=&quot;card-img-overlay d-flex&quot;&gt;
            &lt;div class=&quot;my-auto mx-auto text-center&quot;&gt;
                &lt;p&gt;This content is hosted on youtube.com.&lt;/p&gt;
                &lt;p&gt;By showing this third party content you accept YouTube (Google)'s 
                    &lt;a class=&quot;privacy-policy&quot; href=&quot;https://policies.google.com/privacy&quot; target=&quot;_blank&quot;&gt;privacy policy&lt;/a&gt;.
                &lt;/p&gt;
                &lt;form&gt;
                    &lt;a href=&quot;javascript:thirdPartyConsent('MAHW5DmM9j4', 'youtube')&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Show third party content&lt;/a&gt;
                    &lt;div class=&quot;form-check&quot;&gt;
                        &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input third-party-content-remember&quot; /&gt;
                        &lt;label class=&quot;form-check-label&quot; for=&quot;exampleCheck1&quot;&gt;Remember my choice&lt;/label&gt;
                        &lt;p&gt;(can be changed in &lt;a class=&quot;privacy-policy&quot; href=&quot;/privacy&quot;&gt;privacy settings&lt;/a&gt;)&lt;/p&gt;
                      &lt;/div&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;iframe-container third-party-content-iframe third-party-content-iframe-disabled&quot;&gt;
        &lt;iframe class=&quot;iframe-responsive&quot; data-src=&quot;https://www.youtube-nocookie.com/embed/MAHW5DmM9j4?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
        &lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;slides&quot;&gt;Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/slidedecks/the-augmented-api-design-reviewer/the-augmented-api-design-reviewer.pdf&quot; download=&quot;the-augmented-api-design-reviewer.pdf&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Download PDF&lt;/a&gt;
&lt;a href=&quot;/slidedecks/the-augmented-api-design-reviewer/the-augmented-api-design-reviewer.pdf&quot; target=&quot;_blank&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Open PDF&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;iframe-container&quot;&gt;
    &lt;iframe class=&quot;iframe-responsive&quot; src=&quot;/slidedecks/the-augmented-api-design-reviewer/index.html&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talk" /><summary type="html">My 2020 talk, The Augmented API Design Reviewer is about (partial) API Design review automation with the OpenAPI Specification and Spectral. Abstract API Design Reviews can be a total nightmare when it comes to check API Design Guidelines conformance. Hopefully, this can be automated using the OpenAPI Specification and Spectral, a JSON/YAML linter. Using these tools, you’ll be able to focus on other more interesting tasks such as investigating if the API fullfils the identified needs. But that will only work if you know how to build and use Spectral rulesets. During this session you’ll discover the basics of Spectral and how to actually use it at scale by discovering how to design rules and rulesets, how to ensure they actually work, and also by learning the differents ways of using Spectral. Video This content is hosted on youtube.com. By showing this third party content you accept YouTube (Google)'s privacy policy. Show third party content Remember my choice (can be changed in privacy settings) Slides Download PDF Open PDF</summary></entry><entry><title type="html">Doing APIs right and doing right APIs</title><link href="https://apihandyman.io/apidays-interface-doing-apis-right-and-doing-right-apis/" rel="alternate" type="text/html" title="Doing APIs right and doing right APIs" /><published>2020-07-26T00:00:00+00:00</published><updated>2020-07-26T00:00:00+00:00</updated><id>https://apihandyman.io/api-days-interface-apis-right-right-apis</id><content type="html" xml:base="https://apihandyman.io/apidays-interface-doing-apis-right-and-doing-right-apis/">&lt;p&gt;API Days Interface being online made the experience a bit different but after 3 days, I felt almost as usual; exhausted and my brain boiling. In previous post, I shared my feelings about my first online conference. Now let’s talk about the content; Sam Newman doing a facepalm, API design, architecture, governance and my new favorite quote “Doing APIs right, doing right APIs”.
 &lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;API Days Interface 2020 Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;
INTERFACE, by API Days gathered best past 7 years speakers, entire global community, and the API landscape leaders around our most popular topics. In this 2 part series, I share my feeling attending an online conference and what I learned.
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/apidays-interface-speaking-into-the-void/&quot;&gt;1 - Speaking into the void&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;2 - Doing APIs right and doing right APIs&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;design&quot;&gt;Design&lt;/h1&gt;

&lt;p&gt;As usual, API design is a center piece of any API conference. Again we had brilliant demonstration of why the API design first approach prevail and I was pleased to see some long awaited features added to the OpenAPI Specification.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Speaker&lt;/th&gt;
      &lt;th&gt;Session&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Mike Amundsen, Author of “Designing and Building Web APIs” and “Restful API Design”&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f087fcd4b0835001b00cc52&quot; title=&quot;Building great web APIs&quot;&gt;Building great web APIs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Alianna Inzana, Senior Director, Product Management @SmartBear&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bde6f86dfb0001b75dfb9&quot; title=&quot;/Contract/{Collaboration}/DrivenDevelopment&quot;&gt;/Contract/{Collaboration}/DrivenDevelopment&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Darrell Miller, Board Member of Open API Initiative&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c0b5e86dfb0001b75dfe9&quot; title=&quot;The State of Open API Specification&quot;&gt;The State of Open API Specification&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;design-first&quot;&gt;Design first&lt;/h2&gt;

&lt;p&gt;Both &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bde6f86dfb0001b75dfb9&quot; title=&quot;/Contract/{Collaboration}/DrivenDevelopment&quot;&gt;Alianna Inzana&lt;/a&gt; and &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f087fcd4b0835001b00cc52&quot; title=&quot;Building great web APIs&quot;&gt;Mike Amundsen&lt;/a&gt; did a wonderful job describing the API design and build lifecycle and both especially said that design forst approach is key.&lt;/p&gt;

&lt;p&gt;An API must be created to solve business problems for people. In order to be sure that you build the right API and so identified the real needs, you must use a design first approach and request feedback early. Using a standardized API description like the OpenAPI specification and creating mocks will make it easier to check if you’re doing the right API. By working on a design and not an implementation, you can do modification easily and quickly.&lt;/p&gt;

&lt;h2 id=&quot;openapi-specification-improvements&quot;&gt;OpenAPI Specification improvements&lt;/h2&gt;

&lt;p&gt;At a more ground level regarding API design, &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c0b5e86dfb0001b75dfe9&quot; title=&quot;The State of Open API Specification&quot;&gt;Darrell Miller&lt;/a&gt; made my day by announcing two major improvements coming with version 3.1 of the Open Specification (among other modifications):&lt;/p&gt;

&lt;p&gt;OpenAPI 3.1 supports original and standard JSON Schema in its latest version, no more fancy OpenAPI/Swagger variation&lt;/p&gt;

&lt;p&gt;And at last we’ll be able to have a description (and all other possible properties) along with a $ref. Any property set beside the $ref will override what comes from the $ref.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/darrel-miller-overrive-ref.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Darrel Miller&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;APIs and their implementation are nothing without good architecture reliying on clearly identified and understood principles. And they are nothing without organization around them. This conference proposed some sessions that were really good at talking about this.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Speaker&lt;/th&gt;
      &lt;th&gt;Session&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Mary Poppendieck, &lt;em&gt;Author of “Lean Software Development: An Agile Toolkit&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f07f7db516de3001b3b6462&quot; title=&quot;Where do great architecture come from&quot;&gt;Where do great architecture come from&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sam Newman, &lt;em&gt;Author of “Building Microservices and Monolith to Microservices”&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bb86686dfb0001b75df89&quot; title=&quot;Microservices, APIs, and the Cost Of Change&quot;&gt;Microservices, APIs, and the Cost Of Change&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mark Cheshire, &lt;em&gt;Director Product Management for API Management @Red Hat&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c005886dfb0001b75dfdd&quot; title=&quot;When to manage Microservices as a Mesh or as APIs?&quot;&gt;When to manage Microservices as a Mesh or as APIs?&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ronnie Mitra, &lt;em&gt;Author of “Microservice Architecture”&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bef8086dfb0001b75dfc5&quot; title=&quot;The Next API Strategy: Going Borderless&quot;&gt;The Next API Strategy: Going Borderless&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Matthew Reinbold, Director, Platform Services Center of Excellence @Capital One&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f096a054b0835001b00cd16&quot; title=&quot;APIs are Arrangements of Power. Now what?&quot;&gt;APIs are Arrangements of Power. Now what?&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;principles-and-responsability&quot;&gt;Principles and responsability&lt;/h2&gt;

&lt;p&gt;Mary Poppendieck gave an amazing talk about evolution of architectures from the 60s to our time with her &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f07f7db516de3001b3b6462&quot; title=&quot;Where do great architecture come from&quot;&gt;Where do great architecture come from&lt;/a&gt; session. It’s a pity she didn’t have more time, hopefully she may come back at another API Days with a longer slot. I will not retrace here in details all what she said (if you watch only one video of this conference, this is the one).&lt;/p&gt;

&lt;p&gt;In order to build better systems we can rely on principles discovered throughout the years thanks to past failures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redundancy: instead or running one instance, run many&lt;/li&gt;
  &lt;li&gt;Fault isolation: when a component fails, others can still run&lt;/li&gt;
  &lt;li&gt;Local contral: gives each component the capability of running on its own even when it relies on others (caching results for example)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we are still discovering new principles even when relying on old ones. For example in 2000, Google solved a major crisis (indexing software stopped working due to faulty hardware). By combining redundancy and fault isolation principles, they build an architecture composed of cheap machines that tolerates such failure. In 2010 Amazon make a ground breaking evolution by getting rid of the sacrosanct central database and building a distributing database.&lt;/p&gt;

&lt;p&gt;Another interesting aspects is that some architecture principles are not only related to software or hardware. They can be related to organization and people too. And actually, with systems being more and more complex, archicture decisions are mostly people related.&lt;/p&gt;

&lt;p&gt;In 2000, Jeff Bezos, Amazon’s CEO, believed that his company (and the underlying system) couldn’t become huge without encouraing team autonomy, hence the famous memo.&lt;/p&gt;

&lt;p&gt;Teams must be autonomous but do be efficient they need to understand that they are part of a bigger system. Their mission is part of an overall mission.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/mary-poppendieck-responsibility.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Mary Poppendieck&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;microservice-vs-api&quot;&gt;Microservice vs API&lt;/h2&gt;

&lt;p&gt;Sam Newman gave a definition of a microservice and how it relates to API; this is important to remind because the “microservice” name tend to be used for things that are actually not “microservices” and also because APIs and microservices are too often confused:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A microservice is independently deployable&lt;/li&gt;
  &lt;li&gt;A microservice runs as a separate process&lt;/li&gt;
  &lt;li&gt;A microservice’s data are hidden inside its boudaries&lt;/li&gt;
  &lt;li&gt;A microservice can be called via some form of network call: for example via an API which becomes a mean to hide internal implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the microservice is not an API and reverse. The API is only an interface to a microservice.
Also, if your “microservices” share a database with others or are wars or ears running inside a Jboss server for example, those are not microservices.&lt;/p&gt;

&lt;h2 id=&quot;versioning-handling-changes&quot;&gt;&lt;del&gt;Versioning&lt;/del&gt; Handling changes&lt;/h2&gt;

&lt;p&gt;Sam Newman gave a deep dive into versioning during his &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bb86686dfb0001b75df89&quot; title=&quot;Microservices, APIs, and the Cost Of Change&quot;&gt;session&lt;/a&gt;. He especially explained that versioning is not the real problem. It’s not about version 1 and version 2. The real problem is how to handle change, how to handle backward compatibility and incompatibility. And this is even more true when doing microservices which are supposed to be independently deployable: maintaining backward compabitibility is key.&lt;/p&gt;

&lt;p&gt;He gave 4 concrete tips to do so.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have to admit that I was quite proud of myself because I realized that I always say what he told us during my API Design reviews!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;tip-1-hiding-information-is-key&quot;&gt;Tip #1: Hiding information is key.&lt;/h3&gt;

&lt;p&gt;If an upstream consumer can reach into your internal implementation then you can’t change the implementation without breaking the consumer. Consumer and provided are tightly coupled, making any change risky and even impossible.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/sam-newman-01-coupling-to-internal-implementation.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Sam Newman&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Modularization is not a new concept that appeared with APIs and microservices. In 1971, D.L. Parnas published &lt;em&gt;&lt;a href=&quot;https://kilthub.cmu.edu/articles/journal_contribution/On_the_criteria_to_be_used_in_decomposing_systems_into_modules/6607958&quot;&gt;On the criteria to be used tin decomposing systems into modules&lt;/a&gt;&lt;/em&gt;. He looked at how best to define module boundaries and found that “information hiding” worked best.&lt;/p&gt;

&lt;p&gt;Your interface (API) shows what is shared, the rest data and implementation details is your own business. That’s why it is really important do have separate models for data, objects and exposed interfaces (as also always say Mike Admundsen).&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/sam-newman-02-information-hiding.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Sam Newman&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If the whole becomes to big, you can split your internal implementation in various sub modules, while keeping the shared interface unique and unmodified. But be warned that only works if the whole set of microservices/modules is handled by the same team.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/sam-newman-03-multiple-microservices.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Sam Newman&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tip-2-cost-of-change-varies&quot;&gt;Tip #2: Cost of change varies&lt;/h3&gt;

&lt;p&gt;Not all changes have the same cost. Some changes have critical consequences and some others have very limited impacts.&lt;/p&gt;

&lt;p&gt;A modification inside a team, on the set of microservices of the Accounts domain above for example has a very low cost because it only has internal impacts. If the change, like a modification of the shared interface, impacts an other team inside the company the cost is higher. If this shared interface is used by multiple teams inside the company, the cost increases again. And lastly, if this change impacts people outside the company, the cost is even more high.&lt;/p&gt;

&lt;p&gt;That means the cost of change increases with the “distance” between the provided and consumer (inside the team, inside the company, outside the company) and the number of consumers.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/sam-newman-04-cost-of-change.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Sam Newman&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The cost of change leads to different ways of taking the decision to actually do this change or not. According to Jeff Bezos, Amazon’s CEO, there are 2 types of decisions. Type 1 are irreversible decisions, it’s impossible to go back, you have to think carefully before taking them. On the opposite type 2 ones are reversible, they don’t cost 0 but you can change your mind very easily and you take no risk doing them.&lt;/p&gt;

&lt;p&gt;If the change has impacts only inside a team, that’s a reversible decision make can be taken locally inside the team. On the opposite, a decision impacting a public facing API provided to people outside the company is an irreversible decision which requires more discussion and a formal approval.Getting the balance right regarding those decisions is key to having an organization that thrives from team autonomy.&lt;/p&gt;

&lt;h3 id=&quot;tip-3-catch-accidental-breakages&quot;&gt;Tip #3: Catch accidental breakages&lt;/h3&gt;

&lt;p&gt;Even when having found the right balance for decision making, people can still do mistakes like replacing a property by another in an API response (that’s actually removing the original property). Such modification breaks the consumers.&lt;/p&gt;

&lt;p&gt;That’s why it is important to have separate models (as already said in tip #1). Doing such modification requires more work and requires explicit changes that requires you to think about it and so you’ll notice it.&lt;/p&gt;

&lt;p&gt;But you can’t rely only on people actually noticing that, you need testing. And to do tests, you need schema (JSON schema, Protobuf, OpenAPI, …) to actually check the difference between old and new version (that’s also why design first is important).&lt;/p&gt;

&lt;h3 id=&quot;tip-4-expose-multiple-endpoints&quot;&gt;Tip #4: Expose multiple endpoints&lt;/h3&gt;

&lt;p&gt;Once you know you are doing a change impacting others, avoid lock step release. Requireing coordination between consumer and provider is the enemy, the anti-thesis of independen deployability. That means, you must give to to consumer to upgrade/&lt;/p&gt;

&lt;p&gt;To do so you can expose multiple separates ervice versions. But there are a few challenges doing so:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Service discovery&lt;/li&gt;
  &lt;li&gt;Doubling infrastructure costs money&lt;/li&gt;
  &lt;li&gt;Keeping data consistency between the 2 versions can be hard&lt;/li&gt;
  &lt;li&gt;And also bug fixing can be bothering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To solve that you can expose 2 endpoints, one for each version inside the same component. That way, you shift from complex infrastructure issue to a more simpler design/implementation issue.&lt;/p&gt;

&lt;p&gt;Switching from one version to another can be as simple as using path, the accept header or a domain.&lt;/p&gt;

&lt;h2 id=&quot;microservices-indieservices&quot;&gt;&lt;del&gt;Microservices&lt;/del&gt; Indieservices&lt;/h2&gt;

&lt;p&gt;During Q&amp;amp;A, Mehdi Medjaoui asked Newman how he felt about miniservices, macroservices, nanoservices and other {whatever size}services. His reaction made me burst out laughing (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bb86686dfb0001b75df89&quot; title=&quot;Microservices, APIs, and the Cost Of Change&quot;&gt;jump at 31:45&lt;/a&gt; to see it), he looked totally desperate and did a long facepalm.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/facepalm.gif&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Jean Luc Picard doing a facepalm&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Sam Newman's reaction (reenactment by Jean-Luc Picard)&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;More seriously, he stated that the name microservice which imply “size” is actually a problem. He want to go back in time and choose another name focusing on the real important aspect: independent deployability.&lt;/p&gt;

&lt;p&gt;Medjaoui proposed indieservices and after 2 second Newman said that would be probably better than microservices.&lt;/p&gt;

&lt;h2 id=&quot;boundaries&quot;&gt;Boundaries&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bef8086dfb0001b75dfc5&quot; title=&quot;The Next API Strategy: Going Borderless&quot;&gt;The Next API Strategy: Going Borderless&lt;/a&gt; by Ronnie Mitra and &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c005886dfb0001b75dfdd&quot; title=&quot;When to manage Microservices as a Mesh or as APIs?&quot;&gt;Choosing between API gateway and service mesh&lt;/a&gt; by Mark Cheshire sessions gave really good insights about how to define and manage the internal and external boundaries or your system and they resonate with what Sam Newman said about microservices.&lt;/p&gt;

&lt;h3 id=&quot;boundaries-as-a-provider&quot;&gt;Boundaries as a provider&lt;/h3&gt;

&lt;p&gt;Mark Cheshire said that at first making the decision between API Management and Service Mesh looks quite simple.&lt;/p&gt;

&lt;p&gt;API Management is used for North-South traffic. North being outside the organization and south being inside. With API Management, there’s an API Gateway (a proxy) that sits between the provider and its consumers. Consumers can access to APIs exposed on that gateway by registering to a developer portal. Those APIs are considered as products.&lt;/p&gt;

&lt;p&gt;Service Mesh is used for East-West traffic, both sides being inside the organization. Service mesh comes as a side car proxy on microservices which handles the communication with other microservices (dealing with discovery, logs/observability, retry, …).&lt;/p&gt;

&lt;p&gt;So it looks like the decision should be made on does the communication take place inside or outide my company. But that’s not the case. A company/organization can be split in various domains (however you call them). And these domain boundaries must be treated the same way as enterprise boundary (API Management). Inside the domains you may use service meshes.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/mark-cheshire-03-domain-boundaries.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Mark Cheshire/Redhat&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;What distingues inter and intra-domain traficc is the relation between provider and consumers. Are they in the same team? How many consumers? Explicit contract needed?&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/mark-cheshire-04-inter-vs-intra-domain-traffic.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Mark Cheshire/Redhat&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;boundaries-as-a-consumer&quot;&gt;Boundaries as a consumer&lt;/h3&gt;

&lt;p&gt;Ronnie Mitra explained that a system is usually complex and difficult to understand and use. Hiding complexity of microservices, APIs, data and third party providers will ease the use of this complex system.&lt;/p&gt;

&lt;p&gt;You can’t change someone else’s API (&lt;em&gt;I add: you can’t change someone else’s API even if they are in the same company as yours, but that’s another story I’ll tell another day&lt;/em&gt;). In order to avoid building a brittle and tightly couple relation with API providers, you must proxy others APIs with a sub-domain having its own (anti-corruption) model. Reminder: That’s basically what you would do for your own API, separating data/object/API model as sais Sam Newman and Mike Amundsen.&lt;/p&gt;

&lt;p&gt;Capabilities don’t interoperate. You may need to build an layer of orchestration to weave microservices capabilities together. There’s a big centralization/decentralization trade-off decision to do here.&lt;/p&gt;

&lt;p&gt;Data is all over the place (&lt;em&gt;especially when splitted across dozens if not hundreds of microservices&lt;/em&gt;). Data need to be collected and catalgues to be useful.&lt;/p&gt;

&lt;p&gt;So many APIs and so many components lead to a system that is difficult to understand and manage. You need to build access and management components that represent this system as a monolith.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/ronnie-mitra-05-borderless.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        &lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Ronnie Mitra&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;By building all these layers, creating new boundaries, you can create a system so simple that it looks totally borderless.&lt;/p&gt;

&lt;h2 id=&quot;organization&quot;&gt;Organization&lt;/h2&gt;

&lt;p&gt;As you may have noticed, architecture is more about principles and choosing the right organization than technology. Actually technology questions are not the main ones. In his session &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f096a054b0835001b00cd16&quot; title=&quot;APIs are Arrangements of Power. Now what?&quot;&gt;“APIs are Arrangements of Power. Now what?”&lt;/a&gt;, Matthew Reinbold gave really good insights about how organization matters for architecture and strategy.&lt;/p&gt;

&lt;p&gt;The most important one is that you can take advantage of architecture to change your organization. This strategy is called the inverse Conway maneuver in reference to Conway’s law that tells “Organizations design systems that mirrors their own communication structure”.&lt;/p&gt;

&lt;p&gt;Why doing that? Because in order to succeed, an organization must realigned itself around capabilities and the architecture must be aligned on this too. Changing organization is always hard and sometimes it may be easier to start with architecture, so the inverse Conway maneuver makes sense. And if you don’t think this works, just take a look at what Amazon became after the Jeff Bezos mandates.&lt;/p&gt;

&lt;h1 id=&quot;governance&quot;&gt;Governance&lt;/h1&gt;

&lt;p&gt;You may want to skip that section because you think governance sucks, but please read it. Indeed, for many people, governance is a dirty word, synonym of pointless, useless and terrible processes and constraints dictated by some crazy people from the top of their ivory towers. And they are right because unfortunately such totally wrong governance exists. Hopefully it’s not always the case, there are some people and company who do governance in a totally different way.&lt;/p&gt;

&lt;p&gt;Without &lt;em&gt;proper&lt;/em&gt; governance at &lt;em&gt;every level&lt;/em&gt; from design to API strategy, your company’s employees will be very sad and your company may even fail. Most sessions were tied in a way or another to governance (even the one I talked about in previous section about architecture). The following ones were explicitely talking about this topic and may give you some ideas to create or improve your existing governance.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Speaker&lt;/th&gt;
      &lt;th&gt;Session&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alan Glickenhouse, API Strategist @IBM&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09bc4b8c46ce001bff21a6&quot; title=&quot;Recommendations for API Governance and an API Economy Center of Excellence&quot;&gt;Recommendations for API Governance and an API Economy Center of Excellence&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Phil Sturgeon, Architect @Stoplight&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c32ba86dfb0001b75e013&quot; title=&quot;Automating style guides for REST, gRPC, or GraphQL&quot;&gt;Automating style guides for REST, gRPC, or GraphQL&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Erik Wilde, Co-Author of “Continuous API Management”&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0972664b0835001b00cd1c&quot; title=&quot;How to Guide your API Program and Platform&quot;&gt;How to Guide your API Program and Platform&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;John Phenix, Chief API Architect @HSBC&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09b44c8c46ce001bff21a0&quot; title=&quot;Automating API Governance&quot;&gt;Automating API Governance&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arnaud Lauret, Author of “The Design of Web APIs”&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f091a6c4b0835001b00cca7&quot; title=&quot;The Augmented API Design Reviewer&quot;&gt;The Augmented API Design Reviewer&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What follows is a summary of all ideas coming from all sessions around governance.&lt;/p&gt;

&lt;h2 id=&quot;the-right-level-of-governance&quot;&gt;The right level of governance&lt;/h2&gt;

&lt;p&gt;Governance is not doing the police. Governance is doing all that can be done to make people do the right thing the right way easily. Whatever this thing is, creating an API product, design an API, securing an API, … A very good governance is the one you don’t actually see.&lt;/p&gt;

&lt;p&gt;You don’t need to govern everything just because you need it, governance must have a reason, an objective. You must govern as little as possible, you must govern the minimum need to deliver value and manage risk (the consequences of not doing right).&lt;/p&gt;

&lt;h2 id=&quot;guidelines&quot;&gt;Guidelines&lt;/h2&gt;

&lt;p&gt;You cannot govern based of personal preferences that will change from one day to another, from one person to another. You need clearly written rules, you need guidelines. Often reduced to API Design Guidelines, you can (even must) create guidelines for every level: API Strategy, API Program, API Platform, API Product, API Design, architecture, domain definition, …&lt;/p&gt;

&lt;p&gt;The first step will be to make people share their practices, then you’ll be able to create your guidelines based on those practices.&lt;/p&gt;

&lt;p&gt;Guidelines describe (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0972664b0835001b00cd1c&quot; title=&quot;How to Guide your API Program and Platform&quot;&gt;Erik Wilde&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why they exist, which issue they are solving&lt;/li&gt;
  &lt;li&gt;What can be done to address this issue&lt;/li&gt;
  &lt;li&gt;How to implement the solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the major benefits of having guidelines is ensuring a certain level of consistency. Consistency matters because inconcistency wastes times, especially inconsistent API design which means that ALL consumers will have a lot of work to do (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c32ba86dfb0001b75e013&quot; title=&quot;Automating style guides for REST, gRPC, or GraphQL&quot;&gt;Phil Sturgeon&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;automating-api-design-reviews&quot;&gt;Automating API Design Reviews&lt;/h2&gt;

&lt;p&gt;API Design Guidelines are important, but let’s be honest: most APIs developers will not read the organization’s API manifesto. If they do they won’t remember it. If they do they won’t reread it looking for changes (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c32ba86dfb0001b75e013&quot; title=&quot;Automating style guides for REST, gRPC, or GraphQL&quot;&gt;Phil Sturgeon&lt;/a&gt;). So you must automate guidelines controls as much as possible to make their (and reviewer’s) life easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c32ba86dfb0001b75e013&quot; title=&quot;Automating style guides for REST, gRPC, or GraphQL&quot;&gt;Phil Sturgeon&lt;/a&gt;, &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09b44c8c46ce001bff21a0&quot; title=&quot;Automating API Governance&quot;&gt;John Phenix&lt;/a&gt; and &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f091a6c4b0835001b00cca7&quot; title=&quot;The Augmented API Design Reviewer&quot;&gt;myself&lt;/a&gt; talked about API Design review automation using &lt;a href=&quot;https://github.com/stoplightio/spectral&quot;&gt;Spectral&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We all agreed on the fact that API design review cannot be completely replace by automation. An API linter will not tell you if the design is actually accurate, if this resource’s name is the good one or if the API is actually the one that is needed. But it simplifies the process massively, removing 80% or rejections before reviewers even look.&lt;/p&gt;

&lt;h2 id=&quot;scaling-and-shifting-api-design-governance&quot;&gt;Scaling and Shifting API Design Governance&lt;/h2&gt;

&lt;p&gt;The mosy visible aspect of governance is API design governance. Without it, your API landscape will be a totally inconsistent nightmare that will make loose time to all of your consumers. Therefore you must ensure that API are design properly with API design reviews.&lt;/p&gt;

&lt;p&gt;Depending on your context (locations, size, number of APIs), you may use different organization model to do so (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09b44c8c46ce001bff21a0&quot; title=&quot;Automating API Governance&quot;&gt;John Phenix&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Centralized: A core expert team do all reviews. This is a consistent but not scalable approach&lt;/li&gt;
  &lt;li&gt;Federated: API champions enforce standard locally. This is a scalable but not consistent approach.&lt;/li&gt;
  &lt;li&gt;Automated: Designs are automatically reviewed by some magic programs. This is scalable and consistent but is far from comprehensive. Indedd, such program will not tell you if the API is the right one.&lt;/li&gt;
  &lt;li&gt;Hybrid: Focus human-power on what cannot be checked automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever approach you have, you’ll notice that in the long run the discussions will shift from “Are we doing APIs right” (meaning conforming to our design guidelines) to “Are we doing the right APIs” (API product vision).&lt;/p&gt;

&lt;h1 id=&quot;doing-apis-right-and-doing-right-apis&quot;&gt;Doing APIs right and doing right APIs&lt;/h1&gt;

&lt;p&gt;It’s time to conclude. What do I retain in the end? Well, besides Sam Newman doing a facepalm, I will remember that “it’s the people that matter, the people that last, not machines, not technology. Change is not Kubernetes or Service Mesh, change is people” (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f096a054b0835001b00cd16&quot; title=&quot;APIs are Arrangements of Power. Now what?&quot;&gt;Matthew Reinbold&lt;/a&gt;). And also a clever way to say that they are two sides of doing APIs:  “Doing APIs right and doing right APIs” (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bde6f86dfb0001b75dfb9&quot; title=&quot;/Contract/{Collaboration}/DrivenDevelopment&quot;&gt;Alianna Inzana&lt;/a&gt; and &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09b44c8c46ce001bff21a0&quot; title=&quot;Automating API Governance&quot;&gt;John Phenix&lt;/a&gt;). Based on my experience, I can tell you that helping people doing the APIs right with appropriate governance will help them making right APIs by themselves in the long run.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">API Days Interface being online made the experience a bit different but after 3 days, I felt almost as usual; exhausted and my brain boiling. In previous post, I shared my feelings about my first online conference. Now let’s talk about the content; Sam Newman doing a facepalm, API design, architecture, governance and my new favorite quote “Doing APIs right, doing right APIs”.</summary></entry><entry><title type="html">APIs You Won’t Hate Podcast - The API Handyman Cometh</title><link href="https://apihandyman.io/apis-you-wont-hate-podcast-the-api-handyman-cometh/" rel="alternate" type="text/html" title="APIs You Won’t Hate Podcast - The API Handyman Cometh" /><published>2020-07-09T00:00:00+00:00</published><updated>2020-07-09T00:00:00+00:00</updated><id>https://apihandyman.io/apis-you-wont-hate-podcast-the-api-handyman-cometh</id><content type="html" xml:base="https://apihandyman.io/apis-you-wont-hate-podcast-the-api-handyman-cometh/">&lt;p&gt;It was great to chat with Phil Sturgeon and Matt Trask on the APIs You Won’t Hate Podcast. We talked about API Design and Reviews, and we also talk about life in quarantine, as France completely shut down and how Phil made it back in time to England before the lock downs took place.
&lt;!--more--&gt;
Listen on &lt;a href=&quot;https://dev.to/apisyouwonthatepodcast/episode-6-the-api-handyman-cometh&quot;&gt;APIs You Won’t Hate&lt;/a&gt;&lt;/p&gt;</content><author><name>Phil Sturgeon, Matt Trask &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">It was great to chat with Phil Sturgeon and Matt Trask on the APIs You Won’t Hate Podcast. We talked about API Design and Reviews, and we also talk about life in quarantine, as France completely shut down and how Phil made it back in time to England before the lock downs took place.</summary></entry><entry><title type="html">I’d Rather Be Writing Podcast - API Design and Usability</title><link href="https://apihandyman.io/i-d-rather-be-writing-podcast-api-design-and-usability/" rel="alternate" type="text/html" title="I’d Rather Be Writing Podcast - API Design and Usability" /><published>2020-07-08T00:00:00+00:00</published><updated>2020-07-08T00:00:00+00:00</updated><id>https://apihandyman.io/i-d-rather-be-writing-podcast-api-design-and-usability</id><content type="html" xml:base="https://apihandyman.io/i-d-rather-be-writing-podcast-api-design-and-usability/">&lt;p&gt;I had the pleasure to chat with Tom Johnson for his I’d Rather Be Writing Podcast. We talked about my book, The Design of Web APIs, and specifically best practices for designing web APIs and focus on the roles technical writers can play.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Listen on &lt;a href=&quot;https://idratherbewriting.com/blog/api-design-usability-arnaud-lauret-podcast/&quot;&gt;idratherbewriting.com&lt;/a&gt;&lt;/p&gt;</content><author><name>Tom Johnson &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">I had the pleasure to chat with Tom Johnson for his I’d Rather Be Writing Podcast. We talked about my book, The Design of Web APIs, and specifically best practices for designing web APIs and focus on the roles technical writers can play.</summary></entry><entry><title type="html">Speaking into the void</title><link href="https://apihandyman.io/apidays-interface-speaking-into-the-void/" rel="alternate" type="text/html" title="Speaking into the void" /><published>2020-07-08T00:00:00+00:00</published><updated>2020-07-08T00:00:00+00:00</updated><id>https://apihandyman.io/speaking-in-the-void</id><content type="html" xml:base="https://apihandyman.io/apidays-interface-speaking-into-the-void/">&lt;p&gt;I’ve attended and spoke at API Days Interface online conference on June 20, July 1 &amp;amp; 2, 2020. Being online made the experience a bit different but after almost 3 days, I felt almost as usual; exhausted and my brain boiling with all what I’ve heard and seen. In this first post I share my feelings about attending and speaking at an online conference.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;api-days-interface-online-conference&quot;&gt;API Days Interface Online conference&lt;/h1&gt;

&lt;p&gt;API Days Interface was my first online conference. It was a 2 days long conference with 3 to 4 parallel tracks, workshops and booths, just like a regular conference. All usual API conference topics were discussed; design, governance, security, documentation, architecture, developer experience, … The line up of speakers and topics was as always quite impressive. So many great speakers (especially Mary Poppendiek and Sam Newman who gave awesome talks) coming from a wide range of domains from culture to government agencies and finance to travel and many others.&lt;/p&gt;

&lt;p&gt;All this looks like the usual API conference.&lt;/p&gt;

&lt;p&gt;But this time, no travel abroad, only my bedroom. No sponsored snacks and beers but my own food and ice cream (yes, I actually ate an ice cream during the API specifications panel discussion). No IRL meetings, only me, my laptop and my webcam and the Hopin platform chosen by the conference. And most terrible, no gifts to bring back to my wife and daughter.&lt;/p&gt;

&lt;h1 id=&quot;speaking-at-an-online-conference&quot;&gt;Speaking at an online conference&lt;/h1&gt;

&lt;p&gt;My session was titled “The Augmented API Design Reviewer”, it was about my journey to (partial) API design review automation using the OpenAPI specification and Spectral.&lt;/p&gt;

&lt;h2 id=&quot;preparation-as-usual-write-deck-rehearse&quot;&gt;Preparation as usual: write, deck, rehearse&lt;/h2&gt;

&lt;p&gt;I prepared my session as usual. I wrote my speech, did a few rehearsal to ensure my story telling makes sense and ensure that it fits withing the allowed 25 minutes time range. Unfortunately, I had to cut out many elements to keep only what was the most important to fit in this time range. I would have need more than 1 hours to tell the whole story (I’ll tell all that in a blog post series). Then I chose a theme for my slide deck, after digging on the idea of the 6 Million Dollar Man (the 70s TV show), I finally choose Blade Runner (the original movie, the sequel does not exist). I watched the movie to get a few screenshots and build my deck.&lt;/p&gt;

&lt;h2 id=&quot;new-concerns-stage-sound-and-the-platform&quot;&gt;New concerns: stage, sound and the platform&lt;/h2&gt;

&lt;p&gt;While I was doing the last rehearsal using the final slidedeck, a few questions were turning and turning in mind: the “stage”, the sound recording and how the Hopin platform work.&lt;/p&gt;

&lt;p&gt;The stage was my bedroom, my desk is there, but unfortunately the wall behind me is just a boring white wall and a corner of my TV would also have been seen. We’re still working on decorating our appartment after a year living there. Even if people would mostly look at my slides and only see mee in a small window beside them, the boring background was bothering me. So I pull some wires and put my laptop and a small table facing my desktop which is less boring, there are some photos, Nintendo NES posters, He-Man and Saint Seiya dolls. (&lt;em&gt;I’m supposed to say “adult collectible action figures”. Indeed, because I’m a grown up adult, they must be collectible and not toys. Also I’m a guy and guys have “action figures” instead of dolls. Watch “The toys that made us” to learn the story behind this ridiculous naming&lt;/em&gt;). Bonus: my secondary display screen fixed on the wall could even show my slides. Great, boring background problem solved.&lt;/p&gt;

&lt;p&gt;The sound now. I’m used to use a basic bluetooth headset when using teams/skype/slack/hangout but I would like to avoid having something on my head. Hopefully I got a brand new computer which advertize a “studio quality microphone” (you know the one pricy laptop sold by some fruit cooperative which was having some keyboards problems for the last few years, that was finally fixed last november by putting a good old scissor keyboard back). I did a few tests recording myself with Quicktime whi rehearsing and the result was quite impressive. The sound was crystal clear without interference noise. Sound problem solved.&lt;/p&gt;

&lt;p&gt;Last problem, actually giving the talk and especially sharing my slides while seeing my speakers note AND the Hopin tab in my browser. I usually use Google Slides for my slide decks. If I had used it, I wouldn’t had any problem. But I needed to use very specific fonts that do not exist on Slides. In such case I usually put the text using such font in a image with Gimp and then put the image in my slides. But this time I had a lot of text using specific fonts, especially code samples and hadn’t the time to do all that in Gimp (I would have probably gone crazy doing so). So I gave a try to Keynote (the MacOS equivalent of PowerPoint). I did my deck and was quite happy with the “Blade Runner Style” result. While rehearsing I realized that when starting the slide show, Keynote goes in full screen on ALL of your screens; slides on screen 1, speaker’s notes on screen 2. Even when disabling speaker’s notes, the second screen goes black. Then how to keep an eye on the Hopin tab during my session?&lt;/p&gt;

&lt;p&gt;I thought that if I could import my Keynote slides in Google Slides that would solve my problem. Slides works inside the browser and you can keep many different apps on your second screen while having youur slides in fullscreen on first screen. I tried to export my slides as a PowerPoint file and then import in Google Sheets… That did not work because the PowerPoint export was ugly (missing elements and fonts). I export my slides as images and thought that I could import all of them in one shot in slides …. nope. I gave up thinking: well, let’s go without a net and hope that everything will go smoothly. But that was still too worrying and eventually had the idea of opening the Hopin website on my phone next to my laptop. Last problem solve!&lt;/p&gt;

&lt;p&gt;I was ready 2 hours before my session. Perfect, I had time to cool down and take some rest.&lt;/p&gt;

&lt;h2 id=&quot;the-session-speaking-into-the-void&quot;&gt;The session: speaking into the void&lt;/h2&gt;

&lt;p&gt;I did my Augmented API Design Reviewer session on tuesday morning (which actually was the evening for me in Paris). All session were done live on Pacific timezone and replayed 2 times on Asia and Europe time zones.&lt;/p&gt;

&lt;p&gt;I connected to API Interface/Hopin website go to my track and listened to the great Mike Admundsen. Then my turm came. I shared my web cam and microphone and while the MC was introducing me, I was seeking the sharing screen button …
Sharing your screen is the online version of connecting to the projector (cable incompatibility …). Here, no cable problem but I had to find the share screen button which was had not an obvious design to say the least. And then, bad luck, as I never had shared my screen with my browser before (brand new laptop), I had to tweak some security configuration and restart chrome. Imagine the speaker leaving the stage to do some stuff while letting the MC filling the blank. Quite awkward. But hopefully, that took less than a minute and at last everything was set (including the brower opened on my phone).&lt;/p&gt;

&lt;p&gt;I spoke and wave my hands almost as usual but not having the usual feedback from the audience is quite annoying. During a live session, I’m used to make eye contact with people in the audience. I’m used to seek people violently shaking their head in agreement or disagreement. And sometimes I have the chance to see and hear people laughing to my terrible jokes or funny slides. Online you see no one, you hear no one. It’s like speaking into the void. You do not wonder if people like what you say or not. You wonder if people actually see and hear you. At the beginning I gave a few glance to the chat window opened on my phone, everything was seeming OK until I saw “I’m not seeing the feed” … My heart rate briefly sky rocketed to 553.43 bpm … and hopefully other people said “working on my side” … after one or two minutes I was confident and did my stuff without worrying about technical issue. I was trying to keep my eyes looking at the camera as much as possible, but I always need to check my notes and the timer. I did not checked the chat until I finished the session. There was no time for live Q/A, but I anwsered to a few questions using the chat. Attendees seem quite happy and so was I. And as always I was totally exhausted after speaking.&lt;/p&gt;

&lt;p&gt;The day after, I was on the chat during the replay of my session on the Europe time zone and discussed with the audience, put links to the tools and posts I was talking about. I did a one to one session with an attendee after my session, we had discussed about Spectral.&lt;/p&gt;

&lt;h1 id=&quot;attending-at-an-online-conference&quot;&gt;Attending at an online conference&lt;/h1&gt;

&lt;p&gt;I prepared the conference as I always did. Checking the whole agenda, tracks and session in order to choose the track I would attend too. I selected the tracks and here I go watching sessions one after another. I realized that I choose the sessions just like for a regular conference, thinking that I couldn’t easily go from one room to another during a track. Obviously at an online conference, you can switch very easily between sessions.&lt;/p&gt;

&lt;p&gt;I realized that some conversations could take place between attendees in the chat windows during the session, that was interesting. I didn’t took advantage of the networking and webcam feature because for totally nonsensical reasons I couldn’t start conversation that way. As I had to work on myself when I started to go to conferences to speak to total strangers, I think I’ll have to go through my mental barriers to talk to people using this “new” way of communicating.&lt;/p&gt;

&lt;p&gt;Also, I didn’t do my usual conference tweet notes storm, I only tweeted a few selected quotes. That has nothing to do with the conference being online, I was just too tired.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Regarding the content, it was, as always, great (I’ll talk more about it in my next post). The overall experience offered by the platform when attending sessions was good. But, I clearly had far less interactions than during a live conference where attendees can come to me right after the talk or later and where I can talk to people during breaks. The platform offers features allowing to do so though, I think it’s just a matter of time and changing my habits.&lt;/p&gt;

&lt;p&gt;So, am I 100% convinced by online conference? No. Because I will never have as much fun as I have when hanging out with my friends and attendees in the alleys and in the city where the conference takes place. But in these times, online conferences are far better than no conference at all. Thanks to them, we can still share our experiences and learn from others, even if we have less or different interactions with people.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">I’ve attended and spoke at API Days Interface online conference on June 20, July 1 &amp;amp; 2, 2020. Being online made the experience a bit different but after almost 3 days, I felt almost as usual; exhausted and my brain boiling with all what I’ve heard and seen. In this first post I share my feelings about attending and speaking at an online conference.</summary></entry><entry><title type="html">API Toolbox - JQ and OpenAPI - Part 4 - Bonus: Coloring JQ’s raw output</title><link href="https://apihandyman.io/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/" rel="alternate" type="text/html" title="API Toolbox - JQ and OpenAPI - Part 4 - Bonus: Coloring JQ’s raw output" /><published>2020-07-06T00:00:00+00:00</published><updated>2020-07-06T00:00:00+00:00</updated><id>https://apihandyman.io/api-toolbox-jq-and-openapi-part-4</id><content type="html" xml:base="https://apihandyman.io/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/">&lt;p&gt;Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. The three previous parts of this JQ and OpenAPI Series, taught us to extract data from JSON (OpenAPI) files and modify them using many filters, creating modules and using command line arguments. To finish this series, we’ll learn to color JQ’s raw terminal output and do a colored version of part 2’s search operations. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The screen capture below shows what we already have seen in part 1, JQ “colors its output” by default, but what it actually does is JSON syntax highlighting. What we want to do now is coloring raw terminal output, the one you get when using the &lt;code&gt;-r&lt;/code&gt; flag and outputing text instead of JSON. After reading this post, you’ll be able to create JQ module doing output such as the colored version of search operations you see below.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
      &lt;figure class=&quot;figure&quot;&gt;
        
        &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/syntax-vs-coloring.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        
      &lt;/figure&gt;
    &lt;/div&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;JQ and OpenAPI Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;
JQ's &lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/&quot; target=&quot;jq&quot;&gt;documentation&lt;/a&gt; is quite complete and there are many tutorials and Stackoverflow answers, so why bother writing this series? First reason, I regularly meet people working with APIs and/or JSON files who actually don't know JQ exists and how it could save their life (or at least their time). Second reason, I often use it with OpenAPI specification files and I found that showing how JQ can be used on such a widely adopted and familiar JSON based format could help to learn how to use it (and also writing this post actually helped me to improve my JQ skills!).
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/&quot;&gt;1 - Using JQ to extract data from OpenAPI files&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/&quot;&gt;2 - Using JQ command line arguments, functions and modules&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-3-modifying-openapi-files-with-jq/&quot;&gt;3 - Modifying OpenAPI files with JQ&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;4 - Bonus: Coloring JQ's raw output&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;get-posts-content&quot;&gt;Get post’s content&lt;/h1&gt;

&lt;p&gt;All examples shown in this post are based on JQ 1.6 and OpenAPI 3. All examples can be copied using the &lt;span class=&quot;icon-inline icon-text&quot; aria-label=&quot;copy button icon&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M14,2V0H6v2H2v18h16V2H14z M12,2v2H8V2H12z M16,18H4V4h2v2h8V4h2V18z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt; button and downloaded using the &lt;span class=&quot;icon-inline icon-text&quot; aria-label=&quot;download button icon&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;g&gt;&lt;polygon points=&quot;15,11 13.6,9.6 11,12.2 11,0 9,0 9,12.2 6.4,9.6 5,11 10,16  &quot;&gt;&lt;/polygon&gt;&lt;polygon points=&quot;18,12 18,18 2,18 2,12 0,12 0,20 20,20 20,12  &quot;&gt;&lt;/polygon&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; one on code snippets. All source code can be retrieved from the &lt;a href=&quot;https://github.com/arno-di-loreto/jq-and-openapi/&quot; target=&quot;jq&quot;&gt;JQ and OpenAPI post series’ github repository&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;git clone https://github.com/arno-di-loreto/jq-and-openapi/
cd jq-and-openapi
git checkout part-4

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ git clone https://github.com/arno-di-loreto/jq-and-openapi/
[apihandyman.io]$ cd jq-and-openapi
[apihandyman.io]$ git checkout part-4&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;coloring-jqs-raw-terminal-output&quot;&gt;Coloring JQ’s raw terminal output&lt;/h1&gt;

&lt;p&gt;Before working on the colored version of the search operation jq module, we need to learn how to ouput basic raw colored text. As in previous posts, the content of this section is available as an Asciinema session.&lt;/p&gt;

&lt;div class=&quot;card card-code card-bash text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Coloring JQ's output&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;bash session player controls&quot;&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body bash-player&quot;&gt;
    &lt;asciinema-player id=&quot;player&quot; title=&quot;Coloring JQ's output&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;125&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-4/coloring-jq.cast&quot;&gt;&lt;/asciinema-player&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;printing-colored-text-in-terminal&quot;&gt;Printing colored text in terminal&lt;/h2&gt;

&lt;p&gt;When I got this idea of coloring jq’s raw output, I was not familiar with colored printing in terminal, so I started to tinker with the echo command as shown below. Line 1 simply prints Hello World without colors (in white). Line 2’s purpose is only to show what happens if you don’t provide the -e flag to echo: no colors. Line 3 prints Hello World in red. And eventually, line 4 prints Hello in red and World in white.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
      &lt;figure class=&quot;figure&quot;&gt;
        
        &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/colored-echo.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        
      &lt;/figure&gt;
    &lt;/div&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Colored echo&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;echo Hello World
echo &amp;#39;\e[31mHello World&amp;#39;
echo -e &amp;#39;\e[31mHello World&amp;#39;
echo -e &amp;#39;\e[31mHello\e[0m World&amp;#39;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, printing in color requires to use cryptic character sequences. Basically, to print some text in color you need to concatenate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The escape character &lt;code&gt;\e&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A color code like &lt;code&gt;[31m&lt;/code&gt; (red)&lt;/li&gt;
  &lt;li&gt;The text to color&lt;/li&gt;
  &lt;li&gt;The escape character &lt;code&gt;\e&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The “reset” color code &lt;code&gt;[0m&lt;/code&gt; which remove any style modification previously set&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more about coloring text in terminal, I highly recommend reading &lt;a href=&quot;https://misc.flogisoft.com/bash/tip_colors_and_formatting&quot;&gt;bash:tip_colors_and_formatting&lt;/a&gt;, I learned everything I know about this topic reading this post.&lt;/p&gt;

&lt;h2 id=&quot;coloring-jq-raw-output&quot;&gt;Coloring JQ raw output&lt;/h2&gt;

&lt;p&gt;Let’s try to replicate this colored echo example with jq. Line 1 is equivalent to our first non-colored &lt;code&gt;echo &quot;Hello World&quot;&lt;/code&gt;. We provide a JSON object with &lt;code&gt;greeeting&lt;/code&gt; and &lt;code&gt;who&lt;/code&gt; properties and concatenate them. On line 2 we add the escape charaecters and color codes to print the &lt;code&gt;greeting&lt;/code&gt; value in red. But jq returns two “Invalid espace” errors (one for each &lt;code&gt;\e&lt;/code&gt; escape character. It seems jq does not like it. Hopefully there are multiple variant of this escape character. And replacing &lt;code&gt;\e&lt;/code&gt; by its unicode equivalent &lt;code&gt;\u001b&lt;/code&gt; do the trick: jq is able to concatenate all values (line 3). But the text is printed as a JSON string; simply because I did not put the -r flag. Line 4 shows &lt;code&gt;jq -r&lt;/code&gt; printing colored raw text.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
      &lt;figure class=&quot;figure&quot;&gt;
        
        &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/colored-jq.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        
      &lt;/figure&gt;
    &lt;/div&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Colored jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;echo &amp;#39;{ &amp;quot;greeting&amp;quot;: &amp;quot;Hello&amp;quot;, &amp;quot;who&amp;quot;:&amp;quot;World&amp;quot; }&amp;#39; | jq &amp;#39;.greeting + &amp;quot; &amp;quot; + .who&amp;#39;
echo &amp;#39;{ &amp;quot;greeting&amp;quot;: &amp;quot;Hello&amp;quot;, &amp;quot;who&amp;quot;:&amp;quot;World&amp;quot; }&amp;#39; | jq &amp;#39;&amp;quot;\e[31m&amp;quot; + .greeting + &amp;quot;\e[0m &amp;quot; + .who&amp;#39;
echo &amp;#39;{ &amp;quot;greeting&amp;quot;: &amp;quot;Hello&amp;quot;, &amp;quot;who&amp;quot;:&amp;quot;World&amp;quot; }&amp;#39; | jq &amp;#39;&amp;quot;\u001b[31m&amp;quot; + .greeting + &amp;quot;\u001b[0m &amp;quot; + .who&amp;#39;
echo &amp;#39;{ &amp;quot;greeting&amp;quot;: &amp;quot;Hello&amp;quot;, &amp;quot;who&amp;quot;:&amp;quot;World&amp;quot; }&amp;#39; | jq -r &amp;#39;&amp;quot;\u001b[31m&amp;quot; + .greeting + &amp;quot;\u001b[0m &amp;quot; + .who&amp;#39;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;defining-a-colored_text-function&quot;&gt;Defining a colored_text function&lt;/h2&gt;

&lt;p&gt;Printing colored text with jq is is working almost like with echo. We just need to use the unicode escape character instead of &lt;code&gt;\e&lt;/code&gt;. But to be honest it’s quite complicated to write this escape character and color codes are not user friendly at all. So, let’s write some jq function in a &lt;code&gt;module-color.jq&lt;/code&gt; file to make colored printing easier. The idea is to have a &lt;code&gt;colored_text(&quot;some text&quot;; &quot;red&quot;)&lt;/code&gt; function that prints “some text” in “red” (or “blue”).&lt;/p&gt;

&lt;p&gt;First, let’s define a variable holding the not-easy-to-type-and-remember unicode escape character. To use it, just include the jq file (see part 2) in which its defined and use its name.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Escape character variable (module-color.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-start=&quot;6&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;def escape: &quot;\u001b&quot;;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -n &amp;#39;include &amp;quot;module-color&amp;quot;;escape&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using escape variable&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $ jq -n &amp;#39;include &amp;quot;module-color&amp;quot;;escape&amp;#39;
&amp;quot;\u001b&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then, we define a map with user-friendly color names as keys and ugly color codes as values. Each value of a map can be accessed with &lt;code&gt;map.key&lt;/code&gt; or &lt;code&gt;map[&quot;key&quot;]&lt;/code&gt; syntax as shown in the bash snippet below.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;User friendly colors map (module-color.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-4/module-color.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-start=&quot;9&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;def colors:
 {
  &quot;red&quot;: &quot;[31m&quot;,
  &quot;green&quot;: &quot;[32m&quot;,
  &quot;yellow&quot;: &quot;[33m&quot;,
  &quot;blue&quot;: &quot;[34m&quot;,
  &quot;darkgray&quot;: &quot;[90m&quot;,
  &quot;disabled&quot;: &quot;[30;100m&quot;, # Black on darkgray
  &quot;reset&quot;: &quot;[0m&quot;
};
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -n &amp;#39;include &amp;quot;module-color&amp;quot;;colors.red&amp;#39;
jq -n &amp;#39;include &amp;quot;module-color&amp;quot;;colors[&amp;quot;blue&amp;quot;]&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using escape variable&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $ jq -n &amp;#39;include &amp;quot;module-color&amp;quot;;colors.red&amp;#39;
&amp;quot;[31m&amp;quot;
[apihandyman.io] $ jq -n &amp;#39;include &amp;quot;module-color&amp;quot;;colors[&amp;quot;blue&amp;quot;]&amp;#39;
&amp;quot;[34m&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now that the variables are defined, we need to define a function that do all the needed concatenation to generate a string containing some &lt;code&gt;text&lt;/code&gt; in color &lt;code&gt;color&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;What the function does (module-color.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-4/module-color.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-start=&quot;25&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;def colored_text(text; color):
  escape + colors[color] + text + escape + colors.reset;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;text-center&quot;&gt;
      &lt;figure class=&quot;figure&quot;&gt;
        
        &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/colored-text-function.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        
      &lt;/figure&gt;
    &lt;/div&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using colored_text function&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;jq -n &amp;#39;include &amp;quot;module-color&amp;quot;;colored_text(&amp;quot;some text&amp;quot;; &amp;quot;red&amp;quot;)&amp;#39;
jq -r -n &amp;#39;include &amp;quot;module-color&amp;quot;;colored_text(&amp;quot;some text&amp;quot;; &amp;quot;red&amp;quot;)&amp;#39;
jq -n &amp;#39;include &amp;quot;module-color&amp;quot;;colored_text(&amp;quot;some text&amp;quot;; &amp;quot;blue&amp;quot;)&amp;#39;
jq -r -n &amp;#39;include &amp;quot;module-color&amp;quot;;colored_text(&amp;quot;some text&amp;quot;; &amp;quot;blue&amp;quot;)&amp;#39;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the complete module:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Complete module-color.jq module&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-4/module-color.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# To learn more about colors in terminal, see https://misc.flogisoft.com/bash/tip_colors_and_formatting
# use with -r flag on jq command

# Unicode escape character
# \e, \033 and \x1b cause &quot;Invalid escape&quot; error
def escape: &quot;\u001b&quot;;

# Terminal color codes
def colors:
 {
  &quot;red&quot;: &quot;[31m&quot;,
  &quot;green&quot;: &quot;[32m&quot;,
  &quot;yellow&quot;: &quot;[33m&quot;,
  &quot;blue&quot;: &quot;[34m&quot;,
  &quot;darkgray&quot;: &quot;[90m&quot;,
  &quot;disabled&quot;: &quot;[30;100m&quot;, # Black on darkgray
  &quot;reset&quot;: &quot;[0m&quot;
};

# Colors text with the given color
# colored_text(&quot;some text&quot;; &quot;red&quot;)
# will output 
# \u001b[31msome text\u001b[0m
# WARNING parameters are separated by ; not ,
def colored_text(text; color):
  escape + colors[color] + text + escape + colors.reset;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;coloring-openapi-search-operations-output&quot;&gt;Coloring OpenAPI search operations output&lt;/h1&gt;

&lt;p&gt;Now that we know how to output colored raw text, creating a colored version of search operation should be quite easy.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
      &lt;figure class=&quot;figure&quot;&gt;
        
        &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/search-operations.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        
      &lt;/figure&gt;
    &lt;/div&gt;

&lt;p&gt;This section’s content is available as an Asciinema session:&lt;/p&gt;

&lt;div class=&quot;card card-code card-bash text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Colored search operations&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;bash session player controls&quot;&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body bash-player&quot;&gt;
    &lt;asciinema-player id=&quot;player&quot; title=&quot;Colored search operations&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;125&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-4/search-operations-color.cast&quot;&gt;&lt;/asciinema-player&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;analyzing-original-search-operations&quot;&gt;Analyzing original search operations&lt;/h2&gt;

&lt;p&gt;The original non-colored search-operaions module shown below is quite simple thanks to what we have learned in part 2 of this series. It consists in three steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Retrieving operations data by reorganizing the data coming from an OpenAPI JSON file with &lt;code&gt;oas_operation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Filters returned operation based on optionnal –arg parameters with &lt;code&gt;filter_oas_operations&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Print the result in JSON or text with &lt;code&gt;print_oas_operations&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;search-operations.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-4/search-operations.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-line=&quot;10&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-openapi&quot;;
include &quot;module-args&quot;;
include &quot;module-openapi-search&quot;;

# Gets operations data
oas_operations
# Filters operations
| filter_oas_operations(init_parameters(default_filters))
# Prints operations
| print_oas_operations(init_parameters(default_print_parameters).format)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What we actually need to do to created a colored version of this module is copying it and modifythe last step to call a new function that will output text with some cryptic color codes.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-new-print-colored-oas-function&quot;&gt;Creating a new print colored oas function&lt;/h2&gt;

&lt;p&gt;As we have created a useful function that prints colored text, let’s include its module to be able to use it:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Including colored_text function (module-openapi-operations-color.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-color&quot;;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The colored version of the &lt;code&gt;print_oas_operations&lt;/code&gt; function, will print HTTP method in colors. In order to avoir having a complex &lt;code&gt;if then elif else end&lt;/code&gt; statement, we proceeed like for color codes; we create a map but now each key is an HTTP method and its value is its user friendly color. So &lt;code&gt;delete&lt;/code&gt; value is &lt;code&gt;red&lt;/code&gt; for example.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Defining HTTP colors (module-openapi-operations-color.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-start=&quot;4&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;def http_method_colors:
 {
 &quot;delete&quot;: &quot;red&quot;,
 &quot;post&quot;: &quot;green&quot;,
 &quot;patch&quot;: &quot;yellow&quot;,
 &quot;put&quot;: &quot;yellow&quot;,
 &quot;get&quot;: &quot;blue&quot;
};
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And then in the &lt;code&gt;print_colored_oas_operations&lt;/code&gt; to generate a string for each operation we &lt;code&gt;colored_text&lt;/code&gt; on the various elements. Note on line 22 how the HTTP method color is easily chosen. Note also that deprecated operations are printined in black on dark gray using the &lt;code&gt;disabled&lt;/code&gt; color.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Generating string for each operation (module-openapi-operations-color.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-start=&quot;16&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;    if .original.deprecated then
      colored_text(
        .method + &quot;\t&quot; + .path + &quot;\t&quot; + .summary + &quot; (deprecated)&quot;; 
        &quot;disabled&quot;
      )
    else
      colored_text(.method;http_method_colors[.method]) + &quot;\t&quot; + 
      .path + &quot;\t&quot; + 
      colored_text(.summary; &quot;darkgray&quot;)
    end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the complete module:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Complete module-openapi-operations-color.jq module&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-4/module-openapi-operations-color.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-color&quot;;

# Colors to apply for each HTTP method
def http_method_colors:
 {
 &quot;delete&quot;: &quot;red&quot;,
 &quot;post&quot;: &quot;green&quot;,
 &quot;patch&quot;: &quot;yellow&quot;,
 &quot;put&quot;: &quot;yellow&quot;,
 &quot;get&quot;: &quot;blue&quot;
};

# Prints operations in SwaggerUI like style
def print_colored_oas_operations:
  map( # Applies a transformation to each element
    if .original.deprecated then
      colored_text(
        .method + &quot;\t&quot; + .path + &quot;\t&quot; + .summary + &quot; (deprecated)&quot;; 
        &quot;disabled&quot;
      )
    else
      colored_text(.method;http_method_colors[.method]) + &quot;\t&quot; + 
      .path + &quot;\t&quot; + 
      colored_text(.summary; &quot;darkgray&quot;)
    end
  )
  [] # Flattens array for raw output
;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-a-new-search-operations-in-color-module&quot;&gt;Creating a new search operations in color module&lt;/h2&gt;

&lt;p&gt;And lastly, we create a new module that will be used with the -f parameter. The only difference with its uncolored counterpart is on line 4 (including the jq file containing the &lt;code&gt;print_colored_oas_operation&lt;/code&gt;) and line 11 (actually calling the new function instead of &lt;code&gt;print_oas_operation&lt;/code&gt;). Reminder, here’s the command line to use it &lt;code&gt;jq -r -f search-operations-color.jq demo-api-openapi.json&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;search-operations-color.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-4/search-operations-color.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-line=&quot;4&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-openapi&quot;;
include &quot;module-args&quot;;
include &quot;module-openapi-search&quot;;
include &quot;module-openapi-operations-color&quot;;

# Gets operations data
oas_operations
# Filters operations
| filter_oas_operations(init_parameters(default_filters))
# Prints operations
| print_colored_oas_operations
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Obviously, it is quite possible to merge the colored and uncolored search operations to have a single module taking format parameters to print how you want. I let you work on that to apply everything you have learned so far.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That concludes for now this JQ and OpenAPI series, I may add some other posts if I create interesting JQ+OpenAPI modules. Thanks to what you have learned about JQ, you should be able to do whatever you want on any OpenAPI file and even on any JSON document, especially the one you may retrieve with &lt;code&gt;curl&lt;/code&gt;; that may be a good topic for another series by the way …&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="API Toolbox" /><summary type="html">Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. The three previous parts of this JQ and OpenAPI Series, taught us to extract data from JSON (OpenAPI) files and modify them using many filters, creating modules and using command line arguments. To finish this series, we’ll learn to color JQ’s raw terminal output and do a colored version of part 2’s search operations.</summary></entry><entry><title type="html">API Design Reviewer’s Starter Set</title><link href="https://apihandyman.io/api-design-reviewers-starter-set/" rel="alternate" type="text/html" title="API Design Reviewer’s Starter Set" /><published>2020-06-29T00:00:00+00:00</published><updated>2020-06-29T00:00:00+00:00</updated><id>https://apihandyman.io/api-design-reviewers-starter-set</id><content type="html" xml:base="https://apihandyman.io/api-design-reviewers-starter-set/">&lt;p&gt;My 2019 talk, The API Design Reviewer’s Starter Set, is about API design reviews and Dungeons and Dragons.
You’ll find here its abstract, slides and video recorded at API Days London 2019.&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;What could go possibly wrong when designing APIs? Everything.
Among many other things, API Design may be inconsistent with pre-existing elements, may be bugged, may not fulfill needs, may be hard to understand or use, may be too specific and impossible to reuse, …&lt;/p&gt;

&lt;p&gt;Whatever the organization’s size, the type of APIs and the designers skills and experience, something will go wrong. That is why, any API design must be reviewed.&lt;/p&gt;

&lt;p&gt;During this session, I uncover everything you need to start reviewing the designs of your organization’s APIs.&lt;/p&gt;

&lt;p&gt;Explore subterranean needs! Plunder hoards of inconsistency! Battle legendary design flaws!&lt;/p&gt;

&lt;p&gt;The API Design Reviewer’s Starter Set is your gateway to exhaustive and constructive API design reviews. This session contains the essential rules of design reviews plus a few tips and trick that will be of great help on your perilous adventures in the API world.&lt;/p&gt;

&lt;h1 id=&quot;video&quot;&gt;Video&lt;/h1&gt;

&lt;div id=&quot;pOmmkbCJCu0&quot; class=&quot;third-party-content third-party-content-youtube&quot;&gt;
    &lt;div class=&quot;card third-party-content-warning&quot;&gt;
        &lt;img class=&quot;card-img&quot; src=&quot;/images/thirdpartycontents/api-design-reviewers-starter-set-apidays-london.jpg&quot; alt=&quot;Card image&quot; /&gt;
        &lt;div class=&quot;card-img-overlay d-flex&quot;&gt;
            &lt;div class=&quot;my-auto mx-auto text-center&quot;&gt;
                &lt;p&gt;This content is hosted on youtube.com.&lt;/p&gt;
                &lt;p&gt;By showing this third party content you accept YouTube (Google)'s 
                    &lt;a class=&quot;privacy-policy&quot; href=&quot;https://policies.google.com/privacy&quot; target=&quot;_blank&quot;&gt;privacy policy&lt;/a&gt;.
                &lt;/p&gt;
                &lt;form&gt;
                    &lt;a href=&quot;javascript:thirdPartyConsent('pOmmkbCJCu0', 'youtube')&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Show third party content&lt;/a&gt;
                    &lt;div class=&quot;form-check&quot;&gt;
                        &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input third-party-content-remember&quot; /&gt;
                        &lt;label class=&quot;form-check-label&quot; for=&quot;exampleCheck1&quot;&gt;Remember my choice&lt;/label&gt;
                        &lt;p&gt;(can be changed in &lt;a class=&quot;privacy-policy&quot; href=&quot;/privacy&quot;&gt;privacy settings&lt;/a&gt;)&lt;/p&gt;
                      &lt;/div&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;iframe-container third-party-content-iframe third-party-content-iframe-disabled&quot;&gt;
        &lt;iframe class=&quot;iframe-responsive&quot; data-src=&quot;https://www.youtube-nocookie.com/embed/pOmmkbCJCu0?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
        &lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;slides&quot;&gt;Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/slidedecks/api-design-reviewers-starter-set/api-design-reviewers-starter-set.pdf&quot; download=&quot;api-design-reviewers-starter-set.pdf&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Download PDF&lt;/a&gt;
&lt;a href=&quot;/slidedecks/api-design-reviewers-starter-set/api-design-reviewers-starter-set.pdf&quot; target=&quot;_blank&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Open PDF&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;iframe-container&quot;&gt;
    &lt;iframe class=&quot;iframe-responsive&quot; src=&quot;/slidedecks/api-design-reviewers-starter-set/index.html&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talk" /><summary type="html">My 2019 talk, The API Design Reviewer’s Starter Set, is about API design reviews and Dungeons and Dragons. You’ll find here its abstract, slides and video recorded at API Days London 2019. Abstract What could go possibly wrong when designing APIs? Everything. Among many other things, API Design may be inconsistent with pre-existing elements, may be bugged, may not fulfill needs, may be hard to understand or use, may be too specific and impossible to reuse, … Whatever the organization’s size, the type of APIs and the designers skills and experience, something will go wrong. That is why, any API design must be reviewed. During this session, I uncover everything you need to start reviewing the designs of your organization’s APIs. Explore subterranean needs! Plunder hoards of inconsistency! Battle legendary design flaws! The API Design Reviewer’s Starter Set is your gateway to exhaustive and constructive API design reviews. This session contains the essential rules of design reviews plus a few tips and trick that will be of great help on your perilous adventures in the API world. Video This content is hosted on youtube.com. By showing this third party content you accept YouTube (Google)'s privacy policy. Show third party content Remember my choice (can be changed in privacy settings) Slides Download PDF Open PDF</summary></entry><entry><title type="html">API Toolbox - JQ and OpenAPI - Part 3 - Modifying OpenAPI files with JQ</title><link href="https://apihandyman.io/api-toolbox-jq-and-openapi-part-3-modifying-openapi-files-with-jq/" rel="alternate" type="text/html" title="API Toolbox - JQ and OpenAPI - Part 3 - Modifying OpenAPI files with JQ" /><published>2020-06-28T00:00:00+00:00</published><updated>2020-06-28T00:00:00+00:00</updated><id>https://apihandyman.io/api-toolbox-jq-and-openapi-part-3</id><content type="html" xml:base="https://apihandyman.io/api-toolbox-jq-and-openapi-part-3-modifying-openapi-files-with-jq/">&lt;p&gt;Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. Thanks to the two previous parts of this JQ and OpenAPI Series, we learned how to extract data from JSON (OpenAPI) files by discovering many filters, creating modules and using command line arguments. Now we will discover how to modify them; how to replace, add or delete elements in processed documents. &lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;JQ and OpenAPI Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;
JQ's &lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/&quot; target=&quot;jq&quot;&gt;documentation&lt;/a&gt; is quite complete and there are many tutorials and Stackoverflow answers, so why bother writing this series? First reason, I regularly meet people working with APIs and/or JSON files who actually don't know JQ exists and how it could save their life (or at least their time). Second reason, I often use it with OpenAPI specification files and I found that showing how JQ can be used on such a widely adopted and familiar JSON based format could help to learn how to use it (and also writing this post actually helped me to improve my JQ skills!).
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/&quot;&gt;1 - Using JQ to extract data from OpenAPI files&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/&quot;&gt;2 - Using JQ command line arguments, functions and modules&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;3 - Modifying OpenAPI files with JQ&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/&quot;&gt;4 - Bonus: Coloring JQ's raw output&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;get-posts-content&quot;&gt;Get post’s content&lt;/h1&gt;

&lt;p&gt;All examples shown in this post are based on JQ 1.6 and OpenAPI 3. All examples can be copied using the &lt;span class=&quot;icon-inline icon-text&quot; aria-label=&quot;copy button icon&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M14,2V0H6v2H2v18h16V2H14z M12,2v2H8V2H12z M16,18H4V4h2v2h8V4h2V18z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt; button and downloaded using the &lt;span class=&quot;icon-inline icon-text&quot; aria-label=&quot;download button icon&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;g&gt;&lt;polygon points=&quot;15,11 13.6,9.6 11,12.2 11,0 9,0 9,12.2 6.4,9.6 5,11 10,16  &quot;&gt;&lt;/polygon&gt;&lt;polygon points=&quot;18,12 18,18 2,18 2,12 0,12 0,20 20,20 20,12  &quot;&gt;&lt;/polygon&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; one on code snippets. All source code can be retrieved from the &lt;a href=&quot;https://github.com/arno-di-loreto/jq-and-openapi/&quot; target=&quot;jq&quot;&gt;JQ and OpenAPI post series’ github repository&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;git clone https://github.com/arno-di-loreto/jq-and-openapi/
cd jq-and-openapi
git checkout part-3

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ git clone https://github.com/arno-di-loreto/jq-and-openapi/
[apihandyman.io]$ cd jq-and-openapi
[apihandyman.io]$ git checkout part-3&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We will go on using the &lt;code&gt;demo-api-openapi.json&lt;/code&gt; OpenAPI file in this post:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;demo-api-openapi.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-3/demo-api-openapi.json&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{&quot;openapi&quot;:&quot;3.0.0&quot;,&quot;info&quot;:{&quot;title&quot;:&quot;Banking API&quot;,&quot;version&quot;:&quot;1.0.0-snapshot&quot;,&quot;description&quot;:&quot;The Banking API provides access to the [Banking Company](http://www.bankingcompany.com) services, which include bank account information, beneficiaries, and money transfer management.&amp;#60;!--more--&amp;#62;\n\n# Authentication\n\n## How to \n- Register\n- Create an APP\n- Request credentials\n\n# Use cases\n\n## Transferring money to an account or preexisting beneficiary\n\nThe _transfer money_ operation allows one to transfer an `amount` of money from a `source` account to a `destination` account or beneficiary.\nIn order to use an appropriate `source` and `destination`, we recommend to use _list sources_ and _list source's destinations_ as shown in the figure below (instead of using _list accounts_ and _list beneficiaries_).\n\n![Diagram](http://localhost:9090/12.2-operation-manual-diagram.svg)\n\n## Cancelling a delayed or recurring money transfer\n\n- List money transfers: To list existing money transfers and select the one to delete\n- Cancel a money transfer: To cancel the selected money transfer\n&quot;,&quot;contact&quot;:{&quot;name&quot;:&quot;The Banking API team&quot;,&quot;email&quot;:&quot;api@bankingcompany.com&quot;,&quot;url&quot;:&quot;developer.bankingcompany.com&quot;}},&quot;tags&quot;:[{&quot;name&quot;:&quot;Transfers&quot;,&quot;description&quot;:&quot;Everything you need to manage money transfers. A money transfer consists in transferring money from a source account to a destination account.&quot;},{&quot;name&quot;:&quot;Beneficiaries&quot;,&quot;description&quot;:&quot;Everything you need to manage money transfer beneficiaries. Beneficiaries are pre-registred external accounts that can be used as destinations for money transfers.&quot;}],&quot;paths&quot;:{&quot;/accounts&quot;:{&quot;get&quot;:{&quot;tags&quot;:[&quot;Accounts&quot;],&quot;summary&quot;:&quot;List accounts&quot;,&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;User's accounts&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;required&quot;:[&quot;properties&quot;],&quot;properties&quot;:{&quot;items&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;items&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/Account&quot;}}}}}}}}}},&quot;/accounts/{id}&quot;:{&quot;get&quot;:{&quot;tags&quot;:[&quot;Accounts&quot;],&quot;summary&quot;:&quot;Get an account&quot;,&quot;parameters&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;in&quot;:&quot;path&quot;,&quot;description&quot;:&quot;Account's id&quot;,&quot;required&quot;:true,&quot;schema&quot;:{&quot;type&quot;:&quot;string&quot;}}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The account&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/Account&quot;}}}},&quot;401&quot;:{&quot;description&quot;:&quot;Unauthorized&quot;}},&quot;x-implementation&quot;:{&quot;security&quot;:{&quot;description&quot;:&quot;Only accounts belonging to user referenced in security data;\nreturn a 404 if this is not the case\n&quot;,&quot;source&quot;:{&quot;system&quot;:&quot;security&quot;,&quot;location&quot;:&quot;jwt.sub&quot;},&quot;fail&quot;:404}}}},&quot;/beneficiaries&quot;:{&quot;post&quot;:{&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;Register a beneficiary&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:create&quot;,&quot;beneficiary:admin&quot;]}],&quot;responses&quot;:{&quot;201&quot;:{&quot;description&quot;:&quot;Beneficiary added&quot;},&quot;401&quot;:{&quot;description&quot;:&quot;Unauthorized&quot;},&quot;403&quot;:{&quot;description&quot;:&quot;Forbidden&quot;}}},&quot;get&quot;:{&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;List beneficiaries&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:read&quot;,&quot;beneficiary:admin&quot;]}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The beneficiaries list&quot;}}}},&quot;/beneficiaries/{id}&quot;:{&quot;parameters&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;in&quot;:&quot;path&quot;,&quot;description&quot;:&quot;Beneficiary's id&quot;,&quot;required&quot;:true,&quot;schema&quot;:{&quot;type&quot;:&quot;string&quot;}}],&quot;delete&quot;:{&quot;deprecated&quot;:true,&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;Delete a beneficiary&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:delete&quot;,&quot;beneficiary:admin&quot;]}],&quot;responses&quot;:{&quot;204&quot;:{&quot;description&quot;:&quot;Beneficiary deleted&quot;},&quot;401&quot;:{&quot;description&quot;:&quot;Unauthorized&quot;}}},&quot;patch&quot;:{&quot;deprecated&quot;:true,&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;Updates a beneficiary&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:admin&quot;]}],&quot;requestBody&quot;:{&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/BeneficiaryUpdate&quot;}}}},&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The updated beneficiary&quot;},&quot;401&quot;:{&quot;description&quot;:&quot;Unauthorized&quot;}}},&quot;get&quot;:{&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;Get a beneficiary&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:read&quot;,&quot;beneficiary:admin&quot;]}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The beneficiary&quot;}}}},&quot;/sources&quot;:{&quot;get&quot;:{&quot;summary&quot;:&quot;List transfer sources&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;description&quot;:&quot;Not all bank accounts can be used as a source\nfor a money transfers. This operation returns\nonly the accounts elligible as a money transfer\nsource.\n&quot;,&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The transfer sources&quot;}}}},&quot;/sources/{id}/destinations&quot;:{&quot;parameters&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;in&quot;:&quot;path&quot;,&quot;description&quot;:&quot;Source's id&quot;,&quot;required&quot;:true,&quot;schema&quot;:{&quot;type&quot;:&quot;string&quot;}}],&quot;get&quot;:{&quot;summary&quot;:&quot;List transfer source's destinations&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;description&quot;:&quot;Depending on the source account, only specific\nbeneficiaries or accounts can be used as a money\ntransfer destination.\nThis operation returns them.\n&quot;,&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The transfer destination&quot;}}}},&quot;/transfers&quot;:{&quot;post&quot;:{&quot;summary&quot;:&quot;Transfer money&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;transfer:create&quot;,&quot;transfer:admin&quot;]}],&quot;tags&quot;:[&quot;Transfers&quot;],&quot;description&quot;:&quot;This operation allows one to transfer an `amount` of money from a `source` account to a `destination` account.\nThere are three different types of money transfer:\n  - Immediate -- these are executed as soon as the request is received \n  - Delayed -- these are executed upon a given future `date`\n  - Recurring -- these are executed a given `occurrences` number of times at a given `frequency` -- the first occurrence being executed immediately or at a given `date`\n&quot;,&quot;requestBody&quot;:{&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferRequest&quot;},&quot;examples&quot;:{&quot;immediate&quot;:{&quot;summary&quot;:&quot;Immediate transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed immediately&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2}},&quot;delayed&quot;:{&quot;summary&quot;:&quot;Delayed transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed at a given date&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;}},&quot;recurring&quot;:{&quot;summary&quot;:&quot;Recurring transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed at a given date reurringly&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;,&quot;occurrences&quot;:1,&quot;frequency&quot;:&quot;MONTHLY&quot;}}}}}},&quot;responses&quot;:{&quot;201&quot;:{&quot;description&quot;:&quot;Immediate or recurring transfer executed&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferResponse&quot;},&quot;examples&quot;:{&quot;immediate&quot;:{&quot;summary&quot;:&quot;Immediate transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed immediately&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2}},&quot;recurring&quot;:{&quot;summary&quot;:&quot;Recurring transfer&quot;,&quot;description&quot;:&quot;The first occurence is executed immediately&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;,&quot;occurrences&quot;:1,&quot;frequency&quot;:&quot;MONTHLY&quot;}}}}}},&quot;202&quot;:{&quot;description&quot;:&quot;Delayed or recurring delayed transfer accepted&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferResponse&quot;},&quot;examples&quot;:{&quot;delayed&quot;:{&quot;summary&quot;:&quot;Delayed transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed at a given date&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;}},&quot;recurring&quot;:{&quot;summary&quot;:&quot;Recurring transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed at a given date reurringly&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;,&quot;occurrences&quot;:1,&quot;frequency&quot;:&quot;MONTHLY&quot;}}}}}},&quot;400&quot;:{&quot;description&quot;:&quot;The transfer is rejected due to an error in the request properties or an insufficient balance.\nEach error provides the property `source` of the error along with a human-readable `message` and its `type`:\n\n- MANDATORY_PROPERTY: The property indicated in `source` is missing\n- INVALID_FORMAT: The format of the property indicated in `source` is invalid\n- INVALID_VALUE: The value of the property indicated in `source` is invalid\n- INSUFFICIENT_BALANCE: The `amount` property is higher than the `source` account balance\n&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/ConsumerError&quot;}}}}}},&quot;get&quot;:{&quot;summary&quot;:&quot;List money transfers&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;transfer:read&quot;,&quot;transfer:admin&quot;]}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;Transfers list&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferList&quot;}}}}}}},&quot;/transfers/{id}&quot;:{&quot;parameters&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;in&quot;:&quot;path&quot;,&quot;description&quot;:&quot;Transfer's id&quot;,&quot;required&quot;:true,&quot;schema&quot;:{&quot;type&quot;:&quot;string&quot;}}],&quot;get&quot;:{&quot;summary&quot;:&quot;Get a money transfer&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;transfer:read&quot;,&quot;transfer:admin&quot;]}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The money transfer&quot;},&quot;404&quot;:{&quot;description&quot;:&quot;The money transfer does not exist&quot;}}},&quot;x-tension-example&quot;:{&quot;some&quot;:&quot;value&quot;},&quot;patch&quot;:{&quot;tags&quot;:[&quot;Transfers&quot;],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The money transfer has been update&quot;}}},&quot;delete&quot;:{&quot;summary&quot;:&quot;Cancel a money transfer&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;transfer:delete&quot;,&quot;transfer:admin&quot;]}],&quot;description&quot;:&quot;Only delayed or recurring money transfer can be canceled&quot;,&quot;responses&quot;:{&quot;204&quot;:{&quot;description&quot;:&quot;The money transfer has been deleted&quot;},&quot;404&quot;:{&quot;description&quot;:&quot;The money transfer does not exist&quot;}}}}},&quot;components&quot;:{&quot;securitySchemes&quot;:{&quot;BankingAPIScopes&quot;:{&quot;type&quot;:&quot;oauth2&quot;,&quot;flows&quot;:{&quot;implicit&quot;:{&quot;authorizationUrl&quot;:&quot;https://auth.bankingcompany.com/authorize&quot;,&quot;scopes&quot;:{&quot;transfer:create&quot;:&quot;Create transfers&quot;,&quot;transfer:read&quot;:&quot;Read transfers&quot;,&quot;transfer:delete&quot;:&quot;Delete transfers&quot;,&quot;transfer:admin&quot;:&quot;Create, read, and delete transfers&quot;,&quot;beneficiary:create&quot;:&quot;Create beneficiaries&quot;,&quot;beneficiary:read&quot;:&quot;List beneficiaries&quot;,&quot;beneficiary:delete&quot;:&quot;delete beneficiaries&quot;,&quot;beneficiary:admin&quot;:&quot;Create, read, and delete beneficiaries&quot;,&quot;account:read&quot;:&quot;Read accounts&quot;,&quot;account:admin&quot;:&quot;Read accounts&quot;}}}}},&quot;schemas&quot;:{&quot;BeneficiaryUpdate&quot;:{&quot;description&quot;:&quot;A beneficiary update parameter&quot;,&quot;properties&quot;:{&quot;name&quot;:{&quot;type&quot;:&quot;string&quot;}}},&quot;UselessSchema&quot;:{&quot;description&quot;:&quot;An unused useless schema&quot;,&quot;type&quot;:&quot;string&quot;},&quot;TransferRequest&quot;:{&quot;description&quot;:&quot;A money transfer request&quot;,&quot;required&quot;:[&quot;source&quot;,&quot;destination&quot;,&quot;amount&quot;],&quot;properties&quot;:{&quot;deprecatedPropertyExample&quot;:{&quot;deprecated&quot;:true,&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;An example of a deprecated property&quot;},&quot;source&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;Source account number&quot;,&quot;minLength&quot;:15,&quot;maxLength&quot;:15,&quot;pattern&quot;:&quot;^\\d{15}$&quot;,&quot;example&quot;:&quot;000534115776675&quot;},&quot;destination&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;Destination account number&quot;,&quot;minLength&quot;:15,&quot;maxLength&quot;:15,&quot;pattern&quot;:&quot;^\\d{15}$&quot;,&quot;example&quot;:&quot;000567689879878&quot;},&quot;amount&quot;:{&quot;type&quot;:&quot;number&quot;,&quot;example&quot;:456.2,&quot;minimum&quot;:0,&quot;exclusiveMinimum&quot;:true},&quot;date&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;format&quot;:&quot;date&quot;,&quot;description&quot;:&quot;Execution date for a delayed transfer\nor first execution date for a recurring one\n&quot;,&quot;example&quot;:&quot;2019-03-19&quot;},&quot;occurrences&quot;:{&quot;type&quot;:&quot;integer&quot;,&quot;description&quot;:&quot;Number of times a recurring transfer will be executed\n&quot;,&quot;example&quot;:2,&quot;minimum&quot;:2,&quot;maximum&quot;:100},&quot;frequency&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;Frequency of recurring transfer's execution&quot;,&quot;example&quot;:&quot;MONTHLY&quot;,&quot;enum&quot;:[&quot;WEEKLY&quot;,&quot;MONTHLY&quot;,&quot;QUARTERLY&quot;,&quot;YEARLY&quot;]}}},&quot;TransferResponse&quot;:{&quot;allOf&quot;:[{&quot;required&quot;:[&quot;id&quot;,&quot;type&quot;,&quot;status&quot;],&quot;properties&quot;:{&quot;id&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;1611e71f-1bb2-412f-8c43-92b275a5c321&quot;},&quot;type&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;enum&quot;:[&quot;IMMEDIATE&quot;,&quot;DELAYED&quot;,&quot;RECURRING&quot;],&quot;example&quot;:&quot;RECURRING&quot;},&quot;status&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;An immediate transfer is always `EXECUTED`, a delayed transfer can be `EXECUTED` or `PENDING` and a recurring one is always `PENDING`\n&quot;,&quot;enum&quot;:[&quot;EXECUTED&quot;,&quot;PENDING&quot;],&quot;example&quot;:&quot;PENDING&quot;},&quot;requestDate&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;2019-09-19&quot;}}},{&quot;$ref&quot;:&quot;#/components/schemas/TransferRequest&quot;}]},&quot;TransferList&quot;:{&quot;properties&quot;:{&quot;items&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;items&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferResponse&quot;}}}},&quot;ConsumerError&quot;:{&quot;required&quot;:[&quot;errors&quot;],&quot;properties&quot;:{&quot;errors&quot;:{&quot;description&quot;:&quot;A list of errors providing detailed information about the problem&quot;,&quot;type&quot;:&quot;array&quot;,&quot;minItems&quot;:1,&quot;items&quot;:{&quot;required&quot;:[&quot;source&quot;,&quot;type&quot;,&quot;message&quot;],&quot;properties&quot;:{&quot;source&quot;:{&quot;description&quot;:&quot;the property source of the error&quot;,&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;amount&quot;,&quot;enum&quot;:[&quot;source&quot;,&quot;destination&quot;,&quot;amount&quot;,&quot;date&quot;,&quot;occurrences&quot;,&quot;frequency&quot;]},&quot;type&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;MANDATORY_PROPERTY&quot;,&quot;enum&quot;:[&quot;MANDATORY_PROPERTY&quot;,&quot;INVALID_FORMAT&quot;,&quot;INVALID_VALUE&quot;,&quot;INSUFFICIENT_BALANCE&quot;]},&quot;message&quot;:{&quot;description&quot;:&quot;a human-readable error message&quot;,&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;The money transfer's amount must be provided&quot;}}}}}},&quot;ProviderError&quot;:{&quot;properties&quot;:{&quot;errors&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;minItems&quot;:1,&quot;maxItems&quot;:1,&quot;items&quot;:{&quot;properties&quot;:{&quot;message&quot;:{&quot;type&quot;:&quot;string&quot;}}}}}},&quot;Account&quot;:{&quot;properties&quot;:{&quot;balance&quot;:{&quot;description&quot;:&quot;The balance in the account's default currency&quot;,&quot;type&quot;:&quot;object&quot;,&quot;title&quot;:&quot;Amount&quot;,&quot;required&quot;:[&quot;value&quot;,&quot;currency&quot;],&quot;properties&quot;:{&quot;value&quot;:{&quot;description&quot;:&quot;Balance's value using the number of decimal places defined by ISO 4217&quot;,&quot;externalDocs&quot;:{&quot;description&quot;:&quot;Decimal places table&quot;,&quot;url&quot;:&quot;https://www.currency-iso.org/en/home/tables/table-a1.html&quot;},&quot;type&quot;:&quot;number&quot;,&quot;x-implementation&quot;:{&quot;description&quot;:&quot;The real time balance (not the daily one!)&quot;,&quot;source&quot;:{&quot;system&quot;:&quot;Core Banking&quot;,&quot;data&quot;:&quot;ZBAL0.RTBAL&quot;}}},&quot;currency&quot;:{&quot;description&quot;:&quot;An ISO 4217 code&quot;,&quot;externalDocs&quot;:{&quot;url&quot;:&quot;https://www.iso.org/iso-4217-currency-codes.html&quot;},&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;USD&quot;,&quot;x-implementation&quot;:{&quot;source&quot;:{&quot;system&quot;:&quot;Core Banking&quot;,&quot;data&quot;:&quot;ZBAL0.RTCUR&quot;}}}}}}}}}}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;replacing-elements&quot;&gt;Replacing elements&lt;/h1&gt;

&lt;p&gt;It’s fairly common to tweak OpenAPI files, especially before putting them in an API portal. You may have to replace some server URLs, update version number and replace some descriptions. That can be easily done with JQ. To learn how to replace values, we’ll work on the info section of &lt;code&gt;demo-api-openapi.json&lt;/code&gt; with &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt; operators . And we will also see how to save the modified file because it wouldn’t make any sense to not be able to save our modifications.&lt;/p&gt;

&lt;table class=&quot;table-documentation-links&quot;&gt;
  
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot; scope=&quot;col&quot;&gt;JQ Operators&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.description = &quot;New description.&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.info.description = .info.contact.name&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replaces a value, the input to the right-hand-side (rhs) is the same as the input to the left-hand-side (lhs) rather than the value at the lhs path&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Plainassignment:=&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.contact |= .name&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.info.version |= sub(&quot;-snapshot&quot;;&quot;&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replaces a value, it takes a filter on the right-hand side and works out the new value for the property of `.` being assigned to by running the old value through this expression&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Update-assignment:|=&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This section’s content is also available as an asciinema bash session:&lt;/p&gt;

&lt;div class=&quot;card card-code card-bash text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Replacing elements&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;bash session player controls&quot;&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body bash-player&quot;&gt;
    &lt;asciinema-player id=&quot;player&quot; title=&quot;Replacing elements&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;125&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-3/replace.cast&quot;&gt;&lt;/asciinema-player&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;replacing-a-value-with-&quot;&gt;Replacing a value with =&lt;/h2&gt;

&lt;p&gt;The following command line shows how to print the &lt;code&gt;.info.description&lt;/code&gt; property of &lt;code&gt;demo-api-openapi.json&lt;/code&gt; file (as we have learned to do so in part 1 of this post series):&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.description&amp;#39; demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Printing .info.description original value&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $jq &amp;#39;.info.description&amp;#39; demo-api-openapi.json 
&amp;quot;The Banking API provides access to the [Banking Company](http://www.bankingcompany.com) services, which include bank account information, beneficiaries, and money transfer management.&amp;lt;!--more--&amp;gt;\n\n# Authentication\n\n## How to \n- Register\n- Create an APP\n- Request credentials\n\n# Use cases\n\n## Transferring money to an account or preexisting beneficiary\n\nThe _transfer money_ operation allows one to transfer an `amount` of money from a `source` account to a `destination` account or beneficiary.\nIn order to use an appropriate `source` and `destination`, we recommend to use _list sources_ and _list source&amp;#39;s destinations_ as shown in the figure below (instead of using _list accounts_ and _list beneficiaries_).\n\n![Diagram](http://localhost:9090/12.2-operation-manual-diagram.svg)\n\n## Cancelling a delayed or recurring money transfer\n\n- List money transfers: To list existing money transfers and select the one to delete\n- Cancel a money transfer: To cancel the selected money transfer\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The next listing shows how modifying this value is as simple, thanks to &lt;code&gt;=&lt;/code&gt; operator. By adding &lt;code&gt;=&quot;New description&quot;&lt;/code&gt; after the property’s path, its content is modified like in any programming language. And now instead of returning the &lt;code&gt;.info.description&lt;/code&gt; value, jq returns the whole document in which this property’s value has been replaced by “New description”.&lt;/p&gt;

&lt;p&gt;The listing shows also 2 different ways to only show what we need to see. The first one is to use head (which show only the nth first line) and the second one consists in piping the result of jq in another jq command to show only the value of &lt;code&gt;.info.description&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.description=&amp;quot;New description&amp;quot;&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.description=&amp;quot;New description&amp;quot;&amp;#39; demo-api-openapi.json | head -n6
jq &amp;#39;.info.description=&amp;quot;New description&amp;quot;&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.description&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Modifying .info.description&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $jq &amp;#39;.info.description=&amp;quot;New description&amp;quot;&amp;#39; demo-api-openapi.json
{
...full modified document ...
}
[apihandyman.io] $jq &amp;#39;.info.description=&amp;quot;New description&amp;quot;&amp;#39; demo-api-openapi.json | head -n6 
{
  &amp;quot;openapi&amp;quot;: &amp;quot;3.0.0&amp;quot;,
  &amp;quot;info&amp;quot;: {
    &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;New description&amp;quot;,
[apihandyman.io] $jq &amp;#39;.info.description=&amp;quot;New description&amp;quot;&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.description&amp;#39;
&amp;quot;New description&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Anything can be put on the right side of the &lt;code&gt;=&lt;/code&gt; operator as shown in the following listing. The command line allows to replace the value of &lt;code&gt;.info.contact&lt;/code&gt; by another JSON object.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.contact&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.contact = { name: &amp;quot;The Awesome Banking API Team&amp;quot;, url: &amp;quot;www.bankingcompany.com&amp;quot; }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Modifying an entire object value&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $jq &amp;#39;.info.contact&amp;#39; demo-api-openapi.json
{
  &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;
}
[apihandyman.io] $jq &amp;#39;.info.contact = { name: &amp;quot;The Awesome Banking API Team&amp;quot;, url: &amp;quot;www.bankingcompany.com&amp;quot; }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact&amp;#39;
{
  &amp;quot;name&amp;quot;: &amp;quot;The Awesome Banking API Team&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;www.bankingcompany.com&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;saving-a-copy-of-modified-file&quot;&gt;Saving (a copy of) modified file&lt;/h2&gt;

&lt;p&gt;But those command lines did not actually saved the modified files; indeed the modified content is just printed in the terminal. Unfortunately jq does not come with in-place modification like &lt;code&gt;sed&lt;/code&gt;. But that’s not really a problem, we can use a good old &lt;code&gt;&amp;gt;&lt;/code&gt; to save result in another file as shown below (and once really sure of what we have done, we can replace the original one).&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.description=&amp;quot;New description&amp;quot;&amp;#39; demo-api-openapi.json &amp;gt; demo-api-openapi-mod.json
jq &amp;#39;.info.description&amp;#39; demo-api-openapi-mod.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Saving modified file&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $jq &amp;#39;.info.description=&amp;quot;New description&amp;quot;&amp;#39; demo-api-openapi.json &amp;gt; demo-api-openapi-mod.json 
[apihandyman.io] $jq &amp;#39;.info.description&amp;#39; demo-api-openapi-mod.json
&amp;quot;New description&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;using-filters-when-replacing-a-value&quot;&gt;Using filters when replacing a value&lt;/h2&gt;

&lt;p&gt;When I said that anything can be put on the right side, it’s virtually anything; including complex filters chains like the one we have learned to create previously in part 1 and 2. Let’s see that with a very simple example. The following listing shows how to delete the “-snapshot” suffix from the &lt;code&gt;.info.version&lt;/code&gt; property using the &lt;code&gt;sub&lt;/code&gt; filter (which replaces a string by another one inside a string) on the &lt;code&gt;.info.version&lt;/code&gt; property.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.version&amp;#39; demo-api-openapi.json 
jq &amp;#39;.info.version = (.info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.version = (.info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.version&amp;#39; 

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using filters&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info.version&amp;#39; demo-api-openapi.json
&amp;quot;1.0.0-snapshot&amp;quot;
[apihandyman.io]$ jq &amp;#39;.info.version = (.info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json
{
  ...full modified document
}
[apihandyman.io]$ jq &amp;#39;.info.version = (.info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.version&amp;#39;
&amp;quot;1.0.0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Did you noticed the parenthesis around the right side of the &lt;code&gt;=&lt;/code&gt; operator? They are very important. If you forget them, be ready to face more or less unexpected consequences depending on what you do. Here it hopefully break swith an error without silently doing nasty stuff. Indeed, here, without &lt;code&gt;()&lt;/code&gt;, the result of &lt;code&gt;.info.version = .info.version&lt;/code&gt;, which is the whole document (a JSON object), is piped into the &lt;code&gt;sub&lt;/code&gt; filter which expects a string. So always put parenthesis around the right side if there are some piped filters.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.version = (.info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.version = .info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;)&amp;#39;  demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Do not forget parenthesis&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info.version = (.info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.version&amp;#39;
&amp;quot;1.0.0&amp;quot;
[apihandyman.io]$ jq &amp;#39;.info.version = .info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;)&amp;#39;  demo-api-openapi.json
jq: error (at demo-api-openapi.json:0): object ({&amp;quot;openapi&amp;quot;:...) cannot be matched, as it is not a string&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And again, when I said that anything could be put on the right side, it’s really anything. Even anything from from anywhere. For example, the following command line put the modified version number into the description.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.description&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.description = (.info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.description&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using anything from anywhere&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info.description&amp;#39; demo-api-openapi.json
&amp;quot;The Banking API provides access to the [Banking Company](http://www.bankingcompany.com) services, which include bank account information, beneficiaries, and money transfer management.&amp;lt;!--more--&amp;gt;\n\n# Authentication\n\n## How to \n- Register\n- Create an APP\n- Request credentials\n\n# Use cases\n\n## Transferring money to an account or preexisting beneficiary\n\nThe _transfer money_ operation allows one to transfer an `amount` of money from a `source` account to a `destination` account or beneficiary.\nIn order to use an appropriate `source` and `destination`, we recommend to use _list sources_ and _list source&amp;#39;s destinations_ as shown in the figure below (instead of using _list accounts_ and _list beneficiaries_).\n\n![Diagram](http://localhost:9090/12.2-operation-manual-diagram.svg)\n\n## Cancelling a delayed or recurring money transfer\n\n- List money transfers: To list existing money transfers and select the one to delete\n- Cancel a money transfer: To cancel the selected money transfer\n&amp;quot;
[apihandyman.io]$ jq &amp;#39;.info.description = (.info.version | sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.description&amp;#39;
&amp;quot;1.0.0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;replacing-a-value-with--1&quot;&gt;Replacing a value with |=&lt;/h2&gt;

&lt;p&gt;deleting “-snapshot” from the version number can be done in a more elegant way using the &lt;code&gt;|=&lt;/code&gt; operator, as shown in the following listing. Thanks to this operator, when using &lt;code&gt;.&lt;/code&gt; on the right side, you only get what was passed on the left side and so you may not need to use &lt;code&gt;|&lt;/code&gt; (reminder &lt;code&gt;. | some_filter&lt;/code&gt; is equivalent to &lt;code&gt;some_filter&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.version&amp;#39; demo-api-openapi.json 
jq &amp;#39;.info.version |= sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;)&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.version |= sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;)&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.version&amp;#39; 

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using |= instead of =&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info.version&amp;#39; demo-api-openapi.json
&amp;quot;1.0.0-snapshot&amp;quot;
[apihandyman.io]$ jq &amp;#39;.info.version |= sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;)&amp;#39; demo-api-openapi.json
{
  ...full modified document
}
[apihandyman.io]$ jq &amp;#39;.info.version |= sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;)&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.version&amp;#39;
&amp;quot;1.0.0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That works with objects, let’s invert email and url values in the contact object. As you can see, url value is accessed with &lt;code&gt;.url&lt;/code&gt; as only the contact object value is available on the right side (same for email); if we had used &lt;code&gt;=&lt;/code&gt; we should have used &lt;code&gt;.info.contact.url&lt;/code&gt;. Note also how name is kept unmodified by just using &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.contact&amp;#39; demo-api-openapi.json 
jq &amp;#39;.info.contact |= { name, url: .email, email: .url }&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.contact |= { name, url: .email, email: .url }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;|= operator works on object too&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info.contact&amp;#39; demo-api-openapi.json
{
  &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;
}
[apihandyman.io]$ jq &amp;#39;.info.contact |= { name, url: .email, email: .url }&amp;#39; demo-api-openapi.json
{
  ...full modified document
}
[apihandyman.io]$ jq &amp;#39;.info.contact |= { name, url: .email, email: .url }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact&amp;#39;
&amp;quot;1.0.0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;chaining-modifications&quot;&gt;Chaining modifications&lt;/h2&gt;

&lt;p&gt;Obviously, jq allows to do more than one modification at a time. You probably already guessed how to do so, you just need to pipe all modifications one after another as shown below on line 12 and 16. Here, we replace &lt;code&gt;.info.description&lt;/code&gt; value by “New description.” using &lt;code&gt;=&lt;/code&gt; and then &lt;code&gt;|&lt;/code&gt; the result to another modification consisting in deleting “-snapshot” from &lt;code&gt;.info.version&lt;/code&gt; using &lt;code&gt;|=&lt;/code&gt; and &lt;code&gt;sub&lt;/code&gt;. The final result shows both modifications.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info&amp;#39; demo-api-openapi.json
jq &amp;#39;(.info.description = &amp;quot;New description.&amp;quot;) | (.info.version |= sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json
jq &amp;#39;(.info.description = &amp;quot;New description.&amp;quot;) | (.info.version |= sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info&amp;#39; demo-api-openapi.json
{
  &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The Banking API provides access to the [Banking Company](http://www.bankingcompany.com) services, which include bank account information, beneficiaries, and money transfer management.&amp;lt;!--more--&amp;gt;\n\n# Authentication\n\n## How to \n- Register\n- Create an APP\n- Request credentials\n\n# Use cases\n\n## Transferring money to an account or preexisting beneficiary\n\nThe _transfer money_ operation allows one to transfer an `amount` of money from a `source` account to a `destination` account or beneficiary.\nIn order to use an appropriate `source` and `destination`, we recommend to use _list sources_ and _list source&amp;#39;s destinations_ as shown in the figure below (instead of using _list accounts_ and _list beneficiaries_).\n\n![Diagram](http://localhost:9090/12.2-operation-manual-diagram.svg)\n\n## Cancelling a delayed or recurring money transfer\n\n- List money transfers: To list existing money transfers and select the one to delete\n- Cancel a money transfer: To cancel the selected money transfer\n&amp;quot;,
  &amp;quot;contact&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;
  }
}
[apihandyman.io]$ jq &amp;#39;(.info.description = &amp;quot;New description.&amp;quot;) | (.info.version |= sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json
{
  ...full modified document...
}
[apihandyman.io]$ jq &amp;#39;(.info.description = &amp;quot;New description.&amp;quot;) | (.info.version |= sub(&amp;quot;-snapshot&amp;quot;;&amp;quot;&amp;quot;))&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;
{
  &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;New description.&amp;quot;,
  &amp;quot;contact&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;jq-module&quot;&gt;JQ module&lt;/h2&gt;

&lt;p&gt;Here’s a JQ module demonstrating the various use of &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt; we have seen (use &lt;code&gt;jq -r replace.jq demo-api-openapi.json&lt;/code&gt; to see it in action).&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;replace.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-3/replace.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# Basic value replacement using =
(.info.description = &quot;New description.&quot;) | # modified document
                                           # goes to next step
# Using processing when setting value
(.info.version = (.info.version | sub(&quot;-snapshot&quot;;&quot;-no-snapshot&quot;))) |
# Any type of value can be provided on right side of =
(
  .info.contact = { 
                    name: &quot;The Awesome Banking API Team&quot;, 
                    email: &quot;www.bankingcompany.com&quot;
                  }
) |
# |= can also be used to only work on what is provided on left side
(.info.version |= sub(&quot;-no-snapshot&quot;;&quot;&quot;)) |
# It works on objects too
(
  .info.contact |= { 
                    name, # unmodified 
                    url: .email, # path of value inside .info.contact
                    email: &quot;api@bankingcompany.com&quot;
                  }
)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;adding-elements&quot;&gt;Adding elements&lt;/h1&gt;

&lt;p&gt;JQ does not only allow to replace existing values, it allows also to add elements thanks to the &lt;code&gt;+=&lt;/code&gt; operator which can be used on many kind of value and &lt;code&gt;|=&lt;/code&gt; which can be used on objects.&lt;/p&gt;

&lt;table class=&quot;table-documentation-links&quot;&gt;
  
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot; scope=&quot;col&quot;&gt;JQ Operators&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.description += &quot;More description&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.info.description += .info.contact.name&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Increments a number value, concatenates string or add properties to object&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Arithmeticupdate-assignment:+=,-=,*=,/=,%=,//=&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This section’s content is also available as an asciinema bash session:&lt;/p&gt;

&lt;div class=&quot;card card-code card-bash text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Adding elements&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;bash session player controls&quot;&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body bash-player&quot;&gt;
    &lt;asciinema-player id=&quot;player&quot; title=&quot;Adding elements&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;125&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-3/add.cast&quot;&gt;&lt;/asciinema-player&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;appending-to-a-string-with-&quot;&gt;Appending to a string with +=&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;+=&lt;/code&gt; operator is used in various programming language; &lt;code&gt;a+=x&lt;/code&gt; usually means &lt;code&gt;a=a+x&lt;/code&gt; and jq is no exception. But if such operator is usually to be used with numbers, jq allows to use it with other types such as string as shown in the listing below. As comparison, line 3 and 5 shows how to add the “ is awesome” string to &lt;code&gt;.info.contact.name&lt;/code&gt; using &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt;. And line 5 shows how to do the same modification using &lt;code&gt;+=&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.contact.name&amp;#39; demo-api-openapi.json 
jq &amp;#39;.info.contact.name = .info.contact.name + &amp;quot; is awesome&amp;quot;&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact.name&amp;#39;
jq &amp;#39;.info.contact.name |= . + &amp;quot; is awesome&amp;quot;&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact.name&amp;#39;
jq &amp;#39;.info.contact.name += &amp;quot; is awesome&amp;quot;&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact.name&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Appending to a string&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info.contact.name&amp;#39; demo-api-openapi.json 
&amp;quot;The Banking API team&amp;quot;
[apihandyman.io]$ jq &amp;#39;.info.contact.name = .info.contact.name + &amp;quot; is awesome&amp;quot;&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact.name&amp;#39;
&amp;quot;The Banking API team is awesome&amp;quot;
[apihandyman.io]$ jq &amp;#39;.info.contact.name |= . + &amp;quot; is awesome&amp;quot;&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact.name&amp;#39;
&amp;quot;The Banking API team is awesome&amp;quot;
[apihandyman.io]$ jq &amp;#39;.info.contact.name += &amp;quot; is awesome&amp;quot;&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact.name&amp;#39;
&amp;quot;The Banking API team is awesome&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;adding-properties-to-object-with-&quot;&gt;Adding properties to object with +=&lt;/h2&gt;

&lt;p&gt;More interesting, &lt;code&gt;+=&lt;/code&gt; can be used on objects; that means it can be used to add properties to existing objects. The following listing shows how a Slack channel name can be added to &lt;code&gt;.info.contact&lt;/code&gt;. All that is needed is to put an object with the desired properties on the right side of &lt;code&gt;+=&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that this new property name is prefixed with &lt;code&gt;x-&lt;/code&gt;; indeed the standard OpenAPI Contact object does not have such property but the OpenAPI specification allows to add custom ones. They must be prefixed by &lt;code&gt;x-&lt;/code&gt; so parsers can detect them and do not consider them as errors. Note also that as this name contains a &lt;code&gt;-&lt;/code&gt; is must b quoted.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.contact&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.contact += {&amp;quot;x-slack&amp;quot;: &amp;quot;apiteam&amp;quot; }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact&amp;#39;
&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Adding properties&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info.contact&amp;#39; demo-api-openapi.json
{
  &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;
}
[apihandyman.io]$ jq &amp;#39;.info.contact += {&amp;quot;x-slack&amp;quot;: &amp;quot;api-team&amp;quot; }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact&amp;#39;
{
  &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;,
  &amp;quot;x-slack&amp;quot;: &amp;quot;apiteam&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;adding-and-updating-properties-with-&quot;&gt;Adding and updating properties with +=&lt;/h2&gt;

&lt;p&gt;Another interesting aspect of &lt;code&gt;+=&lt;/code&gt; is that it can be used to replace values inside an object as shown below. The jq command on line 7 still adds a &lt;code&gt;x-slack&lt;/code&gt; property to &lt;code&gt;.info.contact&lt;/code&gt; but it also updates the existing name to “The Awesome Banking API team”.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info.contact&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.contact += { name: &amp;quot;The Awesome Banking API team&amp;quot;, &amp;quot;x-slack&amp;quot;: &amp;quot;apiteam&amp;quot; }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Adding and updating properties&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info.contact&amp;#39; demo-api-openapi.json
{
  &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;
}
[apihandyman.io]$ jq &amp;#39;.info.contact += { name: &amp;quot;updated name&amp;quot;, &amp;quot;x-slack&amp;quot;: &amp;quot;apiteam&amp;quot; }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info.contact&amp;#39;
{
  &amp;quot;name&amp;quot;: &amp;quot;The Awesome Banking API team&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;,
  &amp;quot;x-slack&amp;quot;: &amp;quot;apiteam&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;jq-module-1&quot;&gt;JQ module&lt;/h2&gt;

&lt;p&gt;Before going further and to add real stuff on an OpenAPI file, here’s a jq module summarizing what we have learned about &lt;code&gt;+=&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;add.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-3/add.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# += adds anything to an existing value
# String concatenation
# Equivalent to 
#   .info.contact.name = .info.contact.name + &quot; is awesome&quot;
#   .info.contact.name |= . + &quot; is awesome&quot;
(.info.contact.name += &quot; is awesome&quot;) | # Equivalent to .info.contact.name = .info.contact.name + &quot; is awesome&quot;
# Adding a property
(.info.contact += {&quot;x-slack&quot;: &quot;api-team&quot; }) |
# Adding a property and updating existing name
(.info.contact += {&quot;x-fax&quot;: &quot;555-06-777&quot;, name: &quot;The Awesome Banking API team&quot;})

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;adding-missing-500-response-when-needed-with-&quot;&gt;Adding missing 500 response when needed with +=&lt;/h2&gt;

&lt;p&gt;So far, we have replaced/add to known elements (&lt;code&gt;.info.version&lt;/code&gt;) inside the demo OpenAPI file. Whatever the operator used (&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt; or &lt;code&gt;+=&lt;/code&gt;,), we only provided them a static reference to update. But jq is more clever than that, we already have seen that we can but anything on the right side of an operator, it’s the same on the left side.&lt;/p&gt;

&lt;p&gt;Let’s say we have an OpenAPI file in which some operations lack the definition of 500 (unexpected server error) responses. We could use &lt;code&gt;+=&lt;/code&gt; on their responses list to add the missing 500 response.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
      &lt;figure class=&quot;figure&quot;&gt;
        
        &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-3-modifying-openapi-files-with-jq/jq-openapi-http-status-codes.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        
      &lt;/figure&gt;
    &lt;/div&gt;

&lt;p&gt;The path to each operations responses list is &lt;code&gt;.paths.&amp;lt;some path&amp;gt;.&amp;lt;some http method&amp;gt;.responses&lt;/code&gt;, unfortunately, path and http method will never be the same and some operations may have a 500 response defined. We could manually and painfully list all the response without 500 and then write a jq file to update them all… Hopefully we won’t. We can let jq search and update the responses lists when needed.&lt;/p&gt;

&lt;p&gt;First we need to identify the operation missing a 500 reponse. This is done with the following jq filters.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Selecting responses list without 500&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;.paths[][] |
select(type == &amp;quot;object&amp;quot;) |
select(has(&amp;quot;responses&amp;quot;)) | 
.responses |
select(has(&amp;quot;500&amp;quot;) | not)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that we cannot simply use &lt;code&gt;paths[][].responses&lt;/code&gt; because of path parameters list and some x-tension not containing a responses property, hence the two &lt;code&gt;select&lt;/code&gt;. Without &lt;code&gt;select(type == &quot;object&quot;)&lt;/code&gt;, we have have a &lt;em&gt;Cannot index array with string “responses”&lt;/em&gt; error because the path parameters list. And without &lt;code&gt;select(has(&quot;responses&quot;))&lt;/code&gt;we would have some &lt;code&gt;null&lt;/code&gt; elements in out final list.&lt;/p&gt;

&lt;p&gt;Once we get, at last, to the responses we keep only the one not having already a 500 property using &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;has&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following listing shows the result of this filters combination:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.paths[][] | select(type==&amp;quot;object&amp;quot;) | select(has(&amp;quot;responses&amp;quot;)) | .responses | select(has(&amp;quot;500&amp;quot;) | not) &amp;#39; demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Selecting responses list without 500 command line&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.paths[][] | select(type==&amp;quot;object&amp;quot;) | select(has(&amp;quot;responses&amp;quot;)) | .responses | select(has(&amp;quot;500&amp;quot;) | not) &amp;#39; demo-api-openapi.json 
...
{
  &amp;quot;200&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;The money transfer has been update&amp;quot;
  }
}
{
  &amp;quot;204&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;The money transfer has been deleted&amp;quot;
  },
  &amp;quot;404&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;The money transfer does not exist&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now that we are able to list the elements to fix, let’s put these filters on the left side of &lt;code&gt;+=&lt;/code&gt; and put the missing data on the right as we have just learned :&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;add-missing-500.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-3/add-missing-500.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# First we select the elements to modify
(
  .paths[][] |
  select(type == &quot;object&quot;) |
  select(has(&quot;responses&quot;)) | 
  .responses |
  select(has(&quot;500&quot;) | not)
)
# Then each of them is modified 
+= {
  &quot;500&quot;:{
    description: &quot;Unexpected error&quot;,
    content: {
      &quot;application/json&quot;: {
        schema: {
          &quot;$ref&quot;: &quot;#components/schemas/ProviderError&quot;
        }
      }
    }
  }
}
# The fully modified document is returned&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As shown in the two following listings, the get /accounts operation does not have a 500 but it is hopefully easily fixed by applying &lt;code&gt;add-missing-500.jq&lt;/code&gt; on the file. Note that all other operations lacking a 500 are also fixed as the new 500 property is added to each element identified by the filters on the left side of &lt;code&gt;+=&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.paths[&amp;quot;/accounts&amp;quot;].get.responses&amp;#39; demo-api-openapi.json 

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Before&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-collapsed&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.paths[&amp;quot;/accounts&amp;quot;].get.responses&amp;#39; demo-api-openapi.json 
{
  &amp;quot;200&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;User&amp;#39;s accounts&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;required&amp;quot;: [
            &amp;quot;properties&amp;quot;
          ],
          &amp;quot;properties&amp;quot;: {
            &amp;quot;items&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Account&amp;quot;
              }
            }
          }
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -f add-missing-500.jq demo-api-openapi.json | jq &amp;#39;.paths[&amp;quot;/accounts&amp;quot;].get.responses&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;After&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-collapsed&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -f add-missing-500.jq demo-api-openapi.json | jq &amp;#39;.paths[&amp;quot;/accounts&amp;quot;].get.responses&amp;#39;
{
  &amp;quot;200&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;User&amp;#39;s accounts&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;required&amp;quot;: [
            &amp;quot;properties&amp;quot;
          ],
          &amp;quot;properties&amp;quot;: {
            &amp;quot;items&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/Account&amp;quot;
              }
            }
          }
        }
      }
    }
  },
  &amp;quot;500&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Unexpected error&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#components/schemas/ProviderError&amp;quot;
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;adding-missing-response-content-when-needed-with--and-complex-update-filter&quot;&gt;Adding missing response content when needed with |= and complex update filter&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;demo-api-openapi.json&lt;/code&gt; file some operations may have basic &lt;code&gt;401&lt;/code&gt; and &lt;code&gt;403&lt;/code&gt; responses but without any schema (missing &lt;code&gt;content&lt;/code&gt; property). Let’s fix that with a jq module inpired by previous one but using &lt;code&gt;|=&lt;/code&gt; with a more complex filters on the left and accepting a regex HTTP status code and a schema model name.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
      &lt;figure class=&quot;figure&quot;&gt;
        
        &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-3-modifying-openapi-files-with-jq/jq-openapi-response-content.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        
      &lt;/figure&gt;
    &lt;/div&gt;

&lt;p&gt;The following jq module is composed of a &lt;code&gt;|=&lt;/code&gt; main statement. On its left side, it selects all responses list. On its right side, it works on each key/value of all responses list using &lt;code&gt;with_entry&lt;/code&gt;. If the key (HTTP status code) matches the regex (&lt;code&gt;$coderegex&lt;/code&gt;) provided as a command line argument and does not already contain a &lt;code&gt;content&lt;/code&gt; property, it add a &lt;code&gt;content&lt;/code&gt; to the value. If not, it leaves the value as is is by returning &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;add-missing-response-content.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-3/add-missing-response-content.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# Selecting all responses list
( 
  .paths[][] |
  select(type == &quot;object&quot;) |
  select(has(&quot;responses&quot;)) | 
  .responses
) 
|= # Updating selected values
  with_entries( # transforms key: value into { key: key, value: value}
  # $coderegex is provided with --arg coderegex 40.
  if (.key | test($coderegex)) and (.value | has(&quot;content&quot;) | not) then
    .value += { # Actually updating the value
      content: {
        &quot;application/json&quot;: {
          schema: { # $schema is provided with --arg schema ConsumerError 
            &quot;$ref&quot;: (&quot;#/components/schemas/&quot; + $schema)
          }
        }
      }
  }
  else
    . # unmodified element
  end
)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the responses list of post /beneficiaries before modification:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.paths[&amp;quot;/beneficiaries&amp;quot;].post.responses&amp;#39; demo-api-openapi.json 

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Before&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.paths[&amp;quot;/beneficiaries&amp;quot;].post.responses&amp;#39; demo-api-openapi.json 
{
  &amp;quot;201&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Beneficiary added&amp;quot;
  },
  &amp;quot;401&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Unauthorized&amp;quot;
  },
  &amp;quot;403&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Forbidden&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Once &lt;code&gt;add-missing-response-content.jq&lt;/code&gt; is applied on the OpenAPI file, the responses matching the &lt;code&gt;40.&lt;/code&gt; regex (&lt;code&gt;coderegex&lt;/code&gt; command line argument) have been modified to add a content with application/json media type referencing the schema provided with &lt;code&gt;schema&lt;/code&gt; command line argument. And as seen previously that has been done to all operations responses.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq --arg coderegex 40. --arg schema ConsumerError -f add-missing-response-content.jq demo-api-openapi.json | jq &amp;#39;.paths[&amp;quot;/beneficiaries&amp;quot;].post.responses&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Before&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-collapsed&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq --arg coderegex 40. --arg schema ConsumerError -f add-missing-response-content.jq demo-api-openapi.json | jq &amp;#39;.paths[&amp;quot;/beneficiaries&amp;quot;].post.responses&amp;#39;
{
  &amp;quot;201&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Beneficiary added&amp;quot;
  },
  &amp;quot;401&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Unauthorized&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ConsumerError&amp;quot;
        }
      }
    }
  },
  &amp;quot;403&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Forbidden&amp;quot;,
    &amp;quot;content&amp;quot;: {
      &amp;quot;application/json&amp;quot;: {
        &amp;quot;schema&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/components/schemas/ConsumerError&amp;quot;
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that the selection of elements to modify with &lt;code&gt;$coderegex&lt;/code&gt; could be fully made on right side (you could try to modify the module to do so).&lt;/p&gt;

&lt;h1 id=&quot;deleting-elements&quot;&gt;Deleting elements&lt;/h1&gt;

&lt;p&gt;Last but not least, deleting elements. We’ll learn to use the following jq operators and function:&lt;/p&gt;

&lt;table class=&quot;table-documentation-links&quot;&gt;
  
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot; scope=&quot;col&quot;&gt;JQ Operators and Functions&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.description = &quot;New description.&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.info.description = .info.contact.name&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replaces a value, the input to the right-hand-side (rhs) is the same as the input to the left-hand-side (lhs) rather than the value at the lhs path&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Plainassignment:=&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.contact |= .name&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.info.version |= sub(&quot;-snapshot&quot;;&quot;&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replaces a value, it takes a filter on the right-hand side and works out the new value for the property of `.` being assigned to by running the old value through this expression&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Update-assignment:|=&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.contact |= del(.contact)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;del(.info.contact)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Removes a key and its corresponding value from an object&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#del(path_expression)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;walk(f)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Applies a filter recursively to every component of the input entity&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#walk(f)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;delpaths(PATHS)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Deletes an array of paths. each path is an array of string and numbers.&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#delpaths(PATHS)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This section’s content is also available as an asciinema bash session:&lt;/p&gt;

&lt;div class=&quot;card card-code card-bash text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Deleting elements&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;bash session player controls&quot;&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body bash-player&quot;&gt;
    &lt;asciinema-player id=&quot;player&quot; title=&quot;Deleting elements&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;125&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-3/delete.cast&quot;&gt;&lt;/asciinema-player&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dumbly-deleting-contact-with--or-&quot;&gt;Dumbly deleting contact with = or |=&lt;/h2&gt;

&lt;p&gt;If we want to get rid of the contact property in info, we can do a replacement using &lt;code&gt;=&lt;/code&gt; or a more clever &lt;code&gt;|=&lt;/code&gt; as we have seen before. The idea is to keep all other properties (&lt;code&gt;title&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, and &lt;code&gt;description&lt;/code&gt;). Note how the &lt;code&gt;|=&lt;/code&gt; syntax is simpler.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info&amp;#39; demo-api-openapi.json
jq &amp;#39;.info = { info: .info.title, version: .info.version, description: .info.description }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;
jq &amp;#39;.info |= { title, version, description }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Keeping title, version and description to delete contact&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-collapsed&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info&amp;#39; demo-api-openapi.json
{
  &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The Banking API provides access ...&amp;quot;,
  &amp;quot;contact&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;
  }
}
[apihandyman.io]$ jq &amp;#39;.info = { info: .info.title, version: .info.version, description: .info.description }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;
{
  &amp;quot;info&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The Banking API provides access ...&amp;quot;
}
[apihandyman.io]$ jq &amp;#39;.info |= { title, version, description }&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;
{
  &amp;quot;info&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The Banking API provides access ...&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;efficiently-deleting-contact-with-del&quot;&gt;Efficiently deleting contact with del&lt;/h2&gt;

&lt;p&gt;That works because there’s not too many properties to keep inside info. But if you work on a more complex object this could become quite boring to delete an element. Hopefully, there is a &lt;code&gt;del&lt;/code&gt; function that can be used to actually delete an element. It can be used with &lt;code&gt;|=&lt;/code&gt; but also alone. The &lt;code&gt;del&lt;/code&gt; function takes a path expressions so it can be directly used on &lt;code&gt;.info.contact&lt;/code&gt; to delete this property.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq &amp;#39;.info |= del(.contact)&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;
jq &amp;#39;del(.info.contact)&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Actually deleting contact&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq &amp;#39;.info |= del(.contact)&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;
{
  &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The Banking API provides access ...&amp;quot;
}
[apihandyman.io]$ jq &amp;#39;del(.info.contact)&amp;#39; demo-api-openapi.json | jq &amp;#39;.info&amp;#39;
{
  &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The Banking API provides access ...&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;deleting-deprecated-operations-or-properties-with-walk-and-del&quot;&gt;deleting deprecated operations or properties with walk and del&lt;/h2&gt;

&lt;p&gt;The OpenAPI 3 specification allows to tell that some operations ans even properties are deprecated by adding a &lt;code&gt;deprecated: true&lt;/code&gt;. It can be useful to be able to delete all those deprecated elements.
That can be done quite easily with &lt;code&gt;walk&lt;/code&gt; and &lt;code&gt;del&lt;/code&gt; functions.&lt;/p&gt;

&lt;table class=&quot;table-documentation-links&quot;&gt;
  
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot; scope=&quot;col&quot;&gt;JQ Functions&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.contact |= del(.contact)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;del(.info.contact)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Removes a key and its corresponding value from an object&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#del(path_expression)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;walk(f)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Applies a filter recursively to every component of the input entity&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#walk(f)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;walk&lt;/code&gt; function is very useful, it will basically walk through all nodes inside the provided document and apply the filters provided as parameter. The following jq module is split in 3 steps and uses &lt;code&gt;walk&lt;/code&gt; on each of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First we delete all object values having a deprecated property set to true&lt;/li&gt;
  &lt;li&gt;Then we delete the keys having a null value created by first step&lt;/li&gt;
  &lt;li&gt;And eventually, we delete all keys whose value became an empty object because of second step&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;delete-deprecated.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-3/delete-deprecated.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# Removes all object having a deprecated property set to true

# Before: &quot;objectProperty&quot;: { &quot;deprecated&quot;: true }
# After: &quot;objectProperty&quot;: null
walk(
  if type==&quot;object&quot; and .deprecated == true then 
    del(.) 
  else 
    . 
  end
) | 
# Removes all property set to null (&quot;nullProperty&quot;: null) created 
# when deleted objects containing deprecated set to true
walk(
  if type==&quot;object&quot; then 
    with_entries( 
      select( .value != null)
    ) 
  else  # Not an object, just keep it
    .
  end
) |
# Removes all empty property (&quot;emptyProperty&quot;: {}) that may have
# been created when removing the null ones
walk(
  if type==&quot;object&quot; then 
    with_entries(
      select(.value != {} )
    )
  else # Not an object, just keep it
    . 
  end
)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the module in action (note for this demonstration we focus only on deprecated operations and reuse the  search operations module from part 2):&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -r --arg deprecated true -f search-operations.jq demo-api-openapi.json
jq -f delete-deprecated.jq demo-api-openapi.json | jq -r -f search-operations.jq --arg deprecated true

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Deleting deprecated elements&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -r --arg deprecated true -f search-operations.jq demo-api-openapi.json
[demo-api-openapi.jso]  delete  /beneficiaries/{id}     Delete a beneficiary (deprecated)
[demo-api-openapi.jso]  patch   /beneficiaries/{id}     Updates a beneficiary (deprecated)

[apihandyman.io]$ jq -f delete-deprecated.jq demo-api-openapi.json | jq -r -f search-operations.jq --arg deprecated true&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;deleting-x-tensions-with-paths-and-delpaths&quot;&gt;Deleting x-tensions with paths and delpaths&lt;/h2&gt;

&lt;p&gt;Another simple way of deleting elements is to use &lt;code&gt;paths&lt;/code&gt; and &lt;code&gt;delpaths&lt;/code&gt;, we can use them to remove all x-tensions (custom properties starting whose names start with &lt;code&gt;x-&lt;/code&gt;) from an OpenAPI file.&lt;/p&gt;

&lt;table class=&quot;table-documentation-links&quot;&gt;
  
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot; scope=&quot;col&quot;&gt;JQ Functions&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;paths&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Lists all possible paths in documents, each path is represented as an array&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#paths,paths(node_filter),leaf_paths&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;delpaths(PATHS)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Deletes an array of paths. each path is an array of string and numbers.&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#delpaths(PATHS)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;First we list all paths to those x-tensions. The &lt;code&gt;paths&lt;/code&gt; function returns an array of all paths to all elements inside a document. Each path is an array, for example the path to contact is &lt;code&gt;[&quot;info&quot;,&quot;contact&quot;]&lt;/code&gt; (hence &lt;code&gt;paths&lt;/code&gt; returns an array of array). As we only want x-tensions, we filter this lists of paths to keep only the ones having their leafs prefixed by &lt;code&gt;x-&lt;/code&gt;. Once we have this array of paths, we can use it as a parameter for delpaths and we’re done!&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;delete-xtensions.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-3/delete-xtensions.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# Lists all available x-tensions' paths
[(
  paths | # Lists ALL possible paths in documents 
          # (each path is represented as an array)
  select( # Keeps only the values for which what follows return true
    .[-1] | # Gets the path leaf (last item in array)
            # Equivalent to .[.|length-1]
    tostring | # Converts to string for next step
    test(&quot;^x-&quot;) # Matches &quot;^x-&quot; regex (starts with x-)
  )
)] as $xtensions |
# Delete all found x-tensions using their paths
delpaths($xtensions)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -r -f list-xtension-paths.jq demo-api-openapi.json
jq -f delete-xtensions.jq demo-api-openapi.json | jq -r -f list-xtension-paths.jq

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Deleting x-tensions&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -r -f list-xtension-paths.jq demo-api-openapi.json 
[
  [
    &amp;quot;paths&amp;quot;,
    &amp;quot;/accounts/{id}&amp;quot;,
    &amp;quot;get&amp;quot;,
    &amp;quot;x-implementation&amp;quot;
  ],
  ...
]

[apihandyman.io]$ jq -f delete-xtensions.jq demo-api-openapi.json | jq -r -f list-xtension-paths.jq 
[]&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;deleting-unsused-schemas-with-delpaths&quot;&gt;Deleting unsused schemas with delpaths&lt;/h2&gt;

&lt;p&gt;We’re under no obligation to use &lt;code&gt;paths&lt;/code&gt; when using &lt;code&gt;delpaths&lt;/code&gt;, we can build the paths ourselves.&lt;/p&gt;

&lt;table class=&quot;table-documentation-links&quot;&gt;
  
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot; scope=&quot;col&quot;&gt;JQ Filters and Functions&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;..&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns every value recursively&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#RecursiveDescent:..&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;delpaths(PATHS)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Deletes an array of paths. each path is an array of string and numbers.&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#delpaths(PATHS)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The following module removes unused schemas from an OpenAPI file. Unused schemas are defined in &lt;code&gt;components.schemas&lt;/code&gt; but never referenced in a &lt;code&gt;$ref&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;To build the paths list, we first create a list of all possible $ref values using the keys of components.schemas. Then we substract all actually used $ref. Note the use of &lt;code&gt;..&lt;/code&gt;to get all document’s nodes and &lt;code&gt;unique&lt;/code&gt; to keep only one occurrence of each used $ref. Once we have a list of &lt;code&gt;#/components/schemas/name&lt;/code&gt; strings, we transform them in paths by splitting on &lt;code&gt;/&lt;/code&gt; and removing &lt;code&gt;#&lt;/code&gt;. And eventually we use delpaths on the resulting array of paths. Note that delpaths accept a parameter which is not strictly an array of array, indeed the unsused schema paths list is only a succession of individual arrays not enclosed inside an array.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;delete-unused-schemas.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-3/delete-unused-schemas.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;(
  # Defined schemas
  (
    .components.schemas | # select reusable schemas structure
    keys | # keeps only the schema names
    map(&quot;#/components/schemas/&quot; + .) # return an array with schema refs
  )
  # Minus operator to substract used schemas from defined schemas
  -
  # Actually used schemas
  ([ # Creating an array
    .. | # selects all nodes
    select(type==&quot;object&quot;) | # keeps only object
    select(has(&quot;$ref&quot;)) | # keeps only object having $ref property
    .[&quot;$ref&quot;] # the $ref property (.$ref connot be used because of $) 
  ] | unique) # Keeps only one occurence
  |
  map(split(&quot;/&quot;) - [&quot;#&quot;])
) as $unused |
delpaths($unused)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -r -f list-unused-schemas.jq demo-api-openapi.json
jq -f delete-unused-schemas.jq demo-api-openapi.json | jq -r -f list-unused-schemas.jq

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Deleting unused schemas&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -r -f list-unused-schemas.jq demo-api-openapi.json 
[
  &amp;quot;components&amp;quot;,
  &amp;quot;schemas&amp;quot;,
  &amp;quot;ProviderError&amp;quot;
]
[
  &amp;quot;components&amp;quot;,
  &amp;quot;schemas&amp;quot;,
  &amp;quot;UselessSchema&amp;quot;
]

[apihandyman.io]$ jq -f delete-unused-schemas.jq demo-api-openapi.json | jq -r -f list-unused-schemas.jq&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;And we’re done with part 3, you should now be able to modify any OpenAPI or any JSON file as you like using the following operators and functions:&lt;/p&gt;

&lt;table class=&quot;table-documentation-links&quot;&gt;
  
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot; scope=&quot;col&quot;&gt;JQ Filters, Operators and Functions&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.description = &quot;New description.&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.info.description = .info.contact.name&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replaces a value, the input to the right-hand-side (rhs) is the same as the input to the left-hand-side (lhs) rather than the value at the lhs path&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Plainassignment:=&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.contact |= .name&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.info.version |= sub(&quot;-snapshot&quot;;&quot;&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replaces a value, it takes a filter on the right-hand side and works out the new value for the property of `.` being assigned to by running the old value through this expression&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Update-assignment:|=&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.description += &quot;More description&quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.info.description += .info.contact.name&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Increments a number value, concatenates string or add properties to object&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Arithmeticupdate-assignment:+=,-=,*=,/=,%=,//=&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.info.contact |= del(.contact)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;del(.info.contact)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Removes a key and its corresponding value from an object&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#del(path_expression)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;walk(f)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Applies a filter recursively to every component of the input entity&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#walk(f)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;paths&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Lists all possible paths in documents, each path is represented as an array&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#paths,paths(node_filter),leaf_paths&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;..&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns every value recursively&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#RecursiveDescent:..&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;delpaths(PATHS)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Deletes an array of paths. each path is an array of string and numbers.&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#delpaths(PATHS)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next&lt;/h1&gt;

&lt;p&gt;With what you have learned in the first 3 parts, you should be able to achieve anything you want with jq. And known that we only scratched the surface, check jq’s documentation to discover all of its features. The next and final part is a little bonus in which you’ll learn to colorize jq terminal output just for fun.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="API Toolbox" /><summary type="html">Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. Thanks to the two previous parts of this JQ and OpenAPI Series, we learned how to extract data from JSON (OpenAPI) files by discovering many filters, creating modules and using command line arguments. Now we will discover how to modify them; how to replace, add or delete elements in processed documents.</summary></entry><entry><title type="html">The Design of Everyday APIs</title><link href="https://apihandyman.io/the-design-of-everyday-apis/" rel="alternate" type="text/html" title="The Design of Everyday APIs" /><published>2020-06-28T00:00:00+00:00</published><updated>2020-06-28T00:00:00+00:00</updated><id>https://apihandyman.io/the-design-of-everyday-apis</id><content type="html" xml:base="https://apihandyman.io/the-design-of-everyday-apis/">&lt;p&gt;I totally forgot to put my 2018 talk on the blog. It’s called The Design of Everyday APIs which was the working title of my book before it was renamed The Design of Web APIs. It’s about fundamental design principles and use famous swedish furniture instruction manual theme. The principles discussed in this session are deeply covered (with more others) in my book 
&lt;a class=&quot;left-column-hider&quot; data-toggle=&quot;modal&quot; data-target=&quot;#bookModal&quot; role=&quot;button&quot; href=&quot;#&quot;&gt;The Design of Web APIs&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;You’ll find here the talk’s abstract, slides and video which was recorded at Nordic API Platform Summit 2018.&lt;/p&gt;

&lt;p&gt;You can also read a write up on the Nordic API blog: &lt;a href=&quot;https://nordicapis.com/the-three-principles-of-excellent-api-design/&quot;&gt;The Three Principles of Excellent API Design&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;Well-designed APIs are a joy to use; poorly-designed APIs are cumbersome, confusing and frustrating, just like everyday things. During this session, I make a parallel between everyday things design and API design to expose simple but fundamentals design principles.&lt;/p&gt;

&lt;p&gt;Is using knobs better than using buttons? API design is more than REST vs GraphQL vs gRPC vs whatever existing or yet to come API style. Great design can be achieved using any type of API. Would you buy a Kitchen Radar 3000? Are you able to use any washing machine instantly without reading user manual? Why QWERTY layout was invented? Like everyday things, APIs must have a clear purpose, must be used easily by anyone and are constrained by their environment.&lt;/p&gt;

&lt;h1 id=&quot;video&quot;&gt;Video&lt;/h1&gt;

&lt;div id=&quot;RT_3BSaHce8&quot; class=&quot;third-party-content third-party-content-youtube&quot;&gt;
    &lt;div class=&quot;card third-party-content-warning&quot;&gt;
        &lt;img class=&quot;card-img&quot; src=&quot;/images/thirdpartycontents/the-design-of-everyday-apis-nordicapis.jpg&quot; alt=&quot;Card image&quot; /&gt;
        &lt;div class=&quot;card-img-overlay d-flex&quot;&gt;
            &lt;div class=&quot;my-auto mx-auto text-center&quot;&gt;
                &lt;p&gt;This content is hosted on youtube.com.&lt;/p&gt;
                &lt;p&gt;By showing this third party content you accept YouTube (Google)'s 
                    &lt;a class=&quot;privacy-policy&quot; href=&quot;https://policies.google.com/privacy&quot; target=&quot;_blank&quot;&gt;privacy policy&lt;/a&gt;.
                &lt;/p&gt;
                &lt;form&gt;
                    &lt;a href=&quot;javascript:thirdPartyConsent('RT_3BSaHce8', 'youtube')&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Show third party content&lt;/a&gt;
                    &lt;div class=&quot;form-check&quot;&gt;
                        &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input third-party-content-remember&quot; /&gt;
                        &lt;label class=&quot;form-check-label&quot; for=&quot;exampleCheck1&quot;&gt;Remember my choice&lt;/label&gt;
                        &lt;p&gt;(can be changed in &lt;a class=&quot;privacy-policy&quot; href=&quot;/privacy&quot;&gt;privacy settings&lt;/a&gt;)&lt;/p&gt;
                      &lt;/div&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;iframe-container third-party-content-iframe third-party-content-iframe-disabled&quot;&gt;
        &lt;iframe class=&quot;iframe-responsive&quot; data-src=&quot;https://www.youtube-nocookie.com/embed/RT_3BSaHce8?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
        &lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;slides&quot;&gt;Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/slidedecks/the-design-of-everyday-apis/the-design-of-everyday-apis.pdf&quot; download=&quot;the-design-of-everyday-apis.pdf&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Download PDF&lt;/a&gt;
&lt;a href=&quot;/slidedecks/the-design-of-everyday-apis/the-design-of-everyday-apis.pdf&quot; target=&quot;_blank&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Open PDF&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;iframe-container&quot;&gt;
    &lt;iframe class=&quot;iframe-responsive&quot; src=&quot;/slidedecks/the-design-of-everyday-apis/index.html&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talk" /><summary type="html">I totally forgot to put my 2018 talk on the blog. It’s called The Design of Everyday APIs which was the working title of my book before it was renamed The Design of Web APIs. It’s about fundamental design principles and use famous swedish furniture instruction manual theme. The principles discussed in this session are deeply covered (with more others) in my book The Design of Web APIs . You’ll find here the talk’s abstract, slides and video which was recorded at Nordic API Platform Summit 2018. You can also read a write up on the Nordic API blog: The Three Principles of Excellent API Design. Abstract Well-designed APIs are a joy to use; poorly-designed APIs are cumbersome, confusing and frustrating, just like everyday things. During this session, I make a parallel between everyday things design and API design to expose simple but fundamentals design principles. Is using knobs better than using buttons? API design is more than REST vs GraphQL vs gRPC vs whatever existing or yet to come API style. Great design can be achieved using any type of API. Would you buy a Kitchen Radar 3000? Are you able to use any washing machine instantly without reading user manual? Why QWERTY layout was invented? Like everyday things, APIs must have a clear purpose, must be used easily by anyone and are constrained by their environment. Video This content is hosted on youtube.com. By showing this third party content you accept YouTube (Google)'s privacy policy. Show third party content Remember my choice (can be changed in privacy settings) Slides Download PDF Open PDF</summary></entry><entry><title type="html">API Toolbox - JQ and OpenAPI - Part 2 - Using JQ command line arguments, functions and modules</title><link href="https://apihandyman.io/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/" rel="alternate" type="text/html" title="API Toolbox - JQ and OpenAPI - Part 2 - Using JQ command line arguments, functions and modules" /><published>2020-02-03T00:00:00+00:00</published><updated>2020-02-03T00:00:00+00:00</updated><id>https://apihandyman.io/api-toolbox-jq-and-openapi-part-2</id><content type="html" xml:base="https://apihandyman.io/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/">&lt;p&gt;Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. In the previous part of this JQ and OpenAPI Series, we learned to invoke JQ and how to extract data from JSON documents using some of its many filters. Now we will discover how to build flexible and easily reusable JQ filters by creating functions and modules and also using command line arguments.&lt;!--more--&gt; We will continue working on OpenAPI files, at the end of this second part, we’ll have built a multi-criteria OpenAPI search and some reusable filters, especially one that you’ll be able to reuse anytime you’ll have to deal with JQ command line parameters.&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;JQ and OpenAPI Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;
JQ's &lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/&quot; target=&quot;jq&quot;&gt;documentation&lt;/a&gt; is quite complete and there are many tutorials and Stackoverflow answers, so why bother writing this series? First reason, I regularly meet people working with APIs and/or JSON files who actually don't know JQ exists and how it could save their life (or at least their time). Second reason, I often use it with OpenAPI specification files and I found that showing how JQ can be used on such a widely adopted and familiar JSON based format could help to learn how to use it (and also writing this post actually helped me to improve my JQ skills!).
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/&quot;&gt;1 - Using JQ to extract data from OpenAPI files&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;2 - Using JQ command line arguments, functions and modules&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-3-modifying-openapi-files-with-jq/&quot;&gt;3 - Modifying OpenAPI files with JQ&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/api-toolbox-jq-and-openapi-part-4-bonus-coloring-jqs-raw-output/&quot;&gt;4 - Bonus: Coloring JQ's raw output&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;get-posts-content&quot;&gt;Get post’s content&lt;/h1&gt;

&lt;p&gt;All examples shown in this post are based on JQ 1.6 and OpenAPI 3. All examples can be copied using the &lt;span class=&quot;icon-inline icon-text&quot; aria-label=&quot;copy button icon&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M14,2V0H6v2H2v18h16V2H14z M12,2v2H8V2H12z M16,18H4V4h2v2h8V4h2V18z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt; button and downloaded using the &lt;span class=&quot;icon-inline icon-text&quot; aria-label=&quot;download button icon&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;g&gt;&lt;polygon points=&quot;15,11 13.6,9.6 11,12.2 11,0 9,0 9,12.2 6.4,9.6 5,11 10,16  &quot;&gt;&lt;/polygon&gt;&lt;polygon points=&quot;18,12 18,18 2,18 2,12 0,12 0,20 20,20 20,12  &quot;&gt;&lt;/polygon&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; one on code snippets. All source code can be retrieved from the &lt;a href=&quot;https://github.com/arno-di-loreto/jq-and-openapi/&quot; target=&quot;jq&quot;&gt;JQ and OpenAPI post series’ github repository&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;git clone https://github.com/arno-di-loreto/jq-and-openapi/
cd jq-and-openapi
git checkout part-2

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ git clone https://github.com/arno-di-loreto/jq-and-openapi/
[apihandyman.io]$ cd jq-and-openapi
[apihandyman.io]$ git checkout part-2&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;listing-operations-using-functions-and-modules&quot;&gt;Listing operations using functions and modules&lt;/h1&gt;

&lt;p&gt;In previous post, we built a filter that lists the operations available in an OpenAPI file. In this first section, we will just refactor the JQ code to make it more readable and reusable using functions and modules. The following listing shows what happens when using the new version of list-operations.jq on the demo OpenAPI file.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -r -f list-operations.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Same result as in part 1 but list-operations.jq has changed under the hood&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -r -f list-operations.jq demo-api-openapi.json
get     /accounts       List accounts
get     /accounts/{id}  Get an account
post    /beneficiaries  Register a beneficiary
get     /beneficiaries  List beneficiaries
delete  /beneficiaries/{id}     Delete a beneficiary (deprecated)
patch   /beneficiaries/{id}     Updates a beneficiary (deprecated)
get     /beneficiaries/{id}     Get a beneficiary
get     /sources        List transfer sources
get     /sources/{id}/destinations      List transfer source&amp;#39;s destinations
post    /transfers      Transfer money
get     /transfers      List money transfers
get     /transfers/{id} Get a money transfer
patch   /transfers/{id}
delete  /transfers/{id} Cancel a money transfer&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It seems nothing has changed, it still outputs operations HTTP methods, paths and summaries, but under the hood, the JQ file used has changed as shown in the following listing.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;list-operations.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-openapi&quot;; # Imports module-openapi.jq file

oas_operations | # Function coming from module-openapi.jq file
oas_operations_to_text  # Function coming from module-openapi.jq file&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s see how it was created, we’ll discover functions and then modules.&lt;/p&gt;

&lt;h2 id=&quot;creating-functions&quot;&gt;Creating functions&lt;/h2&gt;

&lt;p&gt;As a reminder, here’ the previous version of the &lt;code&gt;list-operations.jq&lt;/code&gt; file we created in previous part. It is composed of three steps. Steps 1 and 2 build an array of operation object containing a (HTTP) method, path, summary and deprecated indicator. Step 3 aims to print this array as tab separated text.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;list-operations-original.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-original.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# 1 - Selects paths objects
#--------------------------
# returns [{key: path, value: path value}]
.paths # Selects the paths property content
| to_entries # Transforms
             # { &quot;/resources&quot;: { &quot;get&quot;: {operation data}}} 
             # to 
             # [ { &quot;key&quot;: &quot;/resources&quot;, 
             #     &quot;value&quot;: { &quot;get&quot;: {operation data}} ]
| map(select(.key | test(&quot;^x-&quot;) | not)) # Gets rid of x-tensions
# 2 - Creates an array of operations
#-----------------------------------
# returns [{path, method, summary, deprecated}]
| map ( # Applies a transformation to each element
  .key as $path # Stores the path value (.key) 
                  # in a variable ($path) for later use
  | .value # Keeps only the path's content 
           # { &quot;get&quot;: {operation data}}
  | to_entries # Transforms 
               # { &quot;get&quot;: {operation data}}
               # to
               # [ { &quot;key&quot;: &quot;get&quot;, 
               #     &quot;value&quot;: {operation data}} ]
  | map( # Applies a transformation to each element
    select( # Keeps only elements for which the following is true
      # With IN, which returns true if the value is one of its
      # parameters, we can get rid of x- , parameters
      # description and summary properties
      .key | IN(&quot;get&quot;, &quot;put&quot;, &quot;post&quot;, &quot;delete&quot;, 
         &quot;options&quot;, &quot;head&quot;, &quot;patch&quot;, &quot;trace&quot;)
    )
    | # Creates a new JSON object
    {
      method: .key,
      path: $path, # Using the variable defined on line 4
      summary: .value.summary?,
      deprecated: .value.deprecated?
    }
  )[] # Flattens array to avoid having an array 
      # of array of {path, method, summary, deprecated}
) # Now we have an array of {path, method, summary, deprecated}
# 3 - Outputs tab separated raw text
#-----------------------------------
| map( # Applies a transformation to each element
  .method + &quot;\t&quot; + 
  .path + &quot;\t&quot; + 
  .summary + 
  (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
)
[] # Flattens array for raw output&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s focus on step 3, which is shown below, and build a function that does the same job.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;We will create a function for step 3&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-original.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-start=&quot;42&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# 3 - Outputs tab separated raw text
#-----------------------------------
| map( # Applies a transformation to each element
  .method + &quot;\t&quot; + 
  .path + &quot;\t&quot; + 
  .summary + 
  (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
)
[] # Flattens array for raw output&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Defining a function in JQ is quite simple: at the beginning of the file, add a &lt;code&gt;def function_name:&lt;/code&gt; put some filters and end by &lt;code&gt;;&lt;/code&gt; and you’re done. The &lt;code&gt;oas_operation_to_text&lt;/code&gt; which basically contains step 3’s filters is shown below.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Defining the oas_operation_to_text function&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-with-to-text-function.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;def oas_operations_to_text: # Defining a function that
                            # Prints operations as raw text
  map( # Applies a transformation to each element
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If defining a function in JQ is quite simple, using it is even more simple. Just call it like any regular JQ filter. The following listing shows how step 3’s code has been replaced by the new &lt;code&gt;oas_operation_to_text&lt;/code&gt; custom filter which is on top of the file.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using the oas_operation_to_text function&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-with-to-text-function.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot; data-start=&quot;53&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# 3 - Outputs tab separated raw text
#-----------------------------------
| oas_operations_to_text&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the full modified list-operations.jq file including the &lt;code&gt;oas_operation_to_text&lt;/code&gt; definition at the beginning and its calling on the last line.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;list-operations-with-to-text-function.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-with-to-text-function.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot; data-line=&quot;1-10,55&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;def oas_operations_to_text: # Defining a function that
                            # Prints operations as raw text
  map( # Applies a transformation to each element
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end

# 1 - Selects paths objects
#--------------------------
# returns [{key: path, value: path value}]
.paths # Selects the paths property content
| to_entries # Transforms
             # { &quot;/resources&quot;: { &quot;get&quot;: {operation data}}} 
             # to 
             # [ { &quot;key&quot;: &quot;/resources&quot;, 
             #     &quot;value&quot;: { &quot;get&quot;: {operation data}} ]
| map(select(.key | test(&quot;^x-&quot;) | not)) # Gets rid of x-tensions
# 2 - Creates an array of operations
#-----------------------------------
# returns [{path, method, summary, deprecated}]
| map ( # Applies a transformation to each element
  .key as $path # Stores the path value (.key) 
                  # in a variable ($path) for later use
  | .value # Keeps only the path's content 
           # { &quot;get&quot;: {operation data}}
  | to_entries # Transforms 
               # { &quot;get&quot;: {operation data}}
               # to
               # [ { &quot;key&quot;: &quot;get&quot;, 
               #     &quot;value&quot;: {operation data}} ]
  | map( # Applies a transformation to each element
    select( # Keeps only elements for which the following is true
      # With IN, which returns true if the value is one of its
      # parameters, we can get rid of x- , parameters
      # description and summary properties
      .key | IN(&quot;get&quot;, &quot;put&quot;, &quot;post&quot;, &quot;delete&quot;, 
         &quot;options&quot;, &quot;head&quot;, &quot;patch&quot;, &quot;trace&quot;)
    )
    | # Creates a new JSON object
    {
      method: .key,
      path: $path, # Using the variable defined on line 4
      summary: .value.summary?,
      deprecated: .value.deprecated?
    }
  )[] # Flattens array to avoid having an array 
      # of array of {path, method, summary, deprecated}
) # Now we have an array of {path, method, summary, deprecated}
# 3 - Outputs tab separated raw text
#-----------------------------------
| oas_operations_to_text&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s great, using functions big JQ filters are far more readable. But what about being able to reuse these functions?&lt;/p&gt;

&lt;h2 id=&quot;creating-a-module-with-reusable-functions&quot;&gt;Creating a module with reusable functions&lt;/h2&gt;

&lt;p&gt;Creating JQ &lt;em&gt;modules&lt;/em&gt; that define reusable functions is, again, quite simple. Just put some functions in a JQ file and you’re done. The following listing shows a &lt;code&gt;module-openapi.jq&lt;/code&gt; module file defining two functions. There’s the &lt;code&gt;oas_operation_to_text&lt;/code&gt; we have just created and also an &lt;code&gt;oas_operations&lt;/code&gt; which do the same as steps 1 and 2 of the &lt;code&gt;list-operations.jq&lt;/code&gt; file (returning an array of operations). Note that there’s a light modification (line 43/44), this function returns also the &lt;code&gt;input_filename&lt;/code&gt; and the original value of each operations (for a later use) besides its HTTP method, path, summary and deprecated flag.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;module-openapi.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-openapi.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# This is a reusable JQ module defining useful
# OpenAPI specification (OAS) processing functions

def oas_operations: # Defining a listoperations function
                    # returning {path, method, summary, original}
  # 1 - Selects paths objects
  #--------------------------
  # returns [{key: path, value: path value}]
  .paths # Selects the paths property content
  | to_entries # Transforms
              # { &quot;/resources&quot;: { &quot;get&quot;: {operation data}}} 
              # to 
              # [ { &quot;key&quot;: &quot;/resources&quot;, 
              #     &quot;value&quot;: { &quot;get&quot;: {operation data}} ]
  | map(select(.key | test(&quot;^x-&quot;) | not)) # Gets rid of x-tensions
  # 2 - Creates an array of operations
  #-----------------------------------
  # returns [{path, method, summary, deprecated}]
  | map ( # Applies a transformation to each element
    .key as $path # Stores the path value (.key) 
                    # in a variable ($path) for later use
    | .value # Keeps only the path's content 
            # { &quot;get&quot;: {operation data}}
    | to_entries # Transforms 
                # { &quot;get&quot;: {operation data}}
                # to
                # [ { &quot;key&quot;: &quot;get&quot;, 
                #     &quot;value&quot;: {operation data}} ]
    | map( # Applies a transformation to each element
      select( # Keeps only elements for which the following is true
        # With IN, which returns true if the value is one of its
        # parameters, we can get rid of x- , parameters
        # description and summary properties
        .key | IN(&quot;get&quot;, &quot;put&quot;, &quot;post&quot;, &quot;delete&quot;, 
          &quot;options&quot;, &quot;head&quot;, &quot;patch&quot;, &quot;trace&quot;)
      )
      | # Creates a new JSON object
      {
        method: .key,
        path: $path, # Using the variable defined on line 4
        summary: .value.summary?,
        deprecated: .value.deprecated?,
        original: .value, # Keeping original value, just in case 😉
        source: input_filename # Adding source file, also just in case 😉
      }
    )[] # Flattens array to avoid having an array 
        # of array of {path, method, summary, deprecated}
  ) # Now we have an array of {path, method, summary, deprecated}
; # oas_operations function's end

def oas_operations_to_text: # Defining a function that
                            # Prints operations as raw text
  map( # Applies a transformation to each element
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s get back to the new version of &lt;code&gt;list-operations.jq&lt;/code&gt; (shown below) to see how this module is actually used. The module is include with the &lt;code&gt;include &amp;lt;module name without extension&amp;gt;;&lt;/code&gt; line. Then any functions defined in it can be used like any other regular JQ filter as shown on line 3 and 4 where &lt;code&gt;oas_operations&lt;/code&gt; and &lt;code&gt;oas_operations_to_text&lt;/code&gt; are used.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;list-operations.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-openapi&quot;; # Imports module-openapi.jq file

oas_operations | # Function coming from module-openapi.jq file
oas_operations_to_text  # Function coming from module-openapi.jq file&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;managing-modules-locations&quot;&gt;Managing modules locations&lt;/h2&gt;

&lt;div class=&quot;card card-code card-bash text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Managing JQ modules location&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;bash session player controls&quot;&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body bash-player&quot;&gt;
    &lt;asciinema-player id=&quot;player&quot; title=&quot;Managing JQ modules location&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;125&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-location.cast&quot;&gt;&lt;/asciinema-player&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The following listings shows different ways of managing reusable modules location with JQ (see &lt;a href=&quot;https://stedolan.github.io/jq/manual/#Modules&quot;&gt;modules&lt;/a&gt; in the JQ’s documentation for a complete description of what can be done).
It starts by a a first command done inside the &lt;code&gt;jq-and-openapi&lt;/code&gt; folder.
It simply returns the first operation’s summary of the &lt;code&gt;demo-api-openapi.json&lt;/code&gt; file using the &lt;code&gt;oas_operations[0]&lt;/code&gt; filter composed of the &lt;code&gt;oas_operations&lt;/code&gt; function and the &lt;code&gt;[]&lt;/code&gt; array filter.
As you can see, there’s no need to create a JQ file to use a module, just use the &lt;code&gt;include&lt;/code&gt; directive in the &lt;code&gt;'&amp;lt;filter&amp;gt;'&lt;/code&gt; argument on the command line.
Then we go a level up, and obviously redoing the same exact command does not work anymore: the &lt;code&gt;module-openapi.jq&lt;/code&gt; cannot be found in the current folder as it is in the &lt;code&gt;jq-and-openapi&lt;/code&gt; one.
Hopefully, you can use the &lt;code&gt;-L &amp;lt;path list&amp;gt;&lt;/code&gt; argument to tell JQ where to look for modules.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; demo-api-openapi.json
cd ..
jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
jq -r -L jq-and-openapi &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Indicating where to find modules with -L argument&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; demo-api-openapi.json
List accounts
[apihandyman.io]$ cd ..
[apihandyman.io]$ jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
jq: error: module not found: module-openapi

jq: 1 compile error
[apihandyman.io]$ jq -r -L jq-and-openapi &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
List accounts&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If there are modules that you use extensively, it would be interesting to put them in a &lt;code&gt;~/.jq&lt;/code&gt; folder. Therefore, no longer need for the &lt;code&gt;-L&lt;/code&gt; argument as shown below. JQ looks for the modules mentioned in &lt;code&gt;include&lt;/code&gt; directives in this folder automatically.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;mkdir ~/.jq
cp jq-and-openapi/module-openapi.jq ~/.jq
jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using ~/.jq default folder to store modules&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ mkdir ~/.jq
[apihandyman.io]$ cp jq-and-openapi/module-openapi.jq ~/.jq
[apihandyman.io]$ jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
List accounts&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;~/.jq&lt;/code&gt; can also be a file. In that case, you don’t even need to &lt;code&gt;include&lt;/code&gt; anything, as shown below. Any function defined in this file is usable inside any of your filters. I personally do not recommend to do this because that makes your filters dependencies invisible (and can also result in a quite huge unmaintainable &lt;code&gt;.jq&lt;/code&gt; file).&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;rm -rf ~/.jq
cp jq-and-openapi/module-openapi.jq ~/.jq
jq -r &amp;#39;oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using ~/.jq default file to store functions&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ rm -rf ~/.jq
[apihandyman.io]$ cp jq-and-openapi/module-openapi.jq ~/.jq
[apihandyman.io]$ jq -r &amp;#39;oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
List accounts&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;searching-operations-using-command-line-arguments&quot;&gt;Searching operations using command line arguments&lt;/h1&gt;

&lt;p&gt;Now that we have a reusable module that provides functions to list operations of an OpenAPI specification file and print them as tab separated text, let’s work on a multiple-criteria and multiple-file search.&lt;/p&gt;

&lt;h2 id=&quot;passing-an-argument-to-jq-filters&quot;&gt;Passing an argument to JQ filters&lt;/h2&gt;

&lt;p&gt;In order to make this search flexible, we’ll need to be able to accept search arguments coming from outside our filter in order to avoid having to modify it on each different search. Passing arguments to JQ is done with &lt;code&gt;--arg &amp;lt;name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt; as shown below. Inside the filter, you can access a &lt;code&gt;--arg&lt;/code&gt; with &lt;code&gt;$&amp;lt;name&amp;gt;&lt;/code&gt;. In this case &lt;code&gt;$foo&lt;/code&gt; returns &lt;code&gt;bar&lt;/code&gt;. Note also in this example the &lt;code&gt;-n&lt;/code&gt; flag which is used to tell JQ to not expect any JSON input. That’s pretty useful to make demos of some JQ’s features but also to generate JSON from scratched based on some arguments values.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -n --arg foo bar &amp;#39;{foo: $foo}&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Passing an argument with --arg (and discovering -n flag)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -n --arg foo bar &amp;#39;{foo: $foo}&amp;#39;
{
  &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;searching-operations-accessible-for-a-scope&quot;&gt;Searching operations accessible for a scope&lt;/h2&gt;

&lt;p&gt;The following listing shows which operations are accessible to a consumer when it is given the &lt;code&gt;transfer:admin&lt;/code&gt; security scope. The scope value is provided to the filter using &lt;code&gt;--arg &amp;lt;name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -r --arg scope transfer:admin -f search-operations-using-scope.jq demo-api-openapi.json 

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Searching operations using a given scope&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -r --arg scope transfer:admin -f search-operations-using-scope.jq demo-api-openapi.json 
post    /transfers      Transfer money
get     /transfers      List money transfers
get     /transfers/{id} Get a money transfer
delete  /transfers/{id} Cancel a money transfer&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In an OpenAPI file, you’ll find the scopes that will grant access to an operation in its security property under a &lt;code&gt;{name}&lt;/code&gt;.
According the OpenAPI Specification, &lt;em&gt;each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object. If the security scheme is of type “oauth2” or “openIdConnect”, then the value is a list of scope names required for the execution. For other security scheme types, the array MUST be empty&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
      &lt;figure class=&quot;figure&quot;&gt;
        
        &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/jq-openapi-scopes.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;
        
        
      &lt;/figure&gt;
    &lt;/div&gt;

&lt;p&gt;For our use case, we just need to list all values (scopes) under all &lt;code&gt;security.{name}&lt;/code&gt; of each operation and keep the operations for which the provided scope is found in this list. The following listing shows how this is achieved in the &lt;code&gt;search-operations-using-scope.jq&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First (line 4), it lists existing operations using the &lt;code&gt;oas_operations&lt;/code&gt; function (coming from &lt;code&gt;module-openapi&lt;/code&gt; included on line 1)&lt;/li&gt;
  &lt;li&gt;Then (line 5), it filters the returned operations based on their scopes by working on each of the &lt;code&gt;original&lt;/code&gt; operation’s data coming from the OpenAPI file. To do so:
    &lt;ul&gt;
      &lt;li&gt;It first checks if there’s a &lt;code&gt;security&lt;/code&gt; property (line 7)&lt;/li&gt;
      &lt;li&gt;Then creates a list of scopes (line 9 and 10)&lt;/li&gt;
      &lt;li&gt;And (line 11 to 14), if the &lt;code&gt;index&lt;/code&gt; of &lt;code&gt;$scope&lt;/code&gt; (provided through the &lt;code&gt;--arg scope &amp;lt;value&amp;gt;&lt;/code&gt;) is greater than 0 (meaning it is in the list), the operation is returned&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;And finally (line 19), it prints the remaining operations as tab separated values using the &lt;code&gt;oas_operations_to_text&lt;/code&gt; function (coming from &lt;code&gt;module-openapi&lt;/code&gt; included on line 1)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;search-operations-using-scope.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/search-operations-using-scope.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-openapi&quot;; # Looks for a module-openapi.jq file

# Expects a --arg scope value parameter
oas_operations # Comes from module-operations.jq
| map(select( # Filters on operation scopes
    # security is not always present
    if .original.security? != null then
      # Creating an array containg all scopes
      [ .original.security | 
        map(to_entries | map(.value)[])[][] ] | 
      index( # Index returns the index of a value in array
        $scope # $scope value is provided on the command line
              # --arg scope value
      ) &amp;#62;= 0 # If &amp;#60; 0, it has not been found
    else
      false # No security defined, so return false
    end
  ))
| oas_operations_to_text  # Comes from module-operations.jq&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s cool, but there’s a little problem. When using the &lt;code&gt;search-operations-using-scope.jq&lt;/code&gt; without providing the scope value, it does not work: JQ complains that &lt;code&gt;$scope&lt;/code&gt; is not defined, as shown below.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -r -f search-operations-using-scope.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;What happens when scope is not provided&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -r -f search-operations-using-scope.jq demo-api-openapi.json
jq: error: $scope is not defined at &amp;lt;top-level&amp;gt;, line 12:
        $scope # $scope value is provided on the command line        
jq: 1 compile error&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Does that mean we can’t do a multi-criteria search because it requires to be able to provide multiple &lt;em&gt;optional&lt;/em&gt; parameters? Of course not, that problem can be solved.&lt;/p&gt;

&lt;h2 id=&quot;solving-the-command-line-argument-problem&quot;&gt;Solving the command line argument “problem”&lt;/h2&gt;

&lt;div class=&quot;card card-code card-bash text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Solving the command line argument problem&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;bash session player controls&quot;&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body bash-player&quot;&gt;
    &lt;asciinema-player id=&quot;player&quot; title=&quot;Solving the command line argument problem&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;125&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-2/solving-argument-problem.cast&quot;&gt;&lt;/asciinema-player&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The following listing shows how to safely access a command line named argument using the &lt;code&gt;$ARGS.named&lt;/code&gt; filter. If &lt;code&gt;$name&lt;/code&gt; causes an error if no &lt;code&gt;--arg name value&lt;/code&gt; is provided on the command line, &lt;code&gt;$ARGS.named['name']&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt; without causing any.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -n --arg foo hello --arg bar world &amp;#39;{foo: $foo, bar: $bar}&amp;#39;
jq -n --arg foo hello &amp;#39;{foo: $foo, bar: $bar}&amp;#39;
jq -n --arg foo hello &amp;#39;{foo: $ARGS.named[&amp;quot;foo&amp;quot;], bar: $ARGS.named[&amp;quot;bar&amp;quot;]}&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using $ARGS.named&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -n --arg foo hello --arg bar world &amp;#39;{foo: $foo, bar: $bar}&amp;#39;
{
  &amp;quot;foo&amp;quot;: &amp;quot;hello&amp;quot;,
  &amp;quot;bar&amp;quot;: &amp;quot;world&amp;quot;
}
[apihandyman.io]$ jq -n --arg foo hello &amp;#39;{foo: $foo, bar: $bar}&amp;#39;
jq: error: $bar is not defined at &amp;lt;top-level&amp;gt;, line 1:
{foo: $foo, bar: $bar}                 
jq: 1 compile error
[apihandyman.io]$ jq -n --arg foo hello &amp;#39;{foo: $ARGS.named[&amp;quot;foo&amp;quot;], bar: $ARGS.named[&amp;quot;bar&amp;quot;]}&amp;#39;
{
  &amp;quot;foo&amp;quot;: &amp;quot;hello&amp;quot;,
  &amp;quot;bar&amp;quot;: null
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s very handy, but what if I want to set an argument to a default value if it is not provided? I just need to use the following &lt;code&gt;module-args&lt;/code&gt; module. It defines a &lt;code&gt;init_parameter(default_values)&lt;/code&gt; function returning an object containing parameters set to the value coming from &lt;code&gt;--arg &amp;lt;name&amp;gt;&lt;/code&gt; or a default value it is not provided. To do so, for each entry (key/value) of a &lt;code&gt;default_values&lt;/code&gt; object parameter, it checks if the named arguments (&lt;code&gt;$ARGS.named&lt;/code&gt;) contains the key and if so, sets the output value to the one provided on the command line. If not, it keeps the default one. By the way, that means that JQ functions can also use parameters besides their regular input. But note that you don’t need to prefix their name by &lt;code&gt;$&lt;/code&gt; to access them.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;module-args.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-args.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# Initializes parameters based on provided named arguments (--arg).
# If an argument is not provided, its default value is used.
# default_values example:
# {
#   argument: &quot;default value&quot;,
#   anotherArgument: null,
# }
def init_parameters(default_values):
  default_values | 
  # Updates values for provided parameters
  with_entries(
    # $ARGS contains all --arg parameters
    if $ARGS.named[.key] != null then 
      .value = $ARGS.named[.key] 
    else 
      .value = .value
    end
  )
;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The following listing shows how this function can be used. Just call the &lt;code&gt;init_parameter&lt;/code&gt; function with an object containing the default values and put its result in a variable (here &lt;code&gt;$parameter&lt;/code&gt;) for later use (&lt;code&gt;$parameter.foo&lt;/code&gt; for example). Here the default value of &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;default foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;’s is &lt;code&gt;null&lt;/code&gt;. Only &lt;code&gt;bar&lt;/code&gt; is provided, so the output contains &lt;code&gt;foo&lt;/code&gt;’s default value and &lt;code&gt;bar&lt;/code&gt; command-line-provided value.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq -n --arg bar &amp;quot;bar from command line&amp;quot; &amp;#39;include &amp;quot;module-args&amp;quot;; init_parameters({foo: &amp;quot;default foo&amp;quot;, bar: null}) as $parameters| {foo: $parameters.foo, bar: $parameters.bar}&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Optional parameters with default values&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq -n --arg bar &amp;quot;bar from command line&amp;quot; &amp;#39;include &amp;quot;module-args&amp;quot;; init_parameters({foo: &amp;quot;default foo&amp;quot;, bar: null}) as $parameters| {foo: $parameters.foo, bar: $parameters.bar}&amp;#39;
{
  &amp;quot;foo&amp;quot;: &amp;quot;default foo&amp;quot;,
  &amp;quot;bar&amp;quot;: &amp;quot;bar from command line&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;searching-operations-on-multiple-criteria-and-multiple-files&quot;&gt;Searching operations on multiple criteria and multiple files&lt;/h2&gt;

&lt;div class=&quot;card card-code card-bash text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Searching operations demo&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;bash session player controls&quot;&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body bash-player&quot;&gt;
    &lt;asciinema-player id=&quot;player&quot; title=&quot;Searching operations demo&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;125&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-2/search-demo.cast&quot;&gt;&lt;/asciinema-player&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now that we know how to provide multiple optional parameters, let’s do a multi-criteria search. The following listing shows the &lt;code&gt;get&lt;/code&gt; operations on paths containing &lt;code&gt;sources&lt;/code&gt; across all available &lt;code&gt;*.json&lt;/code&gt; files. The first value on each line is the filename (limited to 20 characters).&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;jq --arg path_contains sources --arg method get -r -f search-operations.jq *.json

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Operations on path containing source with method get&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io]$ jq --arg path_contains sources --arg method get -r -f search-operations.jq *.json
[demo-another-api-swa]  get     /resources
[demo-api-openapi.jso]  get     /sources        List transfer sources
[demo-api-openapi.jso]  get     /sources/{id}/destinations      List transfer source&amp;#39;s destinations&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the &lt;code&gt;search-operations.jq&lt;/code&gt; file who does that. It reuses functions we have seen before, &lt;code&gt;oas_operations&lt;/code&gt; from the &lt;code&gt;module_openapi.jq&lt;/code&gt; file and &lt;code&gt;init_parameters&lt;/code&gt; from the &lt;code&gt;module-args.jq&lt;/code&gt; file. It also uses new functions &lt;code&gt;filter_operations&lt;/code&gt;, &lt;code&gt;default_filters&lt;/code&gt;, &lt;code&gt;print_oas_operations&lt;/code&gt; and &lt;code&gt;default_print_parameters&lt;/code&gt; from &lt;code&gt;module-openapi-search.jq&lt;/code&gt;. There are 3 steps: getting operations data, filtering them and finally printing them. There’s nothing new on the first step, we already have used this function. Let’s see what is happening on the second and after that the third step.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;search-operations.jq&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/search-operations.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-openapi&quot;;
include &quot;module-args&quot;;
include &quot;module-openapi-search&quot;;

# Gets operations data
oas_operations
# Filters operations
| filter_oas_operations(init_parameters(default_filters))
# Prints operations
| print_oas_operations(init_parameters(default_print_parameters).format)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The following listing shows the new functions used to filter operations. The &lt;code&gt;default_filters&lt;/code&gt; only returns the search filters default value to be used in conjunction with &lt;code&gt;init_parameters&lt;/code&gt; and so get cleans values from optional command line arguments. The &lt;code&gt;filter_oas_operation&lt;/code&gt; expects a &lt;code&gt;filter&lt;/code&gt; object whose structure is the same as the one returned by default filters. This operations runs a &lt;code&gt;map(select())&lt;/code&gt; on the operations list. Each filter is triggered if &lt;code&gt;filters.&amp;lt;name&amp;gt;&lt;/code&gt; is not null. There’s nothing really new regarding JQ’s filters besides line 41. The filtering on paths is done using the &lt;code&gt;contains&lt;/code&gt; filter which we hadn’t seen before.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Filtering operations (module-openapi-search.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-openapi-search.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot; data-start=&quot;3&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# Available filters and their default values
# To be used with init_parameters
def default_filters:
{
  deprecated: null,
  method: null,
  code: null,
  scope: null,
  path_contains: null
};

# Filters operations coming from oas_operations
# Each filter is used only if corresponding filters.&amp;#60;name&amp;#62; parameter is provided
def filter_oas_operations(filters):
  map(
    select(
    # Filters on deprecated
    (filters.deprecated == null or 
      (.deprecated | tostring) == filters.deprecated) and
    # Filters on HTTP method
    (filters.method == null or 
      .method == filters.method) and
    # Filters on HTTP status code
    (filters.code == null or 
      (.original.responses | has(filters.code))) and
    # Filters on security scope
    (filters.scope == null or
      (if .value.security? != null then
        [ .value.security | 
          map(to_entries | 
          map(.value)[])[][]] | 
        index(filters.scope) &amp;#62;= 0
      else
        false
      end)
    ) and
    # Filters on path
    (filters.path_contains == null or 
      (.path | contains(filters.path_contains))
    )
  )
);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The following listing shows the new functions used to print the operations. It uses the same mechanism as the filter functions regarding the command line arguments.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Printing operations (module-openapi-search.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-openapi-search.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot; data-start=&quot;46&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# Same as oas_operations_to_text but with source
def oas_operations_to_text_with_source: 
  map( # Applies a transformation to each element
    &quot;[&quot; + .source[0:20] + &quot;]\t&quot; +
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end

# To be used with init_parameters
def default_print_parameters:
{
  format: &quot;text_with_source&quot;
  # All values: 
  #  text_with_source, text_without_source, json_flat or null for json
};

# Prints oas_operations (filtered or not) in various format
def print_oas_operations(format):
  if format == &quot;text_with_source&quot; then
      oas_operations_to_text_with_source
  elif format == &quot;text_without_source&quot; then
      oas_operations_to_text
  elif format == &quot;json_flat&quot; then
    .[] # Flattening for multifiles, pipe result into a jq -s
  else
    .
  end
;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the full file:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Filtering operations (module-openapi-search.jq)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-openapi-search.jq&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-jq line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;include &quot;module-openapi&quot;;

# Available filters and their default values
# To be used with init_parameters
def default_filters:
{
  deprecated: null,
  method: null,
  code: null,
  scope: null,
  path_contains: null
};

# Filters operations coming from oas_operations
# Each filter is used only if corresponding filters.&amp;#60;name&amp;#62; parameter is provided
def filter_oas_operations(filters):
  map(
    select(
    # Filters on deprecated
    (filters.deprecated == null or 
      (.deprecated | tostring) == filters.deprecated) and
    # Filters on HTTP method
    (filters.method == null or 
      .method == filters.method) and
    # Filters on HTTP status code
    (filters.code == null or 
      (.original.responses | has(filters.code))) and
    # Filters on security scope
    (filters.scope == null or
      (if .value.security? != null then
        [ .value.security | 
          map(to_entries | 
          map(.value)[])[][]] | 
        index(filters.scope) &amp;#62;= 0
      else
        false
      end)
    ) and
    # Filters on path
    (filters.path_contains == null or 
      (.path | contains(filters.path_contains))
    )
  )
);

# Same as oas_operations_to_text but with source
def oas_operations_to_text_with_source: 
  map( # Applies a transformation to each element
    &quot;[&quot; + .source[0:20] + &quot;]\t&quot; +
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end

# To be used with init_parameters
def default_print_parameters:
{
  format: &quot;text_with_source&quot;
  # All values: 
  #  text_with_source, text_without_source, json_flat or null for json
};

# Prints oas_operations (filtered or not) in various format
def print_oas_operations(format):
  if format == &quot;text_with_source&quot; then
      oas_operations_to_text_with_source
  elif format == &quot;text_without_source&quot; then
      oas_operations_to_text
  elif format == &quot;json_flat&quot; then
    .[] # Flattening for multifiles, pipe result into a jq -s
  else
    .
  end
;

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;That concludes this second path of the JQ and OpenAPI series. Here’s the summary of what we have seen in this post:&lt;/p&gt;

&lt;h2 id=&quot;functions-and-modules&quot;&gt;Functions and modules&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Creating a function is done with &lt;code&gt;def name: &amp;lt;filters&amp;gt;;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;To invoke a function just use its &lt;code&gt;name&lt;/code&gt; like for any regular filter&lt;/li&gt;
  &lt;li&gt;Functions can have parameters &lt;code&gt;def name(parameter)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Inside a function a parameter can be used with &lt;code&gt;parameter&lt;/code&gt; (without $)&lt;/li&gt;
  &lt;li&gt;A module is a JQ file containing reusable functions&lt;/li&gt;
  &lt;li&gt;A module is loaded using the &lt;code&gt;include filename_without_extension&lt;/code&gt; directive&lt;/li&gt;
  &lt;li&gt;Use &lt;code&gt;-L&lt;/code&gt; command line parameter to tell JQ where to find modules&lt;/li&gt;
  &lt;li&gt;Put your favorite modules in &lt;code&gt;~/.jq&lt;/code&gt; folder so JQ can find them without using &lt;code&gt;-L&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;command-line-arguments&quot;&gt;Command line arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Passing a named argument to JQ filters is done with &lt;code&gt;--arg name value&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A named argument value can be retrieved with &lt;code&gt;$name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Using &lt;code&gt;$name&lt;/code&gt; will provoke an error if no &lt;code&gt;--arg name value&lt;/code&gt; is provided&lt;/li&gt;
  &lt;li&gt;All named arguments are available with &lt;code&gt;$ARGS.named&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$ARGS.named[name]&lt;/code&gt; returns null (wihout error) if no &lt;code&gt;--arg name value&lt;/code&gt; is provided&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-null-argument&quot;&gt;The null argument&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;-n&lt;/code&gt; (&lt;code&gt;--null&lt;/code&gt;) arguments tells JQ to not expect input JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-filters&quot;&gt;New filters&lt;/h2&gt;

&lt;table class=&quot;table-documentation-links&quot;&gt;
  
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot; scope=&quot;col&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;index(element)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the index of an element inside an array (-1 if not found)&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#index(s),rindex(s)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;contains(element)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&quot;resources&quot; | contains(&quot;source&quot;)
&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns true the element is in input&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#contains(element)&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$ARGS.named&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the command line named argument (--arg name value)&lt;/td&gt;
      &lt;td&gt;&lt;a class=&quot;btn-documentation&quot; href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Invokingjq&quot; target=&quot;jq&quot; aria-label=&quot;open documentation in a new tab&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Open documentation in a new tab&quot;&gt;&lt;svg height=&quot;100px&quot; width=&quot;100px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 20 20&quot; enable-background=&quot;new 0 0 20 20&quot; xml:space=&quot;preserve&quot;&gt;&lt;path d=&quot;M19.5,2.4c-2.8-1.8-6.6-1.9-9.5-0.3C7.1,0.5,3.3,0.6,0.5,2.4L0,2.7V19l1.5-1c2.4-1.5,5.6-1.5,7.9,0l0.5,0.3  l0.5-0.3c2.4-1.5,5.6-1.5,7.9,0l1.5,1V2.7L19.5,2.4z M2,15.5V3.9c2.2-1.2,4.8-1.1,7,0v11.7c-1.1-0.4-2.3-0.7-3.5-0.7  C4.3,14.9,3.1,15.1,2,15.5z M18,15.5c-2.2-0.9-4.8-0.9-7,0V3.9c2.2-1.2,4.9-1.2,7,0V15.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next&lt;/h1&gt;

&lt;p&gt;In next post, we’ll learn to modify OpenAPI files with JQ.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="API Toolbox" /><summary type="html">Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. In the previous part of this JQ and OpenAPI Series, we learned to invoke JQ and how to extract data from JSON documents using some of its many filters. Now we will discover how to build flexible and easily reusable JQ filters by creating functions and modules and also using command line arguments.</summary></entry></feed>