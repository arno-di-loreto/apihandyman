<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2022-01-12T06:13:50-06:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">Nobody cares about API design guidelines</title><link href="https://apihandyman.io/nobody-cares-about-api-design-guidelines/" rel="alternate" type="text/html" title="Nobody cares about API design guidelines" /><published>2022-01-12T00:00:00-06:00</published><updated>2022-01-12T00:00:00-06:00</updated><id>https://apihandyman.io/nobody-cares-about-api-design-guidelines</id><content type="html" xml:base="https://apihandyman.io/nobody-cares-about-api-design-guidelines/"><![CDATA[<p>“Did you read our API design guidelines? Yes we did! … Sorry, but I don’t think so”.
Let’s be honest, besides those who write them, nobody cares about API design guidelines.
Some don’t read them, some don’t agree with them.
Should we punish the offenders?
Though it is sometimes tempting, no.
Should we get rid of API design guidelines?
No, we can’t.
But how can we make people care about it?
<!--more--></p>

<h1 id="why-not-getting-rid-of-guidelines">Why not getting rid of guidelines?</h1>

<p>No, we can’t get rid of our API design guidelines because “nobody” reads them.
Actually, they’re useful and a few people read them.</p>

<p>As an API design reviewer, I constantly have to refer to them during API design review.
I refer to them to support what I say and avoid endless discussions.
Guidelines are our tables of the law and we must follow them.
I don’t want to lose my time discussing for the 100th time how should be named the property holding the list in the response of <code>get /customers</code>.
I also use them to find solutions to some design questions and to refresh my memories.
Guidelines makes reviewer more comfortable; with them, they don’t just give an opinion, they’re backed by written rules.</p>

<p>Also, without guidelines, I could slightly change a design pattern without noticing it.
And I’m not the only reviewer, a single written source of truth ensures that multiple reviewers are consistent (at least for what concerns the stylistic perspective).
Guidelines are there to ensure consistency, that’s their primary objective.
It’s a major concern when you want to provide the best possible developer experience.
This can’t be achieve without them.</p>

<p>So we can’t get rid of them, maybe they need to be tweaked?</p>

<h1 id="simplify-and-enhance-guidelines">Simplify and enhance guidelines</h1>

<p>“Be honest, you didn’t read our company API design guidelines.
Why denying it, I’m reviewing your API and I can see you didn’t read them seriously.
Indeed, rule #245 about over-resilient resource has not been applied.”</p>

<p>Sometimes people will try to read guidelines but they can be too complex for mere mortals.
It could be because they are written in some “too smart and complex expert that shows off” style.
If people need 3 PhDs in computer science to understand them, those guidelines are totally wrong, change them to make them understandable by anyone (like you’re supposed to do when you design APIs).
It could also be because they go against common practices, what everybody does in the outside world.
If that is so, those guidelines are totally wrong, change them to be consistent with the rest of the world (like you’re supposed to do when designing APIs).</p>

<p>Sometimes, guidelines are good but not easily actionable.
Indeed, guidelines composed of hundreds of rules are a nightmare to use, even when those rules are perfectly understandable by anyone.
Providing actionable recipes like “how to search something”, “how to manage sensitive data”, or “how to deal with long operations” is a must have.
Each recipe included everything, every single rule that must be apply explain in a user friendly way: when and why using this recipe, HTTP method to use, path design, inputs, outputs, how to handle errors.
That actually helps to ensure that guidelines are realistic, if any simple recipe is a nightmare to describe, maybe your rules are too complex.</p>

<h1 id="foster-agreement">Foster agreement</h1>

<p>Some people don’t agree with guidelines.
Sometimes they’re just assholes, sometimes they just need explanation about why rule #245 is that way, and sometimes they’re actual good people caring about API design.</p>

<p>For real stubborn/toxic/full of themselves assholes, unfortunately, I don’t know if anything can be done.
Fortunately, I don’t have met much of them and I always was in a position where I could say “ok, let’s not work together then, there are plenty of other people who want to work with me, but if you change your mind, the door is still open”.</p>

<p>But sometimes, people you could consider as “assholes” because they don’t agree with you are people who just don’t get it; they need some explanations.
Once they get it, they’re convinced.
That’s why it’s really important to explain why each rule exists in your guidelines, if there’s no reason … maybe it shouldn’t exist.</p>

<p>And last but not least there are a few people who are really good at designing APIs and care about it.
If they don’t agree with you, maybe you should listen to them.
Don’t be an asshole yourself.
You probably should include them in the loop of your guidelines creation/evolution.
Actually, include more people in the loop brings various sensibility, various experience and this is good for your guidelines.</p>

<h1 id="provide-more-than-guidelines">Provide more than guidelines</h1>

<p>The “guidelines” (wiki, website) are never enough.
Even the best ones.
You’ll need to make them available in other more actionable forms.</p>

<h2 id="openapi-specification-templates-and-fragments">OpenAPI Specification templates and fragments</h2>

<p>You can provide ready to use specification templates and reusable fragments.
Nothing better than a complete OpenAPI file containing everything you need to “search something”, you can take advantage of descriptions to explain your guidelines and point to them.
Designers just have to adapt that template to their use cases.
It’s also fairly common to have data structures, parameters, headers that are always the same.
Why not define them once and for all in reusable OpenAPI spec fragments that can be referenced.</p>

<h2 id="linter">Linter</h2>

<p>Even with templates, people can make mistakes.
You’ll need to provide a way to lint API descriptions in order to help designers fix most stylistic problems themselves (and learn how your guidelines work in the making).
You can use <a href="/toolbox/spectral/">Stoplight Spectral</a> to do so.
Warning: having a linter will never, ever, replace API design reviews.
A linter won’t tell you if an API is the good ones, if a name is the good one, if using this design patterns was a good idea.</p>

<h1 id="make-everybody-love-your-guidelines">Make everybody love your guidelines</h1>

<p>So, if you want people to care about API design guidelines:</p>

<ul>
  <li>Keep them simple to understand and to use</li>
  <li>Explain and listen to foster agreement</li>
  <li>Make their use seamless by providing helpers and tools</li>
</ul>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[“Did you read our API design guidelines? Yes we did! … Sorry, but I don’t think so”. Let’s be honest, besides those who write them, nobody cares about API design guidelines. Some don’t read them, some don’t agree with them. Should we punish the offenders? Though it is sometimes tempting, no. Should we get rid of API design guidelines? No, we can’t. But how can we make people care about it?]]></summary></entry><entry><title type="html">API design and architecture lessons from a frying pan</title><link href="https://apihandyman.io/api-design-and-architecture-lessons-from-a-frying-pan/" rel="alternate" type="text/html" title="API design and architecture lessons from a frying pan" /><published>2022-01-05T00:00:00-06:00</published><updated>2022-01-05T00:00:00-06:00</updated><id>https://apihandyman.io/api-design-and-architecture-lessons-from-a-frying-pan</id><content type="html" xml:base="https://apihandyman.io/api-design-and-architecture-lessons-from-a-frying-pan/"><![CDATA[<p>In the kitchen, I’m the dishwasher.
And lately, washing our new frying pans has got me thinking about design and API architecture issues.
This post is dedicated to the person who complained that my book contained too many analogies.
Sorry, but no matter what I do, read, look at, listen to, I’m always trying to see if I can make connections to APIs.
And housework is no exception.
<!--more--></p>

<p>Washing dishes is a household task that I actually enjoy.
It allows me to satisfy my compulsive urge to sort things, in this case cutlery, glasses, plates or dishes.
This may be one of the characteristics of my mind that make me rather good at doing API design reviews.
It also allows me to listen to music.
But also and most importantly, it allows me to cogitate.</p>

<h1 id="pans">Pans</h1>

<p>For some time now, we have had new frying pans.
They have everything that makes a good pan, a thick bottom, a body covered with enamel (a nice change from Teflon), and a solid handle with a good grip. They are even oven safe.
In use, nothing to complain about.
When washing, it’s a different story.
If cleaning the enamelled steel is not a problem, cleaning the outside edge is a pain.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/api-design-and-architecture-lessons-from-a-frying-pan/pan.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>And yes, when you use a frying pan, you also dirty the outside edge, there are often splashes or drips, especially on the handle.
And on these pans, cleaning the 2 millimeter gap between the handle and the edge of the pan is quite complicated with a sponge.
In the end, we manage to do it with a small brush, but we could do without this difficulty (relative, of course).
A handle placed a little lower or stuck to the edge of the pan, or simply no edge would have avoided this inconvenience.
The fact that an object, kitchen utensil or other, is an eyesore to clean is unfortunately quite common.
It seems that the designers of these products forget that in addition to using them for what they were designed for, they need to be cleaned.</p>

<h1 id="apis">APIs</h1>

<p>“But what does this have to do with APIs?” you might ask.
There is not one but (at least) two analogies here.</p>

<p>The first one is that when you design an API, you have to think about all the profiles (or users) that will use it, otherwise you might forget to include important features.
If we stop at uses, we will think about “cooking” but not necessarily “washing the dishes”.
Going through the prism of users reduces the risk of forgetting features.
Here, the first users of a frying pan that we think of are necessarily the cooks.
But, in a kitchen, there are also pearl divers (the persons who wash dishes) who will also “use” the pans but in very different ways.</p>

<p>The other way to look at it would be to think of the users of the API vs. the maintainers of the system exposing the API.
Cooks can be thought of as the users of a pan and pearl divers as the maintainers of the system.
While it is now pretty much accepted that the user experience of APIs is important (although there is still a way to go for private APIs), I have too often seen convoluted and complex implementations that make the life of maintainers impossible.
Too many modules, too many different technologies, unnecessarily sharp technologies, non mastered technologies, maintenance procedures not completely automated, …
In short, we forget the experience of the system maintainers.
Icing on the cake, in addition to bothering them, such systems are more complex to evolve and more fragile.</p>

<p>So the next time you design an API and its underlying architecture, think about washing frying pans and think about all the users.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[In the kitchen, I’m the dishwasher. And lately, washing our new frying pans has got me thinking about design and API architecture issues. This post is dedicated to the person who complained that my book contained too many analogies. Sorry, but no matter what I do, read, look at, listen to, I’m always trying to see if I can make connections to APIs. And housework is no exception.]]></summary></entry><entry><title type="html">How to choose ids and codes to build user-friendly and interoperable APIs</title><link href="https://apihandyman.io/how-to-choose-ids-and-codes-to-build-userfriendly-and-interoperable-apis/" rel="alternate" type="text/html" title="How to choose ids and codes to build user-friendly and interoperable APIs" /><published>2021-12-29T00:00:00-06:00</published><updated>2021-12-29T00:00:00-06:00</updated><id>https://apihandyman.io/how-to-choose-ids-and-codes-to-build-userfriendly-and-interoperable-apis</id><content type="html" xml:base="https://apihandyman.io/how-to-choose-ids-and-codes-to-build-userfriendly-and-interoperable-apis/"><![CDATA[<p>As an API designer, why should you care about the value of a <code>productId</code>, a <code>countryCode</code>, or an error <code>code</code>?
Because wisely choosing the value of such (in a broad sense) “identifiers” greatly participates in the making of a user friendly API; but most importantly an interoperable one.
<!--more--></p>

<p>The following “Scientific quadrant” (inspired by <a href="https://www.gartner.com/en/research/methodologies/magic-quadrants-research">Gartner’s Magic Quadrant</a>), shows a few examples of those identifiers sorted along 2 axes, interoperability and human-readability.
Let’s analyse those 2 dimensions and those examples more closely to see how to choose “identifiers”.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/how-to-choose-ids-and-codes-to-build-userfriendly-and-interoperable-apis/scientific-quadrant-for-identifiers.jpg" class="figure-img img-fluid" /></figure>
</div>

<h1 id="interoperability">Interoperability</h1>

<p>Interoperability is the ability of software to exchange and make use of information.
For instance, switching from file exchange to exposing web APIs is a first (great) step in improving the interoperability of a system.
That actually improves how other systems can exchange information with yours.</p>

<p>But does exposing APIs magically makes using information easier for consumers?
It highly depends on the actual data exposed (output) or expected (input) through it, and especially its ids and codes.</p>

<h2 id="internal-vs-standard">Internal vs standard</h2>

<p>For instance, using a <code>123</code> purely internal code to represent a country such as “France” is far less interoperable than using <code>FRA</code>, the widely adopted ISO3166 country alpha-3 code standard.
If <code>GET /authors</code> returns a list of authors with their name and country for instance, it will be fairly easy for any system to interpret a standard <code>FRA</code> country code than an obscure <code>123</code>.</p>

<p>Indeed, enabling the interpretation by consumers of such a purely internal identifier may require:</p>

<ul>
  <li>Providing extra documentation, like a (terrible) table of custom country codes and names (seriously don’t do that)</li>
  <li>Or adding an extra operation to the API, like a <code>GET /countries</code> returning all country codes and names or a more specific <code>GET /countries/{countryId}</code>  (that’s less terrible)</li>
  <li>Or adding extra data, like returning author’s country name along with the code (that make the author’s data self sufficient but less usable for other purpose than just showing them to end users)</li>
</ul>

<p>But even using one of those “solutions”, if no actual ISO3166 code is ever used, consumer programs will have hard time to actually interpret such specific way of representing countries.
Maybe they’ll have to work on country names to match what they know of country on their side (probably ISO3166 based)… hoping country names are actually returned in english and without typos.
It can be more a guess than an actual matching.
Maybe consumers developers will painfully build a mapping table based on the data they get…
But it will need to be updated if new countries are added.
I don’t mean actual new countries, that’s a possibility but that don’t happen much, but new authors from countries that were not already represented in the authors list.</p>

<p>On the other hand, using a standard ISO3166 code will makes both consumer and provider jobs easier because they naturally share common identifiers.
Ideally, when I see a <code>GET /authors</code> and as I know authors countries are returned, I can guess that <code>GET /authors?country=FRA</code> will return french authors.
It’s a no brainer, impossible to achieve with a custom country code.
If I use ISO3166 codes on my side, matching my data with the one coming from <code>GET /authors</code> based on countries is dead simple.
And I don’t care if new countries appear in authors data as I rely on the same ISO3166 referential: my consumer is always be up to date.</p>

<h2 id="well-known-identifiers">Well known identifiers</h2>

<p>But sometimes it’s not possible to use a “standard” identifier known by everyone in the outside world.
It’s actually fairly common to use custom identifiers, but if that’s the case always favor the “well known” ones.
For instance, if you need a product identifier (for <code>GET /products/{productId}</code>), better use an id shared by a few APIs across a domain or an id shared across the whole organization than using an API specific product id.
A well known product id could be used across various APIs such as “product catalog”, “order”, “shipping”, “supplier”, “storage”, …
The more systems will share the same ids, the better.
It’s basically about using or defining local standards.
Doing so, any system knowing such well known ids can use them with any API inside a domain or the organization.</p>

<p>And note that it’s always good to double check if by chance there’s a standard identifier that you can use.
If the “product” we were talking about reveals to be a “book”, prefer the use of an ISBN standard book identifier than your custom one, even if it is known across your organization (and change your resource name, <code>GET /books/{isbn}</code>).
Indeed, your well known ids are still custom ones and so unknown by the outside world.</p>

<p>Choosing interoperable data that other systems will interpret easily, data that is known by as much systems as possible, is a must do to create successful APIs.
But when creating APIs, you do not only deal with programs.
There are humans in the loop: the developers who write the programs using those APIs.</p>

<h1 id="human-readability">Human-readability</h1>

<p>Though choosing interoperable data actually makes API more human-friendly, because “common language” and “shared identifiers”, only focusing on machine to machine interoperability without taking care of human-readability could cripple your APIs success.</p>

<h2 id="obvious">Obvious</h2>

<p>The more obvious values are the better.
A <code>REQUIRED_TITLE</code> error code returned with a <code>400 BAD REQUEST</code> on a <code>POST /books</code> to add a book is easily understandable.
It’s understandable but quite specific; probably defined at a single API level.
Maybe using a more generic code defined for the whole organization in your guidelines, reusable in many contexts, could be better.
A generic <code>REQUIRED_PROPERTY</code> error code returned with a <code>"property": "title"</code> is more interoperable.</p>

<h2 id="guessable">Guessable</h2>

<p>A <code>FRA</code> alpha-3 ISO3166 code is better than it’s numeric counter part <code>250</code>, a human being can guess what it means.
It’s also quite simple to guess other alpha-3 ISO3166 code, for instance, what is the one for Italy?</p>

<p>But that does not mean numeric values are always evil.
Take HTTP status codes, such as <code>400</code> or <code>418</code> for instance.
They require some basic HTTP knowledge to understand what they mean; any <code>4XX</code> is an error caused by consumer.
But once you have that knowledge you can guess what means any HTTP status code.
Never heard about <code>418</code>, no problem, you can guess that’s consumer fault.
By the way, being guessable, or interpretable should I say, like this is also interesting for the consumer program, it actually makes data more interoperable.</p>

<h2 id="human-friendly">Human friendly</h2>

<p>Note that creating obvious or guessable values is not always possible, especially when there are countless of them.
Many times, you’ll have to rely on opaque ids, but that does not mean they should be hard to remember or type for us, poor human beings.
An ISBN book identifier such as <code>9781617295102</code> is far more human friendly than a UUID <code>3ba5d648-8cce-433a-8013-aa760468c153</code> but less than a short id like <code>g2ma67</code>.
And I think that <code>123456</code> is more human friendly than all the others.</p>

<p>But don’t forget that interoperability always prevail over human-readability.
In that case, even though <code>123456</code> is more human-friendly, it’s still an internal id known only by the system which has created it, while <code>9781617295102</code> is a standard ISBN known widely outside of the organization.</p>

<h1 id="how-to-choose-identifiers">How to choose identifiers</h1>

<p>So how to choose identifiers, ids and codes?
First, try to find the most interoperable ones, and second, try to keep them as much human readable as possible.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/how-to-choose-ids-and-codes-to-build-userfriendly-and-interoperable-apis/scientific-quadrant-for-identifiers-how.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>The level of interoperability of an API depends on the level of “standardization” of its data.
A standard identifier will be easily understood by many systems while an internal one will be understood only by the system creating it.
But “standardization” does not always mean “standard” (like ISO country codes), sometimes using well known shared identifier inside an organization or a domain will be sufficient.</p>

<p>The developer experience will also be enhanced when using human readable identifiers; easy to understand, easy to type, easy to remember, easy to guess.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[As an API designer, why should you care about the value of a productId, a countryCode, or an error code? Because wisely choosing the value of such (in a broad sense) “identifiers” greatly participates in the making of a user friendly API; but most importantly an interoperable one.]]></summary></entry><entry><title type="html">What should come first when designing an API?</title><link href="https://apihandyman.io/what-should-come-first-when-designing-an-api/" rel="alternate" type="text/html" title="What should come first when designing an API?" /><published>2021-12-22T00:00:00-06:00</published><updated>2021-12-22T00:00:00-06:00</updated><id>https://apihandyman.io/what-should-come-first-when-designing-an-api</id><content type="html" xml:base="https://apihandyman.io/what-should-come-first-when-designing-an-api/"><![CDATA[<p>Either you provide public or private APIs, you must have a design first approach.
But what does actually mean “design first”?
Does it mean religiously writing all your <code>GET /this</code> and <code>POST /that</code> in an OpenAPI file?
But if that so, how is this so different from the code first approach where you write actual code to generate an OpenAPI file?
Maybe it’s time to clarify what should come first when designing API.
<!--more--></p>

<h1 id="definitions">Definitions</h1>

<p>The “design first” and “code first” approach are very often opposed to each other.</p>

<p>The “code first” approach consists in coding the implementation and generating from it a formal description afterwards, usually an OpenAPI Specification file.
If you’ve read this blog you know what I think about generating OpenAPI from code in such a case (if not, you should read <a href="/6-reasons-why-generating-openapi-from-code-when-designing-and-documenting-apis-sucks/">6 reasons why generating OpenAPI from code when designing and documenting APIs sucks</a>).
This approach has some serious drawbacks but I work with teams who are happy with it.
Either you like it or not, either it can have some drawbacks (but also some advantages), should this approach be opposed to “design first”?</p>

<p>Nope, that’s a wrong debate.
The “design first” approach is unfortunately more often than not used to describe something else.
Indeed, it is often used to describe the “spec first” approach, an approach in which you describe formally an API using an API specification format such as the OpenAPI Specification before writing any line of code of the implementation.</p>

<p>So, what means “design first”?
The “design first” approach simply means you actually “design” your API before doing anything else.
And that could actually be done in both “spec first” and “code first” approaches.
Indeed, if I know my API needs a <code>GET /this</code>, and even if <a href="(/6-reasons-why-generating-openapi-from-code-when-designing-and-documenting-apis-sucks/)">generating OpenAPI Spec from code sucks</a>, there’s no big difference between writing OpenAPI Spec code and your favorite language code.</p>

<p>There’s no big difference … as long as you actually <em>design</em> your API first.</p>

<h1 id="natural-language-almost-first">Natural language almost first</h1>

<p>So what truly is this “design first” approach that you MUST actually use to create APIs?
When designing an API, what should come first is not thinking about <code>GET /this</code> and <code>POST /that</code>.
What comes first is the needs your API should fulfill.
And those needs are not <code>GET /this</code> and <code>POST /that</code>, those needs are more like “Search products” or “Place an order.</p>

<p>Before thinking about HTTP methods and resource paths, you must have a clear understanding of the needs.
And you must describe them using crystal clear natural language.
You usually start with high level needs like “buying some products” and decompose them in flows, each step being an actual operation of your API, like “Search products”, “Add product to basket” and “Place an order” (read more about all that in my book <a href="https://www.manning.com/books/the-design-of-web-apis">The Design of Web APIs</a>).
Working using natural language allows to include everyone in the conversation and to focus on the business perspective while keeping REST &amp; HTTP heated discussions for later.
Actually having a clear description of what the API should do in natural language facilitate those later discussions.</p>

<p>By the way, if <a href="/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer/#when-should-i-use-english-during-design-process">you’re an ESL API Designer I recommend to do that in your native language</a>.</p>

<p>So, whatever works in your context, spec or code first, design your API by working first on the needs using natural language.
That’s the heart of design first.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Either you provide public or private APIs, you must have a design first approach. But what does actually mean “design first”? Does it mean religiously writing all your GET /this and POST /that in an OpenAPI file? But if that so, how is this so different from the code first approach where you write actual code to generate an OpenAPI file? Maybe it’s time to clarify what should come first when designing API.]]></summary></entry><entry><title type="html">Handle API gateway and backend differences in API documentation with OpenAPI Specification</title><link href="https://apihandyman.io/handle-api-gateway-and-backend-differences-in-api-documentation-with-openapi-specification/" rel="alternate" type="text/html" title="Handle API gateway and backend differences in API documentation with OpenAPI Specification" /><published>2021-12-15T00:00:00-06:00</published><updated>2021-12-15T00:00:00-06:00</updated><id>https://apihandyman.io/handle-api-gateway-and-backend-differences-in-api-documentation-with-openapi-specification</id><content type="html" xml:base="https://apihandyman.io/handle-api-gateway-and-backend-differences-in-api-documentation-with-openapi-specification/"><![CDATA[<p>I got yet another interesting question from my social networks: how to deal with the fact that an API contract can be different at gateway and implementation levels, and more precisely how to manage that when describing that contract with an OpenAPI file used as specification targeting API’s implementation’s developer and documentation targeting API’s consumers?
<!--more--></p>

<h1 id="the-question">The question</h1>

<p>The original question was this one: “I’m trying to work out how to use OpenAPI both as a service spec (with code generation) but also as documentation when the service will be deployed behind a gateway that will return some HTTP responses (401/403). Do I write in the OpenAPI spec what the end user sees (that an endpoint might return 401 say) even though the underlying service isn’t implementing that call? It makes the code generation ‘wrong’ but equally the developers need to know that the gateway configuration should protect it. Or do I make the OpenAPI reflect the service, in which case how do I tell the end users that they may see additional errors?”</p>

<p>So the question is how to deal with the fact that an API contract can be different at gateway and implementation levels, and more precisely how to manage that when describing that contract with an OpenAPI file used as specification targeting API’s implementation’s developer and documentation targeting API’s consumers</p>

<p>To answer that question, we need to talk about API gateways and how they can expose an API contract that is slightly different from the implementation’s one.</p>

<h1 id="how-contract-can-differ-between-gateway-and-implementation">How contract can differ between gateway and implementation</h1>

<div class="alert alert-info">
<p>Note that for this post <a href="/an-api-gateway-must-be-a-dumb-pipe/">we’ll consider the gateway as as “smart-dump pipe”</a>, and so set aside the “heavy transformation” use cases that are not relevant here.</p>

</div>

<p>An API gateway is a proxy that sits between backends providing APIs and their consumers.
Such proxy is useful to avoid reinventing the security wheel.
With an API gateway, dealing with the Oauth dance and ensuring that only registered consumers can use some API is just a piece of cake (though that does not mean it does ALL security job as shown in <a href="/an-api-gateway-alone-will-not-secure-your-api/">my previous “An API Gateway alone will not secure your API” post</a>).
Other less known feature, gateways also provide throttling to ensure that a given consumer doesn’t do more than X call per second on a API or to ensure that a backend does not take more than Y call per second to protect non scalable infrastructure.</p>

<h2 id="errors-and-more">Errors and more</h2>

<p>Doing such stuff independently from the API implementation, an API gateway actually modifies exposed API contract.
Indeed, if a consumer makes an API call without an access token, they will get a <code>401 Unauthorized</code> response coming from the gateway, their API call having not reach the backend.
Same goes if a consumer goes beyond the X call per second, they may get a <code>429 Too Many Requests</code> coming from the gateway.
Those errors are not part of the original contract exposed by the backend.</p>

<div class="alert alert-warning">
<p>Important notice regarding errors: ensure that errors returned by your API gateway actually follow your API design guidelines.</p>

</div>

<p>But the API gateway may modify the contract beyond adding some errors.
As the gateway is a proxy, the server host is not the same at the gateway level (<code>https://cool-domain.com</code>) and the backend level (<code>https://obscure-server-name</code>).
It may change the base path, the backend exposing its API on <code>/api</code> and the gateway exposing on <code>/meaningful-name</code>.
A gateway may also add some HTTP headers in responses.</p>

<p>More tricky, the gateway may change security settings.
It’s fairly common to have various security modes available at the gateway level (Oauth, OpenID connect) but between the gateway and the backend a more generic, often JWT based security mode is used.</p>

<p>And even more tricky, you may have some endpoints at backend level that are only used internally and must not be exposed at gateway level.</p>

<h2 id="impacts-on-openapi-file">Impacts on OpenAPI file</h2>

<p>All that means the modifications can take place in the following places in an OpenAPI file:</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Modified OpenAPI file</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-yaml line-numbers code-collapsed code-copy"><code class="code-block">openapi: 3.0

servers:
    - url: # Gateway and backend won&#39;t have
           # same URLs (scheme, host, base path)

components:
    securityDefinitions:
        # Definitions of gateway specific security
        # modes different from backend

paths:
    /any-path: # Some paths may not be exposed on the gateway
        any-operation: # Some operations may not be exposed on the gateway
            security:
                # Usage of gateway specific security
                # modes different from backend
            responses:
                429: # Gateway will add or override HTTP
                     # status codes for all operations
                    headers:
                        # Gateway may add specific headers</code></pre>
  </div>
</div>

<h1 id="the-answer">The answer</h1>

<p>So how to deal with that regarding an OpenAPI file used as specification and documentation?</p>

<h2 id="consumers-perspective-first">Consumer’s perspective first</h2>

<p>First, what is 100% sure is that the consumers (well, their developers) must get access to a documentation describing the API from their perspective, that is the API gateway version.</p>

<p>If the difference between backend and gateway contract is only about getting a few errors like 401 or 429, you could possibly provide the backend reference documentation and have a dedicated pages to explain how some specific errors are handled.
But that means when consumers read the API reference documentation, these errors are not explicitly described.
And that is a problem in my humble opinion: as a developer using an API, I want to know exactly what happens reading the documentation of an operation.</p>

<p>That means, the reference documentation and hence the underlying OpenAPI file, must include those information. 
So how to achieve that?</p>

<h2 id="in-case-of-backend-specific-operations">In case of backend specific operations</h2>

<p>If your backend exposes specific operations that must not be exposed at gateway level, I would suggest to put them in a separate API.
Yes, a single backend can expose 2 different APIs on two different root path.
That will avoid the risk of unintentionally expose purely internal admin operations to the outside world.</p>

<h2 id="from-gateway-to-implementation">From gateway to implementation</h2>

<p>First option, create an OpenAPI file describing the API at the gateway level and tweak it, if needed, to use it at backend level:</p>

<ul>
  <li>Replace gateway <code>servers</code> by backend one(s)</li>
  <li>Replace gateway <code>securityDefinitions</code> by backend one</li>
  <li>Replace gateway operation <code>security</code> by backend one</li>
  <li>Remove or replace gateway specific <code>responses</code></li>
  <li>Remove gateway <code>specific</code> headers in <code>responses</code></li>
  <li>Add backend specific operations if you don’t want to separate them (see <a href="/#in-case-of-backend-specific-operations">In case of backend specific operations</a>)</li>
</ul>

<p>Don’t do that manually, do it programmatically to ensure exhaustivity and consistentcy.
You can use <a href="/toolbox/jq/">JQ</a> or an OpenAPI parser.</p>

<h2 id="from-implementation-to-gateway">From implementation to gateway</h2>

<p>The second way of dealing with that problem would be to transform the OpenAPI file describing the implementation’s contract into the gateway one.</p>

<p>In a code first approach, you could use the implementation’s documentation (OpenAPI) generator to do the transformation.
If you’re coding in Java, it’s dead simple to do all the modifications programmatically with SpringFox.</p>

<p>In both code first and spec first approaches, you can also do the transformations on an implementation version spec before or during deployment.
If you’re very lucky, your API gateway manages that transformation magically (but I doubt that actually exists).
If not, proceed like in “gateway to implementation” scenario using <a href="/toolbox/jq/">JQ</a> or an OpenAPI parser to modify the file.</p>

<p>Whatever the way of doing the modifications, they would be:</p>

<ul>
  <li>Replace backend <code>servers</code> by gateway one</li>
  <li>Replace backend <code>securityDefinitions</code> by gateway one</li>
  <li>Replace backend operation <code>security</code>by gateway one</li>
  <li>Add gateway specific <code>responses</code></li>
  <li>Add gateway <code>specific</code> headers in <code>responses</code></li>
  <li>Remove backend specific operations if needed (see <a href="/#in-case-of-backend-specific-operations">In case of backend specific operations</a>)</li>
</ul>

<h2 id="gateway-and-implementation">Gateway and implementation</h2>

<p>And last but not least: doing both.
You can create an OpenAPI file describing the two versions and then strip it of unwanted elements before using it as gateway or backend level.
In my humble opinion that seems to be the best solution.
Indeed, you actually define explicitly what happens at both level and especially at gateway level (it’s up to provider to decide how to use scope for instance).
And when it comes to modify the OpenAPI file, it’s quite simple to remove elements.
A middle-ground even better option could be to use templates or script to handle the addition of gateway errors or headers (which are always the same).</p>

<p>Note that using a linter such as <a href="/toolbox/spectral/">Spectral</a> can ensure that your OpenAPI file(s) are actually valid ones (defining all errors for instance).</p>

<h1 id="consumer-first-and-machine-readability">Consumer first and machine readability</h1>

<p>Two important things to remember after reading this post:</p>

<ul>
  <li>The consumers MUST get a documentation, hence an OpenAPI file, that matches the API they see without bothering them with internal concerns (for instance that “the” API is actually build upon 2 components).</li>
  <li>And whenever you need to tweak the documentation/description of an API, better take advantage of a machine readable format such as the OpenAPI and do the modifications programmatically not manually</li>
</ul>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[I got yet another interesting question from my social networks: how to deal with the fact that an API contract can be different at gateway and implementation levels, and more precisely how to manage that when describing that contract with an OpenAPI file used as specification targeting API’s implementation’s developer and documentation targeting API’s consumers?]]></summary></entry><entry><title type="html">Le Clash REST vs GraphQL</title><link href="https://apihandyman.io/le-clash-rest-vs-graphql/" rel="alternate" type="text/html" title="Le Clash REST vs GraphQL" /><published>2021-12-09T00:00:00-06:00</published><updated>2021-12-09T00:00:00-06:00</updated><id>https://apihandyman.io/le-clash-rest-vs-graphql</id><content type="html" xml:base="https://apihandyman.io/le-clash-rest-vs-graphql/"><![CDATA[<p>L’idée folle de l’équipe <a href="https://www.youtube.com/channel/UCIuBHEwIFRjwRMm9--Ga1vg">Microsoft User Group France</a> pour API Days Paris 2021: un clash REST (représenté par votre serviteur) vs GraphQL (représenté par <a href="https://twitter.com/CaptainJojo42">Jonathan Jalouzot</a>, tenancier du Meetup GraphQL Paris) arbitré par <a href="https://twitter.com/nbarrasson">Nicolas Barrasson</a>.
<!--more-->
J’avoue avoir été un peu dubitatif au début car je ne suis pas fan de l’idée du clash, mais le concept est bien rôdé et il ne s’agit pas de se friter bêtement.
C’est un moyen sympa de découvrir deux technos et de comparer les avantages et inconvénients avec une dose d’humour.
Et puis je m’en suis pas trop mal sorti: meilleur troll, meilleur uppercut et meilleur clasheur.
Mais REST a-t-il vraiment gagné sur GraphQL?</p>

<h1 id="abstract">Abstract</h1>

<p>Les APIs web font tourner le monde. Nos SI ne seraient rien sans elles; pas de site web, pas d’applications mobiles, pas de microservices, pas de cloud. Mais ce n’est pas qu’un sujet IT, le business ne serait rien sans elles non plus; pas de paiements instantanés avec Stripe, pas de colis Amazon déposé en 24h dans votre boite aux lettres, et au-delà, toutes les entreprises, quel que soit leur domaine, doivent envisager de proposer des APIs.
Le problème c’est qu’il n’y a pas un seul type d’API Web, et ces derniers temps, il y en a 2 qu’on oppose très souvent: le vénérable REST et le challenger GraphQL.
Comment choisir objectivement l’un ou l’autre?
Sont-ils aussi forts, aussi parfaits que leurs aficionados respectifs le disent?
L’un des deux va-t-il être sacré empereur éternel des APIs Web?
Vous saurez vous faire un avis grâce à ce clash d’anthologie.</p>

<h1 id="video">Video</h1>

<div id="JjSUePBTLj4" class="third-party-content third-party-content-youtube">
    <div class="card third-party-content-warning">
        <img class="card-img" src="/images/thirdpartycontents/le-clash-rest-vs-graphql.jpg" alt="Card image" />
        <div class="card-img-overlay d-flex">
            <div class="my-auto mx-auto text-center">
                <p>This content is hosted on youtube.com.</p>
                <p>By showing this third party content you accept YouTube (Google)'s 
                    <a class="privacy-policy" href="https://policies.google.com/privacy" target="_blank">privacy policy</a>.
                </p>
                <form>
                    <a href="javascript:thirdPartyConsent('JjSUePBTLj4', 'youtube')" class="btn btn-primary" role="button">Show third party content</a>
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input third-party-content-remember" />
                        <label class="form-check-label" for="exampleCheck1">Remember my choice</label>
                        <p>(can be changed in <a class="privacy-policy" href="/privacy/">privacy settings</a>)</p>
                      </div>
                </form>
            </div>
        </div>
    </div>
    <div class="iframe-container third-party-content-iframe third-party-content-iframe-disabled">
        <iframe class="iframe-responsive" data-src="https://www.youtube-nocookie.com/embed/JjSUePBTLj4?color=white&amp;theme=light" frameborder="0" allowfullscreen="">
        </iframe>
    </div>
</div>]]></content><author><name>Nicolas Barrasson &amp; Jonathan Jalouzot &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html"><![CDATA[L’idée folle de l’équipe Microsoft User Group France pour API Days Paris 2021: un clash REST (représenté par votre serviteur) vs GraphQL (représenté par Jonathan Jalouzot, tenancier du Meetup GraphQL Paris) arbitré par Nicolas Barrasson.]]></summary></entry><entry><title type="html">And what if I’m wrong? Overcoming fears and doubts while designing APIs</title><link href="https://apihandyman.io/and-what-if-im-wrong-overcoming-fears-and-doubts-while-designing-apis/" rel="alternate" type="text/html" title="And what if I’m wrong? Overcoming fears and doubts while designing APIs" /><published>2021-12-08T00:00:00-06:00</published><updated>2021-12-08T00:00:00-06:00</updated><id>https://apihandyman.io/and-what-if-im-wrong-overcoming-fears-and-doubts-while-designing-apis</id><content type="html" xml:base="https://apihandyman.io/and-what-if-im-wrong-overcoming-fears-and-doubts-while-designing-apis/"><![CDATA[<p>F<strong>**</strong>* impostor syndrome, it’s not easy to say that I’m an API design expert, but I am.
Along my path to expertise, I failed, I did mistakes; that helped me to learn a lot.
I also have been afraid, I had doubts.
And you know what?
Though I’m now an expert, that’s still the case when I help people to design their APIs.
But, I learned to live with that.
I learned to live with the “what if I’m wrong” question. 
<!--more--></p>

<h1 id="designing-is-doubting">Designing is doubting</h1>

<p>So yes, even after all these years, despite being an expert, I still can fear to be wrong, I still can doubt while designing APIs.
And that feeling is even stronger when I help others to design APIs, my mistakes could impact others.</p>

<p>What can be wrong in API Design?
What would an expert or anyone else doubt when designing an API?
Everything.
Needs, business rule, API granularity, operation granularity, operation goal, behavior, data structures, names, types, enumerations …
All those problems can be categorized in the following categories:</p>

<ul>
  <li>Needs and subject matter: Everything related to the business side of the API. What problem are we trying to solve, what the API is supposed to do, is it a “this” or a “that, what becomes “this” after we’ve done “that” …</li>
  <li>Architecture and modeling: Everything related to the representation of the business intent as a programming interface. One or 2 APIs, list or tree, sync or async, do we need a different representation of “this” in those different contexts, …</li>
  <li>Look and feel: Cousin to previous topic, everything related to consistency. Path structure, when using header parameters, is it “/resource” or /resources, is it birthDate or dateOfBirth …</li>
</ul>

<p>With experience, training, reading, there are less and less fears and doubts, but they’re will always be there.
The best way to deal with doubts is actually to get rid of them.</p>

<h1 id="ensuring-that-im-not-wrong">Ensuring that I’m not wrong</h1>

<p>Look and feel concerns are the easier to deal with … if you have API design guidelines.
Indeed, having rules defining the look and feel of your APIs will help you deal with most doubts.
But beware, look and feel concerns can sometimes <a href="/choosing-between-birthdate-and-dateofbirth-has-important-implications-for-your-api/">hide in details</a>, so always wonder if the decision you make have greater impacts.
If so, and if there’s no actual solution in your guidelines, it will be time to add it so the next time you won’t doubt.</p>

<p>Guidelines can also be of great help for architecture and modeling.
Indeed, guidelines are not just made to say with HTTP method or HTTP status code use.
They can define more complex design patterns and tell when to use them, like “when should we use an async pattern”.
But guidelines can’t contain all responses to all business specific problems.
For those problems, you can take advantage of existing APIs or existing API in your domain, you can also refer to standards, common practices or well known API to validate your choices.</p>

<p>Regarding needs, the only way to deal with doubt is talking to SMEs (Subject Matter Experts).
I can’t count how many times doubts were solved by talking to an SME or better making 2 SMEs talk together, the designer asking a few question to “heat up” the discussion.
Actually, don’t ever design API without working closely with SME.</p>

<p>But in the end, there still can be some uncertainty because of some unknowns (known unkowns or unknown unknowns), the “what if I’m wrong question” still stands.</p>

<h1 id="evaluating-the-consequences-if-im-wrong">Evaluating the consequences if I’m wrong</h1>

<p>In that case, in order to be comfortable, I evaluate the consequences of being wrong.
If I had to make a choice between solution A and solution B and chose B, I evaluate what would be the path from A to B.
Will this introduce a breaking change?
If the answer is no, that’s perfect, no more doubts.
If it’s yes, I wonder what is the <a href="/apidays-interface-doing-apis-right-and-doing-right-apis/#tip-2-cost-of-change-varies">cost of this change</a>?
Sometimes it’s fairly minimal, like when it’s a private API consume by a single consumer managed by the same team providing the API.</p>

<p>Evaluating consequences doesn’t always take away all my doubts, but knowing them and sharing them with the team so that everyone accepts them greatly reduces the worries.
Yes, but that mean I still can be wrong … so what if I’m wrong?</p>

<h1 id="failing">Failing</h1>

<p>“You’ll fail, you’ll do mistakes”: that’s what I say when I start teaching API Design to someone. 
Absolutely not to put them off, but to explain that failure will happen, that it is part of the job.
Though you can drastically reduce them by doubting, removing your doubts and evaluating the consequences of being wrong, some mistakes will happen.
Just knowing that will make your life easier.
And practicing doubting will help you solve your mistakes more easily.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[F*** impostor syndrome, it’s not easy to say that I’m an API design expert, but I am. Along my path to expertise, I failed, I did mistakes; that helped me to learn a lot. I also have been afraid, I had doubts. And you know what? Though I’m now an expert, that’s still the case when I help people to design their APIs. But, I learned to live with that. I learned to live with the “what if I’m wrong” question.]]></summary></entry><entry><title type="html">5 reasons why you should treat private APIs like public ones</title><link href="https://apihandyman.io/5-reasons-why-you-should-treat-private-apis-like-public-ones/" rel="alternate" type="text/html" title="5 reasons why you should treat private APIs like public ones" /><published>2021-12-01T00:00:00-06:00</published><updated>2021-12-01T00:00:00-06:00</updated><id>https://apihandyman.io/5-reasons-why-you-should-treat-private-apis-like-public-ones</id><content type="html" xml:base="https://apihandyman.io/5-reasons-why-you-should-treat-private-apis-like-public-ones/"><![CDATA[<p>“Why should we care about our privates APIs?
They’re only consumed by us, so let’s do minimal work on them.
We’ll keep our effort only for the public ones we sell to the outside world.”
Such stance will have terrible consequences for an organization, even more if it will never create public APIs.
Let’s see 5 reasons why you should treat privates APIs like public ones.
<!--more--></p>

<h1 id="what-are-private-and-public-apis">What are private and public APIs?</h1>

<p>It’s not where an API is exposed or if its use is free or paid that define its nature, but by who it is consumed.
Either it is exposed on some intranet or the internet, a private API is an API that is consumed only by the organization that created it.
For instance, a mobile application’s backend API is a private API though it is exposed on the internet.
Either free or paid, a public API is an API that has been created to be consumed by others.
It is usually advertized on the organization’s website and can be used by almost anyone willing to accept its usage conditions.
Note that a variant of public APIs often called partner APIs are usually less visible and requires more paper work to use them.</p>

<h1 id="why-treat-private-like-public">Why treat private like public</h1>

<p>As private APIs are only consumed by the organization creating them, they’re often treated as second class APIs.
From a business perspective, they are often seen as just IT department concerns.
From an IT perspective, they are often just seen as technical interfaces.
The result is often quick and dirty terrible APIs, but there’s more than that.
Let’s see that by exploring 5 reasons why you should treat private APIs like public ones.</p>

<h2 id="nurturing-peoples-api-mindset">Nurturing people’s API mindset</h2>

<p>When treating private APIs like public APIs, you care about their design.
You care about why you create them, what problems they will solve.
You care about their look and feel.
Designing best in class APIs that will be easy to understand and easy to use is not something that you do easily at first try, you need to do it again and again.
So, slowly but surely, treating private APIs like public ones instills the API mindset and grow the API skills you’ll need for your public APIs.
Also, all people working on APIs will be happy because they learn valuable skills, because they do great things.</p>

<p>If you don’t treat private like public APIs, you’ll have to learn by creating public ones.
How will you feel failing miserably publicly?
What will be the cost of such failure?
And beyond that, how people will feel?
You’ll lose skilled people, you’ll lose people who want to learn.</p>

<h2 id="simplifying-architecture">Simplifying architecture</h2>

<p>When you don’t think about a private API as a public one, you may do short sighted design and architecture decisions often leading to tightly coupled complex systems, systems that can’t be used independently, and so systems that can’t be reused easily in other contexts.</p>

<p>I remember some team wanting to build a system exposing its features through 3 different technologies: HTTP based API, Kafka Messaging, and shared folders.
And it’s not a “pick the one you like” menu, in order to actually interact with the system you had to use all 3.
Why?
Simply because the team they were working for the first integration could use those technologies.
Unfortunately that way of working couldn’t be easily replicated with other teams inside the organization… and even less with the outside world.</p>

<p>Thinking to expose the system to an outside third party adds constraints that guides you to create simpler systems.
In that case HTTP based APIs would have been totally sufficient.</p>

<h2 id="ensuring-a-good-level-of-security">Ensuring a good level of security</h2>

<p>Working “with the family”, usually leads to a certain lack of concerns about security: “We know the other team, we can trust them”.
Yes, but they still can do mistakes.
Considering any consumer as possibly hostile will avoid bad surprise.
It’s not because you trust an other team that you should provide them an API that could arm your systems or leak data that shouldn’t leave your system.
And what if the API goes from intranet to internet or have to go public?
Will you remember those small arrangements with security?</p>

<p>So, better wonder if you would “do that” when exposing this feature as a public API?
If the answer is no, then don’t do it for a private one.</p>

<h2 id="reducing-costs">Reducing costs</h2>

<p>If your private APIs are treated like public ones, they are designed to be easy to understand, easy to use and reusable in various contexts.
That means when a new need arise, you may not need to rebuild everything from scratch because you already have one or more APIs that can be reused to fullfil it.
As those APIs are easy to understand and easy to use, the new teams willing to use them will be able to do it quickly without even asking support to the team providing them.
Less time spent on those evolutions, means less money spend for the organization.</p>

<h2 id="achieving-faster-time-to-market">Achieving faster time to market</h2>

<p>And last but not least, treating your private APIs like public ones will help you achieving faster time to market for all of your projects.
Indeed, having highly reusable APIs that can be integrated in a few minutes will make short deadlines totally achievable.
Icing on the cake, if the project is to provide one of your organization service as an API, the private API delivering it could probably be exposed as it is.</p>

<h1 id="target-the-ideal-private--public">Target the ideal private === public</h1>

<p>Even if you don’t plan to provide public APIs, considering private APIs as first class APIs like public APIs has many benefits that far outweigh the investment.
The ideal target would be to say that <a href="https://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/">any API can be a public API</a>, but sometimes you can’t without investing too much.
That’s especially true when you start building event oriented architecture on top of Kafka.
No problem, keep the spirit and evaluate what will need to be done in case of public exposure, so you’ll make the right decision and the additional work will not be a surprise.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[“Why should we care about our privates APIs? They’re only consumed by us, so let’s do minimal work on them. We’ll keep our effort only for the public ones we sell to the outside world.” Such stance will have terrible consequences for an organization, even more if it will never create public APIs. Let’s see 5 reasons why you should treat privates APIs like public ones.]]></summary></entry><entry><title type="html">Talking about The Design of Web APIs with Erik Wilde</title><link href="https://apihandyman.io/talking-about-the-design-of-web-apis-with-erik-wilde/" rel="alternate" type="text/html" title="Talking about The Design of Web APIs with Erik Wilde" /><published>2021-11-30T00:00:00-06:00</published><updated>2021-11-30T00:00:00-06:00</updated><id>https://apihandyman.io/talking-about-the-design-of-web-apis-with-erik-wilde</id><content type="html" xml:base="https://apihandyman.io/talking-about-the-design-of-web-apis-with-erik-wilde/"><![CDATA[<p>Had a great time chatting with <a href="https://twitter.com/dret">Erik Wilde</a> about the motivation for writing The Design of Web APIs book, and why it specifically focuses on the design aspect of the API lifecycle (and also why it is not titled The Implementation of Web APIs).
<!--more-->
Watch on <a href="https://youtu.be/XuSEFFZzktE">Erik Wilde’s Youtube Channel</a></p>]]></content><author><name>Erik Wilde &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html"><![CDATA[Had a great time chatting with Erik Wilde about the motivation for writing The Design of Web APIs book, and why it specifically focuses on the design aspect of the API lifecycle (and also why it is not titled The Implementation of Web APIs).]]></summary></entry><entry><title type="html">5 ways to update a boolean status with a REST API</title><link href="https://apihandyman.io/5-ways-to-update-a-boolean-status-with-a-rest-api/" rel="alternate" type="text/html" title="5 ways to update a boolean status with a REST API" /><published>2021-11-24T00:00:00-06:00</published><updated>2021-11-24T00:00:00-06:00</updated><id>https://apihandyman.io/5-ways-to-update-a-boolean-status-with-a-rest-api</id><content type="html" xml:base="https://apihandyman.io/5-ways-to-update-a-boolean-status-with-a-rest-api/"><![CDATA[<p>Last week, someone sent me a direct message on Twitter asking the following question:
Let’s say you have a resource with an activated boolean property, how would you design the operation(s) allowing to activate or deactivate it? 
As this is a use case I often encounter during API design reviews or API design workshops, I thought it would be interesting to share my usual answer(s) with everyone.
<!--more--></p>

<h1 id="always-go-beyond-the-question">Always go beyond the question</h1>

<p>Before diving into the formal design of a whole API or a single operation, I discuss the actual need(s) in order to be sure about the problem we’re trying to solve.
Providing guidance focusing only on the form is the best way to end with a terrible design even if its form is theoretically correct.
In such a case, “a resource that needs to be activated or deactivated”, I would search why it needs to be activated/deactivated, are these the actual terms everyone involved use, what is the flow of actions around this specific step.
That could lead to a new vision of the need that could be something else than “activating/deactivating a whatever”.</p>

<p>And more prosaically, as boolean are not extensible, I would also search to know if there are there really only 2 states (activated/deactivated).
If that’s not the case or if there may be other states in the future, I would recommend to replace the <code>activated</code> boolean property by a <code>status</code> string (having activated or deactivated values) for instance.</p>

<p>For this post, let’s say we work on a User API allowing to “manage” (whatever it means) users and that we need to add a “user activation/deactivation” or “modify user’s status” feature.</p>

<h1 id="solution-1-updating-the-whole-resource">Solution 1: Updating the whole resource</h1>

<p>Either you say that a user being active (or activated? That’s not the exact same meaning …) depends on a boolean <code>activated</code> property or a <code>status</code> string property, you could change its value to activate or deactivate the user by:</p>

<ul>
  <li>Replacing the whole resource with a <code>PUT /users/{userId}</code></li>
  <li>Partially update it with <code>PATCH /users/{userId}</code>.</li>
</ul>

<p>I will not go into all of PUT/PATCH subtleties, I keep that for future posts, but be aware that between choosing the body format, and the fact that <a href="/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete/">there are some places where PATCH cannot be used</a>, using PATCH HTTP method can be tricky.</p>

<p>While being (apparently) straightforward and quite simple to put in place, this “update whole resource” approach as several cons depending on the importance of this “user activation/deactivation” feature:</p>

<ul>
  <li>It hides a possibly important feature of the API behind a “simple” resource’s replace/update. While I always try to avoid having too much operations inside an API, that strategy could make the API too coarse grained, less simple to understand, and less simple to use.</li>
  <li>Hiding a possibly critical feature (activating/deactivating the user) among less critical ones (like maybe changing their <code>mood</code>) could lead to security concerns. The security controls of the critical part of this “do-it-all” operation can become more complex to handle, complex to understand for consumers, or even worse: they can be neglected.</li>
  <li>Introducing an “apparently wide scoped resource replace” could be a bit deceptive if it’s only aim is to activate/deactivate the user.</li>
  <li>Later, if the first intent was only to activate/deactivate the user, managing other properties’ updates can become tricky because of higher security level implemented from the beginning</li>
</ul>

<p>So if, updating the whole resource may not be a good idea, let’s try to make this “user activation/deactivation” feature more visible in the API.</p>

<h1 id="solution-2-using-dedicated-action-resources">Solution 2: Using dedicated action resources</h1>

<p>Who has never been tempted to add some “action resources” in a REST API, fearing the API inquisition …
Well, a resource can actually be anything so if your API design guidelines indicates that’s a possibility, why not using that design pattern.
So the user could be activated with <code>POST /users/{resourceId}/activate</code> and deactivated with <code>POST /resources/{resourceId}/deactivate</code>, both having nothing in their requests bodies.</p>

<p>That’s make the API pretty simple to understand, but I see 2 cons:</p>

<ul>
  <li>Personally, I often fear that introducing actions resources could lead to some dreaded terrible RPC where HTTP protocol semantic is set aside with operations like <code>POST /users/{userId}/delete</code> or worse <code>GET /users/{userId}/delete</code>. I’ll probably write one post about that later.</li>
  <li>If there are multiple status, you could end with as many operations as statuses, in such a case, maybe an “IMHO too much RPCesque” <code>POST /users/{userId}/updateStatus</code> taking the new value in the body would avoid that.</li>
</ul>

<p>So, if we’re not fan of action resources, how could we make this “user activation/deactivation” visible using “standard” resources, representing business entities and not actions.</p>

<h1 id="solution-3-using-a-fine-grain-update-à-la-odata">Solution 3: Using a fine grain update à la OData</h1>

<p>Why not handle this à la <a href="https://www.odata.org/">OData</a>?
With OData, it is possible to update a single property of a resource, here <code>activated</code> for a user, with something like <code>PUT /User('userId')/activated</code>.
As our API is not an OData one, we could adapt the idea to <code>PUT /users/{userId}/activated</code> (or <code>PUT /users/{userId}/status</code> if we work with a multiple value status).</p>

<p>This strategy:</p>

<ul>
  <li>Makes the operation visible</li>
  <li>Makes the operation quite simple to secure</li>
  <li>Keeps HTTP semantic</li>
</ul>

<p>To reduce the risk of having too fine grained APIs, holding too many operations, I would only use it for specific properties updates that represents features needing high visibility and/or more dedicated security checks and I would keep the whole resource PUT/PATCH for more regular/less critical/less interesting properties updates.</p>

<p>But, what if I want to track the activated/deactivated status?</p>

<h1 id="solution-4-adding-to-a-sub-collection-resource">Solution 4: Adding to a sub collection resource</h1>

<p>Sometimes the evolution/change log of the value of a resource’s property, hence the <code>activated</code> or <code>status</code> property of a user in our case, is as important as the value itself. In such a case, we could add a <code>POST /users/{userId}/statuses</code> operation, that literally adds a status (activated or deactivated or whatever) to the user.</p>

<p>Note that it works better with the <code>status</code> option than with the <code>activated</code> one.
Indeed <code>POST /users/{userId}/activateds</code> looks awkward and I even doubt it’s actual english.
An alternative could be <code>POST /users/{userId}/activations</code> but it feels awkward to add a “false” activation.</p>

<p>A <code>GET /users/{userId}/statuses</code> could return the change log of a user’s status as a list of objects containg a value and a date, while <code>GET /users/{userId}</code> would still contain the <code>status</code> property holding the current (latest) status of the user.</p>

<p>This solution has the same advantage as solution 3 plus it allows to track evolutions of the value.
But what if you choose solution 3 but realize later that you need 4?
Well, you could keep the original <code>PUT /users/{userId}/status</code>, modify it’s implementation to actually add a new status, and add the <code>GET /users/{userId}/statuses</code>.
You could also tag the original PUT as deprecated and add the 2 new operations (add + list).</p>

<p>Both solution 3 and 4 are the one that I probably use most, but there’s a last option that could be interesting to investigate.</p>

<h1 id="solution-5-adding-to-an-independent-collection-resource">Solution 5: Adding to an independent collection resource</h1>

<p>If, for whatever actually relevant business domain reason, it is interesting to totally decorrelate user status management from user, this feature could be managed with an independent collection (list) resource.
A <code>PUT /activated-users/{userId}</code> could be used to “put” the user in the “activated list”.
Deactivating a user could be done by removing a user from this list with a <code>DELETE /activated-users/{userId}</code>.
And a <code>GET /activated-users</code> could give you a list of activated users, maybe providing a representation that is slightly different from what <code>GET /users</code> would return.</p>

<p>In this use case it doesn’t work very well:</p>

<ul>
  <li>Listing active users would be easily done by adding query filters to <code>GET /users</code>.</li>
  <li>We lose a bit the “visible relation” between users and their statuses that was more obvious with <code>/users/{userId}/statuses</code></li>
  <li>It’s not possible to handle more statuses (without ending with too many operations)</li>
</ul>

<p>But it’s still interesting to have this pattern in mind as it may work in some other contexts.</p>

<h1 id="do-not-hesitate-to-ask-questions">Do not hesitate to ask questions</h1>

<p>Now you know 5 different ways to handle operations such as “update a whatever’s kind of status”, it’s up to you to choose the solution that work for your use case in your context (and try to be consistent inside your API and across your APIs).</p>

<p>That’s the second post I write thanks to someone’s question.
To be honest, I find it quite interesting to answer those questions in a blog post, so do not hesitate to send yours!
I cannot guarantee, I will respond to all them but it’s worth the try.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Last week, someone sent me a direct message on Twitter asking the following question: Let’s say you have a resource with an activated boolean property, how would you design the operation(s) allowing to activate or deactivate it? As this is a use case I often encounter during API design reviews or API design workshops, I thought it would be interesting to share my usual answer(s) with everyone.]]></summary></entry></feed>