<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-12-08T08:35:48-06:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">And what if I’m wrong? Overcoming fears and doubts while designing APIs</title><link href="https://apihandyman.io/and-what-if-im-wrong-overcoming-fears-and-doubts-while-designing-apis/" rel="alternate" type="text/html" title="And what if I’m wrong? Overcoming fears and doubts while designing APIs" /><published>2021-12-08T00:00:00-06:00</published><updated>2021-12-08T00:00:00-06:00</updated><id>https://apihandyman.io/and-what-if-im-wrong-overcoming-fears-and-doubts-while-designing-apis</id><content type="html" xml:base="https://apihandyman.io/and-what-if-im-wrong-overcoming-fears-and-doubts-while-designing-apis/">&lt;p&gt;F&lt;strong&gt;**&lt;/strong&gt;* impostor syndrome, it’s not easy to say that I’m an API design expert, but I am.
Along my path to expertise, I failed, I did mistakes; that helped me to learn a lot.
I also have been afraid, I had doubts.
And you know what?
Though I’m now an expert, that’s still the case when I help people to design their APIs.
But, I learned to live with that.
I learned to live with the “what if I’m wrong” question. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;designing-is-doubting&quot;&gt;Designing is doubting&lt;/h1&gt;

&lt;p&gt;So yes, even after all these years, despite being an expert, I still can fear to be wrong, I still can doubt while designing APIs.
And that feeling is even stronger when I help others to design APIs, my mistakes could impact others.&lt;/p&gt;

&lt;p&gt;What can be wrong in API Design?
What would an expert or anyone else doubt when designing an API?
Everything.
Needs, business rule, API granularity, operation granularity, operation goal, behavior, data structures, names, types, enumerations …
All those problems can be categorized in the following categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Needs and subject matter: Everything related to the business side of the API. What problem are we trying to solve, what the API is supposed to do, is it a “this” or a “that, what becomes “this” after we’ve done “that” …&lt;/li&gt;
  &lt;li&gt;Architecture and modeling: Everything related to the representation of the business intent as a programming interface. One or 2 APIs, list or tree, sync or async, do we need a different representation of “this” in those different contexts, …&lt;/li&gt;
  &lt;li&gt;Look and feel: Cousin to previous topic, everything related to consistency. Path structure, when using header parameters, is it “/resource” or /resources, is it birthDate or dateOfBirth …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With experience, training, reading, there are less and less fears and doubts, but they’re will always be there.
The best way to deal with doubts is actually to get rid of them.&lt;/p&gt;

&lt;h1 id=&quot;ensuring-that-im-not-wrong&quot;&gt;Ensuring that I’m not wrong&lt;/h1&gt;

&lt;p&gt;Look and feel concerns are the easier to deal with … if you have API design guidelines.
Indeed, having rules defining the look and feel of your APIs will help you deal with most doubts.
But beware, look and feel concerns can sometimes &lt;a href=&quot;/choosing-between-birthdate-and-dateofbirth-has-important-implications-for-your-api/&quot;&gt;hide in details&lt;/a&gt;, so always wonder if the decision you make have greater impacts.
If so, and if there’s no actual solution in your guidelines, it will be time to add it so the next time you won’t doubt.&lt;/p&gt;

&lt;p&gt;Guidelines can also be of great help for architecture and modeling.
Indeed, guidelines are not just made to say with HTTP method or HTTP status code use.
They can define more complex design patterns and tell when to use them, like “when should we use an async pattern”.
But guidelines can’t contain all responses to all business specific problems.
For those problems, you can take advantage of existing APIs or existing API in your domain, you can also refer to standards, common practices or well known API to validate your choices.&lt;/p&gt;

&lt;p&gt;Regarding needs, the only way to deal with doubt is talking to SMEs (Subject Matter Experts).
I can’t count how many times doubts were solved by talking to an SME or better making 2 SMEs talk together, the designer asking a few question to “heat up” the discussion.
Actually, don’t ever design API without working closely with SME.&lt;/p&gt;

&lt;p&gt;But in the end, there still can be some uncertainty because of some unknowns (known unkowns or unknown unknowns), the “what if I’m wrong question” still stands.&lt;/p&gt;

&lt;h1 id=&quot;evaluating-the-consequences-if-im-wrong&quot;&gt;Evaluating the consequences if I’m wrong&lt;/h1&gt;

&lt;p&gt;In that case, in order to be comfortable, I evaluate the consequences of being wrong.
If I had to make a choice between solution A and solution B and chose B, I evaluate what would be the path from A to B.
Will this introduce a breaking change?
If the answer is no, that’s perfect, no more doubts.
If it’s yes, I wonder what is the &lt;a href=&quot;/apidays-interface-doing-apis-right-and-doing-right-apis/#tip-2-cost-of-change-varies&quot;&gt;cost of this change&lt;/a&gt;?
Sometimes it’s fairly minimal, like when it’s a private API consume by a single consumer managed by the same team providing the API.&lt;/p&gt;

&lt;p&gt;Evaluating consequences doesn’t always take away all my doubts, but knowing them and sharing them with the team so that everyone accepts them greatly reduces the worries.
Yes, but that mean I still can be wrong … so what if I’m wrong?&lt;/p&gt;

&lt;h1 id=&quot;failing&quot;&gt;Failing&lt;/h1&gt;

&lt;p&gt;“You’ll fail, you’ll do mistakes”: that’s what I say when I start teaching API Design to someone. 
Absolutely not to put them off, but to explain that failure will happen, that it is part of the job.
Though you can drastically reduce them by doubting, removing your doubts and evaluating the consequences of being wrong, some mistakes will happen.
Just knowing that will make your life easier.
And practicing doubting will help you solve your mistakes more easily.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">F*** impostor syndrome, it’s not easy to say that I’m an API design expert, but I am. Along my path to expertise, I failed, I did mistakes; that helped me to learn a lot. I also have been afraid, I had doubts. And you know what? Though I’m now an expert, that’s still the case when I help people to design their APIs. But, I learned to live with that. I learned to live with the “what if I’m wrong” question.</summary></entry><entry><title type="html">5 reasons why you should treat private APIs like public ones</title><link href="https://apihandyman.io/5-reasons-why-you-should-treat-private-apis-like-public-ones/" rel="alternate" type="text/html" title="5 reasons why you should treat private APIs like public ones" /><published>2021-12-01T00:00:00-06:00</published><updated>2021-12-01T00:00:00-06:00</updated><id>https://apihandyman.io/5-reasons-why-you-should-treat-private-apis-like-public-ones</id><content type="html" xml:base="https://apihandyman.io/5-reasons-why-you-should-treat-private-apis-like-public-ones/">&lt;p&gt;“Why should we care about our privates APIs?
They’re only consumed by us, so let’s do minimal work on them.
We’ll keep our effort only for the public ones we sell to the outside world.”
Such stance will have terrible consequences for an organization, even more if it will never create public APIs.
Let’s see 5 reasons why you should treat privates APIs like public ones.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-are-private-and-public-apis&quot;&gt;What are private and public APIs?&lt;/h1&gt;

&lt;p&gt;It’s not where an API is exposed or if its use is free or paid that define its nature, but by who it is consumed.
Either it is exposed on some intranet or the internet, a private API is an API that is consumed only by the organization that created it.
For instance, a mobile application’s backend API is a private API though it is exposed on the internet.
Either free or paid, a public API is an API that has been created to be consumed by others.
It is usually advertized on the organization’s website and can be used by almost anyone willing to accept its usage conditions.
Note that a variant of public APIs often called partner APIs are usually less visible and requires more paper work to use them.&lt;/p&gt;

&lt;h1 id=&quot;why-treat-private-like-public&quot;&gt;Why treat private like public&lt;/h1&gt;

&lt;p&gt;As private APIs are only consumed by the organization creating them, they’re often treated as second class APIs.
From a business perspective, they are often seen as just IT department concerns.
From an IT perspective, they are often just seen as technical interfaces.
The result is often quick and dirty terrible APIs, but there’s more than that.
Let’s see that by exploring 5 reasons why you should treat private APIs like public ones.&lt;/p&gt;

&lt;h2 id=&quot;nurturing-peoples-api-mindset&quot;&gt;Nurturing people’s API mindset&lt;/h2&gt;

&lt;p&gt;When treating private APIs like public APIs, you care about their design.
You care about why you create them, what problems they will solve.
You care about their look and feel.
Designing best in class APIs that will be easy to understand and easy to use is not something that you do easily at first try, you need to do it again and again.
So, slowly but surely, treating private APIs like public ones instills the API mindset and grow the API skills you’ll need for your public APIs.
Also, all people working on APIs will be happy because they learn valuable skills, because they do great things.&lt;/p&gt;

&lt;p&gt;If you don’t treat private like public APIs, you’ll have to learn by creating public ones.
How will you feel failing miserably publicly?
What will be the cost of such failure?
And beyond that, how people will feel?
You’ll lose skilled people, you’ll lose people who want to learn.&lt;/p&gt;

&lt;h2 id=&quot;simplifying-architecture&quot;&gt;Simplifying architecture&lt;/h2&gt;

&lt;p&gt;When you don’t think about a private API as a public one, you may do short sighted design and architecture decisions often leading to tightly coupled complex systems, systems that can’t be used independently, and so systems that can’t be reused easily in other contexts.&lt;/p&gt;

&lt;p&gt;I remember some team wanting to build a system exposing its features through 3 different technologies: HTTP based API, Kafka Messaging, and shared folders.
And it’s not a “pick the one you like” menu, in order to actually interact with the system you had to use all 3.
Why?
Simply because the team they were working for the first integration could use those technologies.
Unfortunately that way of working couldn’t be easily replicated with other teams inside the organization… and even less with the outside world.&lt;/p&gt;

&lt;p&gt;Thinking to expose the system to an outside third party adds constraints that guides you to create simpler systems.
In that case HTTP based APIs would have been totally sufficient.&lt;/p&gt;

&lt;h2 id=&quot;ensuring-a-good-level-of-security&quot;&gt;Ensuring a good level of security&lt;/h2&gt;

&lt;p&gt;Working “with the family”, usually leads to a certain lack of concerns about security: “We know the other team, we can trust them”.
Yes, but they still can do mistakes.
Considering any consumer as possibly hostile will avoid bad surprise.
It’s not because you trust an other team that you should provide them an API that could arm your systems or leak data that shouldn’t leave your system.
And what if the API goes from intranet to internet or have to go public?
Will you remember those small arrangements with security?&lt;/p&gt;

&lt;p&gt;So, better wonder if you would “do that” when exposing this feature as a public API?
If the answer is no, then don’t do it for a private one.&lt;/p&gt;

&lt;h2 id=&quot;reducing-costs&quot;&gt;Reducing costs&lt;/h2&gt;

&lt;p&gt;If your private APIs are treated like public ones, they are designed to be easy to understand, easy to use and reusable in various contexts.
That means when a new need arise, you may not need to rebuild everything from scratch because you already have one or more APIs that can be reused to fullfil it.
As those APIs are easy to understand and easy to use, the new teams willing to use them will be able to do it quickly without even asking support to the team providing them.
Less time spent on those evolutions, means less money spend for the organization.&lt;/p&gt;

&lt;h2 id=&quot;achieving-faster-time-to-market&quot;&gt;Achieving faster time to market&lt;/h2&gt;

&lt;p&gt;And last but not least, treating your private APIs like public ones will help you achieving faster time to market for all of your projects.
Indeed, having highly reusable APIs that can be integrated in a few minutes will make short deadlines totally achievable.
Icing on the cake, if the project is to provide one of your organization service as an API, the private API delivering it could probably be exposed as it is.&lt;/p&gt;

&lt;h1 id=&quot;target-the-ideal-private--public&quot;&gt;Target the ideal private === public&lt;/h1&gt;

&lt;p&gt;Even if you don’t plan to provide public APIs, considering private APIs as first class APIs like public APIs has many benefits that far outweigh the investment.
The ideal target would be to say that &lt;a href=&quot;https://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/&quot;&gt;any API can be a public API&lt;/a&gt;, but sometimes you can’t without investing too much.
That’s especially true when you start building event oriented architecture on top of Kafka.
No problem, keep the spirit and evaluate what will need to be done in case of public exposure, so you’ll make the right decision and the additional work will not be a surprise.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">“Why should we care about our privates APIs? They’re only consumed by us, so let’s do minimal work on them. We’ll keep our effort only for the public ones we sell to the outside world.” Such stance will have terrible consequences for an organization, even more if it will never create public APIs. Let’s see 5 reasons why you should treat privates APIs like public ones.</summary></entry><entry><title type="html">5 ways to update a boolean status with a REST API</title><link href="https://apihandyman.io/5-ways-to-update-a-boolean-status-with-a-rest-api/" rel="alternate" type="text/html" title="5 ways to update a boolean status with a REST API" /><published>2021-11-24T00:00:00-06:00</published><updated>2021-11-24T00:00:00-06:00</updated><id>https://apihandyman.io/5-ways-to-update-a-boolean-status-with-a-rest-api</id><content type="html" xml:base="https://apihandyman.io/5-ways-to-update-a-boolean-status-with-a-rest-api/">&lt;p&gt;Last week, someone sent me a direct message on Twitter asking the following question:
Let’s say you have a resource with an activated boolean property, how would you design the operation(s) allowing to activate or deactivate it? 
As this is a use case I often encounter during API design reviews or API design workshops, I thought it would be interesting to share my usual answer(s) with everyone.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;always-go-beyond-the-question&quot;&gt;Always go beyond the question&lt;/h1&gt;

&lt;p&gt;Before diving into the formal design of a whole API or a single operation, I discuss the actual need(s) in order to be sure about the problem we’re trying to solve.
Providing guidance focusing only on the form is the best way to end with a terrible design even if its form is theoretically correct.
In such a case, “a resource that needs to be activated or deactivated”, I would search why it needs to be activated/deactivated, are these the actual terms everyone involved use, what is the flow of actions around this specific step.
That could lead to a new vision of the need that could be something else than “activating/deactivating a whatever”.&lt;/p&gt;

&lt;p&gt;And more prosaically, as boolean are not extensible, I would also search to know if there are there really only 2 states (activated/deactivated).
If that’s not the case or if there may be other states in the future, I would recommend to replace the &lt;code&gt;activated&lt;/code&gt; boolean property by a &lt;code&gt;status&lt;/code&gt; string (having activated or deactivated values) for instance.&lt;/p&gt;

&lt;p&gt;For this post, let’s say we work on a User API allowing to “manage” (whatever it means) users and that we need to add a “user activation/deactivation” or “modify user’s status” feature.&lt;/p&gt;

&lt;h1 id=&quot;solution-1-updating-the-whole-resource&quot;&gt;Solution 1: Updating the whole resource&lt;/h1&gt;

&lt;p&gt;Either you say that a user being active (or activated? That’s not the exact same meaning …) depends on a boolean &lt;code&gt;activated&lt;/code&gt; property or a &lt;code&gt;status&lt;/code&gt; string property, you could change its value to activate or deactivate the user by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replacing the whole resource with a &lt;code&gt;PUT /users/{userId}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Partially update it with &lt;code&gt;PATCH /users/{userId}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will not go into all of PUT/PATCH subtleties, I keep that for future posts, but be aware that between choosing the body format, and the fact that &lt;a href=&quot;/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete/&quot;&gt;there are some places where PATCH cannot be used&lt;/a&gt;, using PATCH HTTP method can be tricky.&lt;/p&gt;

&lt;p&gt;While being (apparently) straightforward and quite simple to put in place, this “update whole resource” approach as several cons depending on the importance of this “user activation/deactivation” feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It hides a possibly important feature of the API behind a “simple” resource’s replace/update. While I always try to avoid having too much operations inside an API, that strategy could make the API too coarse grained, less simple to understand, and less simple to use.&lt;/li&gt;
  &lt;li&gt;Hiding a possibly critical feature (activating/deactivating the user) among less critical ones (like maybe changing their &lt;code&gt;mood&lt;/code&gt;) could lead to security concerns. The security controls of the critical part of this “do-it-all” operation can become more complex to handle, complex to understand for consumers, or even worse: they can be neglected.&lt;/li&gt;
  &lt;li&gt;Introducing an “apparently wide scoped resource replace” could be a bit deceptive if it’s only aim is to activate/deactivate the user.&lt;/li&gt;
  &lt;li&gt;Later, if the first intent was only to activate/deactivate the user, managing other properties’ updates can become tricky because of higher security level implemented from the beginning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if, updating the whole resource may not be a good idea, let’s try to make this “user activation/deactivation” feature more visible in the API.&lt;/p&gt;

&lt;h1 id=&quot;solution-2-using-dedicated-action-resources&quot;&gt;Solution 2: Using dedicated action resources&lt;/h1&gt;

&lt;p&gt;Who has never been tempted to add some “action resources” in a REST API, fearing the API inquisition …
Well, a resource can actually be anything so if your API design guidelines indicates that’s a possibility, why not using that design pattern.
So the user could be activated with &lt;code&gt;POST /users/{resourceId}/activate&lt;/code&gt; and deactivated with &lt;code&gt;POST /resources/{resourceId}/deactivate&lt;/code&gt;, both having nothing in their requests bodies.&lt;/p&gt;

&lt;p&gt;That’s make the API pretty simple to understand, but I see 2 cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Personally, I often fear that introducing actions resources could lead to some dreaded terrible RPC where HTTP protocol semantic is set aside with operations like &lt;code&gt;POST /users/{userId}/delete&lt;/code&gt; or worse &lt;code&gt;GET /users/{userId}/delete&lt;/code&gt;. I’ll probably write one post about that later.&lt;/li&gt;
  &lt;li&gt;If there are multiple status, you could end with as many operations as statuses, in such a case, maybe an “IMHO too much RPCesque” &lt;code&gt;POST /users/{userId}/updateStatus&lt;/code&gt; taking the new value in the body would avoid that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if we’re not fan of action resources, how could we make this “user activation/deactivation” visible using “standard” resources, representing business entities and not actions.&lt;/p&gt;

&lt;h1 id=&quot;solution-3-using-a-fine-grain-update-à-la-odata&quot;&gt;Solution 3: Using a fine grain update à la OData&lt;/h1&gt;

&lt;p&gt;Why not handle this à la &lt;a href=&quot;https://www.odata.org/&quot;&gt;OData&lt;/a&gt;?
With OData, it is possible to update a single property of a resource, here &lt;code&gt;activated&lt;/code&gt; for a user, with something like &lt;code&gt;PUT /User('userId')/activated&lt;/code&gt;.
As our API is not an OData one, we could adapt the idea to &lt;code&gt;PUT /users/{userId}/activated&lt;/code&gt; (or &lt;code&gt;PUT /users/{userId}/status&lt;/code&gt; if we work with a multiple value status).&lt;/p&gt;

&lt;p&gt;This strategy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Makes the operation visible&lt;/li&gt;
  &lt;li&gt;Makes the operation quite simple to secure&lt;/li&gt;
  &lt;li&gt;Keeps HTTP semantic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To reduce the risk of having too fine grained APIs, holding too many operations, I would only use it for specific properties updates that represents features needing high visibility and/or more dedicated security checks and I would keep the whole resource PUT/PATCH for more regular/less critical/less interesting properties updates.&lt;/p&gt;

&lt;p&gt;But, what if I want to track the activated/deactivated status?&lt;/p&gt;

&lt;h1 id=&quot;solution-4-adding-to-a-sub-collection-resource&quot;&gt;Solution 4: Adding to a sub collection resource&lt;/h1&gt;

&lt;p&gt;Sometimes the evolution/change log of the value of a resource’s property, hence the &lt;code&gt;activated&lt;/code&gt; or &lt;code&gt;status&lt;/code&gt; property of a user in our case, is as important as the value itself. In such a case, we could add a &lt;code&gt;POST /users/{userId}/statuses&lt;/code&gt; operation, that literally adds a status (activated or deactivated or whatever) to the user.&lt;/p&gt;

&lt;p&gt;Note that it works better with the &lt;code&gt;status&lt;/code&gt; option than with the &lt;code&gt;activated&lt;/code&gt; one.
Indeed &lt;code&gt;POST /users/{userId}/activateds&lt;/code&gt; looks awkward and I even doubt it’s actual english.
An alternative could be &lt;code&gt;POST /users/{userId}/activations&lt;/code&gt; but it feels awkward to add a “false” activation.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;GET /users/{userId}/statuses&lt;/code&gt; could return the change log of a user’s status as a list of objects containg a value and a date, while &lt;code&gt;GET /users/{userId}&lt;/code&gt; would still contain the &lt;code&gt;status&lt;/code&gt; property holding the current (latest) status of the user.&lt;/p&gt;

&lt;p&gt;This solution has the same advantage as solution 3 plus it allows to track evolutions of the value.
But what if you choose solution 3 but realize later that you need 4?
Well, you could keep the original &lt;code&gt;PUT /users/{userId}/status&lt;/code&gt;, modify it’s implementation to actually add a new status, and add the &lt;code&gt;GET /users/{userId}/statuses&lt;/code&gt;.
You could also tag the original PUT as deprecated and add the 2 new operations (add + list).&lt;/p&gt;

&lt;p&gt;Both solution 3 and 4 are the one that I probably use most, but there’s a last option that could be interesting to investigate.&lt;/p&gt;

&lt;h1 id=&quot;solution-5-adding-to-an-independent-collection-resource&quot;&gt;Solution 5: Adding to an independent collection resource&lt;/h1&gt;

&lt;p&gt;If, for whatever actually relevant business domain reason, it is interesting to totally decorrelate user status management from user, this feature could be managed with an independent collection (list) resource.
A &lt;code&gt;PUT /activated-users/{userId}&lt;/code&gt; could be used to “put” the user in the “activated list”.
Deactivating a user could be done by removing a user from this list with a &lt;code&gt;DELETE /activated-users/{userId}&lt;/code&gt;.
And a &lt;code&gt;GET /activated-users&lt;/code&gt; could give you a list of activated users, maybe providing a representation that is slightly different from what &lt;code&gt;GET /users&lt;/code&gt; would return.&lt;/p&gt;

&lt;p&gt;In this use case it doesn’t work very well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Listing active users would be easily done by adding query filters to &lt;code&gt;GET /users&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We lose a bit the “visible relation” between users and their statuses that was more obvious with &lt;code&gt;/users/{userId}/statuses&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It’s not possible to handle more statuses (without ending with too many operations)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it’s still interesting to have this pattern in mind as it may work in some other contexts.&lt;/p&gt;

&lt;h1 id=&quot;do-not-hesitate-to-ask-questions&quot;&gt;Do not hesitate to ask questions&lt;/h1&gt;

&lt;p&gt;Now you know 5 different ways to handle operations such as “update a whatever’s kind of status”, it’s up to you to choose the solution that work for your use case in your context (and try to be consistent inside your API and across your APIs).&lt;/p&gt;

&lt;p&gt;That’s the second post I write thanks to someone’s question.
To be honest, I find it quite interesting to answer those questions in a blog post, so do not hesitate to send yours!
I cannot guarantee, I will respond to all them but it’s worth the try.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Last week, someone sent me a direct message on Twitter asking the following question: Let’s say you have a resource with an activated boolean property, how would you design the operation(s) allowing to activate or deactivate it? As this is a use case I often encounter during API design reviews or API design workshops, I thought it would be interesting to share my usual answer(s) with everyone.</summary></entry><entry><title type="html">Full Life Cycle API Management is not enough, let’s try 8K API Management</title><link href="https://apihandyman.io/full-life-cycle-api-management-is-not-enough-lets-try-8k-api-management/" rel="alternate" type="text/html" title="Full Life Cycle API Management is not enough, let’s try 8K API Management" /><published>2021-11-17T00:00:00-06:00</published><updated>2021-11-17T00:00:00-06:00</updated><id>https://apihandyman.io/full-life-cycle-api-management-is-not-enough-lets-try-8k-api-management</id><content type="html" xml:base="https://apihandyman.io/full-life-cycle-api-management-is-not-enough-lets-try-8k-api-management/">&lt;p&gt;You didn’t knew that API Management was old and you needed a “Full Life Cycle” API management solution to help you achieve your API strategy?
Well, I didn’t.
To be honest, though the term is quite old, I didn’t realized until recently that “Full Life Cycle API Management” started to replace simple “API Management”, at least in software vendor communications.
But what if I tell you that this “Full Life Cycle” version is already dead?
What if I tell you that you need 8K API Management?
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-full-life-cycle-api-management&quot;&gt;What is (Full Life Cycle) API Management?&lt;/h1&gt;

&lt;p&gt;When someone says “API Management”, that often means “exposing APIs on an API Gateway and possibly put them on a developer portal”.
It’s very rare that it actually means “the process of creating and publishing web application programming interfaces, enforcing their usage policies, controlling access, nurturing the subscriber community, collecting and analyzing usage statistics, and reporting on performance.” (&lt;a href=&quot;https://en.wikipedia.org/wiki/API_management&quot;&gt;Wikipedia&lt;/a&gt;).
That definition is wider, it’s about process, how you create and publish web APIs, and not only tools.
It’s more precise, APIs are exposed on a gateway in order to enable access control.
And It also includes concerns that goes beyond exposition itself, like taking care of the consumer (subscriber) community.&lt;/p&gt;

&lt;p&gt;Full Life Cycle API Management goes a little bit further but not that much, as show in the various definitions below:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Source&lt;/th&gt;
      &lt;th&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.gartner.com/reviews/market/full-life-cycle-api-management&quot;&gt;Gartner&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Full life cycle application programming interface (API) management is about the planning, design, implementation, testing, publication, operation, consumption, maintenance, versioning and retirement of APIs.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.axway.com/en/products/api-management/full-lifecycle-api-management&quot;&gt;Axway&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Full lifecycle API management is the entire lifespan of an API that begins at the planning stage and ends when an API is retired. It provides the platform for digital strategy, building ecosystems, and running an effective API program.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.mulesoft.com/resources/api/what-is-full-lifecycle-api-management&quot;&gt;MuleSoft&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Full API lifecycle management is the process of overseeing an API from its creation to retirement across its full life span. This includes everything from designing, publishing, documenting, securing, and analyzing APIs.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://wso2.com/what-is-full-lifecycle-api-management/&quot;&gt;WSO2&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;An APIs goes through different stages in its lifespan until it is retired. Full lifecycle API management solutions provide the means to manage these stages as well as the transition from one stage to another.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;With Full Life Cycle API Management, we get a more complete definition of the “process of creating and publishing” APIs, it’s about their “planning, design, implementation, testing, publication, operation, consumption, maintenance, versioning and retirement”. 
The process is about managing APIs from their conception to their death.&lt;/p&gt;

&lt;p&gt;The latest Gartner Magic Quadrant for Full Life Cycle API Management mostly lists vendors providing an “API Management” solution, hence an API Gateway and possibly a develop portal.
Such vendors are for instance Axway, Google (Apigee) or Microsoft.
But there are 2 vendors that are not API gateway vendors: SmartBear and Postman, they both provide API design, documentation, mocking and testing solutions.
That’s the first crack in the Full Life Cycle API Management building we’ve known for years.
These 2 providers show that Full Life Cycle API Management is more than just the basic solution of API Management (All in one API Management solution) we have seen these last years.
And it’s even more than that.
Indeed, Full Life Cycle API Management is dead, long live 8K API Management.&lt;/p&gt;

&lt;h1 id=&quot;what-is-8k-api-management&quot;&gt;What is 8K API Management?&lt;/h1&gt;

&lt;p&gt;Why the term 8K?
It’s a reference to the TV domain: once there was Full HD, then 4K then 8K.
More and more pixels, allowing crisper image with higher definition but also larger ones, showing us more than we could seen before.&lt;/p&gt;

&lt;p&gt;Full Life Cycle API Management has been monopolized by all in one API Gateway based tools, narrowing our vision.
But none of them is actually able to cover efficiently the full life cycle, the presence of SmartBear and Postman in the Gartner Magic Quadrant is the visible part of the iceberg.
Tools such as &lt;a href=&quot;https://stoplight.io/studio/&quot;&gt;Stoplight Studio&lt;/a&gt; (a GUI to design API) or &lt;a href=&quot;https://microcks.io/&quot;&gt;Microcks&lt;/a&gt; (API mocking) are a few among many others that you could take advantage to fully cover the Full Life Cycle API Management.&lt;/p&gt;

&lt;p&gt;The “Full life cycle” term is also narrowing our vision to the life and death of APIs, forgetting what is needed around all that.
The whole API governance space definitely lacks tools.
As I stated in an earlier post, &lt;a href=&quot;/we-need-specialized-tools-for-api-design-reviews/&quot;&gt;we need tools for API design reviews&lt;/a&gt;, and that’s only an example.&lt;/p&gt;

&lt;p&gt;And more than tools, don’t forget that “however you call it API management” is not only about tools but also people.
How do you make them realize how API can help their company, how do you teach/train/coach people to plan, design, … the right APIs the right way?&lt;/p&gt;

&lt;p&gt;This is 8K API Management.
API Management with higher definition and wider scope.
API Management with more specialized tools, covering more concerns. 
API Management not only focusing on tools but also people.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">You didn’t knew that API Management was old and you needed a “Full Life Cycle” API management solution to help you achieve your API strategy? Well, I didn’t. To be honest, though the term is quite old, I didn’t realized until recently that “Full Life Cycle API Management” started to replace simple “API Management”, at least in software vendor communications. But what if I tell you that this “Full Life Cycle” version is already dead? What if I tell you that you need 8K API Management?</summary></entry><entry><title type="html">We need to talk: OpenAPI 3 is 4 years old, but Swagger 2 is still predominant</title><link href="https://apihandyman.io/we-need-to-talk-openapi-3-is-4-years-old-but-swagger-2-is-still-predominant/" rel="alternate" type="text/html" title="We need to talk: OpenAPI 3 is 4 years old, but Swagger 2 is still predominant" /><published>2021-11-10T00:00:00-06:00</published><updated>2021-11-10T00:00:00-06:00</updated><id>https://apihandyman.io/we-need-to-talk-openapi-3-is-4-years-old-but-swagger-2-is-still-predominant</id><content type="html" xml:base="https://apihandyman.io/we-need-to-talk-openapi-3-is-4-years-old-but-swagger-2-is-still-predominant/">&lt;p&gt;While quickly doing a first scan of latest Postman State of the API Report , I did my Spock face, raising an eyebrow.
Indeed, I read that after JSON Schema, “The next most popular specifications were Swagger 2.0 (54%) and OpenAPI 3.0 (40%)”.
To be honest and based on my own experience, it’s not totally surprising, I’m still hearing/reading “can you check that Swagger” everyday.
But why the 4 years old OpenAPI 3 is still struggling to surpass the good old Swagger 2?
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;swagger-vs-openapi-started-in-2017&quot;&gt;Swagger vs OpenAPI started in 2017&lt;/h1&gt;

&lt;p&gt;The Swagger Specification and the OpenAPI Specification are not actual competitors, the latter is the most recent version of the former.
It is (or they are) a machine readable format allowing to describe REST(ish) HTTP based APIs.
The Swagger Specification was incidentally created in 2011 during the development of &lt;a href=&quot;https://www.wordnik.com/&quot;&gt;Wordnik&lt;/a&gt;, an online dictionary, because of the need for automation of API documentation and client SDK generation.
At that time, the tip of the Swagger iceberg was Swagger UI, a Web UI for API documentation powered by a JSON file containing a machine readable description of an API; this description being generated thanks to some annotations in the implementation.&lt;/p&gt;

&lt;p&gt;But at that time, most people, myself included, were not aware of the underlying API description format until Swagger 2 was released in 2014.
A new tool, Swagger Editor, and the possibility of using human friendly YAML in addition to JSON made this API description format a thing.
It could be written instead of generated and so be used in a design first approach.
But this format has a wide range of use from documentation generation or gateway configuration to design rules enforcement, and that expands regularly.
That format actually changed my life, API Handyman and my current self would probably not be there without this milestone, but that’s another story.&lt;/p&gt;

&lt;p&gt;By the end of 2015, SmartBear who now owns the &lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger brand and tools&lt;/a&gt;, donated the Swagger Specification to the &lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI Initiative&lt;/a&gt;, “a consortium of forward-looking industry experts who recognize the immense value of standardizing on how APIs are described”. Besides SmartBear, this organization has founding members such as Google, IBM and Microsoft.
In January 2016, the Swagger Specification was “renamed” the OpenAPI Specification.
Basically, it was still the exact same format with its version indicated with a &lt;code&gt;swagger: &quot;2.0&quot;&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;The first true version the OpenAPI Specification, the version 3.0, was released in 2017, a year and a half after the creation of the OpenAPI Initiative.
This evolution came with some welcomed breaking changes, the  most visible one being the version indicator which became &lt;code&gt;openapi: &quot;3.0&quot;&lt;/code&gt;.
This single modification was officially marking the beginning of a new era, goodbye Swagger Spec, hello OpenAPI Spec.&lt;/p&gt;

&lt;p&gt;But the transition was (and is still) not that simple.&lt;/p&gt;

&lt;h1 id=&quot;how-is-it-going-in-2021&quot;&gt;How is it going in 2021?&lt;/h1&gt;

&lt;p&gt;4 years later, Postman State of API 2021 report states that after JSON Schema, “The next most popular specifications were Swagger 2.0 (54%) and OpenAPI 3.0 (40%)”.
Let’s be honest, that’s not good, but maybe OpenAPI number is slowly but surely growing?
If we compare the responses to the “Which API specification do you use? (multiple possible answers)” question in Postman’s &lt;a href=&quot;https://www.postman.com/state-of-api-report-2020.pdf&quot;&gt;2020 (page 31)&lt;/a&gt; and &lt;a href=&quot;https://www.postman.com/assets/api-survey-2021/postman-state-of-api-2021.pdf&quot;&gt;2021 (page 44)&lt;/a&gt; reports, we have the following numbers:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Swagger&lt;/th&gt;
      &lt;th&gt;OpenAPI&lt;/th&gt;
      &lt;th&gt;Delta&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2020&lt;/td&gt;
      &lt;td&gt;43%&lt;/td&gt;
      &lt;td&gt;28%&lt;/td&gt;
      &lt;td&gt;15%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021&lt;/td&gt;
      &lt;td&gt;54%&lt;/td&gt;
      &lt;td&gt;40%&lt;/td&gt;
      &lt;td&gt;14%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The number of people using Swagger has &lt;em&gt;increased&lt;/em&gt; (what the??) by 11% while OpenAPI has increased by 12%, the delta between OpenAPI and Swagger is relatively stable around 15%.
&lt;em&gt;Note that I had to guess 2020 numbers from the graphics, as they are not explicitly written in this report.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the OpenAPI community has a problem, there are more people using Swagger in 2021 than in 2020.
Maybe there’s no real increase, it may be due to the fact there are more respondent in 2021 than in 2020, giving a more realistic view on reality…
But that would mean the number of OpenAPI users are stagnating.&lt;/p&gt;

&lt;p&gt;However I look at the numbers and the hypothesis I could do, I can be sure of one thing: there are more people using Swagger Spec than using OpenAPI Spec and, without more information, it does not seem to want to change.
What can be done about it?
While tempting, I don’t think it will be solved with pitchforks and Swagger jars.
So, What can be done about it?
Talk more about the OpenAPI Spec (formerly known as Swagger Spec)?&lt;/p&gt;

&lt;p&gt;Solutions to unknown, or maybe nonexisting problems are usually useless solutions.
Indeed, before finding solutions, we need to know what is the actual problem (or the actual problems).&lt;/p&gt;

&lt;p&gt;So a first step could be to ask the question: why are you still using Swagger 2 instead of OpenAPI 3?
While I don’t have everyone’s answer, I can share what I’ve seen.&lt;/p&gt;

&lt;h1 id=&quot;why-swagger-still-surpasses-openapi&quot;&gt;Why Swagger still surpasses OpenAPI&lt;/h1&gt;

&lt;p&gt;Swagger already had a lot of traction in 2017 when OpenAPI 3 was released, the Swagger tools themselves were (and are still) quite popular.
Many tools were created around the Swagger specification and many tools were supporting it.
This strength actually became a weakness for the transition.&lt;/p&gt;

&lt;h2 id=&quot;tools-are-slow-to-evolve&quot;&gt;Tools are slow to evolve&lt;/h2&gt;

&lt;p&gt;While there were breaking changes brought by OpenAPI 3, there were just a clarification and enhancement of Swagger 2, quite simple to get.
Even converting a Swagger 2 file to OpenAPI 3 is quite simple.
But if that’s simple at the spec level itself, it’s less simple at tools level.
It actually took time for Open Source and Vendor tools to support the new OpenAPI 3 version.
It also took, and still takes, time for users to upgrade too. 
Some were quick, some were slow, some are still stuck.&lt;/p&gt;

&lt;p&gt;For instance, the API gateway I currently use in my company, which was supporting the use of Swagger 2, got OpenAPI 3 (partial) support only in 2019.
But after that, it took us some time to make evolve the tooling we had built around our gateway solution, and so OpenAPI 3 was actually only available in 2020… virtually.
Indeed, if the OpenAPI 3 compliant gateway was in our software catalog and our tools were up to date, our internal customers could only get access OpenAPI 3 features after upgrading their gateways.
It took several months to update them.
And I know places where bumping to the “latest” version of a solution takes even more time and so they are still stuck with Swagger 2 (and they will have to make all their tools compatible with the new OpenAPI 3 version).&lt;/p&gt;

&lt;p&gt;Though a few teams were ahead of time, already using OpenAPI 3 during design and downgrading their contract to Swagger 2 for deployment, eagerly waiting for the gateway update, it’s not because we propose tools supporting OpenAPI 3 that they will be actually used as soon as they are available (they actually still support Swagger 2).
I work with teams who were waiting the upgrade of the platform… but didn’t have the time to make the transition yet.
I work also with teams having a code first approach (and if you read this blog regularly, &lt;a href=&quot;/6-reasons-why-generating-openapi-from-code-when-designing-and-documenting-apis-sucks/&quot;&gt;you know what I think about it&lt;/a&gt;), upgrading their code to generate OpenAPI 3 instead of Swagger 2 was not a priority at all.
I even have seen teams willing to pass to OpenAPI 3 but blocked by existing frameworks using outdated libraries.
So, in 2021 some teams were at last happily transitioning to OpenAPI 3, some are still waiting and some are totally stuck with Swagger 2.&lt;/p&gt;

&lt;p&gt;Switching to OpenAPI 3 requires efforts to everyone on the chain, that’s why Swagger 2 is till predominant.
But that’s not the only reason.&lt;/p&gt;

&lt;h2 id=&quot;confusion-and-habits&quot;&gt;Confusion and habits&lt;/h2&gt;

&lt;p&gt;OpenAPI does not only brings breaking changes, it revealed existing confusion and brought a new name.&lt;/p&gt;

&lt;p&gt;Most people were (and some are still) not aware that inside “Swagger” you had the tools (library and UI) AND the specification, two separate concepts.
To make it even more short, for most people “Swagger” is just “Swagger UI”.
Do all the people who responded to Postman’s question “Do you use Swagger” know the subtile difference?
I hope so as it was under a “API specification” question, but I have no clue.
What I’m sure of, is that in 2021 I still have to explain the OpenAPI/Swagger stuff and not only to business analysts but also developers (and yes I’m working with business analyst on API design).&lt;/p&gt;

&lt;p&gt;If naming thing is hard, changing something’s name is just a nightmare.
Let’s sweep under the rug the “&lt;em&gt;OpenAPI&lt;/em&gt; Specification” vs the “&lt;em&gt;Open API&lt;/em&gt; Initiative”, or was it the other way round?
Hopefully that’s settle now everything is “&lt;em&gt;OpenAPI&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;“But WTF is OpenAPI?”.
In organization who launched their API initiative in the Swagger era (that actually lasted long after OpenAPI 3 release due to what is said above about tools), everyone talks about “Swagger”.
They’re not designing APIs, they’re not defining API contracts, they’re writing or generating Swaggers.
They’s deploying Swaggers …
Not OpenAPI.
Even some VENDORS, are still talking about “Swagger”, I’m always the annoying customer telling them “That’s OpenAPI now, do you support OpenAPI 3 by the way?”.&lt;/p&gt;

&lt;p&gt;People are used to Swagger and habits die hard.&lt;/p&gt;

&lt;h1 id=&quot;what-about-you&quot;&gt;What about you?&lt;/h1&gt;

&lt;p&gt;All this is based on my experience, but how much is this universally “true”?
My experience does not make this an actual scientific fact.
So now it’s your turn, why are you still using Swagger 2 instead of OpenAPI 3?&lt;/p&gt;

&lt;p&gt;PS: I still keep the idea of pitchforks and Swagger jars, we never know, they could be useful once we’ll know more about the actual problems.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">While quickly doing a first scan of latest Postman State of the API Report , I did my Spock face, raising an eyebrow. Indeed, I read that after JSON Schema, “The next most popular specifications were Swagger 2.0 (54%) and OpenAPI 3.0 (40%)”. To be honest and based on my own experience, it’s not totally surprising, I’m still hearing/reading “can you check that Swagger” everyday. But why the 4 years old OpenAPI 3 is still struggling to surpass the good old Swagger 2?</summary></entry><entry><title type="html">Choosing between birthDate and dateOfBirth has important implications for your API</title><link href="https://apihandyman.io/choosing-between-birthdate-and-dateofbirth-has-important-implications-for-your-api/" rel="alternate" type="text/html" title="Choosing between birthDate and dateOfBirth has important implications for your API" /><published>2021-11-03T00:00:00-05:00</published><updated>2021-11-03T00:00:00-05:00</updated><id>https://apihandyman.io/choosing-between-birthdate-and-dateofbirth-has-important-implications-for-your-api</id><content type="html" xml:base="https://apihandyman.io/choosing-between-birthdate-and-dateofbirth-has-important-implications-for-your-api/">&lt;p&gt;On LinkedIn, someone asked me what to choose between &lt;code&gt;birthDate&lt;/code&gt; or &lt;code&gt;dateOfBirth&lt;/code&gt;.
That looks like a very simple question, but it’s absolutely not.
Choosing between two names is the tree that hides the forest.
Besides having impacts on understandability, choosing a name can have impacts on naming patterns, data, or privacy which are quite important topics for APIs. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Banner photography: &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Contrasting_Tree_Types_Coexist_in_a_Forest.jpg&quot;&gt;Contrasting Tree Types Coexist in a Forest&lt;/a&gt; by &lt;a href=&quot;https://commons.wikimedia.org/wiki/User:Wingchi&quot;&gt;Wingchi&lt;/a&gt;. &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/2.5/deed.en&quot;&gt;Creative Commons Attribution-Share Alike 2.5 Generic&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;is-that-us-english&quot;&gt;Is that US english?&lt;/h1&gt;

&lt;p&gt;As the &lt;code&gt;birthDate&lt;/code&gt; or &lt;code&gt;dateOfBirth&lt;/code&gt; question followed my Excuse my French API post, and as it is a debate I often have with other ESL API designers, I wanted to check what is said in US english: “birth date” (&lt;code&gt;birthDate&lt;/code&gt;), “birthdate” (&lt;code&gt;birthdate&lt;/code&gt;) or “date of birth” (&lt;code&gt;dateOfBirth&lt;/code&gt;).
While “birth date” does not seem that common (compared to “birthdate”), they are all acceptable terms to represent “the date on which a person was born” (Oxford US english dictionary).
OK, but which one is the “good” one?
Well, assuming that “date of birth” seems to be used on official documents, it could make sense to use this option.
But is it as simple as that?&lt;/p&gt;

&lt;h1 id=&quot;type-as-prefix-or-suffix&quot;&gt;Type as prefix or suffix&lt;/h1&gt;

&lt;p&gt;The initial “&lt;code&gt;birthDate&lt;/code&gt; or &lt;code&gt;dateOfBirth&lt;/code&gt;” question leads to another question: when explicitly typing a property, by adding its type to its name, should it be a prefix or a suffix?
As I’m a bit obsessed with consistency, once I’ve seen a &lt;code&gt;dateOfBirth&lt;/code&gt; property, I expect to see all other date properties using the &lt;code&gt;dateOf&lt;/code&gt; pattern, &lt;code&gt;dateOfSubcription&lt;/code&gt; for instance.
And if it’s &lt;code&gt;birthDate&lt;/code&gt;, I’ll expect to see &lt;code&gt;subscriptionDate&lt;/code&gt;.
But more than that, as I am a consistency extremist, I may expect all “typed” properties to use the same pattern, for instance &lt;code&gt;subscriptionNumber&lt;/code&gt; or &lt;code&gt;numberOfsubscription&lt;/code&gt;.
In such a case choosing one form or another can have major impacts on your API (or APIs) look and feel.
OK, but which one is the “good” one?&lt;/p&gt;

&lt;p&gt;Using a suffix, is actually the most common pattern: I’ve seen much &lt;code&gt;userId&lt;/code&gt; and not a single &lt;code&gt;idOfUser&lt;/code&gt;.
But that’s not the only reason why I would recommend to use the suffixed version.
Using a suffix put the generic part of a name at the end of it and the specific one at the beginning.
Using suffixes, I get the most important information first when reading names.
But more important, when properties are sorted by name, it’s easier to see functionally related properties because they are close to each others, while properties get sorted by type when using prefixes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prefix:
    &lt;ul&gt;
      &lt;li&gt;dateOfSubscription&lt;/li&gt;
      &lt;li&gt;idOfBankAdvisor&lt;/li&gt;
      &lt;li&gt;idOfUser&lt;/li&gt;
      &lt;li&gt;numberOfSubscription&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Suffix:
    &lt;ul&gt;
      &lt;li&gt;bankAdvisorId&lt;/li&gt;
      &lt;li&gt;subscriptionDate&lt;/li&gt;
      &lt;li&gt;subscriptionNumber&lt;/li&gt;
      &lt;li&gt;userId&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The suffix pattern also leads to shorter and less complex names: what if I want to represent a “user’s date of birth”?
With the suffix option, that’s a &lt;code&gt;userBirthDate&lt;/code&gt; (or &lt;code&gt;userBirthdate&lt;/code&gt;), with the prefix that’s a &lt;code&gt;dateOfBirthOfUser&lt;/code&gt; which is a bit pompous, or possibly a &lt;code&gt;userDateOfBirth&lt;/code&gt; which screws the prefix idea and kills the hierarchy of information in the name.&lt;/p&gt;

&lt;h1 id=&quot;data-format-andor-value&quot;&gt;Data format and/or value&lt;/h1&gt;

&lt;p&gt;As an API designer or an API design reviewer, I always double check what is the format and value of a property.
In that case, if it’s the first time a &lt;code&gt;whateverDate&lt;/code&gt; or &lt;code&gt;dateOfWhatever&lt;/code&gt; is added into an API, it’s time to choose a date format that will be applied to all other dates.
Will you use a Unix timestamp (number of seconds since 1st January of 1970) or an ISO8601 string.
And in the ISO case, will you use the time precision with timezone or not?
If that format already has been defined, you’ll obviously have to use it.&lt;/p&gt;

&lt;p&gt;And that’s not only for dates but for any data.
If we’re talking about a &lt;code&gt;userId&lt;/code&gt;, what is the actual value of a user’s id?
Is this the id column in the &lt;code&gt;USER&lt;/code&gt; table or something else?
Maybe a more well known value, shared by various systems using the API.
For a &lt;code&gt;currency&lt;/code&gt;, is this a internal currency code? a label? (in which language?) An ISO code?&lt;/p&gt;

&lt;p&gt;I will not answer all those questions here, I’ll keep that for other post, the one thing to remember here is that a property is more than just a name.
And speaking of that, thinking beyond just names, we didn’t talk about “why date of birth”?&lt;/p&gt;

&lt;h1 id=&quot;back-to-needs-what-about-privacy&quot;&gt;Back to needs: what about privacy?&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The tree hides the forest&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;French saying&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed, all the above and especially the naming discussion is only the tree that hides the forest, it lured us away from a real and important problem.
As an API designer or API design reviewer, seeing such “personal data” (as europeans say in GDPR data privacy regulation) or “personal identifiable information” (PII in the US), I always wonder if we actually need it in the API before discussing its name.
Maybe “date of birth” can be replaced by a fuzzier “birthday” (month and day but without year) or just an “age”.
Maybe it can be removed if it is not absolutely needed.&lt;/p&gt;

&lt;h1 id=&quot;choosing-a-name-is-sometimes-more-than-what-it-seems&quot;&gt;Choosing a name is sometimes more than what it seems&lt;/h1&gt;

&lt;p&gt;So, in that case I may simply not have to choose between &lt;code&gt;birthDate&lt;/code&gt; or &lt;code&gt;dateOfBirth&lt;/code&gt; because the property would not be needed.
Designing APIs, delivering API design training sessions or doing API design reviews taught me that such seemingly simple question can have important implications for an API.
As you have seen, choosing a name is sometimes more than just choosing a name.
Always expand the discussion, never get stuck at a too narrow “just name” level, evaluate the local but also global implications of your choice to include or not a data, to define its value/format, and how to name it using a pattern and/or hierarchy.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">On LinkedIn, someone asked me what to choose between birthDate or dateOfBirth. That looks like a very simple question, but it’s absolutely not. Choosing between two names is the tree that hides the forest. Besides having impacts on understandability, choosing a name can have impacts on naming patterns, data, or privacy which are quite important topics for APIs.</summary></entry><entry><title type="html">We are not Amazon or Github, but maybe we should … or not</title><link href="https://apihandyman.io/we-are-not-amazon-or-github-but-maybe-we-should--or-not/" rel="alternate" type="text/html" title="We are not Amazon or Github, but maybe we should … or not" /><published>2021-10-27T00:00:00-05:00</published><updated>2021-10-27T00:00:00-05:00</updated><id>https://apihandyman.io/we-are-not-amazon-or-github-but-maybe-we-should--or-not</id><content type="html" xml:base="https://apihandyman.io/we-are-not-amazon-or-github-but-maybe-we-should--or-not/">&lt;p&gt;One day I can say “Amazon did that, we should do it too” and may be quite displeased to hear “but, we’re not Amazon”.
And the next one, I can be quite displeased to hear “Github did that, we should do it too” and respond  “it’s not because Github did it, that we should do it too”. 
Why such inconsistency?
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-we-should-be-like-amazon&quot;&gt;Why we should be like Amazon&lt;/h1&gt;

&lt;p&gt;Almost 20 years ago (😱), in 2002, Jeff Bezos, now former CEO of Amazon, sent a mandate to all Amazon employees.
This mandate is one of the centerpiece of my API conference bingo with Conway’s law.
In substance, it was saying 2 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All teams MUST communicate through “service interfaces” (they were not called API at that time)&lt;/li&gt;
  &lt;li&gt;All those “service interfaces” MUST be design from the ground with externalization in mind. Each one could be put in customers hands at any moment after its creation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While there’s not much debate about “APIfying all the things” in 2021, the second item is the one that usually triggers the “but we’re not Amazon” remark.
It actually means you make no difference between internal and external API.
Why should you do that and not keep creating highly specific/ugly/terrible internal APIs or use different look and feel for internal vs external APIs, and only work hard on public APIs?&lt;/p&gt;

&lt;p&gt;There are many reasons, here are a few of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sooner or later, you’ll provide APIs to “others”: some external contractors, the team next to you, another business unit, a partner, or a customer. It’s not a possibility, it’s a fact.&lt;/li&gt;
  &lt;li&gt;That’ll improve your internal API quality: Thinking that someone outside of your organization will consume your API can help people to actually focus on its design and really make it usable by anyone.&lt;/li&gt;
  &lt;li&gt;That’ll reduce the risk of public API failure: You’ll learn by working hard on private APIs, if you wait to go public to learn, you’ll regret it; nobody will want to use your terrible APIs.&lt;/li&gt;
  &lt;li&gt;That’ll reduce your time to market: It’ll take a few seconds to go public with a clean private API while it may take weeks if not months to rethink/clean/hide the mess before exposing it to the outside. And that could impact not only the design of your API but also its architecture.&lt;/li&gt;
  &lt;li&gt;That’ll ease maintenance: It’s not that easy to make a single API and its implementation evolve but imagine the same implementation exposed 2 times. That multiply problems by 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, that’s why I say “we should do like Amazon”, we should treat private APIs like public APIs and actually only create one and use it in both contexts.&lt;/p&gt;

&lt;p&gt;Note that this famous mandate ends by “those who don’t do that will be fired”, that’s level 0 of management. 
Threatening people like this is totally stupid and MUST never be done.
In this case, it’s even more stupid because this idea is just brilliant.&lt;/p&gt;

&lt;p&gt;To read more about the memo and how it went public, you should read this &lt;a href=&quot;https://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/&quot;&gt;post of my good friend Kin Lane, the API Evangelist&lt;/a&gt;.
I suggest you read also Jeff Lawson’s “Ask Your Developer” book, the first chapters do a great job in explaining this “API all the things” spirit and the origin of the mandate (and though I didn’t finished it yet, that’s a great book).&lt;/p&gt;

&lt;h1 id=&quot;why-we-shouldnt-be-like-github&quot;&gt;Why we shouldn’t be like Github&lt;/h1&gt;

&lt;p&gt;Ok, we “should do like Amazon”, but why be not be like Github and do GraphQL APIs?
In 2016, Github announced their &lt;a href=&quot;https://github.blog/2016-09-14-the-github-graphql-api/&quot;&gt;GraphQL API&lt;/a&gt;.
That obviously triggered many “Github is doing GraphQL API, let’s do it too”.&lt;/p&gt;

&lt;p&gt;In such context, I ask “what problem are you trying to solve?”.
Do you have ten of thousands consumers doing gazillions of API call combinations?
Do you have a product that people basically need to address like a database?
No?
And do you understand the implication of providing a GraphQL API regarding security, performance and scalability?
No?&lt;/p&gt;

&lt;p&gt;Then, maybe you should stick to a good old REST API.
I’m not against GraphQL, it’s there in my toolbox, but I will only use it if that’s a relevant solution to a clearly identified problem.
That’s why I say “We’re not Github”.&lt;/p&gt;

&lt;h1 id=&quot;the-42-answer-of-architects-it-depends&quot;&gt;The 42 answer of architects: it depends&lt;/h1&gt;

&lt;p&gt;As you can see, I’m not just saying we should or shouldn’t do like Amazon or Github.
We can’t just decide to do something because some company has done it.
We can’t just decide to not do something because (we think) we’re completely different from some company who has done it.
The question is not “should we do like X” but “should we use the same solution as X to solve a problem in our context”.
Behind any choice, there must be a context, a problem, a reasoning, not just blind and thoughtless hype.&lt;/p&gt;

&lt;p&gt;PS: If you wonder what’s this strange Stackoverflow keyboard on this post’s banner read &lt;a href=&quot;https://stackoverflow.blog/2021/09/28/become-a-better-coder-with-this-one-weird-click/&quot;&gt;this&lt;/a&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">One day I can say “Amazon did that, we should do it too” and may be quite displeased to hear “but, we’re not Amazon”. And the next one, I can be quite displeased to hear “Github did that, we should do it too” and respond “it’s not because Github did it, that we should do it too”. Why such inconsistency?</summary></entry><entry><title type="html">Anarchy in the resource path</title><link href="https://apihandyman.io/anarchy-in-the-resource-path/" rel="alternate" type="text/html" title="Anarchy in the resource path" /><published>2021-10-20T00:00:00-05:00</published><updated>2021-10-20T00:00:00-05:00</updated><id>https://apihandyman.io/anarchy-in-the-resource-path</id><content type="html" xml:base="https://apihandyman.io/anarchy-in-the-resource-path/">&lt;p&gt;While doing API design reviews and API design training sessions, I often see resource paths designed in an anarchic way.
By anarchic, I mean their various levels seem to have been chosen randomly or some of them seem at awkward places. 
But why should such paths should be considered wrong?
Let’s see a few examples of how to not design resource paths to talk about it.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-resource-and-a-path&quot;&gt;What is a resource and a path&lt;/h1&gt;

&lt;p&gt;In a REST API, a path like &lt;code&gt;/this/is/a/path&lt;/code&gt; identifies a unique resource and this resource will be manipulated thought standard HTTP methods.
A &lt;code&gt;GET /this/is/a/path&lt;/code&gt; means “read that resource” and &lt;code&gt;DELETE /this/is/a/path&lt;/code&gt; means delete that resource.
But beyond that HTTP-esque description, a resource is supposed to represent a business concept.&lt;/p&gt;

&lt;p&gt;A business concept could be an easily identifiable object or list of objects such as “user’s accounts”, or “an account”, or “an account’s transactions” in a banking API.
But sometimes, they’re not such obviously identifiable business objects, they could be processes like “user verification” or “loan simulation”.
Whatever their nature, these business concepts must be represented by a meaningful and easy to interpret path.
That seems an obvious platitude right?&lt;/p&gt;

&lt;h1 id=&quot;anarchic-paths&quot;&gt;Anarchic paths&lt;/h1&gt;

&lt;p&gt;Well, not quite.
Sometimes, during my API design reviews or training sessions,  I encounter paths that are not meaningful or not easy to interpret at all.
Here’s a selection of what I’ve seen.&lt;/p&gt;

&lt;h2 id=&quot;rpc-path&quot;&gt;RPC path&lt;/h2&gt;

&lt;p&gt;During my API Design 101 training session, the attendees work on a very simple but deadly use case: a product catalog.
An exercise consists in designing a path for the “catalog” and the “product” business concepts (or resources).
The only requirement is ensuring that each path allows to identify each resource in a unique way, some examples such as &lt;code&gt;/path&lt;/code&gt;, &lt;code&gt;/another/path&lt;/code&gt;, &lt;code&gt;/with/a/{variable}&lt;/code&gt; or &lt;code&gt;/{variable}/in/path&lt;/code&gt; are provided to help attendees understand the vast possibilities.&lt;/p&gt;

&lt;p&gt;And more often than not, one of the attendee designs an “RPC path” such as &lt;code&gt;/read/product/{productId}&lt;/code&gt;; I actually wait for that eagerly.
That allows me to stress and remind the fact that in a REST API, path are not there to literally represent the “functions” identified to fulfil a use case.
In a REST API, a “function” is represented by an HTTP method + a resource path, and that is not totally intuitive for beginner API designers.&lt;/p&gt;

&lt;p&gt;Fixing that is usually quite simple, just remove the “function part” of the path, but ensure that what is left is an actual business concept and the path is actually a good representation of it.&lt;/p&gt;

&lt;h2 id=&quot;stacked-path-parameters&quot;&gt;Stacked path parameters&lt;/h2&gt;

&lt;p&gt;Often but not always linked to RPC path, I often encounter path containing a stack of path parameters, &lt;code&gt;/getTransactions/{from}/{to}/{accountId}&lt;/code&gt; or &lt;code&gt;/transactions/{from}/{to}/{accountId}&lt;/code&gt; for instance.
In the first case, it is just a variation of previous case, but fixing it (hence removing the “get”) just leads to the second one.
This paths seems to represent the transactions of an account identified by its id (&lt;code&gt;accountId)&lt;/code&gt; between two dates (&lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;).
Note that I can guess that because &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; are fairly common names in such case and probably does not mean “from something to something that is not a date”.
I could be wrong, but the risk is low.
So what’s the problem?&lt;/p&gt;

&lt;p&gt;If we take for granted that filters on collections (lists) are mostly done using query parameters, this current form is the usual sign of “I don’t know there’s something called query parameters” (and maybe also a sign of “I generated my spec from code” by the way).
The most common representations used in such a case would be just &lt;code&gt;/transactions&lt;/code&gt; (the list of transactions) and would be used like this &lt;code&gt;/transactions?accountId={accountId}&amp;amp;from={from}&amp;amp;to={to}&lt;/code&gt; to filter that list on a subset of elements.&lt;/p&gt;

&lt;p&gt;If you consider that’s is totally normal to use path parameters to filter lists, you have another problem: all of them are mandatory.
That makes such a path highly specific.
What if you need to represent “all transactions” or “transactions between two dates”?
Well, you can add a &lt;code&gt;/transactions&lt;/code&gt; and a &lt;code&gt;/transactions/{from}/{to}&lt;/code&gt;.
But what if you want all transaction since the beginning of time to a given date?
What if you need to filter transactions on their type?
You’ll have to add new paths, many of them if you want to handle all possible combinations.
And all that to just represent various subsets of “transactions”.
Doing that will only make you API complex; better just say there are &lt;code&gt;/transactions&lt;/code&gt; and manage all possible filters as query params, that will help you and your consumers keep sanity.&lt;/p&gt;

&lt;p&gt;And if you want to make &lt;code&gt;accountId&lt;/code&gt; a required filter, read &lt;a href=&quot;/what-s-the-problem-with-required-query-parameters/&quot;&gt;What’s the problem with required query parameters?&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reverse-hierarchical-organization&quot;&gt;Reverse hierarchical organization&lt;/h2&gt;

&lt;p&gt;The previous example can also be a sign of “I don’t know that a path represents a hierarchy”.
You’ll see it more clearly with this example: &lt;code&gt;/transactions/accounts/{accountId}&lt;/code&gt;.
I often see this, it is supposed to represent “an account’s transactions”.
But this path literally describes “a list of transactions containing a list of accounts, each account being identified by accountId”. 
The correct path is &lt;code&gt;/accounts/{accountId}/transactions&lt;/code&gt;, a path is read from left to right (in english), the last element (&lt;code&gt;/transactions&lt;/code&gt;) describing the actual resource (a list of transactions).&lt;/p&gt;

&lt;h2 id=&quot;unclear-relationships&quot;&gt;Unclear relationships&lt;/h2&gt;

&lt;p&gt;Another example I often get during my API design 101 training session: &lt;code&gt;/catalog&lt;/code&gt; vs &lt;code&gt;/product/{productId}&lt;/code&gt;.
If we take for granted that a “catalog” is just a list of “product”, we don’t really see the connection between those two.
I would prefer a more consistent representation relying on hierarchy and represent them as &lt;code&gt;/products&lt;/code&gt; and &lt;code&gt;/products/{productId}&lt;/code&gt;.
You get the single element by just adding it’s id to the path representing its parent list.&lt;/p&gt;

&lt;h2 id=&quot;inconsistency-between-list-and-single-elements&quot;&gt;Inconsistency between list and single elements&lt;/h2&gt;

&lt;p&gt;And if you think that the solution is &lt;code&gt;/products&lt;/code&gt; vs &lt;code&gt;/product/{productId}&lt;/code&gt;, read &lt;a href=&quot;/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/&quot;&gt;/resources rules and /resource sucks … or is it the other way around?&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;my-rule-of-thumb&quot;&gt;My rule of thumb&lt;/h1&gt;

&lt;p&gt;A good path represents a business concept, such as “resource”, and not an action, such as “read resource”.&lt;/p&gt;

&lt;p&gt;A good path not only relies on semantic, choosing the right words, but also on organization.
A good path must represent a hierarchy, last elements describing the actual resource: &lt;code&gt;/resources/{resourceId}/sub-resources&lt;/code&gt; is a “sub resources” and not a “resources”.&lt;/p&gt;

&lt;p&gt;A list’s good path represents all possible subsets, taking advantage of query params to get only specif elements.
If &lt;code&gt;/resources&lt;/code&gt; represents “all resources”, it can also represent “resources of type X” with &lt;code&gt;/resources?type=X&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Good paths help together to understand how they are related and are guessable.
They must take advantage of hierarchy: &lt;code&gt;/resources&lt;/code&gt; contains &lt;code&gt;/resources/{resourceId}&lt;/code&gt; which contains &lt;code&gt;/resources/{resourceId}/sub-resources&lt;/code&gt;.
You can easily guess how to address parent from child and reverse.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">While doing API design reviews and API design training sessions, I often see resource paths designed in an anarchic way. By anarchic, I mean their various levels seem to have been chosen randomly or some of them seem at awkward places. But why should such paths should be considered wrong? Let’s see a few examples of how to not design resource paths to talk about it.</summary></entry><entry><title type="html">Excuse my French API, or being an English as a second language API designer</title><link href="https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer/" rel="alternate" type="text/html" title="Excuse my French API, or being an English as a second language API designer" /><published>2021-10-13T00:00:00-05:00</published><updated>2021-10-13T00:00:00-05:00</updated><id>https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer</id><content type="html" xml:base="https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer/">&lt;p&gt;This post is dedicated to all English as a Second, or Foreign, Language (ESL, EFL) API designers. 
Et tout spécialement mes compatriotes français!
Designing APIs is already not that easy when you design them using your native language.
But, it’s even more difficult when using a second one.
So let’s see how to avoid design frenglish, itaglish or whateverglish APIs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-should-i-care-about-english&quot;&gt;Why should I care about english&lt;/h1&gt;

&lt;p&gt;Your API is public, well unless your a government that MUST use local language because of some law, use english.
Why?
English is the lingua franca of software.
Using it will make your API easily understandable by most people using APIs on earth.
That’s quite a huge market you don’t want to miss.&lt;/p&gt;

&lt;p&gt;Your API is private?
My very first post was about &lt;a href=&quot;https://apihandyman.io/why-you-must-design-your-private-api-in-english/&quot;&gt;why (private) APIs should be designed in English&lt;/a&gt;.
To make it short: your private API will not be private forever, so better use english just like for public APIs.&lt;/p&gt;

&lt;p&gt;Ok, APIs MUST be design in english, but why should we really care about translations?
Well, it would be a pity to ruin the success of your API just because people actually don’t understand what it is talking about.
And once your API is consumed … it will be hard to fix its awkward whateverglish design.
So you better take care about english translation.&lt;/p&gt;

&lt;h1 id=&quot;when-should-i-use-english-during-design-process&quot;&gt;When should I use english during design process&lt;/h1&gt;

&lt;p&gt;In order to avoid loosing time when designing an API, I use the following path:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Analyse needs and decompose them to identify a list of goals/jobs to be done, the function that will compose the API using natural language and native language&lt;/li&gt;
  &lt;li&gt;Identify business concepts (resource) and action that apply to them (still using natural language and native language)&lt;/li&gt;
  &lt;li&gt;Translate the business concepts and action in english&lt;/li&gt;
  &lt;li&gt;Design resource paths (in english) and choose HTTP methods corresponding to actions&lt;/li&gt;
  &lt;li&gt;Model data in native language&lt;/li&gt;
  &lt;li&gt;Translate data in English&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s the actual method I describe in my book that allows to avoid HTTP heated discussion while investigating needs, I just added extra steps for translation.
The idea is the same, keeping the translation complexity AFTER the actual need investigation and design in order to avoid being polluted during that very important steps.
It’s easier to think and discuss using a language you master than English.&lt;/p&gt;

&lt;h1 id=&quot;api-design-translation-tips--tricks&quot;&gt;API Design translation tips &amp;amp; tricks&lt;/h1&gt;

&lt;p&gt;Here are a few tips and tricks that should help you avoid terrible translation mistakes.&lt;/p&gt;

&lt;h2 id=&quot;use-us-english&quot;&gt;Use US english&lt;/h2&gt;

&lt;p&gt;The lingua franca of software is not just “English”, but US English, don’t forget that during translation.&lt;/p&gt;

&lt;h2 id=&quot;hire-professional-translators&quot;&gt;Hire professional translators&lt;/h2&gt;

&lt;p&gt;For public APIs, if you’re not sure about your english, don’t think to much: hire professional translators.
For private APIs, that could be overkill but remember that sooner or later &lt;a href=&quot;https://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/&quot;&gt;your private APIs mays become public&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;take-advantage-of-more-or-less-official-translations&quot;&gt;Take advantage of more or less official translations&lt;/h2&gt;

&lt;p&gt;If you’re lucky enough you can find official translations for your domain.
You could take advantage of glossary but also be inspired by existing APIs or standard.
For instance, if you work in banking/finance, you should take a look at the ISO20022 standard.&lt;/p&gt;

&lt;h2 id=&quot;use-online-dictionary-wisely&quot;&gt;Use online dictionary wisely&lt;/h2&gt;

&lt;p&gt;Unfortunately, you won’t always find the ready to use translation and you’ll have to use one of the many online your language to english dictionaries.
But depending on the one you use and how you use it, the result may not be as good as expected.
Here’s how I proceed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I translate full sentences giving more context about the words I want to translate, using either https://www.linguee.fr/ (beware of the translations examples coming from non-english websites shown in Linguee’s results) and https://www.deepl.com/ (from the Linguee creator, pretty good one).&lt;/li&gt;
  &lt;li&gt;I check the definition of the english word found using a US English dictionary such as https://www.lexico.com/. If you don’t do that, you may have some really bad surprises&lt;/li&gt;
  &lt;li&gt;I do a final check by looking for the word I found using Google. Reading documents using the found word can help to choose between various options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, the idea is to never, ever just rely on word for word translation.&lt;/p&gt;

&lt;h2 id=&quot;translate-or-not-acronyms&quot;&gt;Translate (or not) acronyms&lt;/h2&gt;

&lt;p&gt;There are two types of acronyms, the ones that can be translated and the ones that can’t.
For instance, in french we use TVA for “Taxe sur la Valeur Ajoutée”, which can easily be translated into “Value Added Tax”, giving the VAT acronym.
VAT is being a well know acronym, across many countries, you can actually use it in your API design instead of TVA.&lt;/p&gt;

&lt;p&gt;But what about more specific concepts that only exists in your country?
I’w working with teams creating APIs in the employee savings domain.
This domain deals with highly specific concept; the PERCO, “Plan d’Epargne pour la Retraite COllectif”, for instance.
If I translate this literally, I get “Group Retirement Savings Plan” or GRSP … which means nothing for people outside of France AND for french people.
In that case, it would be better to keep the french acronym in the design, adding a description might help non french people to understand what this means.&lt;/p&gt;

&lt;p&gt;But just think about this last option: not using this highly specific acronym?
Could it be replaced by a more generic word like “saving plan”?
This is not something that will always work, but it’s worth the try because keeping acronym that are specific to your country could be a burden for your design and annoy many users.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">This post is dedicated to all English as a Second, or Foreign, Language (ESL, EFL) API designers. Et tout spécialement mes compatriotes français! Designing APIs is already not that easy when you design them using your native language. But, it’s even more difficult when using a second one. So let’s see how to avoid design frenglish, itaglish or whateverglish APIs.</summary></entry><entry><title type="html">We Need Specialized Tools For Api Design Reviews</title><link href="https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews/" rel="alternate" type="text/html" title="We Need Specialized Tools For Api Design Reviews" /><published>2021-10-06T00:00:00-05:00</published><updated>2021-10-06T00:00:00-05:00</updated><id>https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews</id><content type="html" xml:base="https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews/">&lt;p&gt;Doing an API design review is not only about that, but it will require, sooner or later, to analyze an interface contract.
Use the wrong tools to do so, and reviews will become a terrible, never-ending burden.
Use the right tools, and you’ll become a formidable machine, doing reviews at light speed, never missing the tiniest problem or question.
But, after dozens of reviews, you may realize that, despite using the “right” existing tools, the API space actually lacks API design reviews specialized tools.
&lt;!--more--&gt;
This post is a slightly write up of my “Taking advantage of OpenAPI for API design reviews” talk I gave at the 2021 API Specification Conference.&lt;/p&gt;

&lt;h1 id=&quot;reviewing-api-designs-helping-people&quot;&gt;&lt;del&gt;Reviewing API designs&lt;/del&gt; Helping people&lt;/h1&gt;

&lt;p&gt;I work with many different teams helping them create and evolve many different APIs.
I can do around 150 API design reviews per year on average.&lt;/p&gt;

&lt;p&gt;When I do an API design review, I’m not being the API police.
I’m here to help people create the best possible API in their context.
I’m here to provide guidance and help people grow their design skills so that one day I won’t be needed anymore.&lt;/p&gt;

&lt;p&gt;Though I’m not a API policeman, the closer to our API design guidelines the design is, the better.
Because having consistent APIs make them easier to use.
But that’s not the only thing to look at, an API must be reviewed beyond the guidelines.
It’s important to investigate what it is made for, what needs this API is supposed to fulfil.
And then to check if the design is actually responding to all that.
But not just “responding to all” that but doing it in the best possible fashion.
So, I also check if the design is easy to understand, easy to use and easy to evolve.&lt;/p&gt;

&lt;p&gt;And how do I do all that?
Well, by investigating business domain and IT concerns, asking stupid questions (tons of them), making people talk together, listening, showing empathy, challenging beliefs and ideas … and obviously analyzing interface contracts.&lt;/p&gt;

&lt;h1 id=&quot;analyzing-an-interface-contract&quot;&gt;Analyzing an interface contract&lt;/h1&gt;

&lt;p&gt;Depending on the size and number of APIs you review, the task of reviewing API designs will be more or less complicated.
But if analyzing a single interface contract can be quite complicated by itself, it can be even more complicated if it’s described in a non standard format such as a wiki page or a spreadsheet.
Hopefully most people I’m working with use the OpenAPI specification to describe their APIs.&lt;/p&gt;

&lt;h2 id=&quot;reading-openapi-files-is-a-terrible-idea&quot;&gt;Reading OpenAPI files is a terrible idea&lt;/h2&gt;

&lt;p&gt;I’ve seen people making API design reviews by directly reading OpenAPI files such as the one below.
That’s not something I actually do, you can give it a try, read this file and tell me what you think.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Let's read this OpenAPI file&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-design-reviews/motu-openapi.yaml&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;openapi: 3.0.0
info:
  title: MOTU
  version: 1.0.3_build156
  description: The Masters of the Universe Web Site API
paths:
  /v1/charsBySide:
    get:
      summary: charBySide
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sides'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-charById
      tags:
        - searchController
      parameters: []
      description: For &quot;all characters&quot; screen
    parameters: []
  /v1/charaters-with-name:
    get:
      summary: Search characters by name
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Char'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-characters-by-name
      description: For &quot;search by name&quot; screen
      parameters:
        - schema:
            type: string
          in: query
          name: name
          required: true
    parameters: []
  '/v1/tpyt/{year}/{type}':
    parameters:
      - schema:
          type: string
        name: year
        in: path
        required: true
      - schema:
          type: string
        name: type
        in: path
        required: true
    get:
      summary: Toys per year and type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/toysPerYearAndTypeDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-toys-per-year-year-type
      tags:
        - searchController
      description: ''
  /v1/search/flying/vehicles/with/filters:
    post:
      summary: List flying toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlyingToysResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Flying Toys Found
        '500':
          description: Internal Server Error
      operationId: post-flying-vehicles-byId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlyingFilters'
    parameters: []
  '/v1/sidekick/{name}':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
    get:
      summary: Get character's sidekick
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sidekick'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-characters-sidekick-name
  /v1/buildings/all:
    get:
      summary: Building toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingListDto'
      operationId: get-buildings
    parameters: []
  '/v2/episode/{num}/{year}/{producer}':
    parameters:
      - schema:
          type: string
        name: num
        in: path
        required: true
      - schema:
          type: string
        name: year
        in: path
        required: true
      - schema:
          type: string
        name: producer
        in: path
        required: true
    get:
      summary: get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode_Single'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-ep-num-year-producer
      tags:
        - tvShowController
      description: ''
  /v2/episodes:
    get:
      summary: List episodes
      tags:
        - tvShowController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producers'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-eps
      description: ''
    parameters: []
    post:
      summary: Insert episode in database
      operationId: post-v2-episodes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/episode-added'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-epsode'
      tags:
        - tvShowController
  /v1/search/ground/vehicles/with/filters:
    post:
      summary: Search ground vehicle toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroundToyResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: post-v1-ground-vehicles-with-filters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroundFilter'
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
    parameters: []
  /v1/buildings/filters:
    get:
      summary: Search buildings
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingListDto'
      operationId: get-v1-buildings-filters
      parameters:
        - schema:
            type: string
          in: query
          name: name
components:
  schemas:
    Char:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        toys:
          $ref: '#/components/schemas/toy'
        creation_dte:
          type: string
          format: date-time
        evil:
          type: boolean
        good:
          type: boolean
    toy:
      title: ''
      type: object
      properties:
        ToyId:
          type: string
        ToyType:
          type: number
          enum:
            - '1'
            - '2'
            - '3'
        ToyReference:
          type: string
        ToyOriginalPrice:
          type: string
        ToyManufacturer:
          type: string
        ToyName:
          type: string
    prd:
      title: ''
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        years:
          type: array
          items:
            $ref: '#/components/schemas/Years'
    Epsd:
      title: ''
      type: object
      properties:
        number:
          type: string
        title:
          type: string
        firstAir:
          type: number
    Years:
      title: ''
      type: object
      properties:
        year:
          type: string
        episodes:
          type: array
          items:
            $ref: '#/components/schemas/Epsd'
    Episode_Single:
      type: object
      properties:
        name:
          type: string
        first_air_date:
          type: string
        alternate_name_1:
          type: string
        alternate_name_2:
          type: string
    add-epsode:
      title: ''
      type: object
      properties:
        name:
          type: string
        firstArDate:
          type: string
        producerId:
          type: string
        year:
          type: integer
    SearchResponse:
      title: ''
      type: array
      items:
        $ref: '#/components/schemas/Char'
    Sides:
      title: ''
      type: object
      properties:
        good:
          type: array
          items:
            $ref: '#/components/schemas/SideChar'
        evil:
          type: array
          items:
            $ref: '#/components/schemas/SideChar'
    SideChar:
      title: ''
      type: object
      properties:
        id:
          type: string
        nom:
          type: string
        icon:
          type: string
    Sidekick:
      title: ''
      type: object
      properties:
        name:
          type: string
    FlyingFilters:
      title: Filters
      type: object
      properties:
        year:
          type: string
        brand:
          type: string
        name:
          type: string
        evil:
          type: boolean
        good:
          type: boolean
        id:
          type: string
    FlyingToysResponse:
      type: array
      items:
        $ref: '#/components/schemas/FlyingToy'
    FlyingToy:
      type: object
      properties:
        flyingToyName:
          type: string
        flyingToyBox:
          type: string
    toysPerYearAndTypeDto:
      title: toysPerYearAndTypeDto
      type: array
      items:
        $ref: '#/components/schemas/toy'
    GroundToyResponseDto:
      type: array
      items:
        $ref: '#/components/schemas/GroundToy'
    GroundToy:
      type: object
      properties:
        name:
          type: string
        boxArt:
          type: string
    GroundFilter:
      title: GroundFilter
      type: object
      properties:
        id:
          type: string
        manufacturer:
          type: string
    building:
      title: building
      type: object
      properties:
        name:
          type: string
        art:
          type: string
        width:
          type: number
        height:
          type: number
        depth:
          type: number
    BuildingListDto:
      title: BuildingListDto
      type: object
      properties:
        buildings:
          type: array
          items:
            $ref: '#/components/schemas/building'
    episode-added:
      title: episode-added
      type: string
    Producers:
      title: ''
      type: object
      properties:
        producers:
          $ref: '#/components/schemas/prd'
servers:
  - description: base path
    url: /api
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I don’t know how you feel, but reading this raw OpenAPI file do not really help me to make a complete review of the design.
Oh, I can still spot useful but disturbing pieces of information based on the &lt;code&gt;info&lt;/code&gt; section:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Because of version number &lt;code&gt;1.0.3_build156&lt;/code&gt;, I can guess this file has been generated from code, which is usually not a good sign. Maybe the team has coded everything and just want a green light to deploy their API on the API gateway (Sorry, that’s not my job, and too bad, it’s probably too late to fix something as everything has already been coded)&lt;/li&gt;
  &lt;li&gt;The “The Masters of the Universe Web Site API” &lt;code&gt;description&lt;/code&gt; let me think that this API could be been design solely to be the backend of this specific website and thus may not be reusable in other contexts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s interesting, but when I do an API design review my first move is trying to guess what the API is made for by looking at all of its operations, all GET /this and POST /that and their summaries.
And that is not easy to do just reading the raw OpenAPI file.
Using a code editor, I could close a few sections but even doing so I can’t have this overview totally.&lt;/p&gt;

&lt;p&gt;I also like to have an overview of the data models in operations’ responses, evaluate their complexity, their depth.
But reading a raw OpenAPI file all I have is a flat perspective of each model.
I have to jump from one &lt;code&gt;$ref&lt;/code&gt; to another to “see” a full schemas … 
And so ,I actually don’t see anything here.
Or worse, just like in the parable of the 3 blind men the elephant, I could see a snake or a wall instead of an elephant.&lt;/p&gt;

&lt;p&gt;So, reading a raw OpenAPI file is definitely not for me.
And I highly doubt that anyone could actually do an efficient API design review doing so.&lt;/p&gt;

&lt;h2 id=&quot;not-all-documentation-tools-are-equals&quot;&gt;Not all documentation tools are equals&lt;/h2&gt;

&lt;p&gt;As far as I remember, I always took advantage of documentation tools to do API design reviews.
I especially use the good old SwaggerUI.
I don’t use it only because it was the only one available when I started being an API design reviewer and I don’t want to change my habits.
No, I use it because it’s the one that fulfils my needs for this specific task.&lt;/p&gt;

&lt;p&gt;I actually don’t like SwaggerUI API documentation when I learn to use an API, I prefer ReDoc or Stoplight Elements renderings. But reading API documentation is different from reviewing an interface contract.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/swaggerui-overview.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;SwaggerUI allows me to easily get the overview of operations, I can see all GET /this and POST /that and their summaries in a quick glance.
That helps me to confirm the intent of the API, if it was explained to me before, or guess it if not.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/swaggerui-operation.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Using SwaggerUI I can also check that the returned schema name actually match the resource path.
In ReDoc the name of the returned schema is not shown and when doing a review, that’s quite annoying.&lt;/p&gt;

&lt;p&gt;Once I’ve made this first pass, I analyze in depth each operation.
Checking parameters, responses and their schemas.
Regarding the analysis of schemas, I would prefer ReDoc of Stoplight Elements.
Whatever the tool, I can easily spot data models where everything if optional (typical on generated interface contracts).
I can also check schema depth.&lt;/p&gt;

&lt;p&gt;When I started doing reviews I had to carefully analyze every bit of the contract in one of those documentation tools.
Especially to ensure that the design was conforming to our API design guidelines.
Checking every single property is in lowerCamelCase, path structure is valid, no HTTP status code is missing, etc, etc, etc, …&lt;/p&gt;

&lt;p&gt;Doing those repetitive (mostly dumb) checks, review after review, hundreds of times, I nearly lost sanity.
And there are not only dumb checks that need to be done.
Checking consistency between schemas for instance is extremely hard to do with regular documentation tools.&lt;/p&gt;

&lt;h2 id=&quot;beyond-linting&quot;&gt;Beyond linting&lt;/h2&gt;

&lt;p&gt;Hopefully, Stoplight Spectral just came out at that time.
I will not go in all the details here (You can watch my &lt;a href=&quot;/the-augmented-api-design-reviewer/&quot;&gt;“Augmented API Design Reviewer” talk&lt;/a&gt; for that), but to make it short, Spectral is a JSON/YAML linter.
You can define rules that Spectral will run against a document to spot if some elements are breaking them.
You can check path structure, property names case, if all expected HTTP status codes are defined on all operations, or if all 4xx and 5xx error response return a data model matching your standard error schema.&lt;/p&gt;

&lt;p&gt;For instance the following ruleset contains a single that scans all properties to detect if some of them have a name containing a number:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Spectral Demo Ruleset&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-design-reviews/demo-ruleset.yaml&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;rules:
  property-name-no-number:
    given: $..properties
    severity: warn
    description: Property name must not contain number (maybe you can use an array)
    message: &quot;{{description}} {{path}}&quot;
    then:
      - field: &quot;@key&quot;
        function: pattern
        functionOptions:
          notMatch: &quot;/[0-9]+/i&quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can run the following command after installing Spectral to see it in action:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;Spectral lint -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using escape variable&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $ Spectral lint -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml
OpenAPI 3.x detected

https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml
 358:26  warning  property-name-no-number  Property name must not contain number (maybe you can use an array) #/components/schemas/Episode_Single/properties/alternate_name_1
 360:26  warning  property-name-no-number  Property name must not contain number (maybe you can use an array) #/components/schemas/Episode_Single/properties/alternate_name_2

✖ 2 problems (0 errors, 2 warnings, 0 infos, 0 hints)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What’s the problem with property names containing numbers?
What’s the problem with &lt;code&gt;alternate_name_1&lt;/code&gt; and &lt;code&gt;alternate_name_2&lt;/code&gt; properties in the &lt;code&gt;Episode_Single schema&lt;/code&gt; for instance?
If there’s a 1 and 2, why not a 3? And a 4?
So better put those alternate names in a list, that way no problem, there can be 1 to 4 … or 5.
But that’s if those alternate names 1 and 2 actually are just “alternate names” and not “production name” and “some other name”. 
If so, I would rename them accordingly.&lt;/p&gt;

&lt;p&gt;As you can see linting an OpenAPI file is not only about doing dumb checks (even if only just that actually changed my life), you can use Spectral to spot possible design patterns and business domain concerns.&lt;/p&gt;

&lt;p&gt;The problem with linting an OpenAPI file is that you can end with hundreds of problems detected.
Actually, running my usual ruleset (working on open sourcing it) on this post’s demo OpenAPI file would return almost 200 problems.
A raw list of 200 problems is not really usable.
And Spectral can’t handle all of my checks, I still need to analyze the contract with my very eyes.&lt;/p&gt;

&lt;p&gt;And so I realized that I needed to render OpenAPI files and Spectral results in a new way.&lt;/p&gt;

&lt;h2 id=&quot;looking-for-new-perspectives&quot;&gt;Looking for new perspectives&lt;/h2&gt;

&lt;p&gt;This research of new perspectives actually started with a command line like this one:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;Spectral lint -q -f json -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml | jq .

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using escape variable&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $  Spectral lint -q -f json -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml | jq .&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can tell Spectral to return its results as JSON and pipe it to &lt;a href=&quot;https://apihandyman.io/toolbox/jq/&quot;&gt;jq&lt;/a&gt; and do whatever you want with them. Just don’t forget the &lt;code&gt;-q&lt;/code&gt; flag, if not there are some non JSON data screwing everything.&lt;/p&gt;

&lt;p&gt;So I tinkered with JQ, extracting data from Spectral results and turning them into csv.
Then I did the same with OpenAPI files (see my series about &lt;a href=&quot;/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/&quot;&gt;OpenAPI + JQ&lt;/a&gt;), I extracted operations and schemas into csv.&lt;/p&gt;

&lt;p&gt;Then all these csv files are imported into … an Excel file (Google Sheet or Apple Number are no match, and don’t even dare to talk about OpenOffice/Libroffice alternatives).&lt;/p&gt;

&lt;p&gt;For the Spectral problems, I can easily filter problems by type or level, I can do text search.
And I can easily get stats using a pivot table.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/linter.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/linter-stats.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;For the operations, I can at last have “my overview” as I need it, I can see all operations in a quick glance.
I can see all parameters, response data model or used HTTP status code.
I can easily compare paths (and spot typos).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/operations.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Having the schemas put flat in Excel is a very powerful tool.
I can see all schema names easily.
By sorting the data by property names, I can easily spot inconsistencies.
I can check number/integer properties and check if they are not-easy-to-interpret codes, more easily spotted when there’s an enum (line 68 in the above capture).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/schemas.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The possibilities are endless.
Well I exaggerate a bit, but you can do crazy stuff with just csv files and an Excel file.&lt;/p&gt;

&lt;p&gt;Obviously, though I added some shell scripts and VS Code action around that to quickly analyze an OpenAPI file and open my Excel report, this is not really industrial.
My JQ stuff works only a basic files, I would need to replace that by more robust code.
Same for Excel, I hope to replace it by something else one day…&lt;/p&gt;

&lt;h1 id=&quot;and-thats-just-for-analyzing-the-contract&quot;&gt;And that’s just for analyzing the contract&lt;/h1&gt;

&lt;p&gt;I hope that what was shown here will give you some ideas about how analyze OpenAPI files but more important, I hope you’ll understand that we, API designer reviewers, need specialized tools to do our job.
We cannot just rely on raw OpenAPI files or documentation tools.
We need tools that take advantage of this machine readable format, tools such as Spectral, but we need new way of rendering OpenAPI files and linter results.&lt;/p&gt;

&lt;p&gt;And I didn’t talked about how to formalize the result of such analysis … we need specialized tools for that too. But that’s another story I’ll tell another time.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Doing an API design review is not only about that, but it will require, sooner or later, to analyze an interface contract. Use the wrong tools to do so, and reviews will become a terrible, never-ending burden. Use the right tools, and you’ll become a formidable machine, doing reviews at light speed, never missing the tiniest problem or question. But, after dozens of reviews, you may realize that, despite using the “right” existing tools, the API space actually lacks API design reviews specialized tools.</summary></entry></feed>