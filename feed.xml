<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2022-04-06T07:16:48-05:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">Choosing a public API style when a private API style already exists</title><link href="https://apihandyman.io/choosing-a-public-api-style-when-a-private-api-style-already-exists/" rel="alternate" type="text/html" title="Choosing a public API style when a private API style already exists" /><published>2022-04-06T00:00:00-05:00</published><updated>2022-04-06T00:00:00-05:00</updated><id>https://apihandyman.io/choosing-a-public-api-style-when-a-private-api-style-already-exists</id><content type="html" xml:base="https://apihandyman.io/choosing-a-public-api-style-when-a-private-api-style-already-exists/"><![CDATA[<p>“What will be the style of our public/partner APIs? Should we reuse our existing private APIs style? Should we restart from scratch and use a totally different style?” This discussion happens quite often in organizations starting their public API journey (and if it did not happen, it must happen.) This discussion can have important consequences that must be carefully evaluated.
<!--more--></p>

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em>
<em>In case you don’t get the reference: The API Handyman is represented with a 80s mullet haircut, “business up front, party in the back”.</em></p>

<h1 id="from-look-and-feel-to-life-and-death">From look and feel to life and death</h1>

<p>After taking private APIs more or less seriously, your organization is ready for the next step on its API journey: providing APIs to the outside world. It could be partner APIs, provided to a few selected partners or customers who have been through a good old “let’s meet and sign some papers” process. It could also be public APIs that will be consumed in a self-service fashion by almost anyone.</p>

<p>In either case: the DX (developer experience) offered by those APIs will be critical to their success. An API’s DX is determined by multiple factors from its purpose to how it’s simple to make API calls and everything in between (and beyond). Among all those factors, the design of an API plays a critical role in DX. A well-designed API will be easy to understand and easy to use. Such APIs will have a higher adoption rate and requires less support. On the opposite, terribly-designed public/partner APIs will not be used, and if they are used they will require a high level of support.</p>

<p>A good way to avoid miserably failing your public/partner API initiative is to ensure that your APIs share a common style, a common “look and feel”. But that’s not enough, this common style must participate in the creation of “easy-to-understand-easy-to-use” APIs. Indeed you can create terrible APIs that all look the same. And last but not least, if that style ease designers’ job that is more than welcomed. A complicated style will only lead to terrible APIs because only a few experts will be capable of applying it.</p>

<p>Hence the importance of the question, of which “style” to use for public/partner APIs. The style, the “look and feel” of your APIs have a major impact on their life and death.</p>

<p>Choosing the API Style of public/partner APIs is a choice that must not be done by default (without choosing) but knowingly. Because once APIs start to be consumed by third parties, it’s extremely difficult to modify anything.</p>

<h1 id="usual-scenarios">Usual scenarios</h1>

<p>When that question arises (and remember it MUST arise) in a context where private APIs already exist, I often present the possibilities with the 3 following scenarios.</p>

<ul>
  <li>Keeping existing style as it is</li>
  <li>Simplify existing style to target common practices</li>
  <li>Redefined from scratch a totally new style targeting common practices or a standard</li>
</ul>

<p>The first option is to simply stick to the existing style. That’s a totally valid option if the existing style leads to easy-to-understand and easy-to-use APIs hence is free of bizarre local specificities and close to outside world common practices. If that’s not the case, I recommend studying the second scenario. Indeed, APIs that are uniform between themselves but go against common practices will be hard-to-understand and hard-to-use.</p>

<p>The second scenario consists in taking the existing style and trying to simplify it in a backward-compatible fashion if that’s possible. The idea is to limit the breaking changes to what is absolutely necessary, or at least keep a certain spirit of the original style. It could simply consist in removing certain edge cases from the guidelines. But if there are too many changes to do, maybe it would be better to restart from scratch with the third option.</p>

<p>The third option consists in redefining the public/partner API style from scratch without taking care of the existing API style. It could even be interesting to see if there are no standards to take advantage of (I’ll write a dedicated post on that topic).</p>

<p>The problem is that if we stop here, we only envision that question from the public/partner API perspective: “Let’s choose the style that will work the best with the outside world”. The choice cannot be made without evaluating the impacts on the whole organization and all of its APIs.</p>

<h1 id="different-styles-or-same-style">Different styles or same style</h1>

<p>Behind the “which style will we use for our public/partner APIs?” question lies an even more critical one: “will we have the same or a different style for public/partner vs private APIs?”.</p>

<p>In my opinion, the question is definitely no in the long run. While it’s totally understandable to have a transitional period where existing private APIs may not be updated until needed. It could cost a lot of money to update all existing private APIs to the new style. I highly recommend applying the new public/partner style to private APIs as soon as possible, starting at least with any new API.</p>

<p>Indeed, using different styles for private and public/partner APIs forbid applying the Jeff Bezos mandate, you can’t turn a private API into a public/partner one easily. You’ll need a bit of work to transform the private style into the public/partner one.</p>

<p>That also prevents eating your own dog food at two levels. First, if your public/partner APIs are not private, you won’t use them, you won’t discover their flaws, and you won’t improve them. Second level: the style itself. It will be less used and so less improved. Only a few experts will learn to design APIs the public/partner way, they won’t have many opportunities to grow their skill and propose style improvements as there are usually that less public/partner APIs created than private ones.</p>

<p>That may to an extent promote a counter-productive organizational repartition between the team creating public/partner APIs and the other creating private APIs. That would severely cripple the API-First initiative at the organization level. Indeed, why should we care about our private APIs if the public/partner team will clean the mess when necessary?</p>

<p>And even if you take the strict “2 styles” path, the public/partner style will win in the long run. People of your organization will use the public/partner APIs and be fed up with how they are different (and better) than private APIs. People will be fed up with spending time and money adapting API for public-facing consumers. People building private APIs will be fed up with being considered second-class citizens (vs people building public/partner APIs). People will question the legitimacy of that “2 styles” decision.</p>

<h1 id="choose-knowingly">Choose knowingly</h1>

<p>So don’t take the public/partner API style question lightly. This question is critical for the success of your public/partner API initiative but it will also have a huge impact on your whole organization’s API-first initiative.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[“What will be the style of our public/partner APIs? Should we reuse our existing private APIs style? Should we restart from scratch and use a totally different style?” This discussion happens quite often in organizations starting their public API journey (and if it did not happen, it must happen.) This discussion can have important consequences that must be carefully evaluated.]]></summary></entry><entry><title type="html">What can we learn from tweets lookup error responses of Twitter v2 API?</title><link href="https://apihandyman.io/what-can-we-learn-from-tweets-lookup-error-responses-of-twitter-v2-api/" rel="alternate" type="text/html" title="What can we learn from tweets lookup error responses of Twitter v2 API?" /><published>2022-04-05T00:00:00-05:00</published><updated>2022-04-05T00:00:00-05:00</updated><id>https://apihandyman.io/what-can-we-learn-from-tweets-lookup-error-responses-of-twitter-v2-api</id><content type="html" xml:base="https://apihandyman.io/what-can-we-learn-from-tweets-lookup-error-responses-of-twitter-v2-api/"><![CDATA[<p>What can we learn from tweets lookup error responses of Twitter v2 API?
We can learn how to use the tweets lookup operations parameters without reading much of the documentation.
We may also learn a few API design, implementation, and documentation principles in the making.
And icing on the cake, the technique shown in this post can be applied on any API.
<!--more--></p>

<div class="alert alert-info"><h4 class="alert-heading">Twitter v2 API Tip And Tricks</h4><hr />
<p>This post is a “Twitter v2 API Tips And Tricks Post” in which I share with Postman collections the tips and tricks I learn while using Twitter v2 API.
You can either:</p>

<ul>
  <li>Read this post</li>
  <li>Read the collection documentation on <a href="https://www.postman.com/apihandyman/workspace/twitter-v2-api-tips-and-tricks/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229">Postman network</a></li>
  <li>Use this <a href="https://god.gw.postman.com/run-collection/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?action=collection%2Ffork&amp;collection-url=entityId%3D143378-8f12c1ed-f930-4e0d-8baf-c8a949910229%26entityType%3Dcollection%26workspaceId%3D16b83fae-c500-4387-b79c-0c72565d1d0f#?env%5BGuess%20how%20Tweets%20lookup%20parameters%20works%5D=W3sia2V5IjoidHdpdHRlcl90b2tlbiIsInZhbHVlIjoiUFVUIFlPVVIgVE9LRU4gSU4gQ1VSUkVOVCBWQUxVRSBPRiBUV0lUVEVSIFRPS0VOIEVOVklST05NRU5UIFZBUklBQkxFIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InNlY3JldCJ9XQ=="><img src="/images/commons/run-in-postman.svg" alt="Run in Postman" /></a> button to fork the collection directly in Postman</li>
  <li>Get the collection from <a href="https://github.com/apihandyman/twitter-tips-and-tricks/tree/main/guess-how-tweets-lookup-parameters-work">Github</a> to import it in Postman. (Click on the “View complete collection documentation” link in lower right corner to see documentation in full screen after fork)</li>
</ul>

</div>

<h1 id="twitter-v2-api-tweets-lookup">Twitter v2 API Tweets Lookup</h1>

<p>With Twitter v2 API, you can get tweets using <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/introduction">the lookup operations</a> <code>GET /2/tweets/:tweetid</code> (single tweet) and <code>GET /2/tweets?ids=:tweetId1,tweetId2,...tweetId100</code> (multiple tweets). By not providing or providing parameters with wrong values, we’ll be able to understand how these operations work.</p>

<h2 id="notes-about-the-collection">Notes about the collection</h2>

<p>The <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229">collection</a> takes advantage of collection and environment variables.</p>

<h3 id="environment-variables">Environment variables</h3>

<p>The collection requires the creation of an environment containing the following variables. (Try to send a request without an environment or the following variables and <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">you’ll get a surprise error message</a>).</p>

<div class="alert alert-danger"><p>Never store API tokens in initial value. Read <a href="https://blog.postman.com/how-to-use-api-keys/">How to use API Keys</a> to learn more.</p>

</div>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>twitter_token</td>
      <td>A Twitter API bearer token (Read <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">Twitter API documentation</a> to get one) used in Authorization tab of the collection</td>
    </tr>
  </tbody>
</table>

<h3 id="collection-variables">Collection variables</h3>

<p>The collection uses the following collection variables:</p>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>tweet_id</td>
      <td>A real working tweet id. Feel free to update with one of your likings. To get this id, go to the Twitter website and open a tweet by clicking on it. You’ll see a URL like this one <a href="https://twitter.com/apihandyman/status/1387820661742112771">https://twitter.com/apihandyman/status/1387820661742112771</a> , the id is number number after status. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-a06061d4-092c-4a71-87b6-a04c925154d1">Retrieve a single tweet</a>, <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-87eabafa-a6bc-4de0-864d-02cdbe819719">Retrieve multiple tweets</a>, and Wrap up folders.</td>
    </tr>
    <tr>
      <td>unknown_tweet_id</td>
      <td>The id of a tweet that doesn’t exists anymore. No need to modify this value. Used by requests of <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-4bdae358-e117-4352-804e-be51496100a8">What happens when a tweet is not found</a> folder.</td>
    </tr>
    <tr>
      <td>expansions_default_value</td>
      <td>A variable holding all possible values of <code>expansions</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>tweet_fields_default_value</td>
      <td>A variable holding all possible values of <code>tweet.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>media_fields_default_value</td>
      <td>A variable holding all possible values of <code>media.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>poll_fields_default_value</td>
      <td>A variable holding all possible values of <code>poll.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>place_fields_default_value</td>
      <td>A variable holding all possible values of <code>place.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>user_fields_default_value</td>
      <td>A variable holding all possible values of <code>user.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>token_variable_name</td>
      <td>Used by some <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">pre-script magic that checks an environment is selected</a>. No need to modify this value.</td>
    </tr>
    <tr>
      <td>token_variable_default_value</td>
      <td>Used by some <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">pre-script magic that checks an environment is selected</a>. No need to modify this value.</td>
    </tr>
  </tbody>
</table>

<h1 id="retrieve-a-single-tweet">Retrieve a single tweet</h1>
<p>Let’s start by retrieving a single tweet, it is done with the <code>GET /2/tweets/:tweetId request</code>.</p>

<p>All the following requests use the <code>tweet_id</code> collection variable value for the <code>:tweetId</code> path parameter. Feel free to replace its value with another one. To get this id, go to the Twitter website and open a tweet by clicking on it. You’ll see a URL like this one <a href="https://twitter.com/apihandyman/status/1387820661742112771">https://twitter.com/apihandyman/status/1387820661742112771</a> , the id is the number <code>1387820661742112771</code> after <code>status/</code>.</p>

<p>What Twitter <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id">Reference documentation</a> says about this operation:</p>

<blockquote>
  <p>Returns a variety of information about a single Tweet specified by the requested ID.</p>
</blockquote>

<p>By providing only the tweet id (as a path parameter), we’ll only get the tweet’s default fields <code>id</code> and <code>text</code> but we will discover there are more information to get.</p>
<h2 id="get-a-tweet-with-default-data">Get a tweet with default data</h2>

<p>When providing only the id path parameter without any other parameters, we get the default data.</p>
<h3 id="request-and-response">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy"><code class="code-block">{
    &quot;data&quot;: {
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;
    }
}`</code></pre>
  </div>
</div>

<h2 id="guess-which-query-parameters-can-be-used">Guess which query parameters can be used</h2>

<p>More data can be retrieved using some query parameters. You can either read the <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id">documentation</a>, or be lazy and try to guess them by providing a wrong <code>dummy</code> query parameter. The error response returned will tell us that parameter is wrong and list the accepted parameters.</p>
<h3 id="request-and-response-1">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/?dummy=value</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;dummy&quot;: [
                    &quot;value&quot;
                ]
            },
            &quot;message&quot;: &quot;The query parameter [dummy] is not one of [id,expansions,tweet.fields,media.fields,poll.fields,place.fields,user.fields]&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="guess-query-parameters-possible-values">Guess query parameters possible values</h2>

<p>Thanks to previous error, we know the possible query parameters. We can add them all to the request, each of them set with a dummy value. That will generate a new error response telling the possible values for each parameter.</p>

<h3 id="request-and-response-2">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/?id=dummy
&amp;expansions=dummy
&amp;tweet.fields=dummy
&amp;media.fields=dummy
&amp;poll.fields=dummy
&amp;place.fields=dummy
&amp;user.fields=dummy</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;id&quot;: [
                    &quot;1387820661742112771&quot;,
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `id` query parameter value [dummy] is not valid&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;id&quot;: [
                    &quot;1387820661742112771&quot;,
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;Duplicate parameters are not allowed: the `id` query parameter&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;tweet.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `tweet.fields` query parameter value [dummy] is not one of [attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;media.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `media.fields` query parameter value [dummy] is not one of [alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;poll.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `poll.fields` query parameter value [dummy] is not one of [duration_minutes,end_datetime,id,options,voting_status]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;place.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `place.fields` query parameter value [dummy] is not one of [contained_within,country,country_code,full_name,geo,id,name,place_type]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;user.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `user.fields` query parameter value [dummy] is not one of [created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;expansions&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `expansions` query parameter value [dummy] is not one of [author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id]&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="try-to-get-a-tweet-with-all-data">Try to get a tweet with all data</h2>

<p>Thanks to the previous error, we know that <code>id</code> is not an actual query parameter, so we will deactivate it. That means <code>id</code> shouldn’t have been returned in the error response when we provided the <code>dummy</code> query parameter. It sounds like an implementation bug, some code may blindly take the list of “parameters” without excluding path parameters.</p>

<p>This little problem sets aside, we had very valuable information for the other parameters, we can set them with values listing all their possible values.</p>

<h3 id="request-and-response-3">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.impression_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.url_link_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.user_profile_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.impression_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.like_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.like_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.reply_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.reply_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.retweet_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.retweet_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.url_link_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.user_profile_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.impression_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.like_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.like_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.reply_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.reply_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.retweet_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.retweet_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.url_link_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.user_profile_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h2 id="get-a-tweet-with-only-allowed-data">Get a tweet with only allowed data</h2>

<p>Again, the previous request shows a little problem in the implementation. Some fields we can’t access were returned. IMHO, we should get only data relevant for our context, or there should be information about scopes of type of account needed to access those fields.</p>

<p>The Twitter v2 API documentation could be improved by providing such information. An array “field vs scope or account level” would be welcomed. And even better: dynamic documentation showing what you can actually get based on different profiles would be great.</p>

<p>At least, the error message is quite clear, we request fields that we’re not allowed to get. So let’s remove them to get all the data we can get.</p>

<h3 id="request-and-response-4">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;data&quot;: {
        &quot;possibly_sensitive&quot;: false,
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;entities&quot;: {
            &quot;hashtags&quot;: [
                {
                    &quot;start&quot;: 236,
                    &quot;end&quot;: 246,
                    &quot;tag&quot;: &quot;apidesign&quot;
                },
                {
                    &quot;start&quot;: 247,
                    &quot;end&quot;: 251,
                    &quot;tag&quot;: &quot;api&quot;
                }
            ],
            &quot;urls&quot;: [
                {
                    &quot;start&quot;: 89,
                    &quot;end&quot;: 112,
                    &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                    &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                    &quot;images&quot;: [
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                            &quot;width&quot;: 360,
                            &quot;height&quot;: 451
                        },
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                            &quot;width&quot;: 150,
                            &quot;height&quot;: 150
                        }
                    ],
                    &quot;status&quot;: 200,
                    &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                    &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                    &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                },
                {
                    &quot;start&quot;: 126,
                    &quot;end&quot;: 149,
                    &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                    &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                },
                {
                    &quot;start&quot;: 162,
                    &quot;end&quot;: 185,
                    &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                    &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                    &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                },
                {
                    &quot;start&quot;: 211,
                    &quot;end&quot;: 234,
                    &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                    &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                    &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                }
            ]
        },
        &quot;lang&quot;: &quot;ja&quot;,
        &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
        &quot;reply_settings&quot;: &quot;everyone&quot;,
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
        &quot;context_annotations&quot;: [
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;30&quot;,
                    &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                    &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848920371311001600&quot;,
                    &quot;name&quot;: &quot;Technology&quot;,
                    &quot;description&quot;: &quot;Technology and computing&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848921413196984320&quot;,
                    &quot;name&quot;: &quot;Computer programming&quot;,
                    &quot;description&quot;: &quot;Computer programming&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;849075668352499712&quot;,
                    &quot;name&quot;: &quot;Web design&quot;,
                    &quot;description&quot;: &quot;Web design&quot;
                }
            }
        ],
        &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
        &quot;source&quot;: &quot;Twitter for Mac&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;public_metrics&quot;: {
            &quot;retweet_count&quot;: 7,
            &quot;reply_count&quot;: 2,
            &quot;like_count&quot;: 29,
            &quot;quote_count&quot;: 4
        },
        &quot;attachments&quot;: {
            &quot;media_keys&quot;: [
                &quot;3_1387820658030170113&quot;,
                &quot;3_1387820658030170124&quot;,
                &quot;3_1387820658097336320&quot;,
                &quot;3_1387820658076303365&quot;
            ]
        }
    },
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 264,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 240,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 563,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 270,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369
            }
        ],
        &quot;users&quot;: [
            {
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;protected&quot;: false,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;verified&quot;: false,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h1 id="retrieve-multiple-tweets">Retrieve multiple tweets</h1>
<p>Now we could directly send a <code>GET /tweets?ids=xxx</code> with the parameters we have discovered when retrieving a single tweet and it would work. But just for the sake of science, let’s try the same method again and check there are not more parameters than we have discovered.</p>

<p>What Twitter <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets">Reference Documentation</a> says:</p>

<blockquote>
  <p>Returns a variety of information about the Tweet specified by the requested ID or list of IDs.</p>
</blockquote>

<p>When I see <code>GET /tweets</code>, I immediately think “I can search in tweets”, and that, for instance, I could get tweets between 2 dates or using a given hashtag, but it’s absolutely not the case here. The documentation could be slightly improved by clearly stating this operation is not made to search tweets but just to retrieve up to 100 tweets at once (and avoid calling <code>GET /2/tweets/:id</code> 100 times). To search tweets, read “<a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/introduction">Search Tweets</a>”.</p>
<h2 id="trying-to-get-tweets-without-any-parameters">Trying to get tweets without any parameters</h2>

<p>For our first call, we will provide no parameters. If it was a search, I would expect to get the first page of all tweets I’m supposed to get. But this is not a search, this operation allows to read up to 100 tweets based on their ids, I expect to get an error.</p>
<h3 id="request-and-response-5">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;ids&quot;: []
            },
            &quot;message&quot;: &quot;The `ids` query parameter can not be empty&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="discover-possible-query-parameters">Discover possible query parameters</h2>

<p>So when providing no parameters, we got an error telling us the operation needs an <code>ids</code> parameter but not what are all other optional parameters, that’s the usual behavior of most if not all APIs. So, let’s use the <code>dummy</code> parameter trick again. We should get the same parameters as to when retrieving a single tweet (minus the ids variation).</p>
<h3 id="request-and-response-6">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets?dummy=value</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;ids&quot;: []
            },
            &quot;message&quot;: &quot;The `ids` query parameter can not be empty&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;dummy&quot;: [
                    &quot;value&quot;
                ]
            },
            &quot;message&quot;: &quot;The query parameter [dummy] is not one of [ids,expansions,tweet.fields,media.fields,poll.fields,place.fields,user.fields]&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="discover-query-parameters-possible-values">Discover query parameters possible values</h2>

<p>Now let’s use the <code>existing_parameter=dummy</code> value trick to guess possible values (note that we expected to see the same values as when retrieving a single tweet).</p>

<h3 id="request-and-response-7">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets?ids=dummy
&amp;expansions=dummy
&amp;tweet.fields=dummy
&amp;media.fields=dummy
&amp;poll.fields=dummy
&amp;place.fields=dummy
&amp;user.fields=dummy</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;ids&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `ids` query parameter value [dummy] is not valid&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;tweet.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `tweet.fields` query parameter value [dummy] is not one of [attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;media.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `media.fields` query parameter value [dummy] is not one of [alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;poll.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `poll.fields` query parameter value [dummy] is not one of [duration_minutes,end_datetime,id,options,voting_status]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;place.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `place.fields` query parameter value [dummy] is not one of [contained_within,country,country_code,full_name,geo,id,name,place_type]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;user.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `user.fields` query parameter value [dummy] is not one of [created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;expansions&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `expansions` query parameter value [dummy] is not one of [author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id]&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="try-to-get-tweets-with-all-data">Try to get tweets with all data</h2>

<p>Providing all possible values we should get the same error as when retrieving a single tweet.</p>

<h3 id="request-and-response-8">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets?ids=
&amp;expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.impression_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.url_link_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.user_profile_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.impression_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.like_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.like_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.reply_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.reply_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.retweet_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.retweet_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.url_link_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.user_profile_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.impression_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.like_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.like_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.reply_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.reply_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.retweet_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.retweet_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.url_link_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.user_profile_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h2 id="get-tweets-with-only-allowed-data">Get tweets with only allowed data</h2>

<p>So both operations share the same parameters with the same value and the same behavior. That means we can trust the Twitter API and apply patterns seen on an operation on others related ones. A behavior to reproduce on all your APIs.</p>

<h3 id="request-and-response-9">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets?ids=
&amp;expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;data&quot;: [
        {
            &quot;attachments&quot;: {
                &quot;media_keys&quot;: [
                    &quot;3_1387820658030170113&quot;,
                    &quot;3_1387820658030170124&quot;,
                    &quot;3_1387820658097336320&quot;,
                    &quot;3_1387820658076303365&quot;
                ]
            },
            &quot;reply_settings&quot;: &quot;everyone&quot;,
            &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
            &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
            &quot;source&quot;: &quot;Twitter for Mac&quot;,
            &quot;public_metrics&quot;: {
                &quot;retweet_count&quot;: 7,
                &quot;reply_count&quot;: 2,
                &quot;like_count&quot;: 29,
                &quot;quote_count&quot;: 4
            },
            &quot;id&quot;: &quot;1387820661742112771&quot;,
            &quot;author_id&quot;: &quot;2943613557&quot;,
            &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
            &quot;lang&quot;: &quot;ja&quot;,
            &quot;entities&quot;: {
                &quot;hashtags&quot;: [
                    {
                        &quot;start&quot;: 236,
                        &quot;end&quot;: 246,
                        &quot;tag&quot;: &quot;apidesign&quot;
                    },
                    {
                        &quot;start&quot;: 247,
                        &quot;end&quot;: 251,
                        &quot;tag&quot;: &quot;api&quot;
                    }
                ],
                &quot;urls&quot;: [
                    {
                        &quot;start&quot;: 89,
                        &quot;end&quot;: 112,
                        &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                        &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                        &quot;images&quot;: [
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                                &quot;width&quot;: 360,
                                &quot;height&quot;: 451
                            },
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                                &quot;width&quot;: 150,
                                &quot;height&quot;: 150
                            }
                        ],
                        &quot;status&quot;: 200,
                        &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                        &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                        &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                    },
                    {
                        &quot;start&quot;: 126,
                        &quot;end&quot;: 149,
                        &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                        &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                    },
                    {
                        &quot;start&quot;: 162,
                        &quot;end&quot;: 185,
                        &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                        &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                        &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                    },
                    {
                        &quot;start&quot;: 211,
                        &quot;end&quot;: 234,
                        &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                        &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                        &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    }
                ]
            },
            &quot;possibly_sensitive&quot;: false,
            &quot;context_annotations&quot;: [
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;30&quot;,
                        &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                        &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848920371311001600&quot;,
                        &quot;name&quot;: &quot;Technology&quot;,
                        &quot;description&quot;: &quot;Technology and computing&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848921413196984320&quot;,
                        &quot;name&quot;: &quot;Computer programming&quot;,
                        &quot;description&quot;: &quot;Computer programming&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;849075668352499712&quot;,
                        &quot;name&quot;: &quot;Web design&quot;,
                        &quot;description&quot;: &quot;Web design&quot;
                    }
                }
            ]
        }
    ],
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;width&quot;: 264,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;
            },
            {
                &quot;width&quot;: 240,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;
            },
            {
                &quot;width&quot;: 563,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;
            },
            {
                &quot;width&quot;: 270,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;
            }
        ],
        &quot;users&quot;: [
            {
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;protected&quot;: false,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;verified&quot;: false,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h1 id="what-happens-when-a-tweet-is-not-found">What happens when a tweet is not found</h1>
<p>Providing non-existing ids is also a good way to understand how an API works (and detect bugs). When reading one or multiple non-existing elements, I would expect to get the following responses</p>

<ul>
  <li><code>GET /tweets/:id</code> should return a <code>404 Not Found</code> when reading a non-existing id</li>
  <li><code>GET /tweets</code>should return a <code>200 OK</code> with an empty data list when providing an ids list containing only non-existing ids</li>
  <li><code>GET /tweets</code>should return a <code>200 OK</code> with a non-empty data list when providing an ids list containing existing and non-existing ids</li>
</ul>

<p>I didn’t get all what I expect, I both add less and more.</p>
<h2 id="try-to-get-tweetsid-with-a-non-existing-tweet">Try to get /tweets/:id with a non-existing tweet</h2>

<p>The behavior of this operation goes against Twitter API documentation and more important, against HTTP: don’t do that at home, return <code>404 Not Found</code> and not <code>200 OK</code> with an error. It sounds more like a bug than actual intended behavior. At least the body contains an <code>error</code> explaining the problem, but if consumers concentrate on HTTP status code, such error may stay invisible.</p>
<h3 id="request-and-response-10">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;value&quot;: &quot;1508806917874978822&quot;,
            &quot;detail&quot;: &quot;Could not find tweet with id: [1508806917874978822].&quot;,
            &quot;title&quot;: &quot;Not Found Error&quot;,
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1508806917874978822&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/resource-not-found&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h2 id="try-to-get-tweetsids-with-a-non-existing-tweet">Try to get /tweets?ids= with a non-existing tweet</h2>

<p>The behavior is the expected one, we have an empty <code>data</code> list. But we also get more, there’s an <code>errors</code> list indicating the non-found tweets. That’s not something I’ve seen often, but that’s a nice behavior. Though they could guess which ids were not found, clearly indicating the ids that have not been found can simplify the life of consumers.</p>

<h3 id="request-and-response-11">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets?ids=
&amp;expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;value&quot;: &quot;1508806917874978822&quot;,
            &quot;detail&quot;: &quot;Could not find tweet with ids: [1508806917874978822].&quot;,
            &quot;title&quot;: &quot;Not Found Error&quot;,
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1508806917874978822&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/resource-not-found&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h2 id="try-to-get-existing-and-non-existing-tweets">Try to get existing and non-existing tweets</h2>

<p>We have here the same behavior as in previous request. This really demonstrate how you can return a “partial” success and provide explicit information about what has been wrong. I wonder if it happens on errors regarding other query parameters.</p>

<h3 id="request-and-response-12">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets?ids=,
&amp;expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;data&quot;: [
        {
            &quot;public_metrics&quot;: {
                &quot;retweet_count&quot;: 7,
                &quot;reply_count&quot;: 2,
                &quot;like_count&quot;: 29,
                &quot;quote_count&quot;: 4
            },
            &quot;entities&quot;: {
                &quot;hashtags&quot;: [
                    {
                        &quot;start&quot;: 236,
                        &quot;end&quot;: 246,
                        &quot;tag&quot;: &quot;apidesign&quot;
                    },
                    {
                        &quot;start&quot;: 247,
                        &quot;end&quot;: 251,
                        &quot;tag&quot;: &quot;api&quot;
                    }
                ],
                &quot;urls&quot;: [
                    {
                        &quot;start&quot;: 89,
                        &quot;end&quot;: 112,
                        &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                        &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                        &quot;images&quot;: [
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                                &quot;width&quot;: 360,
                                &quot;height&quot;: 451
                            },
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                                &quot;width&quot;: 150,
                                &quot;height&quot;: 150
                            }
                        ],
                        &quot;status&quot;: 200,
                        &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                        &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                        &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                    },
                    {
                        &quot;start&quot;: 126,
                        &quot;end&quot;: 149,
                        &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                        &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                    },
                    {
                        &quot;start&quot;: 162,
                        &quot;end&quot;: 185,
                        &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                        &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                        &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                    },
                    {
                        &quot;start&quot;: 211,
                        &quot;end&quot;: 234,
                        &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                        &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                        &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    }
                ]
            },
            &quot;id&quot;: &quot;1387820661742112771&quot;,
            &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
            &quot;lang&quot;: &quot;ja&quot;,
            &quot;context_annotations&quot;: [
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;30&quot;,
                        &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                        &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848920371311001600&quot;,
                        &quot;name&quot;: &quot;Technology&quot;,
                        &quot;description&quot;: &quot;Technology and computing&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848921413196984320&quot;,
                        &quot;name&quot;: &quot;Computer programming&quot;,
                        &quot;description&quot;: &quot;Computer programming&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;849075668352499712&quot;,
                        &quot;name&quot;: &quot;Web design&quot;,
                        &quot;description&quot;: &quot;Web design&quot;
                    }
                }
            ],
            &quot;source&quot;: &quot;Twitter for Mac&quot;,
            &quot;possibly_sensitive&quot;: false,
            &quot;author_id&quot;: &quot;2943613557&quot;,
            &quot;attachments&quot;: {
                &quot;media_keys&quot;: [
                    &quot;3_1387820658030170113&quot;,
                    &quot;3_1387820658030170124&quot;,
                    &quot;3_1387820658097336320&quot;,
                    &quot;3_1387820658076303365&quot;
                ]
            },
            &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
            &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
            &quot;reply_settings&quot;: &quot;everyone&quot;
        }
    ],
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;height&quot;: 331,
                &quot;width&quot;: 264
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;height&quot;: 303,
                &quot;width&quot;: 240
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;height&quot;: 704,
                &quot;width&quot;: 563
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;height&quot;: 369,
                &quot;width&quot;: 270
            }
        ],
        &quot;users&quot;: [
            {
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;verified&quot;: false,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;protected&quot;: false
            }
        ]
    },
    &quot;errors&quot;: [
        {
            &quot;value&quot;: &quot;1508806917874978822&quot;,
            &quot;detail&quot;: &quot;Could not find tweet with ids: [1508806917874978822].&quot;,
            &quot;title&quot;: &quot;Not Found Error&quot;,
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1508806917874978822&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/resource-not-found&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h1 id="expansions-and-xxxfields-silent-relationship">Expansions and xxx.fields silent relationship</h1>
<p>Let’s see what happens when providing incoherent query parameters. For instance, let’s request some <code>xxx.fields</code> without requiring <code>expansions</code>. In an ideal world, I would love to get the <code>data,</code> and some <code>errors</code> telling me for instance that requested <code>user.fields</code> are not shown because expansion of user data has not been requested.</p>
<h2 id="get-a-tweet-with-all-fields-but-without-expansions">Get a tweet with all fields but without expansions</h2>

<p>When deactivating <code>expansions</code> query parameter, we get some data but not all data and not a single error. Hopefully, the documentation is quite clear on the relation between <code>expansions</code> and <code>xxx.fields</code>. But this behavior is different from what we have seen when providing wrong values in <code>ids</code> query parameter, it’s a little bit deceptive. It also puzzled me for a few minutes when I was randomly playing with <code>user.fields</code> parameter and not understanding why I had no actual user data (I didn’t requested the expansion of user data).</p>

<h3 id="request-and-response-13">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;data&quot;: {
        &quot;possibly_sensitive&quot;: false,
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;entities&quot;: {
            &quot;hashtags&quot;: [
                {
                    &quot;start&quot;: 236,
                    &quot;end&quot;: 246,
                    &quot;tag&quot;: &quot;apidesign&quot;
                },
                {
                    &quot;start&quot;: 247,
                    &quot;end&quot;: 251,
                    &quot;tag&quot;: &quot;api&quot;
                }
            ],
            &quot;urls&quot;: [
                {
                    &quot;start&quot;: 89,
                    &quot;end&quot;: 112,
                    &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                    &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                    &quot;images&quot;: [
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                            &quot;width&quot;: 360,
                            &quot;height&quot;: 451
                        },
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                            &quot;width&quot;: 150,
                            &quot;height&quot;: 150
                        }
                    ],
                    &quot;status&quot;: 200,
                    &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                    &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                    &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                },
                {
                    &quot;start&quot;: 126,
                    &quot;end&quot;: 149,
                    &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                    &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                },
                {
                    &quot;start&quot;: 162,
                    &quot;end&quot;: 185,
                    &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                    &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                    &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                },
                {
                    &quot;start&quot;: 211,
                    &quot;end&quot;: 234,
                    &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                    &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                    &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                }
            ]
        },
        &quot;lang&quot;: &quot;ja&quot;,
        &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
        &quot;reply_settings&quot;: &quot;everyone&quot;,
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
        &quot;context_annotations&quot;: [
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;30&quot;,
                    &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                    &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848920371311001600&quot;,
                    &quot;name&quot;: &quot;Technology&quot;,
                    &quot;description&quot;: &quot;Technology and computing&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848921413196984320&quot;,
                    &quot;name&quot;: &quot;Computer programming&quot;,
                    &quot;description&quot;: &quot;Computer programming&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;849075668352499712&quot;,
                    &quot;name&quot;: &quot;Web design&quot;,
                    &quot;description&quot;: &quot;Web design&quot;
                }
            }
        ],
        &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
        &quot;source&quot;: &quot;Twitter for Mac&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;public_metrics&quot;: {
            &quot;retweet_count&quot;: 7,
            &quot;reply_count&quot;: 2,
            &quot;like_count&quot;: 29,
            &quot;quote_count&quot;: 4
        },
        &quot;attachments&quot;: {
            &quot;media_keys&quot;: [
                &quot;3_1387820658030170113&quot;,
                &quot;3_1387820658030170124&quot;,
                &quot;3_1387820658097336320&quot;,
                &quot;3_1387820658076303365&quot;
            ]
        }
    },
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 264,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 240,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 563,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 270,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369
            }
        ],
        &quot;users&quot;: [
            {
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;protected&quot;: false,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;verified&quot;: false,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h2 id="fix-get-a-tweet-with-all-fields-but-without-expansions">Fix get a tweet with all fields but without expansions</h2>

<p>By adding some magic in the Pre-request Script tab, we can ensure the consistency between <code>expansions</code> and <code>xxx.fields</code>.</p>

<h3 id="pre-request-script">Pre-request Script</h3>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Pre-request Script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">// Typically the kind of code you can put in collection Pre-request Script
// Checks the consistency between expansions value and the presence of xxx.fields query parameters
// That sort of control should be done at implementation level and, in the case of Twitter API,
// some errors (warnings) should be returned along with the data 

// What expansions must contain depending on xxx.fields
const fieldsVsExpansions = {
    &quot;user.fields&quot; : [&quot;author_id&quot;, &quot;entities.mentions&quot;, &quot;in_reply_to_user_id&quot;, &quot;referenced_tweets.id.author_id&quot;],
    &quot;tweet.fields&quot;: [&quot;referenced_tweets.id&quot;],
    &quot;poll.fields&quot; : [&quot;attachments.poll_ids&quot;],
    &quot;place.fields&quot;: [&quot;geo.place_id&quot;],
    &quot;media.fields&quot;: [&quot;attachments.media_keys&quot;]
};

// Looking for an enabled expansions query parameter
const expansions = pm.request.url.query.all().find(param =&gt; param.key===&quot;expansions&quot; &amp;&amp; !param.disabled);
// Checking xxx.fields presence
pm.request.url.query.all().forEach((param) =&gt; {
    // Works only with parameter listed in fieldsVsExpansions    
    const fieldVsExpansions = fieldsVsExpansions[param.key];
    if(fieldVsExpansions !== undefined) {
        // No expansions query parameter defined or enabled
        if(expansions === undefined) {
            const message = `${param.key} parameter provided but no expansions parameter containing one of the following values ${fieldVsExpansions} provided`;
            throw new Error(message);
        }
        else {
            const expansionsValues = expansions.value.split(&quot;,&quot;);
            const expansionValueFound = expansionsValues.some(value =&gt; fieldVsExpansions.indexOf(value) &gt;= 0);
            // Expansions query parameter present but does not contains one of the expected values
            if(!expansionValueFound) {
                const message = `${param.key} provided but expansions parameter does not contain one of the following values: ${fieldVsExpansions}`;
                throw new Error(message);
            }
        }
    }
});</code></pre>
  </div>
</div>

<h3 id="request-and-response-14">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;data&quot;: {
        &quot;possibly_sensitive&quot;: false,
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;entities&quot;: {
            &quot;hashtags&quot;: [
                {
                    &quot;start&quot;: 236,
                    &quot;end&quot;: 246,
                    &quot;tag&quot;: &quot;apidesign&quot;
                },
                {
                    &quot;start&quot;: 247,
                    &quot;end&quot;: 251,
                    &quot;tag&quot;: &quot;api&quot;
                }
            ],
            &quot;urls&quot;: [
                {
                    &quot;start&quot;: 89,
                    &quot;end&quot;: 112,
                    &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                    &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                    &quot;images&quot;: [
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                            &quot;width&quot;: 360,
                            &quot;height&quot;: 451
                        },
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                            &quot;width&quot;: 150,
                            &quot;height&quot;: 150
                        }
                    ],
                    &quot;status&quot;: 200,
                    &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                    &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                    &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                },
                {
                    &quot;start&quot;: 126,
                    &quot;end&quot;: 149,
                    &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                    &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                },
                {
                    &quot;start&quot;: 162,
                    &quot;end&quot;: 185,
                    &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                    &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                    &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                },
                {
                    &quot;start&quot;: 211,
                    &quot;end&quot;: 234,
                    &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                    &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                    &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                }
            ]
        },
        &quot;lang&quot;: &quot;ja&quot;,
        &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
        &quot;reply_settings&quot;: &quot;everyone&quot;,
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
        &quot;context_annotations&quot;: [
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;30&quot;,
                    &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                    &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848920371311001600&quot;,
                    &quot;name&quot;: &quot;Technology&quot;,
                    &quot;description&quot;: &quot;Technology and computing&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848921413196984320&quot;,
                    &quot;name&quot;: &quot;Computer programming&quot;,
                    &quot;description&quot;: &quot;Computer programming&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;849075668352499712&quot;,
                    &quot;name&quot;: &quot;Web design&quot;,
                    &quot;description&quot;: &quot;Web design&quot;
                }
            }
        ],
        &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
        &quot;source&quot;: &quot;Twitter for Mac&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;public_metrics&quot;: {
            &quot;retweet_count&quot;: 7,
            &quot;reply_count&quot;: 2,
            &quot;like_count&quot;: 29,
            &quot;quote_count&quot;: 4
        },
        &quot;attachments&quot;: {
            &quot;media_keys&quot;: [
                &quot;3_1387820658030170113&quot;,
                &quot;3_1387820658030170124&quot;,
                &quot;3_1387820658097336320&quot;,
                &quot;3_1387820658076303365&quot;
            ]
        }
    },
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 264,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 240,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 563,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 270,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369
            }
        ],
        &quot;users&quot;: [
            {
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;protected&quot;: false,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;verified&quot;: false,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h1 id="get-always-same-data">Get always same data</h1>
<p>And it’s not finished yet! You get a final Postman bonus. Why not put the list of Twitter API query parameters values you’ll always use in collection variables to ensure consistency between your requests? It will allow you to modify all requests from a single place. You’ll find the “default allowed values” for all query parameters in the collection variables. The following requests take advantage of them. Warning, I didn’t put again the Pre-request scripts checking the consistency between <code>expansions</code> and <code>xxx.fields</code>. But I think it could be worth have it at collection level.</p>
<h2 id="get-a-tweet-always-with-same-data">Get a tweet always with same data</h2>

<p>So both operations share the same parameters with the same value and the same behavior. That means we can trust the Twitter API and apply patterns seen on an operation on others related ones. A behavior to reproduce on all your APIs.</p>

<h3 id="request-and-response-15">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=
&amp;tweet.fields=
&amp;media.fields=
&amp;poll.fields=
&amp;place.fields=
&amp;user.fields=</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;data&quot;: {
        &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
        &quot;lang&quot;: &quot;ja&quot;,
        &quot;context_annotations&quot;: [
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;30&quot;,
                    &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                    &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848920371311001600&quot;,
                    &quot;name&quot;: &quot;Technology&quot;,
                    &quot;description&quot;: &quot;Technology and computing&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848921413196984320&quot;,
                    &quot;name&quot;: &quot;Computer programming&quot;,
                    &quot;description&quot;: &quot;Computer programming&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;849075668352499712&quot;,
                    &quot;name&quot;: &quot;Web design&quot;,
                    &quot;description&quot;: &quot;Web design&quot;
                }
            }
        ],
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
        &quot;reply_settings&quot;: &quot;everyone&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
        &quot;source&quot;: &quot;Twitter for Mac&quot;,
        &quot;attachments&quot;: {
            &quot;media_keys&quot;: [
                &quot;3_1387820658030170113&quot;,
                &quot;3_1387820658030170124&quot;,
                &quot;3_1387820658097336320&quot;,
                &quot;3_1387820658076303365&quot;
            ]
        },
        &quot;public_metrics&quot;: {
            &quot;retweet_count&quot;: 7,
            &quot;reply_count&quot;: 2,
            &quot;like_count&quot;: 30,
            &quot;quote_count&quot;: 4
        },
        &quot;entities&quot;: {
            &quot;urls&quot;: [
                {
                    &quot;start&quot;: 89,
                    &quot;end&quot;: 112,
                    &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                    &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                    &quot;images&quot;: [
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                            &quot;width&quot;: 360,
                            &quot;height&quot;: 451
                        },
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                            &quot;width&quot;: 150,
                            &quot;height&quot;: 150
                        }
                    ],
                    &quot;status&quot;: 200,
                    &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                    &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                    &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                },
                {
                    &quot;start&quot;: 126,
                    &quot;end&quot;: 149,
                    &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                    &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                },
                {
                    &quot;start&quot;: 162,
                    &quot;end&quot;: 185,
                    &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                    &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                    &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                },
                {
                    &quot;start&quot;: 211,
                    &quot;end&quot;: 234,
                    &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                    &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                    &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                }
            ],
            &quot;hashtags&quot;: [
                {
                    &quot;start&quot;: 236,
                    &quot;end&quot;: 246,
                    &quot;tag&quot;: &quot;apidesign&quot;
                },
                {
                    &quot;start&quot;: 247,
                    &quot;end&quot;: 251,
                    &quot;tag&quot;: &quot;api&quot;
                }
            ]
        },
        &quot;possibly_sensitive&quot;: false
    },
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 264,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331
            },
            {
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 240,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303
            },
            {
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 563,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704
            },
            {
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 270,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369
            }
        ],
        &quot;users&quot;: [
            {
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;verified&quot;: false,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;protected&quot;: false,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5140,
                    &quot;following_count&quot;: 946,
                    &quot;tweet_count&quot;: 9726,
                    &quot;listed_count&quot;: 224
                },
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h2 id="get-tweets-always-with-same-data">Get tweets always with same data</h2>

<p>So both operations share the same parameters with the same value and the same behavior. That means we can trust the Twitter API and apply patterns seen on an operation on others related ones. A behavior to reproduce on all your APIs.</p>

<h3 id="request-and-response-16">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy"><code class="code-block">https://api.twitter.com/2/tweets?ids=
&amp;expansions=
&amp;tweet.fields=
&amp;media.fields=
&amp;poll.fields=
&amp;place.fields=
&amp;user.fields=</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy"><code class="code-block">{
    &quot;data&quot;: [
        {
            &quot;public_metrics&quot;: {
                &quot;retweet_count&quot;: 7,
                &quot;reply_count&quot;: 2,
                &quot;like_count&quot;: 30,
                &quot;quote_count&quot;: 4
            },
            &quot;id&quot;: &quot;1387820661742112771&quot;,
            &quot;source&quot;: &quot;Twitter for Mac&quot;,
            &quot;lang&quot;: &quot;ja&quot;,
            &quot;entities&quot;: {
                &quot;hashtags&quot;: [
                    {
                        &quot;start&quot;: 236,
                        &quot;end&quot;: 246,
                        &quot;tag&quot;: &quot;apidesign&quot;
                    },
                    {
                        &quot;start&quot;: 247,
                        &quot;end&quot;: 251,
                        &quot;tag&quot;: &quot;api&quot;
                    }
                ],
                &quot;urls&quot;: [
                    {
                        &quot;start&quot;: 89,
                        &quot;end&quot;: 112,
                        &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                        &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                        &quot;images&quot;: [
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                                &quot;width&quot;: 360,
                                &quot;height&quot;: 451
                            },
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                                &quot;width&quot;: 150,
                                &quot;height&quot;: 150
                            }
                        ],
                        &quot;status&quot;: 200,
                        &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                        &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                        &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                    },
                    {
                        &quot;start&quot;: 126,
                        &quot;end&quot;: 149,
                        &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                        &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                    },
                    {
                        &quot;start&quot;: 162,
                        &quot;end&quot;: 185,
                        &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                        &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                        &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                    },
                    {
                        &quot;start&quot;: 211,
                        &quot;end&quot;: 234,
                        &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                        &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                        &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    }
                ]
            },
            &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
            &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
            &quot;context_annotations&quot;: [
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;30&quot;,
                        &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                        &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848920371311001600&quot;,
                        &quot;name&quot;: &quot;Technology&quot;,
                        &quot;description&quot;: &quot;Technology and computing&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848921413196984320&quot;,
                        &quot;name&quot;: &quot;Computer programming&quot;,
                        &quot;description&quot;: &quot;Computer programming&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;849075668352499712&quot;,
                        &quot;name&quot;: &quot;Web design&quot;,
                        &quot;description&quot;: &quot;Web design&quot;
                    }
                }
            ],
            &quot;author_id&quot;: &quot;2943613557&quot;,
            &quot;attachments&quot;: {
                &quot;media_keys&quot;: [
                    &quot;3_1387820658030170113&quot;,
                    &quot;3_1387820658030170124&quot;,
                    &quot;3_1387820658097336320&quot;,
                    &quot;3_1387820658076303365&quot;
                ]
            },
            &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
            &quot;possibly_sensitive&quot;: false,
            &quot;reply_settings&quot;: &quot;everyone&quot;
        }
    ],
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;width&quot;: 264,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;height&quot;: 331,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;type&quot;: &quot;photo&quot;
            },
            {
                &quot;width&quot;: 240,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;height&quot;: 303,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;type&quot;: &quot;photo&quot;
            },
            {
                &quot;width&quot;: 563,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;height&quot;: 704,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;type&quot;: &quot;photo&quot;
            },
            {
                &quot;width&quot;: 270,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;height&quot;: 369,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;type&quot;: &quot;photo&quot;
            }
        ],
        &quot;users&quot;: [
            {
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5140,
                    &quot;following_count&quot;: 946,
                    &quot;tweet_count&quot;: 9726,
                    &quot;listed_count&quot;: 224
                },
                &quot;verified&quot;: false,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;protected&quot;: false,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h1 id="lessons-learned">Lessons learned</h1>
<p>You should now master the Twitter v2 API Tweets lookup parameters and be able to reuse the method shown on any other API operations. And on top of that, you may have discovered the following principles regarding the design, implementation, and documentation of APIs:</p>

<ul>
  <li>Returning detailed error information is a must-have. It helps to learn how to use an API and quickly fix problems. Remember how it was simple to discover how to use the API when providing a dummy parameter or an existing parameter with a dummy value.</li>
  <li>Don’t return too much detailed error information that can’t be used or warned they can’t be used without an action. It can help to avoid unnecessary errors and ease understanding. We could have avoided an error when putting all values of <code>xxx.fields</code> including the not allowed ones.</li>
  <li>Try to create APIs with consistent behavior. Here the query parameter <code>ids</code> gets a special treatment allowing to get <code>errors</code> info in case of success that <code>expansions</code> and <code>xxx.fields</code> don’t have causing some headaches. If I had to choose, I would prefer more info on the second case.</li>
  <li>Document the relationships between parameters. Here, it’s not shown in error feedback but at least the relationship <code>expansions</code> and <code>xxx.fields</code> is well documented.</li>
  <li>Don’t deviate from HTTP. Getting a <code>200 OK</code> when a path is not found is surprising and source of errors in consumers’ code. Note that it’s probably a bug.</li>
  <li>When a function does not behave as people would expect, never refrain to explain it in the documentation and put the link(s) to the other function(s) covering other expected needs. Here the Tweets Lookup documentation could be improved by adding some info about the search function.</li>
</ul>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[What can we learn from tweets lookup error responses of Twitter v2 API? We can learn how to use the tweets lookup operations parameters without reading much of the documentation. We may also learn a few API design, implementation, and documentation principles in the making. And icing on the cake, the technique shown in this post can be applied on any API.]]></summary></entry><entry><title type="html">Don’t organize APIs against ownership</title><link href="https://apihandyman.io/dont-organize-apis-against-ownership/" rel="alternate" type="text/html" title="Don’t organize APIs against ownership" /><published>2022-03-30T00:00:00-05:00</published><updated>2022-03-30T00:00:00-05:00</updated><id>https://apihandyman.io/dont-organize-apis-against-ownership</id><content type="html" xml:base="https://apihandyman.io/dont-organize-apis-against-ownership/"><![CDATA[<p>It doesn’t matter how APIs are organized, in layers, by business domain or any other dimension if you don’t take care of the most important one. The one dimension that rules them all: ownership. This post is the third and last of the “3 dimensions to consider for a successful API-First strategy” series.
<!--more--></p>

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">3 dimensions to consider for a successful API-First strategy Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text"><p>When talking about “organizing”, “classifying” or “categorizing” APIs, the private/partner/public classification is the one that comes first very often. But that’s not the only way of labeling APIs and this classification alone is far from sufficient to understand the implications of making APIs a first-class citizen in your organization.</p>

<p>In the past years, when I was advocating APIs to business and IT people in a company engaged in an API-First journey (though it has decades-old legacy systems), I very often described APIs being organized in 3 dimensions in order to help them discover and grasp some important API-first challenges and benefits: API Layers, Business domains (or capabilities), and Ownership.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item"><a href="/organizing-apis-in-layers-system-business-and-experience-apis/">1 - Organizing APIs in System, Business, and Experience Layers</a></li>
          
        
          
          <li class="list-group-item"><a href="/organize-apis-around-business-domains-and-capabilities-not-tools/">2 - Organize APIs around business domains and capabilities, not tools</a></li>
          
        
          
          <li class="list-group-item active">3 - Don't organize APIs against ownership</li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<p>In this post, we’ll talk about the importance of ownership in the organization of APIs.</p>

<h1 id="disaster-waiting-to-happen">Disaster waiting to happen</h1>

<p>I did quite a lot of API design reviews. It went pretty well, but some were more chaotic than others. There were different reasons for that, one of them being ownership issues. Every time I encountered such problems, it ended pretty badly.</p>

<h2 id="an-api-project">An API project</h2>

<p>The ownership issue example I use the most probably because it made me realize that an API  cannot be handled through projects (actually, it was a SOAP Web Service).</p>

<p>The API in question was the one allowing access to contracts, and there was a “read contract” operation (something that would look like GET /contracts/{contractId}). It had been created for Project A by Project Team A (that was disbanded after the project). As Project A only needed a few properties of a contract, like its number and name, Project Team A decided that this operation would only return those data.</p>

<p>Project B came a few weeks after Project A had been released. Project B also needed to read a contract, but they needed the contract’s product category. However, being an essential piece of information, whatever the context, it was not returned. Project B had to modify the operation to add that information but only those one; that way, Project C would have some work, another project cycle would start.</p>

<p>Some may think that’s not a big deal, but each project took a little longer and so cost more money because “read a contract” had to be modified repeatedly. Also, the resulting APIs after a few projects are usually not the best in class.</p>

<h2 id="no-business-decisions-possibles">No business decisions possibles</h2>

<p>Another one that I have seen often in the past years is when there are silos that feel like there are 3 meters thick reinforced concrete walls between business and IT.</p>

<p>When I do an API design review, I ask many business/subject matter questions, and I often challenge the needs that led to the API’s creation or modification. Not that I know everything about all subject matters, it’s even the contrary. But I’m must ensure that people in charge have identified the proper needs. And if I can’t understand what the API does and why, how are its future users expecting a “something for dummies” API will? Sometimes these discussions lead the team to actually question the needs. But if the “business” won’t change their mind and consider the team building the API just executors, that only leads to terrible APIs.</p>

<h2 id="no-development-capacities">No development capacities</h2>

<p>Another example that I met only once but marked my mind. I remember a review that went very well. The conversation with the designer was smooth. The first version of the design was not as good as it could have been regarding needs that needed to be represented and guidelines conformity, but everything was easily and quickly fixed. The designer understood all feedback and learned in the making. That was a great review, but problems started after.</p>

<p>Working in Team A, the designer was also supposed to be the API owner. Because of some security and architecture constraints, it had been decided the API would be developed using different technology and infrastructure that team A was used to. The development was delegated to Team B, with which they happen to work with sometimes. Team B frequently built UI on top of the system managed by team A (mainly directly using their database). Also, Team B was supposed to be the first consumer of the API.</p>

<p>What happened? Team B started to build the API precisely like they wanted, absolutely not taking care of the design made by the API owner. They did not care about the API design guidelines and common practices, but worst: usability and reusability were not a concern.</p>

<p>Hopefully, it didn’t last long; the API owner stopped everything and made the necessary to be able to expose the API they wanted to create on their side.</p>

<h1 id="no-good-apis-can-exist-without-true-ownership">No good APIs can exist without true ownership</h1>

<p>So based on my experience, I can say that no good APIs can exist without true ownership. But what does it means?</p>

<h2 id="defining-api-ownership">Defining API ownership</h2>

<p>An API must be a product, not a project. It is something that fulfills greater needs than projects ones. It is thought on long-term.</p>

<p>Corollary to the API being a product, an API must belong to a single team.  A single team owning the API ensures a long term vision that will fulfill all the needs of all current and future consumers and ensure consistent evolutions</p>

<p>This team can make business decisions. Some business owners/stakeholders must be integrated into the team or they must listen to the team in order to build the best possible product.</p>

<p>And last but not least, this team has full control over API developments. Either because the team has the full capacity to develop them or because it has full control other the hired contractors/third party (who will do exactly what is expected).</p>

<p>The combination of all these elements defines API ownership.</p>

<h2 id="conways-law">Conway’s Law</h2>

<p>Such organization around ownership will irremediably be driven by <a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway’s law</a>. An adage that states our systems organizations mirror their own communication structure. It applies at 2 levels: human organization and technology organization.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/dont-organize-apis-against-ownership/ownership.png" class="figure-img img-fluid" /></figure>
</div>

<p>A company will be divided into various sub-organizations, it affects people and tools.</p>

<p>Inside those sub-organizations, in some ideal contexts, a single team may be able to handle a whole business domain (see Business Domain 1 or 4 in the figure), including all of its APIs, even the most hidden one. But that’s not always the case.</p>

<p>If a business domain is too big (see Business Domain 2 in the figure), its APIs will have to be distributed among several teams. But that will require some synchronization between the teams in order to keep a certain level of consistency between the various APIs of the domain, especially the ones that are exposed outside of the domain.</p>

<p>It is not that rare to have various technology used inside a domain (see Business Domain 3). Imagine having a good old commercial off the shelf vendor solution, requiring very specific knowledge), it would be wise to let it be in the hand of experts that will just concentrate on making it run and expose system APIs and have another team dedicated to the creation of business APIs using a more common technology (like NodeJS, .Net or Java for instance).</p>

<h1 id="3-dimensions">3 dimensions</h1>

<p>That concludes this series describing 3 dimensions of API organization:</p>

<ul>
  <li>API Layers: 3 different types of APIs with different purposes (system, business experience). Only the business layer is required.</li>
  <li>Business domains and capabilities: Organize around business domains and not tools to create independent and reusable APIs fulfilling business needs without exposing all domain features (and so its complexity). An API is a domain or a sub-domain for dummies.</li>
  <li>Ownership: Each API must have a single owner with full power from decisions to implementation. Take Conway’s law into account when defining the teams managing the APIs.</li>
</ul>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[It doesn’t matter how APIs are organized, in layers, by business domain or any other dimension if you don’t take care of the most important one. The one dimension that rules them all: ownership. This post is the third and last of the “3 dimensions to consider for a successful API-First strategy” series.]]></summary></entry><entry><title type="html">We always forget to select a Postman environment</title><link href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/" rel="alternate" type="text/html" title="We always forget to select a Postman environment" /><published>2022-03-26T00:00:00-05:00</published><updated>2022-03-26T00:00:00-05:00</updated><id>https://apihandyman.io/we-always-forget-to-select-a-postman-environment</id><content type="html" xml:base="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/"><![CDATA[<p>When using Postman, it’s a best practice to store API token values in environment secret variables.
Environment variables can also be used to store other variables uses in scripts.
But when opening a collection, we often forget to select an environment and spend a few seconds if not minutes or more trying to figure out what the problem is with a request. Just to realize in the end that we just forgot to select an environment.
How can this be avoided?
<!--more--></p>

<div class="alert alert-info"><h4 class="alert-heading">Postman Tip And Tricks</h4><hr />
<p>This post is a “Postman Tips And Tricks Post” in which I share the tips and tricks I learn while using Postman.
You can either:</p>

<ul>
  <li>Read this post</li>
  <li>Read the collection documentation on <a href="https://www.postman.com/apihandyman/workspace/postman-tips-and-tricks/documentation/143378-215afe9b-9b7d-459d-b020-361dbf1c5bf4">Postman network</a></li>
  <li>Use this <a href="https://www.postman.com/apihandyman/workspace/postman-tips-and-tricks/documentation/143378-215afe9b-9b7d-459d-b020-361dbf1c5bf4"><img src="/images/commons/run-in-postman.svg" alt="Run in Postman" /></a> button to fork the collection directly in Postman</li>
  <li>Get the collection from <a href="https://github.com/apihandyman/postman-tips-and-tricks/tree/main/dont-forget-to-select-an-environment">Github</a> to import it in Postman. (Click on the “View complete collection documentation” link in lower right corner to see documentation in full screen after fork)</li>
</ul>

</div>

<p>This post demonstrates how to take advantage of <code>pm.environment.name</code> in Pre-Scripts to prevent sending a request and have a clear error message when an environment is not selected. The use case that will be used to demonstrate all that is retrieving a tweet with Twitter v2 API. The aim of this collection being error handling, you’ll need to have an actual access to Twitter v2 API only if you want to make the request succeed.</p>

<h1 id="how-it-works">How it works</h1>

<p>The magic is mostly handled in the Pre-request script regarding checking an environment is selected. But what happens there allows to have more precise error message on 401 errors in Test script.</p>

<h2 id="collection-pre-request-script">Collection Pre-request Script</h2>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Pre-request Script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn btn-secondary border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-javascript line-numbers code-collapsed code-copy"><code class="code-block">/*******************************************/
/*  Checks a valid environment containing  */
/*  a specific variable used as bearer     */
/*  token is selected                      */
/*******************************************/

/* The name and default value of the variable used in Authorization
   and checked here is defined at collection level.
   That way, this code snippet can be easily copied to other
   collections */
const tokenVariableName = pm.collectionVariables.get(&quot;token_variable_name&quot;);
const tokenVariableDefaultValue = pm.collectionVariables.get(&quot;token_variable_default_value&quot;);
// The message indicating how to solve the problem
let message;
// Get selected environment name (undefined if none is selected)
const selectedEnvironment = pm.environment.name;
// Get token environment variable value (undefined if none exists or if current value is empty) 
const tokenVariableValue = pm.environment.get(tokenVariableName);

if(selectedEnvironment === undefined) {
    message = `No environment containing a ${tokenVariableName} variable has been selected`;
}
else if(tokenVariableValue === undefined) {
    message = `Selected environment (${selectedEnvironment}) does not contain a ${tokenVariableName} variable`;
}
else if(tokenVariableValue.length === 0) {
    message = `Selected environment (${selectedEnvironment}) contains a ${tokenVariableName} variable but its current value is empty`;
}
else if(tokenVariableValue === tokenVariableDefaultValue) {
    message = `Selected environment (${selectedEnvironment}) contains a ${tokenVariableName} variable but its current value is the default one (${tokenVariableDefaultValue})`;
}

if(message) {
    throw new Error(message);
}</code></pre>
  </div>
</div>

<p>The collection level Pre-Request script checks that an environment is selected by verifying the value of <code>pm.environment.name</code> .</p>

<p>It also checks a specific variable is defined and has a correct value. The name of that variable is defined in the <code>token_variable_name</code> collection variable. The script also verifies the the variable has a value and that value is not the default one.</p>

<p>If there’s anything wrong with one of the checks, the request is not sent and a red message explaining exactly what the problem is appears on screen thanks to <code>throw new Error(message)</code>.</p>

<h2 id="collection-tests">Collection Tests</h2>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test Script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-javascript line-numbers code-copy"><code class="code-block">if(pm.response.code === 401) {
    const selectedEnvironment = pm.environment.name;
    const tokenVariableName = pm.collectionVariables.get(&quot;token_variable_name&quot;);
    const tokenVariableValue = pm.environment.get(tokenVariableName);
    const message = `Selected environment (${selectedEnvironment}) contains` +
                    `a ${tokenVariableName} variable but its value is` +
                    `probably not valid`;
    pm.test(&quot;Unauthorized request (401)&quot;, function() {
        pm.expect.fail(message);
    });
}</code></pre>
  </div>
</div>

<p>The collection level Tests script take for granted that the Pre-Request script has done its job. As there was an environment selected and it contains the expected variable which is not empty or does not have a default value, the test script can guess the token sent is invalid when receiving a 401 Unauthorized response.</p>

<h2 id="collection-variables">Collection variables</h2>

<p>In order to make the code easily reusable across various collection, some collection variable are used:</p>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>VALUE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>token_variable_name</td>
      <td>twitter_token</td>
      <td>The name of variable used in the token field in collection Authorization configuration.</td>
    </tr>
    <tr>
      <td>token_variable_default_value</td>
      <td>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</td>
      <td>The default value of the variable (hence, the one in INITIAL VALUE)</td>
    </tr>
  </tbody>
</table>

<h2 id="environment-variables">Environment variables</h2>

<p>This collection requires the creation of an environment containing the following variables. This workspace comes with ready-to-use environment to test the various behaviors of the scripts (see Test cases below).</p>

<div class="alert alert-danger">
<p>Never store API tokens in initial value. Read <a href="https://blog.postman.com/how-to-use-api-keys/">How to use API Keys</a> to learn more.</p>

</div>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>TYPE</strong></th>
      <th><strong>INITIAL VALUE</strong></th>
      <th><strong>CURRENT VALUE</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>twitter_token</td>
      <td>secret</td>
      <td>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</td>
      <td>A Twitter API bearer token (Read <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">Twitter API documentation</a> to get one)</td>
    </tr>
  </tbody>
</table>

<h1 id="test-cases">Test cases</h1>

<p>Use one of the following test cases to see the collection level Pre-Script and Tests scripts in action.</p>

<div class="alert alert-info">
<p>Note that you can make the environment drop list larger to see full environment names.</p>

</div>

<h2 id="no-environment-selected">No environment selected</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-0.png" alt="" /></p>

<ol>
  <li>Set environment drop list on “No Environment” (It’s the default value when opening the collection)</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="empty-environment">Empty environment</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-1.png" alt="" /></p>

<ol>
  <li>Create an environment (don’t create any variable)</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="wrong-name">Wrong name</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-2.png" alt="" /></p>

<ol>
  <li>Create an environment</li>
  <li>Add a <code>twitter_tokenn</code> variable to your environment (yes, 2 n’s, it does not match the <code>token_variable_name</code> collection variable value)</li>
  <li>Set INITIAL VALUE to <code>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</code> (it matches <code>token_variable_default_value</code> collection variable value)</li>
  <li>Save the environment</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="default-value">Default value</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-3.png" alt="" /></p>

<ol>
  <li>Create an environment</li>
  <li>Add a <code>twitter_token</code> variable to your environment (it matches the <code>token_variable_name</code> collection variable value)</li>
  <li>Set INITIAL VALUE to <code>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</code> (it matches <code>token_variable_default_value</code> collection variable value)</li>
  <li>Save the environment</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="invalid-token">Invalid token</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-4.png" alt="" /></p>

<ol>
  <li>Create an environment</li>
  <li>Add a <code>twitter_token</code> variable to your environment (it matches the <code>token_variable_name</code> collection variable value)</li>
  <li>Set INITIAL VALUE to <code>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</code> (it matches <code>token_variable_default_value</code> collection variable value)</li>
  <li>Set CURRENT VALUE to <code>INVALID_TOKEN</code></li>
  <li>Save the environment</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="valid-token">Valid token</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-5.png" alt="" /></p>

<ol>
  <li>Read <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">Twitter API documentation</a> to get a bearer token</li>
  <li>Create an environment</li>
  <li>Add a <code>twitter_token</code> variable to your environment (it matches the <code>token_variable_name</code> collection variable value)</li>
  <li>Set INITIAL VALUE to <code>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</code> (it matches <code>token_variable_default_value</code> collection variable value)</li>
  <li>Put the bearer token value in <code>twitter_token</code> variable current value (NOT the initial value!)</li>
  <li>Save the environment</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[When using Postman, it’s a best practice to store API token values in environment secret variables. Environment variables can also be used to store other variables uses in scripts. But when opening a collection, we often forget to select an environment and spend a few seconds if not minutes or more trying to figure out what the problem is with a request. Just to realize in the end that we just forgot to select an environment. How can this be avoided?]]></summary></entry><entry><title type="html">Organize APIs around business domains and capabilities, not tools</title><link href="https://apihandyman.io/organize-apis-around-business-domains-and-capabilities-not-tools/" rel="alternate" type="text/html" title="Organize APIs around business domains and capabilities, not tools" /><published>2022-03-23T00:00:00-05:00</published><updated>2022-03-23T00:00:00-05:00</updated><id>https://apihandyman.io/organize-apis-around-business-domains-and-capabilities-not-tools</id><content type="html" xml:base="https://apihandyman.io/organize-apis-around-business-domains-and-capabilities-not-tools/"><![CDATA[<p>People don’t want drills, they want to make holes. APIs are interfaces exposed by pieces of software, our modern tools. But it would be a terrible idea to think of APIs just as interfaces to tools. APIs must be organized around our business domains and capabilities.
This post is the second of the “3 dimensions to consider for a successful API-First strategy” series.</p>

<!--more-->

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">3 dimensions to consider for a successful API-First strategy Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text"><p>When talking about “organizing”, “classifying” or “categorizing” APIs, the private/partner/public classification is the one that comes first very often. But that’s not the only way of labeling APIs and this classification alone is far from sufficient to understand the implications of making APIs a first-class citizen in your organization.</p>

<p>In the past years, when I was advocating APIs to business and IT people in a company engaged in an API-First journey (though it has decades-old legacy systems), I very often described APIs being organized in 3 dimensions in order to help them discover and grasp some important API-first challenges and benefits: API Layers, Business domains (or capabilities), and Ownership.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item"><a href="/organizing-apis-in-layers-system-business-and-experience-apis/">1 - Organizing APIs in System, Business, and Experience Layers</a></li>
          
        
          
          <li class="list-group-item active">2 - Organize APIs around business domains and capabilities, not tools</li>
          
        
          
          <li class="list-group-item"><a href="/dont-organize-apis-against-ownership/">3 - Don't organize APIs against ownership</a></li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<p>In this second post, we’ll talk about organizing APIs around business domains and capabilities and not tools. This perspective is critical in order to build APIs that will be easy-to-understand, easy-to-use, easy-to-evolve, and limit coupling.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/organize-apis-around-business-domains-and-capabilities-not-tools/organize-around-business-not-tools.png" class="figure-img img-fluid" /></figure>
</div>

<h1 id="wrong-organization-around-tools">Wrong organization around tools</h1>

<p>APIs are Application Programming Interfaces, they allow pieces of software to interact with each other. They allow tools to talk to each other, great! But let’s be honest, people don’t want to use your tools. And you don’t want to give them access to your tools. Both of you’ll regret it. What terrible things will irremediably happen when giving access to API “A” that brutally maps tool “A”?</p>

<p>People may have a hard time grasping what they can do with this “A” API just because its name does not mean anything. Choosing the right name for an API is far more important than you may think, especially for internal APIs. You should Read my <a href="/pink-fluffy-unicorn-api-wtf-or-3-reasons-why-choosing-a-not-meaningful-API-name-can-be-a-problem/">Pink Fluffy Unicorn API? WTF? (or 3 reasons why choosing a not meaningful API name can be a problem)</a> to discover more about this topic.</p>

<p>Even if you give a meaningful name to the API of Tool A, you’ll still have problems. Indeed, API giving direct access to tools does not usually provide a user-friendly interface. They can be quite cryptic and usually requires a high level of expertise. Most of the time they’re made to make the tool work, not let people fulfill their needs. People can also be overwhelmed by the amount of function available.</p>

<p>As people have hard times using them, they will lose time. You’ll also lose time too accompanying them, answering all of their questions. It costs a lot of time and so a lot of money to use them. If people have the choice they will probably not use them.</p>

<p>And if people use such “Tool API” that increases the coupling between systems, because they require a high level of expertise. What will happen when the vendor tool evolves? Everyone using it will be impacted, it will be a total nightmare to coordinate everyone.</p>

<p>If you read the previous post in this series, that should sound familiar: the API of a tool is usually a terrible system API and must be hidden at all costs, only used by a handful of trusted and expert consumers.</p>

<h1 id="business-domain-driven-design">Business domain driven design</h1>

<p>To fulfill what it’s supposed to do, an organization takes advantage of various capabilities offered by its business domains. For a company selling products, the apparent business domains are doing the company “stuff” such as sales or R&amp;D., and there are also less obvious support business domains like HR or accounting. Each domain will rely on people and their tools to function.</p>

<p>A business domain may expose one or more APIs, depending on the domain’s composition. As this matter is often related to microservices, know that size does not matter when deciding if you should put all capabilities of a domain inside a single or many APIs. What matters is that each API is a meaningful and independent set of operations. Meaningful because it offers capabilities that make sense together and are helpful to the “outside world” outside the domain. Independent because the API can be used without any other one. That does not forbid using an API in conjunction with others, but if that’s always necessary, there’s probably something wrong with how the domains are organized or split.</p>

<p>A business API may rely on more than one tool’s system APIs. That’s pretty convenient to hide you have two different software solutions to do the same thing. Such architecture often happens with fusion and acquisition. It can also come from organizational constraints. Two separate teams doing the same tasks but targeting different regions or customers may use various tools (because of actual regulation constraints or lack of tooling governance).</p>

<p>A business domain is under no obligation to expose all of its capabilities (and so its APIs). There are tools that people from the outside will never see; that’s absolutely fine. A business domain is also under no obligation to expose its capabilities precisely as they work inside. The less a domain shows what is happening in its black box, the better; it reduces coupling between systems.</p>

<p>A business domain may rely on other domains, but a bi-directional relationship is usually problematic, especially when it concerns a specific business process. That usually leads to less reusable APIs.</p>

<p>Taking advantage of methods such as <a href="https://en.wikipedia.org/wiki/Domain-driven_design">domain-driven design</a> or <a href="https://en.wikipedia.org/wiki/Event_storming">event storming</a> can be helpful to figure out how to divide an organization or a domain.</p>

<h1 id="whatever-the-layer-apis-belong-to-a-domain">Whatever the layer, APIs belong to a domain</h1>

<p>This second organizational perspective (the first one being the API layers), shows that system APIs and business APIs both belong to business domains. Is that also the case of experience APIs? Yes, experience APIs can belong to a consumer-oriented or provider-oriented business domain.
A backend-for-frontend (BFF) built by a mobile application team belongs to this team’s domain (a “consumer domain”). A tailor-made product experience API may belong to its underlying domain or to an entirely independent one.
So all types of APIs belong to a business domain, the only visible ones being business and experience APIs.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/organize-apis-around-business-domains-and-capabilities-not-tools/all-apis-belong-to-a-domain.png" class="figure-img img-fluid" /></figure>
</div>

<p>In the next post, we’ll talk about the third and probably most important dimension of API organization: Ownership.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[People don’t want drills, they want to make holes. APIs are interfaces exposed by pieces of software, our modern tools. But it would be a terrible idea to think of APIs just as interfaces to tools. APIs must be organized around our business domains and capabilities. This post is the second of the “3 dimensions to consider for a successful API-First strategy” series.]]></summary></entry><entry><title type="html">Organizing APIs in System, Business, and Experience Layers</title><link href="https://apihandyman.io/organizing-apis-in-layers-system-business-and-experience-apis/" rel="alternate" type="text/html" title="Organizing APIs in System, Business, and Experience Layers" /><published>2022-03-16T00:00:00-05:00</published><updated>2022-03-16T00:00:00-05:00</updated><id>https://apihandyman.io/organizing-apis-in-layers-system-business-and-experience-apis</id><content type="html" xml:base="https://apihandyman.io/organizing-apis-in-layers-system-business-and-experience-apis/"><![CDATA[<p>Either for historical, organizational, or technical reasons, not all APIs are at the same level, especially in organizations that do not start their API-First journey from scratch. APIs can be organized into three different layers: system APIs, business APIs, and experience APIs. This post is the first of the “3 dimensions to consider for a successful API-First strategy” series.
<!--more--></p>

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">3 dimensions to consider for a successful API-First strategy Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text"><p>When talking about “organizing”, “classifying” or “categorizing” APIs, the private/partner/public classification is the one that comes first very often. But that’s not the only way of labeling APIs and this classification alone is far from sufficient to understand the implications of making APIs a first-class citizen in your organization.</p>

<p>In the past years, when I was advocating APIs to business and IT people in a company engaged in an API-First journey (though it has decades-old legacy systems), I very often described APIs being organized in 3 dimensions in order to help them discover and grasp some important API-first challenges and benefits: API Layers, Business domains (or capabilities), and Ownership.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item active">1 - Organizing APIs in System, Business, and Experience Layers</li>
          
        
          
          <li class="list-group-item"><a href="/organize-apis-around-business-domains-and-capabilities-not-tools/">2 - Organize APIs around business domains and capabilities, not tools</a></li>
          
        
          
          <li class="list-group-item"><a href="/dont-organize-apis-against-ownership/">3 - Don't organize APIs against ownership</a></li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<p>In this first post, we’ll talk about organizing APIs in layers (system, business, experience). That allows uncovering some architecture questions such as “how can I APIfy my IT mess” while instilling the importance and benefits of “don’t make me think” APIs.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/organizing-apis-in-layers-system-business-and-experience-apis/api-layers.png" class="figure-img img-fluid" /></figure>
</div>

<h1 id="system-apis-layer">System APIs Layer</h1>

<p>The lowest or most hidden API layer is the system APIs layer. System APIs aim to simplify access to software solutions, but just from a technical perspective.</p>

<p>If you have a good old mainframe system, you may build (or buy) an HTTP access layer façade to put it on top of it to facilitate access to its COBOL programs. Not-so-old Commercial-Off-The-Shelf software products (COTS) are unfortunately known to provide terrible APIs (when they provide some).  Software-As-A-Service (SAAS) solutions usually provide APIs. They usually are less terrible than COTS ones but not always, unfortunately.</p>

<p>These different APIs are system APIs. They give direct access to the heart of a system, can be tainted by the provider’s technical perspective, or often require a high level of technical or business/subject matter expertise and possibly some knowledge of the underlying implementation.</p>

<p>They MUST stay private and never be exposed publicly to the outside world. Exposing them to other teams inside the organization should be done cautiously. If that can be avoided, that would be much better.</p>

<p>They offer a terrible DX. It takes an awfully long time to integrate them into other systems for the uninitiated consumers. Their provider will also lose time in the making as they will have to accompany closely consumers, answers to their many questions.</p>

<p>Using them leads to a detrimental tight coupling because they require a high level of expertise. Such coupling must only exist with very few other systems.</p>

<p>And the icing on the cake, they are prone to cause security issues. That’s less true for SAAS but almost a certainty for COTS. More often than not they do not propose standard security like OAuth 2, instead, you may have a basic auth with static login and password. Hopefully, that could possibly be solved by adding an API gateway on top of it. But that will never solve permissions/rights issues that will inevitably arise.</p>

<p>So, system APIs are not what we could call “good” APIs nowadays but at least they exist! They at least allow other systems (you own) to be plugged into the system that exposes them. And no worries if they are complex and not totally secured, that’s the job of the next layer to simplify all that.</p>

<h1 id="business-apis-layer">Business APIs Layer</h1>

<p>Business APIs aim to propose a computerized version of an organization’s (either a company’s, a business unit’s, or a team’s) added value skills, knowledge, and expertise. (Maybe I should talk about “subject matter” APIs?)</p>

<p>Note that “business” means the organization’s business in a broad sense, hence “what they do”. For instance, an insurance company may provide APIs allowing to subscribe to a home insurance contract. On the “opposite” of the spectrum, if the organization’s job is providing databases-as-a-service because it’s a cloud provider or an infrastructure team, a business API may allow creating databases.</p>

<p>This API layer is the only mandatory one. Those business APIs can be private or public (or partner), consumed inside or outside the organization. They can exist on their own or be built on top of system APIs or other business APIs.</p>

<p>Their main purpose is to expose the “organization stuff for dummies”. They require a low level of expertise to be used. They hide as much as possible the internal mess, especially those ugly system APIs, to make them easy to use and reduce coupling with consumers.</p>

<p>They are totally secured, they especially have to fix possible holes that exist in their underlying system APIs. They can be reused in many different contexts. That’s possible because they focus on fulfilling business needs from the outside-of-the-organization-providing-them perspective.</p>

<p>In an ideal world, as they are secured and easy to use, they can be used by anyone inside or outside of the organization (see Jeff Bezos mandate).</p>

<p>Such vision has a nice side effect on costs of development and time-to-market. It takes a few minutes for anyone inside the organization to use a business API without the need of bothering the provider with thousands of questions (like with system APIs). Pushed to the extreme, a private API can be turned into a profitable (public or partner) product in a matter of minutes.</p>

<p>But even if they are supposed to be highly reusable, sometimes, these business APIs can be not enough when used alone or need to be tweaked for specific needs.</p>

<h1 id="experience-apis-layer">Experience APIs Layer</h1>

<p>Experience APIs are created to adapt and orchestrate business APIs for specific technical or business needs.</p>

<p>The most known examples of experience APIs are BFFs, not Best Friends Forever but Backend For Frontends. Usually, for performance concerns, some mobile application development teams create such BFFs to transform and aggregate API calls and avoid mobile applications triggering multiple calls. It’s not uncommon to have GraphQL experience APIs built on top of REST business APIs.</p>

<p>Sometimes such experience APIs do not do that many modifications to their underlying APIs. They just act as a buffer of change, allowing to decouple consumers from business APIs. That could be useful when a modification made on a business APIs must not be reported on consumers outside of the organization. But that possibly leads to an API anti-pattern: not eating your own API dog food.</p>

<p>Experience APIs can also be created for pure business concerns. An organization may want to create a totally new product by aggregating various business APIs. Such experience APIs are supposed to be created quickly. Someone has an idea, boom an experience API is created minutes later to test it. What may have started as a proof of concept must in the end become a new business API in case of success.</p>

<p>Experience APIs must be used with caution when they are not BFFs owned by the consumers. Indeed without care, an organization could end with as many specific variations of its business APIs as it has consumers or partners. That’s a nightmare to maintain (talk to that about software vendors who customize their products for their customers).</p>

<h1 id="the-api-layer-cake">The API layer cake</h1>

<p>So, as you can see, not all APIs are equals, they’re not on the same level. It’s critical to understand that existing raw APIs (the system ones) are not to be accessible by many, are too complex and possibly unsecured. Building business-oriented easy-to-use API façades are a good way to put lipstick on the API pig. Those business APIs will provide a cleaner API surface, allowing anyone to build anything on top of them. In last resort, for highly specific needs, you can build experience APIs providing tailor-made features. But don’t fall into the one partner/consumer equals one experience API trap.</p>

<p>Here’s a recap of the 3 API layers:</p>

<table>
  <thead>
    <tr>
      <th>API Layer</th>
      <th>Purpose</th>
      <th>Public APIs</th>
      <th>Private APIs</th>
      <th>Security</th>
      <th>Usability</th>
      <th>Reusability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>System APIs</td>
      <td>Technically simplifies access</td>
      <td>Never</td>
      <td>Reduce at all cost</td>
      <td>⭐️</td>
      <td>⭐️</td>
      <td>⭐️</td>
    </tr>
    <tr>
      <td>Business APIs</td>
      <td>You stuff for dummies</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>⭐️⭐️⭐️⭐️⭐️</td>
      <td>⭐️⭐️⭐️⭐️⭐️</td>
      <td>⭐️⭐️⭐️⭐️⭐️</td>
    </tr>
    <tr>
      <td>Experience APIs</td>
      <td>Adapt and/or aggregate</td>
      <td>No for BFFs, Yes for Products</td>
      <td>Yes</td>
      <td>⭐️⭐️⭐️⭐️⭐️</td>
      <td>⭐️ to ⭐️⭐️⭐️⭐️⭐️</td>
      <td>⭐️ to ⭐️⭐️⭐️⭐️⭐️</td>
    </tr>
  </tbody>
</table>

<p>In next post, we’ll discuss the importance of <a href="/organize-apis-around-business-domains-and-capabilities-not-tools/">organizing APIs around business domains and capabilities, not tools</a>.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Either for historical, organizational, or technical reasons, not all APIs are at the same level, especially in organizations that do not start their API-First journey from scratch. APIs can be organized into three different layers: system APIs, business APIs, and experience APIs. This post is the first of the “3 dimensions to consider for a successful API-First strategy” series.]]></summary></entry><entry><title type="html">Building a healthy and profitable relationship between tools and specifications</title><link href="https://apihandyman.io/building-a-healthy-and-profitable-relationship-between-tools-and-specifications/" rel="alternate" type="text/html" title="Building a healthy and profitable relationship between tools and specifications" /><published>2022-03-09T00:00:00-06:00</published><updated>2022-03-09T00:00:00-06:00</updated><id>https://apihandyman.io/building-a-healthy-and-profitable-relationship-between-tools-and-specifications</id><content type="html" xml:base="https://apihandyman.io/building-a-healthy-and-profitable-relationship-between-tools-and-specifications/"><![CDATA[<p>We may never have a clear answer to the question “what comes first? Tools or Specifications?”. What is sure is people create tools or specifications based on their needs. Those tools and specifications, like OpenAPI, AsyncAPI, or JSON Schema, are tightly intricated. What could be done to build a healthy and profitable relationship?
<!--more--></p>

<p><em>This post’s banner is a diagram of the six possible types of symbiotic relationship, from mutual benefit to mutual harm. Symbiosis (from Greek , symbíōsis, “living together”, from , sýn, “together”, and , bíōsis, “living”) is any type of a close and long-term biological interaction between two different biological organisms, be it mutualistic, commensalistic, or parasitic. The organisms, each termed a symbiont, must be of different species.
Source <a href="https://en.wikipedia.org/wiki/Symbiosis">Symbiosis - Wikipedia</a></em></p>

<p><em>Special thanks to <a href="https://twitter.com/bpedro/status/1501192001269776389?s=20&amp;t=w9IgXoM8o6sHIrcxXg5BJQ">Bruno Pedro for raising the “who’s first” question</a> while I was tweeting on that “no tools, no standard/specification” topic.</em></p>

<h1 id="why-do-specifications-need-tools--and-reverse">Why do specifications need tools  and reverse?</h1>

<p>Let’s take an example. I could talk about the OpenAPI Specification but to change I’ll talk about <a href="https://json-schema.org/">JSON Schema</a> (which is actually used by OpenAPI).</p>

<p>JSON Schema aims to describe formally your data formats. For instance, if I build a command-line tool that needs a configuration file. I can define its structure using a JSON Schema without writing a single line of my application code (I’m in the design first/spec first team!).</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">A JSON Schema</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy"><code class="code-block">{
    &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,
    &quot;title&quot;: &quot;SuperCliConfiguration&quot;,
    &quot;required&quot;: [
        &quot;sourceRepository&quot;
    ],
    &quot;properties&quot;: {
        &quot;sourceRepository&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;pattern&quot;: &quot;^https?://.*.git$&quot;
        }
    }
}</code></pre>
  </div>
</div>

<p>The JSON Schema specification is human-readable and as an (experienced) human being, I can see that, in the “SuperCliConfiguration” schema, the property “sourceRepository” is required and it must be a URL ending with “.git”.</p>

<p>But not all human beings can read such a format easily, especially when it describes complex schemas. And not all of them are happy reading JSON. So it is nicer to show them a rendering that is more accessible.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/building-a-healthy-and-profitable-relationship-between-tools-and-specifications/json-schema-rendering.png" class="figure-img img-fluid" /></figure>
</div>

<p>Such documentation tool taking advantage of JSON Schema is great in itself, that enhances my tool’s documentation. But it would be a pity to confine this format to documentation.</p>

<p>Such a specification document is interestingly used in code. I can use this schema with the <a href="https://ajv.js.org/">ajv</a> library to check that a configuration file is valid without writing much code.</p>

<p>And that’s not all, the schema I have created is not only interesting for me. If someone else wants to build a tool that generates my tool’s configuration file based on some data they have, they can take advantage of my JSON Schema to do so.</p>

<p>A specification without tools will never be used widely and will probably disappear quickly. Indeed, without tools taking advantage of it, what’s the point of a specification? It’s like writing a musical score and never playing it.</p>

<p>The tools specifications relationship is not a one-way one. People creating tools can avoid losing time reinventing the wheel by taking advantage of specifications.</p>

<p>And even more important, tools enhance their interoperability by using specifications. They share a kind of “standard” (not all specifications are strictly standard anointed by some standard organization) easing communication with other tools (in a broad sense, it’s not only about APIs). And, icing on the cake, those interoperable tools using specifications become part of a greater whole, enhancing their visibility, letting them participate in various ecosystems.</p>

<p>So, no specifications without tools.
And “not no tools without specifications”, but better tools with specifications.
But what can be done on both sides to ensure a healthy relationship profitable to everyone involved?</p>

<h1 id="tools-perspective">Tools perspective</h1>

<p>As someone involved in the creation of a tool that could take advantage of a specification, I would expect the following when looking for information about a specification:</p>

<ul>
  <li>A clean short description of what the specification does, what problems it is trying to solve</li>
  <li>A few use cases examples that show me how the specification could be or actually is used in the real world, accompanied by short code samples</li>
  <li>An exhaustive list of complete use cases, explaining everything in details</li>
  <li>An exhaustive, example-based, description of every element of the specification</li>
  <li>Some reference implementations</li>
  <li>Obviously the technical documentation à la RFC (for the purists)</li>
</ul>

<p>I also hope any fashion of presenting information and teaching to be used. I expect not only text but also figures, interactive diagrams, tutorials, videos, ready-to-use git repositories, … In my wildest dreams, I would love to see also training and certifications.</p>

<p>If you’ve read me or seen me talking about API DX (Developer eXperience) and documentation, what is described above should sound vaguely familiar. With modern web APIs, we’ve been used to be able to understand and use an API in no time, easily. Being provided with information and helper material/tools in many forms. That should be the same for anything, and specifications are no exception.</p>

<p>Not taking care of the IX, Implementer eXperience may seriously hinder a specification adoption. It may also lead to incomplete and even invalid implementation, hindering, even more, the specification adoption.</p>

<h1 id="specification-perspective">Specification perspective</h1>

<p>As someone who is involved in the creation of a specification or as a user of the tool taking advantage of a specification, I expect the following from implementers:</p>

<ul>
  <li>Explain from a high perspective why the spec is used in the tool</li>
  <li>Explicitly state which version(s) of the specification is (are) supported</li>
  <li>Explicitly state which portion/feature/part of the spec is supported and for what purpose</li>
  <li>Explicitly state which portion/feature/part of the spec is not supported (and possibly why)</li>
  <li>Provide a roadmap of specification support (for instance, for OpenAPI, <a href="/we-need-to-talk-openapi-3-is-4-years-old-but-swagger-2-is-still-predominant/">knowing if 3.0 and 3.1 support is planned and for when is welcomed</a>)</li>
</ul>

<p>People creating specs AND tools’ users need to know how specifications are actually used.</p>

<p>Regarding specification creators, some could object “why would I do extra work for them”. Well, “they” work hard on defining a specification for the community, so be nice to them, what they do is good for you remember? Your tool becomes part of a huge ecosystem thanks to their work (and yours actually). Not that means specifications creators should provide a standard way of stating what is used on how (and possibly a simple way of doing that).</p>

<p>And in any case, you can’t get rid of providing that information to people who will possibly use your tools. Personally, if I had to choose, I’ll use the tool that tells me the whole story because I don’t want to discover too late that  “… oops, we said we support OpenAPI 3, well, … not totally, we don’t use the security definitions … and we do not support multi-document specifications”.</p>

<h1 id="to-be-continued">To be continued</h1>

<p>This post is just the first one on that topic, the relationship between specifications and tools. There will be probably more to come as I investigate more on the concepts of implementers’ experiences and specification implementation scorecard/notation/evaluation.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[We may never have a clear answer to the question “what comes first? Tools or Specifications?”. What is sure is people create tools or specifications based on their needs. Those tools and specifications, like OpenAPI, AsyncAPI, or JSON Schema, are tightly intricated. What could be done to build a healthy and profitable relationship?]]></summary></entry><entry><title type="html">Underestimated and unexpected IT challenges of API initiatives</title><link href="https://apihandyman.io/underestimated-and-unexpected-it-challenges-of-api-initiatives/" rel="alternate" type="text/html" title="Underestimated and unexpected IT challenges of API initiatives" /><published>2022-03-02T00:00:00-06:00</published><updated>2022-03-02T00:00:00-06:00</updated><id>https://apihandyman.io/underestimated-and-unexpected-it-challenges-of-api-initiatives</id><content type="html" xml:base="https://apihandyman.io/underestimated-and-unexpected-it-challenges-of-api-initiatives/"><![CDATA[<p>As an IT member, you convinced your boss that APIs were a thing and IT department should take them seriously.
Congratulations! 
That’s good, very good.
Not only for you and your IT but for your whole organization.
All you need to do now is choose an API gateway solution and you’re done…
So you think.
The API journey, even just at IT level, is full of pitfalls. 
<!--more--></p>

<h1 id="it-is-often-where-apis-start">IT is often where APIs start</h1>

<p>There are still plenty of companies, government agencies and various organizations that didn’t yet really took the API train.
But when they finally take it, it’s often thanks to some IT initiative.
Because, hey, APIs originally are software stuff.</p>

<p>IT led API initiatives are not always perfect, but they can lead to not so minor and cool enhancements, and even initiate an organization’s total transformation, making it truly API-First.
Indeed, at worst taking APIs seriously at IT level will make your IT systems become modular, make them capable of fulfilling new needs easily, achieving faster time to market.
And at best, some IT people can start to advocate at business and exec level that APIs could be worth of interest outside of IT.
When those people hear that company could make more business with APIs, they may listen, they may be contaminated by the API frenzy.
But that’s another story.
Let’s just focus on the challenges that can happen when a company’s IT start to take APIs seriously.</p>

<h1 id="some-challenges">Some challenges</h1>

<p>I’ll share here what I’ve witnessed myself on various API journeys.
This post is not intended to be exhaustive and provide solutions to all challenges.</p>

<h2 id="api-management-setup-and-management">API management setup and management</h2>

<p>When someone says APIs, API management vendors come out of the woodwork, promising wonders.
Their API management solutions will solve all of your organization’s API problems so easily!
Since you were not born yesterday and you know that magic-software-that-solves-all-problems don’t exist, you guess it could be a little bit exaggerated.</p>

<p>But what you may not realize is that even if API management solutions can actually help you to expose securely your APIs and manage their consumers.
Also possibly gave you an idea of your existing APIs through the provided developer portal (well, once those APIs have been exposed on the gateway).
Integrating and managing this solution can be far more complicated than you thought in the beginning.</p>

<p>Who will be allowed to develop on this solution? 
(Yes, you’ll need to develop on this solution).
How to manage this solution lifecycle? (It will need to be updated regularly).
How to connect it to your identity providers?
How to connect it to CI/CD to automatically expose interface contracts?
How to ensure that only API owner can actually deploy their APIs throught CI/CD?
Will there be a single or multiple instance of API gateway(s)?
Will there be a single API management solution or multiple ones?
By who and how consumers will be managed? (defining which application can consumer which API)
How consumers will get their credentials securely (and possibly automatically)?
How will they be securely renewed regularly?</p>

<p>Nothing unsolvable, but better study well this matter to have all aspects in mind when starting the API management part of your API initiative.</p>

<h2 id="ensuring-existing-systems-capacity-and-security">Ensuring existing systems capacity and security</h2>

<p>Let’s APIfy this system!
That means, let’s add more load on this system which was quite protected in the guts of our IT. 
Very often, APIs come as an addition to the load of a system, so better triple check the current status and if the system can absorb the new load without failing.
That may also open systems that were quite protected, are you sure those new APIs don’t create security issues?</p>

<h2 id="acquiring-api-design-skills">Acquiring API design skills</h2>

<p>APIs are originally an IT matter.
We, the IT, have been connecting pieces of software together for decades.
So, obviously, we know perfectly how to do APIs, and how to do them well.</p>

<p>While it can be sometimes true, it’s more often false.
Not that people are totally bad at designing APIs, systems are actually running well.
But those APIs are technical connectors usually requiring a high level of expertise of the underlying system.</p>

<p>Most of the time there’s not much work to do, a few design reviews a bit of training and hello beautiful APIs.
People magically realize the value of working on design (and icing on the cake it can have huge impact on code and architecture quality).
But sometimes, changing mindsets on the importance of design is really hard because some developers/tech leads/architects are quite stubborn to stay polite.</p>

<p>Also a side note, I can understand that seasoned developers never having seen another company for the last 3 decades may not be aware of the importance of designing an API to make it easy to understand and easy to use, or may not know how to do it.
But I’m quite annoyed to see that university/engineering school absolutely don’t teach API design, at least in France (don’t know if this matter is covered by boot camps or in other countries).</p>

<h2 id="avoiding-dictatorial-governance">Avoiding dictatorial governance</h2>

<p>Creating consistent API is important for usability and security among many other things.
That requires defining rules and organizing a bit of controls, all that can resumed in two words: API governance.
If care is not taken, it can turn really bad in scary dictatorship, everyone fearing the API police.
It can totally screw your IT led API initiative and cripple the future business led API initiative.
If you want to learn more about this, <a href="/human-centered-api-governance/">watch my “Human Centered API Governance” session</a>.</p>

<h2 id="including-api-design-in-software-lifecycle">Including API design in software lifecycle</h2>

<p>When I was conducting API design review, I can’t count how many times I received a “can you check this design please, we push it in production tomorrow” email.
Not only IT people will probably need to acquire design skills but also modify a bit their software lifecycle to include a design phase BEFORE development.
It can be complicated when people are doing “agile” development (yeah “agile”, because it can be anything and everything).
Not because of process, but because it requires to change habits, change mindsets, just like on design.</p>

<p>Honestly it’s quite simple as long as you don’t fall into the “Big Design Up Front” (<a href="https://swiber.dev/launch-a-winning-strategy-for-api-design-first#big-design-up-front">thank to my colleague Kevin for putting a name on something I couldn’t name</a>) and ruin agile efforts.
Adding a short design phase during the sprint before development or right at the beginning work pretty well (it takes only a few hours).</p>

<h2 id="acquiring-provider-and-consumer-stances">Acquiring provider and consumer stances</h2>

<p>When starting the API journey, even just at IT level, you have to realize that to create good APIs, they must be own by someone.
And those API owners have to acquire the provider stance.
I’ve seen teams so used to say yes to everything, resulting in highly specific software only working for the team requesting the evolutions, they continue to work the same way with APIs.
That must be changed.
API owner must learn, not to say no (well sometimes it’s needed), but to take request and put them in place for the greater good of their API product and ALL of its present and future consumers.
On the other side, API consumers must learn to request new features without going crazy if it’s not exactly made as they would have imagined.</p>

<h2 id="making-business-and-it-work-together-for-a-bright-public-api-future">Making business and IT work together for a bright public API future</h2>

<p>And last but not least.
Purely IT led API initiative, without any business perspective involved will only succeed to put a technical infrastructure in place.
One way or another people having business knowledge, subject matter experts (SMEs) must be involved when defining the boundaries of APIs, what they do and how they do it.
Both perspectives, IT and business, must be taken into account to define APIs that literally represent “this domain for dummies” (and we don’t care if those “dummies” are inside or outside the organization).
Those APIs must be easy to understand and easy to use by anyone, reusable in various contexts, and easy to evolve.</p>

<p>If you don’t do that, what do you think will happen when some high level business exec realizes the importance of APIs from a business perspective and take for granted that if IT has done APIs they can be provided easily to the outside world?
They will not be happy, but more than that, a huge part of what was invested in the IT led API initiative will have been done for nothing.
The company will lose time and have a longer time to market</p>

<h1 id="oops-i-did-it-again">Oops, I did it again</h1>

<p>Even when I try to talk about API from an IT perspective, I can’t do it without talking about their business perspective and their impact on organization.
That’s because even if there are purely IT challenges, in the end, an IT led API initiative can benefit the whole organization from a busines perspective.
It’s because APIs (and IT in general) and business are totally intertwined, that’s the spirit of being API-First.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[As an IT member, you convinced your boss that APIs were a thing and IT department should take them seriously. Congratulations! That’s good, very good. Not only for you and your IT but for your whole organization. All you need to do now is choose an API gateway solution and you’re done… So you think. The API journey, even just at IT level, is full of pitfalls.]]></summary></entry><entry><title type="html">Why do we need API design guidelines?</title><link href="https://apihandyman.io/why-do-we-need-api-design-guidelines/" rel="alternate" type="text/html" title="Why do we need API design guidelines?" /><published>2022-02-23T00:00:00-06:00</published><updated>2022-02-23T00:00:00-06:00</updated><id>https://apihandyman.io/why-do-we-need-api-design-guidelines</id><content type="html" xml:base="https://apihandyman.io/why-do-we-need-api-design-guidelines/"><![CDATA[<p>Why do we need API design guidelines?
Why do I need this boring set of constraining rules telling me how to design APIs?
Why can’t I design APIs the way I like (which is the best one by the way).
What would I (and my organization) gain taking advantage of API design guidelines?
<!--more--></p>

<p><em>That’s yet another interesting question coming from the Internet, if you have such API questions don’t hesitate to ping me, I may be able to respond through a blog post.</em></p>

<h1 id="consistent-apis">Consistent APIs</h1>

<p>The first reason why you need API design guidelines is to ensure a certain level of consistency throughout your whole API surface.</p>

<p>Creating consistent APIs, APIs that share the same look and feel, is key to build a great developer experience.
Indeed, once someone has learned to use one of your APIs, using another one that looks and behaves in the same fashion as this first API is fairly easy.
Just like when you use any app on your smartphone, they share common behaviors of the operating system.
Just like when you use a mobile app, desktop app or website of a given company, those different “applications” in a broad sense share a look and feel defined by the company providing those services.
With consistency, you can speed up learning, people can guess how things work.</p>

<p>If you think that achieving consistency in API design can be done without really thinking about, without defining rules, let me tell you about a simple exercise that I do when teaching the fundamentals of (REST) API design.
I love this exercise, because it never misses to make attendees realize they definitely need API design guidelines to design consistent APIs.
I ask the attendees to choose the paths to represent a “list of users” and “a user”, the only constraint is that those paths must be valid from a REST perspective, hence being able to represent a resource in a unique way.
We often end with the following responses:</p>

<ul>
  <li><code>/users</code> and <code>/users/{userId}</code></li>
  <li><code>/users</code> and <code>/user/{id}</code> (<a href="https://apihandyman.io/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/">seriously don’t do that</a>)</li>
  <li><code>/user</code> and <code>/user/{userId}</code></li>
  <li><code>/user</code> and <code>/user-{reference}</code></li>
  <li><code>/utilisateurs</code> and <code>/utilisateurs/{referenceUtilisateur}</code> (that’s french)</li>
</ul>

<p>All those path are technically valid from a pure REST perspective, each one allows to represent the list of users and a single user.
They are technically valid but each response is different from the others, these solutions are inconsistent.
Even people working in the same organization working on the exact same use case can achieve inconsistent designs. 
That’s why you need API design guidelines.
They are many possible variations when having to design API, you need to choose a single way to “style” your APIs and write it down in your guidelines.</p>

<h1 id="less-discussions">Less discussions</h1>

<p>But what is the “right” way to represent a “list of users”, <code>/users</code> or <code>/user</code>?
I have an <a href="https://apihandyman.io/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/">opinion</a> on that topic, you may have another one.
Without having settle this debate once and for all, be prepared to face endless debates about very basic API design concerns such as this one.
Seriously, it’s not fun to waste time on such discussions.
I prefer <code>/users</code>, but if the guidelines created before I arrive in the company say it’s <code>/user</code>, so be it.
What really matter is what the API does, that’s on that topic we should “waste” our time, not choosing between turquoise and cyan.</p>

<p>But that does not mean you should never discuss guidelines.
Honestly, if the guidelines if my company says <code>/users</code> and <code>/user/{userId}</code> which is a total non-sense, leading to poor DX, we’ll have to discuss that again.
But be professional, if the existing rules are just different from what you’re used to but make sense and create consistent APIs, don’t be an asshole, accept difference.</p>

<h1 id="simpler-api-design">Simpler API design</h1>

<p>Not all designers are seasoned one, not all designers have been working in the organization for years.
Without guidelines, beginner designers will, at best loose their time chasing the response to the question <code>/users</code> or <code>/user</code>, or which HTTP status code use in “that” context, and at worst, randomly choose a way of designing APIs based on today’s humor.
<a href="https://apihandyman.io/nobody-cares-about-api-design-guidelines/">Well-structured-designer-friendly API design guidelines</a> accompanied with a touch of automation (who said <a href="https://apihandyman.io/toolbox/spectral/">Spectral</a>) will speed up their learnings of the way of designing APIs in general and in your organization.</p>

<p>And guidelines are not only of interest for beginners. 
Seasoned designers may also loose their time looking for solutions to complex problems such as “how to handle long operations” or “how to handle gateway message size limitations”, problem which could be solved once and for all and put into the guidelines.</p>

<h1 id="simpler-api-design-review">Simpler API design review</h1>

<p>API designer reviewers are masters in API design able to spot the tiniest “imperfection” in a design, a not so clear naming, a design pattern that could cripple evolutions, … (Actually API design reviewers a far more than that, but that’s another story).
But just like designers, though being “API Design Jedi Masters”, reviewers can be new to the organization, they can forget some specific point.
So having a source of truth to refer to is a great help for reviewers to comfort their reviews and also having pacified discussions with designers (because “sorry, that’s not what you’re used to, but this is how we do here”).</p>

<h1 id="the-source-of-automation">The source of automation</h1>

<p>And last but not least, I mentioned automation (API design linting) with <a href="https://apihandyman.io/toolbox/spectral/">Spectral</a>): API design guidelines will be the source of any automated control of API design.
Jumping right into writing some code controlling your design conforms to your organization’s way of designing APIs is a terrible idea.
It would be just like writing an OpenAPI document, focusing on <code>GET /this</code> and <code>POST /that</code> without being sure of what the API is supposed to do, without being able to describe in natural language the needs that the API must fulfil.
Also, even a must have in your toolbox, tools such as Spectral, will not be able to capture all that you can put in your design guidelines (such as when choose solution A over B).</p>

<h1 id="you-need-api-design-guidelines">You need API design guidelines</h1>

<p>So the question it not really “do you need API design guidelines?” but “what are you waiting for to create API design guidelines?”.
It’s never too late to do so, indeed, you can create guidelines even when you already have existing APIs.
But that’s another story.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Why do we need API design guidelines? Why do I need this boring set of constraining rules telling me how to design APIs? Why can’t I design APIs the way I like (which is the best one by the way). What would I (and my organization) gain taking advantage of API design guidelines?]]></summary></entry><entry><title type="html">Hacking and reviewing Elgato Key Light API with Postman</title><link href="https://apihandyman.io/hacking-elgato-key-light-with-postman/" rel="alternate" type="text/html" title="Hacking and reviewing Elgato Key Light API with Postman" /><published>2022-02-16T00:00:00-06:00</published><updated>2022-02-16T00:00:00-06:00</updated><id>https://apihandyman.io/hacking-elgato-key-light-with-postman</id><content type="html" xml:base="https://apihandyman.io/hacking-elgato-key-light-with-postman/"><![CDATA[<p>Want to learn how to hack a desktop app calling an API and learn some API design principles?
This post is made for you.
When I got my Elgato Key Light, my first questions were: “can I control it without using the official control center using an API?” and “is the API easy to understand and use?”.
Thanks to Postman’s proxy feature, I was able to easily hack the API.
But I was also able to review it in the making, and there’s some interesting API design learnings to share.
<!--more--></p>

<h1 id="why-this-post">Why this post?</h1>

<p>I recently joined Postman (the company) and while I have been using Postman (the tool) since its creation, I didn’t much used it the last 4 years as I was spending most of my time doing API design reviews and not much using APIs.
I forgot many things, and during that time Postman has evolved a lot!
So, I my goal is to (re)learn how to use (and hack) extensively Postman.
Instead of keeping all that for myself, I’ll share my learnings in multiple blog posts.</p>

<p>As I just received an Elgato Key Light to enhance the quality on my video calls and video recordings (that’s worth the investment!) and as this device comes with an API, I thought “Hacking my Elgato Key Light” was the perfect topic to start (re)learning how to use Postman.
Everything explained here and in future posts should be reusable “as is” with the other variants of Elgato Lights.
And if you have other connected devices coming with desktop control application, you should be able to do what I’ll show you with them.</p>

<p>And as always, this post is not only about using a tool, we’ll talk about some API design principles in the making!</p>

<h1 id="discovering-the-key-light-api">Discovering the Key Light API</h1>

<p>To control the Elgato Key Light, you can install the Elgato Control Center on you computer (Mac or Windows), there are also iOS and Android apps.
In order to hack the Elgato Key Light, I need to discover what requests can be done.
To do so, I captured the HTTP traffic going out of the Elgato Control Center desktop application using Postman as a proxy.</p>

<h2 id="setting-up-postman-proxy">Setting up Postman Proxy</h2>

<p>With Postman, you can intercept HTTP traffic in 2 different ways, the Interceptor that runs in Chrome or the Proxy that can be used to capture any HTTP traffic on your machine.
We will use the second option.</p>

<p>The whole documentation is available here: <a href="https://learning.postman.com/docs/sending-requests/capturing-request-data/capturing-http-requests/">Capturing HTTP Request</a>.
Here’s a light recap of what I did on my Mac:</p>

<h3 id="configuring-postman">Configuring Postman</h3>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/postman-proxy-configuration.jpg" class="figure-img img-fluid" /></figure>
</div>

<ul>
  <li>Start Postman</li>
  <li>Create a “Hacking Elgato Key Light” workspace</li>
  <li>Create a new collection “Capture Control Center - Raw”</li>
  <li>Start proxy with “Capture requests and cookies” in status bar (bottom right)</li>
  <li>Use “Via Proxy”</li>
  <li>Check Save Responses for Requests</li>
  <li>Click “Enable Proxy”
    <ul>
      <li>Keep 5555 port</li>
      <li>Click on enable proxy</li>
    </ul>
  </li>
  <li>Now “Proxy is enabled”</li>
  <li>Save requests to previously created collection and choose “Capture Control Center - Raw”</li>
  <li>Check “Domain name” and “Endpoints” in “Organize requests by”</li>
</ul>

<h3 id="configuring-os">Configuring OS</h3>

<p>Note: I’m using a Mac, but it shouldn’t be that different on Windows.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/macos-network-configuration.jpg" class="figure-img img-fluid" /></figure>
</div>

<ul>
  <li>Open “Network” in System Preferences</li>
  <li>Select your first network interface</li>
  <li>Click on “Advanced…”</li>
  <li>Go to “Proxies” tab</li>
  <li>Check “Web Proxy (HTTP)”</li>
  <li>Set Web Proxy Server host and port to <code>localhost</code> and <code>5555</code></li>
  <li>Remove local adresses patterns from “Bypass proxy settings for these Hosts &amp; Domains”</li>
  <li>Click “OK”</li>
  <li>And don’t forget to clik on “Apply”</li>
</ul>

<p>Now we’re ready to capture HTTP traffic.</p>

<h2 id="capturing-too-much-http-traffic">Capturing (too much) HTTP traffic</h2>

<p>Back in Postman, click on the “Start Capture” button and play with the Elgato Control Center.
You can turn on or off the light, change brightness and temperature.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/postman-capturing-http-traffic.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>Once done, click on Stop and you’ll find all requests in the “Capture Control Center - Raw”.
Requests are organized by domain and endpoint, each request being materialized as an example.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/first-capture-collapsed.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>That’s pretty neat, I have a good overview of the requests done during the capture.
But I have 2 problems:</p>

<ul>
  <li>First, there are request coming from another application (Chrome)</li>
  <li>Second, there are many request examples as you can see below</li>
</ul>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/first-capture-too-much-examples.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>While it’s not really a problem for the GET requests, it’s more annoying to understand what is done with the PUT one.</p>

<h2 id="capturing-the-right-http-traffic">Capturing (the right) HTTP traffic</h2>

<p>In order to avoid being poluted with too much requests, let’s try something more subtil.
First, let’s start a new capture but with some changes in the configuration.
To only get traffic for the Key Light, set “URL must contain” to “elgato”.
And to keep only PUT requests, add <code>PUT</code> to “Methods”.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/capture-filter-configuration.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>Then, when using the Elgato Control Center, let’s do one thing at a time.</p>

<ul>
  <li>For instance, turning the light on</li>
  <li>Then go back to Postman, and stop the capture</li>
  <li>Check the request (checkbox before Status)</li>
  <li>And click on “+ Add to collection”</li>
  <li>Create a new “Capture Control Center - Selected” collection</li>
</ul>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/capture-selected.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>Now go to the newly created collection and rename the cryptic example to “Turn on”.
You can do that for “Turn off”, “Set temperature to maximum”, …
Everything that comes to your mind.
You can also capture multiple request and select a subset to add them to the collection.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/capture-selected-collection.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>Now we have everything to play with the API, we just have to copy/paste/modify the requests.
If you run into strange 400 errors, check if you don’t have a hard coded <code>content-length</code> (yes without caps) in your request headers.
They come from the HTTP traffic capture and are not overrided by Postman (because “you” set them).</p>

<div class="alert alert-warning"><h4 class="alert-heading">Reset OS proxy configuration</h4><hr />
<p>Don’t forget to reset your OS proxy configuration once you’ve finished!</p>

</div>

<h1 id="reviewing-the-key-light-api">Reviewing the Key Light API</h1>

<p>Thanks, to the capture HTTP traffic sessions, and taken for granted that the base URL of all requests is <code>http://device-name.local:9123/elgato</code>, we know that the Elgato Key Light API proposes the following operations:</p>

<ul>
  <li><code>GET /accessory-info</code></li>
  <li><code>GET /lights/settings</code></li>
  <li><code>GET /lights</code></li>
  <li><code>PUT /lights</code></li>
</ul>

<p>We’ll focus this review on <code>GET /accessory-info</code> and <code>GET/PUT /ligths</code>.</p>

<h2 id="the-neat-get-accessory-info-entry-point">The neat GET /accessory-info entry point</h2>

<p>Looking at this operation’s response (below), we see some basic information like the product name and more technical information like some firmware information.
What caught my eye is the <code>features</code> list, it contains a <code>lights</code> value.
Based on other requests which paths start by <code>/lights</code>, I can guess that if one day I get another Elgato product with an API I can give a try to <code>GET /accessory-info</code>, look at the values in features, which could be “something” and then try a <code>GET /something</code>, <code>PUT /something</code> and possibly <code>GET /something/settings</code>.
It’s not an hypermedia API, but at least it provides some hints that help you to use other Elgato APIs.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">GET /accessory-info response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-copy"><code class="code-block">{
    &quot;productName&quot;: &quot;Elgato Key Light&quot;,
    &quot;hardwareBoardType&quot;: 53,
    &quot;firmwareBuildNumber&quot;: 200,
    &quot;firmwareVersion&quot;: &quot;1.0.3&quot;,
    &quot;serialNumber&quot;: &quot;BW21K1A01548&quot;,
    &quot;displayName&quot;: &quot;&quot;,
    &quot;features&quot;: [
        &quot;lights&quot;
    ]
}</code></pre>
  </div>
</div>

<h2 id="the-not-so-neat-get-and-put-lights">The not so neat GET and PUT /lights</h2>

<p>The following body is used by the Elgato Control Center when modifying the light status.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">/lights resource</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-copy"><code class="code-block">{
    &quot;numberOfLights&quot;: 1,
    &quot;lights&quot;: [
        {
            &quot;on&quot;: 1,
            &quot;brightness&quot;: 50,
            &quot;temperature&quot;: 143
        }
    ]
}</code></pre>
  </div>
</div>

<p>It is composed of 3 pieces of information:</p>

<ul>
  <li><code>on</code>: Indicates if the light is on (1) or off (0)</li>
  <li><code>brightness</code>: The brightness level in % from 0 to 100</li>
  <li><code>temperature</code>: A quite cryptic integer representing the light temperature which goes from 2900K (344) to 7000K (143)</li>
</ul>

<h3 id="when-non-human-readable-status-is-not-a-problem">When non human readable status is not a problem</h3>

<p>While I usually prefer human readable strings for such status (like “on” and “off”), that’s still easy to understand.
Especially in that case where there are only 2 values.
Also, it’s fairly common to have on and off represented by 0 and 1, so Elgato follows a common practice, that’s good.
And actually, when you have to use those values in code to turn the light on and off, that’s actually pretty convenient.
So when designing API, think about understandability by humans, but also usability in code.</p>

<h3 id="simple-consumer-side-business-rule">Simple consumer side business rule</h3>

<p>Strangely (or not), the application limits the bounds of brightness to [3,100].
But I was able to set brightness to 0 with Postman, it actually turns the light off (without changing the <code>on</code> value).
Maybe the API should handle that and manages those boundaries if that’s important.
Never let consumer deals with provider’s business logic, even <a href="https://apihandyman.io/choosing-between-raw-and-processed-data-when-designing-an-api/">the simplest one</a>, it will be really hard to modify it in ALL consumers and may lead to problems (hopefully I didn’t ruin my Key Light).</p>

<h3 id="silent-error">Silent error</h3>

<p>By the way I also tested to set brightness to 110%.
I didn’t got a <code>400 Bad Request</code> as I expected but a <code>200 OK</code>!
The Key Light didn’t exploded hopefully.
Actually, the brightness was not modified, it kept its previous value.
That’s a bad design, as a consumer/user, the API didn’t warned me that I sent a value that will never ever be accepted.
So better return an explicit error.</p>

<h3 id="terribly-complex-consumer-side-business-rule">Terribly complex consumer side business rule</h3>

<p>That’s the worst part of the API, at least until I get more information about light temperature.
To control the temperature, the Elgato Control Center App proposes a slide which goes from 7000K to 2900K (K is for <a href="https://en.wikipedia.org/wiki/Color_temperature">Kelvin</a>). 
But when it calls the API to change the temperature, it’s not 2900, 6000 or 7000 that is sent but 344, 167 or 143.
I check a few values to understand what was the correspondance and realized there was some voodoo-non-linear-maths-physics magic involved.
That means consumers have to know some internal business logic that MUST be provider’s business only.
That’s a terrible idea, it makes the API really hard to use (and again: what will happen if the business rule has to evolve?).
Hopefully, I’m sure I’ll find a way to make that more simple with some Postman magic.</p>

<h3 id="convenient-partial-modification">Convenient partial modification</h3>

<p>Last but not least, you’re under no obligation to send everything in the <code>PUT</code> body.
That may raise some HTTP-extremists’ eyebrows, but I find this really convenient.
That way, I can just turn light on without having to know current temperature and brightness with the following body that got rid of <code>numberOfLights</code>, <code>brightness</code> and <code>temperature</code>.
Maybe providing a PATCH would make this request more HTTP-compliant.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Turn on</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-copy"><code class="code-block">{
    &quot;lights&quot;: [
        {
            &quot;on&quot;: 1,
        }
    ]
}</code></pre>
  </div>
</div>

<h1 id="your-private-api-is-not-so-private">Your private API is not so private</h1>

<p>By the way, what I’ve done here is a good reminder about “your private API is not so private”.
So be careful about how you design it in order to, at least, block consumers doing things that could harm your providing system and, at best, to provide a simple to understand and simple to use API, even for those who are not supposed to use it.</p>

<h1 id="to-be-continued">To be continued</h1>

<p>As you can see “hacking” a desktop application that sends (unsecure and local) HTTP request is quite simple with a proxy (there are other tools than Postman to do so, for instance I remember using <a href="https://portswigger.net/burp/releases/professional-community-2022-1-1?requestededition=community">Burp Suite</a> a long time ago).
With what we’ve done we can easily create requests that will do what we want by just copy/pasting/modifying the examples resulting from the HTTP traffic capture.
I’m working on a complete collection allowing to control the Elgato Key Light and doing so I used a few tricks that I’ll show in future post(s).
In the meanwhile, you can already see what I’ve done by clicking on the button below.</p>

<p><a href="https://app.getpostman.com/run-collection/143378-88ada3a6-de53-4599-93cf-cc0a5d365cd9?action=collection%2Ffork&amp;collection-url=entityId%3D143378-88ada3a6-de53-4599-93cf-cc0a5d365cd9%26entityType%3Dcollection%26workspaceId%3Df0a96dd6-c7d8-46f7-9e62-4b95f25c4e43#?env%5BElgato%20Key%20Light%5D=W3sia2V5IjoibGlnaHRfbmFtZSIsInZhbHVlIjoiRWxnYXRvIEtleSBMaWdodCAxODc2IiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiJFbGdhdG8gS2V5IExpZ2h0IDE4NzYiLCJzZXNzaW9uSW5kZXgiOjB9LHsia2V5IjoiYmFzZV91cmwiLCJ2YWx1ZSI6Imh0dHA6Ly9lbGdhdG8ta2V5LWxpZ2h0LTE4NzYubG9jYWw6OTEyMy9lbGdhdG8iLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6Imh0dHA6Ly9lbGdhdG8ta2V5LWxpZ2h0LTE4NzYubG9jYWw6OTEyMy9lbGdhdG8iLCJzZXNzaW9uSW5kZXgiOjF9LHsia2V5IjoiYmFzZV91cmxfdGVtcGxhdGUiLCJ2YWx1ZSI6Imh0dHA6Ly9OQU1FLmxvY2FsOjkxMjMvZWxnYXRvIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiJodHRwOi8vTkFNRS5sb2NhbDo5MTIzL2VsZ2F0byIsInNlc3Npb25JbmRleCI6Mn1d"><img src="https://run.pstmn.io/button.svg" alt="Run in Postman" /></a></p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Want to learn how to hack a desktop app calling an API and learn some API design principles? This post is made for you. When I got my Elgato Key Light, my first questions were: “can I control it without using the official control center using an API?” and “is the API easy to understand and use?”. Thanks to Postman’s proxy feature, I was able to easily hack the API. But I was also able to review it in the making, and there’s some interesting API design learnings to share.]]></summary></entry></feed>