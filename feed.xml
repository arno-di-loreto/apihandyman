<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-05-11T04:24:35+00:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">401 Vs 403 Vs 404</title><link href="https://apihandyman.io/hands-off-that-resource-http-status-code-401-vs-403-vs-404/" rel="alternate" type="text/html" title="401 Vs 403 Vs 404" /><published>2021-05-05T00:00:00+00:00</published><updated>2021-05-05T00:00:00+00:00</updated><id>https://apihandyman.io/401-vs-403-vs-404</id><content type="html" xml:base="https://apihandyman.io/hands-off-that-resource-http-status-code-401-vs-403-vs-404/">&lt;p&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This second post answers the following question: given that resource with id 123 actually exists in the underlying database, what should be the response to &lt;code&gt;GET /resources/123&lt;/code&gt; when consumer is not allowed to access it? &lt;code&gt;401 Unauthorized&lt;/code&gt;, &lt;code&gt;403 Forbidden&lt;/code&gt; or &lt;code&gt;404 Not Found&lt;/code&gt;?&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Choosing HTTP status codes Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.&lt;div class=&quot;alert alert-info&quot;&gt;
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use &lt;a class=&quot;alert-link&quot; href=&quot;https://webconcepts.info/concepts/http-status-code/&quot;&gt;Erik Wilde's Web Concepts&lt;/a&gt;.
&lt;/div&gt;Very special thanks to all Twitter people participating to the &lt;a href=&quot;https://twitter.com/search?q=%23choosehttpstatuscode&amp;amp;src=typed_query&quot;&gt;#choosehttpstatuscode&lt;/a&gt; polls and discussions&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/&quot;&gt;1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-context&quot;&gt;The context&lt;/h1&gt;

&lt;p&gt;Let’s say you’re creating an API for a mobile application that allows people to record phone calls.
Once calls are recorded, users can list them and listen to each individual recording.
Listing a user’s recorded calls could be done with a &lt;code&gt;GET /users/{phoneNumber}/calls&lt;/code&gt;, for each phone call listed you get a random and unpredictable &lt;code&gt;id&lt;/code&gt; that can be used to retrieve the actual audio recording with a &lt;code&gt;GET /calls/{callId}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Basically it means that when a user whose phone number is &lt;code&gt;123456789&lt;/code&gt; uses the mobile application, the application sends a &lt;code&gt;GET /users/123456789/calls&lt;/code&gt; API request to list available recorded calls.
The API responds with a &lt;code&gt;200 OK&lt;/code&gt; along with the recorded calls belonging to user.
If user taps on one conversation which id is &lt;code&gt;Bnwgab&lt;/code&gt;, the application sends a &lt;code&gt;GET /calls/Bnwgab&lt;/code&gt; and the API responds with a &lt;code&gt;200 OK&lt;/code&gt; along with the audio file&lt;/p&gt;

&lt;p&gt;But what happens if some curious and maybe malicious user scan network traffic coming out of the application?
This hacker will easily understand how this “not so private” API works.
With very little effort, they will succeed to generate phone numbers that actually exist in the underlying system so send &lt;code&gt;GET /users/{phone number of another user}/calls&lt;/code&gt; requests.
And with more effort, enough patience and adapted tools they may even generate valid random some &lt;code&gt;callId&lt;/code&gt; and send &lt;code&gt;GET /calls/{callId that don't belong to their user account}&lt;/code&gt; requests.&lt;/p&gt;

&lt;p&gt;In either case, the API should prevent accessing resources that don’t belong to the caller and signify there’s a problem with caller’s request.
Note that if that sounds like a no-brainer for many people, that is actually not always the case and some APIs may return a &lt;code&gt;200 OK&lt;/code&gt; along with the requested data.
Regularly, stories such as &lt;a href=&quot;https://techcrunch.com/2021/03/09/iphone-thousands-calls-exposed/&quot;&gt;this one&lt;/a&gt; (which inspired the above use case) come out.
Never forget that when creating APIs and never refrain from double check that your colleagues are also aware of that.
And note also that using PII (Personnally Identifiable Information) or other sensitive data as ids can be very convenient but raises security concerns, especially if they appear in URLs as they can be logged almost everywhere.
I should write a post series about API security one day (&lt;code&gt;POST /writing-ideas&lt;/code&gt; done!).&lt;/p&gt;

&lt;p&gt;Let’s get back to what we are talking about today: HTTP status codes.
Obviously, when consumer make an API call on resource that actually exists but don’t belong to them, the API must respond with a &lt;code&gt;4xx Client Error Class&lt;/code&gt;, but which one could be the more accurate?&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/hands-off-that-resource-http-status-code-401-vs-403-vs-404/twitter-poll.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Twitter poll results&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;According to my &lt;a href=&quot;https://twitter.com/apihandyman/status/1382712503717728257?s=21&quot;&gt;Twitter poll&lt;/a&gt;, 54% of people would return a &lt;code&gt;403 Forbidden&lt;/code&gt;, while 24% would return a &lt;code&gt;404 Not Found&lt;/code&gt; and also 24% would return a &lt;code&gt;401 Unauthorized&lt;/code&gt;.
Let’s see who is right and who is wrong based on what RFCs say.&lt;/p&gt;

&lt;h1 id=&quot;use-404-when-resource-is-none-of-consumers-business-and-never-will&quot;&gt;Use 404 when resource is none of consumer’s business (and never will)&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.4&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Returning a &lt;code&gt;404 Not Found&lt;/code&gt; means “the requested resource does not exists”.
Actually, there’s a subtlety, it could mean “the requested resource actually exists but it’s none of your business, you’re not allowed to access it and never will; actually, it does not exist for you” or “the requested resource does not exist at all” but the consumer will never know what is the true reason behind this HTTP status code.&lt;/p&gt;

&lt;p&gt;That response is the best one for the introduction’s use case, granted that users want to use this application without sharing anything with others.
In that case, given that John and Emma use the application, if Emma “hacks” the API, we will never ever want her to know that &lt;code&gt;/users/{John's phone number}/calls&lt;/code&gt; may exists.
Because they are not supposed to know it exists and even though can’t do anything about it, so better tell her that it “doesn’t exist” (for her).&lt;/p&gt;

&lt;p&gt;But if &lt;code&gt;404 Not Found&lt;/code&gt; is usually my first idea when a consumer tries to access to a &lt;code&gt;/resources/1234&lt;/code&gt; they shouldn’t (I admit I’m a little obsess with security and prone to not show what is not needed to be shown), there are cases where it could be interesting to let them know the target resource exists.&lt;/p&gt;

&lt;h1 id=&quot;use-403-when-consumer-can-do-something-about-it&quot;&gt;Use 403 when consumer can do something about it&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it.  A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.5.3&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.3&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Returning a &lt;code&gt;403 Forbidden&lt;/code&gt; signifies “the requested resource actually MAY exists but you cannot access it. You MAY access it by requesting adequate rights to someone, maybe an administrator for instance”.&lt;/p&gt;

&lt;p&gt;Even if that is not very realistic, let’s say that the example application/API described in the introduction allows users to share recorded conversations with others. Given John has shared his conversations with Emma but not with Tara, Emma triggering a &lt;code&gt;GET /users/{John's phone number}/calls&lt;/code&gt; API call will get a &lt;code&gt;200 OK&lt;/code&gt; while Tara will get a &lt;code&gt;403 Forbidden&lt;/code&gt;. Tara may request John the rights to access his conversations to fix that.&lt;/p&gt;

&lt;p&gt;We have talk about &lt;code&gt;403 Forbidden&lt;/code&gt; and &lt;code&gt;404 Not Found&lt;/code&gt;, but what about the poll’s third option?&lt;/p&gt;

&lt;h1 id=&quot;never-ever-use-401-dont-be-fooled-by-its-reason&quot;&gt;Never ever use 401 (don’t be fooled by its reason)&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 401 (Unauthorized) status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7235#section-3.1&quot;&gt;RFC 7235 Hypertext Transfer Protocol (HTTP/1.1): Authentication, section 3.1&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;As 24% of respondents to my poll, when a consumers tries to access a resource they shouldn’t access, you may be tempted to return a &lt;code&gt;401 Unauthorized&lt;/code&gt; instead of a &lt;code&gt;403 Forbidden&lt;/code&gt;.
Why would you do that?
Maybe because its reason phrase says &lt;code&gt;Unauthorized&lt;/code&gt;.
But that would actually be an error, don’t be fooled by that reason phrase.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://www.karlton.org/2017/12/naming-things-hard/&quot;&gt;Phil Karlton&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;There’s a huge problem with &lt;code&gt;401 Unauthorized&lt;/code&gt;, its reason phrase let think that it is tied to “wrong authorization” while it is actually tied to “lack of authentication”.
Actually the RFC that defines it is &lt;a href=&quot;section 3.1&quot;&gt;RFC 7235 - Hypertext Transfer Protocol (HTTP/1.1): Authentication&lt;/a&gt;… “Authentication” and not “Authorization”.
Even the description states that this status is about “authentication credentials”.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;401&lt;/code&gt; signifies there’s a problem with your credentials which usually are provided in an &lt;code&gt;Authorization&lt;/code&gt; header (still wrong name, but at least it’s consistent with the reason).
This status is made to signify “you forgot to provide an Authorization header with some credentials” or “your credentials provided in the Authorization header are invalid/expired”.
In the API world, it basically says “You can’t use the API at all, come back with a valid access token”.&lt;/p&gt;

&lt;p&gt;It’s not meant to say “You can use the API but not access that resource”, that is the job of &lt;code&gt;403 Forbidden&lt;/code&gt;.
And that is clearly stated in its description in &lt;a href=&quot;section 6.5.3&quot;&gt;RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;If authentication credentials were provided in the request, the server considers them insufficient to grant access.  The client SHOULD NOT automatically repeat the request with the same credentials.  The client MAY repeat the request with new or different credentials.  However, a request might be forbidden for reasons unrelated to the credentials.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To be even more sure that &lt;code&gt;403 Forbidden&lt;/code&gt; is the right answer, let’s talk about Oauth 2 scopes.
Indeed, dealing with resource rights access is not always, let’s say “internal business rule” driven (checking in users table that the identified user has the requested phone number for example).
When consumers request an access token using the Oauth 2 framework (the token that goes into the not so well named &lt;code&gt;Authorization&lt;/code&gt; header), they may request a token restricted to given elements thanks to scopes.
For instance, when using the Github API, you may request access to public repo only or to user data only.
What should happen when a consumer requests access to a resource without adapted scopes?
&lt;a href=&quot;https://tools.ietf.org/html/rfc6750#section-3.1&quot;&gt;Section 3.1 of RFC 6750 The OAuth 2.0 Authorization Framework: Bearer Token Usage&lt;/a&gt; is quite clear:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the &quot;scope&quot; attribute with the scope necessary to access the protected resource.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;insufficient_scope error&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;h1 id=&quot;http-status-code-is-not-enough&quot;&gt;HTTP Status code is not enough&lt;/h1&gt;

&lt;p&gt;That means two things.
First &lt;code&gt;401 Unauthorized&lt;/code&gt; is definitely not an option in the case we are studying today.
Second, HTTP status code is not enough.
Indeed, &lt;code&gt;403 Forbidden&lt;/code&gt; could be returned because consumer lacks some scope to &lt;code&gt;GET /resources/{resourceId}&lt;/code&gt; in general or does not comply to some business rule and cannot &lt;code&gt;GET /resource/1234&lt;/code&gt; (a specific id).
Providing a message and maybe some structured data to explained the why of the error and how it can be solved (request access token with scope X in first case or contact some admin in second case) is mandatory.
Note that, this made me realized that &lt;code&gt;403 Forbidden&lt;/code&gt; does not actually disclose that a resource exists, it totally depends on what is said beyond the HTTP status code.&lt;/p&gt;

&lt;h1 id=&quot;dont-forget-dx-and-context&quot;&gt;Don’t forget DX and context&lt;/h1&gt;

&lt;p&gt;Respecting HTTP and other RFCs is important to avoid surprising developers with behaviors that are against common practices, but most important, whatever the HTTP status code you’ll choose to return, what matters above all is providing the response the most adapted for the context that will actually help the developer (and the consumer and even the end user) to know what is actually happening and help them solve the problem if they can.&lt;/p&gt;

&lt;p&gt;So, when consumers want to access a resource they shouldn’t, don’t return a &lt;code&gt;401 Unauthorized&lt;/code&gt;, you would go against the HTTP protocol.
Instead, return a &lt;code&gt;404 Not Found&lt;/code&gt; if consumers can’t do anything about it (so from their perspective, it does not exist) and return a &lt;code&gt;403 Forbidden&lt;/code&gt; along with a meaningful message if they can request access.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="HTTP Status Codes" /><summary type="html">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This second post answers the following question: given that resource with id 123 actually exists in the underlying database, what should be the response to GET /resources/123 when consumer is not allowed to access it? 401 Unauthorized, 403 Forbidden or 404 Not Found?</summary></entry><entry><title type="html">Adopt and not assess OpenAPI linters and other thoughts reading Thoughtworks Technology Radar 24</title><link href="https://apihandyman.io/reading-thoughtworks-technology-radar-24/" rel="alternate" type="text/html" title="Adopt and not assess OpenAPI linters and other thoughts reading Thoughtworks Technology Radar 24" /><published>2021-04-28T00:00:00+00:00</published><updated>2021-04-28T00:00:00+00:00</updated><id>https://apihandyman.io/reading-thoughtworks-technology-radar-24</id><content type="html" xml:base="https://apihandyman.io/reading-thoughtworks-technology-radar-24/">&lt;p&gt;Thoughtworks Technology Radar 24, an “opinionated guide to technology frontiers”, came out last 15th of April, 2021 and I thought it could be interesting to read it from an API perspective, hence this post sharing my thoughts on it.
As always it is really interesting and full of valuable insights, though I nearly fell off my chair while reading the Tools section which talks about OpenAPI linters (if it’s not a click bait, I don’t know what it is).
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-thoughtworks-technology-radar&quot;&gt;What is Thoughtworks Technology Radar&lt;/h1&gt;

&lt;p&gt;Thoughtworks is a quite famous software consultancy company, brilliant minds such as &lt;a href=&quot;https://martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt; are working there.
Every 6 months, they publish their Technology Radar:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Radar is a document that sets out the changes that we think are currently interesting in software development - things in motion that we think you should pay attention to and consider using in your projects. It reflects the idiosyncratic opinion of a bunch of senior technologists and is based on our day-to-day work and experiences. While we think this is interesting, it shouldn’t be taken as a deep market analysis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar/faq&quot;&gt;Radar FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar&quot;&gt;Latest Thoughtworks Technology Radar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://assets.thoughtworks.com/assets/technology-radar-vol-24-en.pdf&quot;&gt;Thoughtworks Technology Radar Volume 24 (PDF version)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While authors claim it’s not a deep market analysis, it’s still full of highly valuable insights that you, as a developer, architect, CTO or whatever is your title should have in mind for your next tech related decisions or simply to discover new tools, language, trends, …&lt;/p&gt;

&lt;p&gt;In what follows, I picked up a few topics of the 24th edition of this radar that raise my interest from an API perspective (and if you can’t wait to know why I nearly fell off my chair, you can jump to the &lt;a href=&quot;#adopt-and-not-assess-openapi-linting-and-why-i-nearly-fell-off-my-chair&quot;&gt;last section&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;reminder-there-are-no-silver-bullets-in-architecture&quot;&gt;Reminder, there are no silver bullets in architecture&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.thoughtworks.com/radar#discerning-the-context-for-architectural-coupling&quot;&gt;Discerning the Context for Architectural Coupling&lt;/a&gt; theme is a gentle reminder of what I called “design in context”.
Never choose a solution just because this is “the” solution, because depending on the context it could be totally wrong.
That works for anything in general and in the API architecture world, that works for instance for “BFF or not” and “REST ot GraphQL or gRPC”.&lt;/p&gt;

&lt;h1 id=&quot;smoothly-evolve-your-apis&quot;&gt;Smoothly evolve your APIs&lt;/h1&gt;

&lt;p&gt;The radar authors strongly think that people should be adopting the &lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/api-expand-contract&quot;&gt;1. API expand-contract&lt;/a&gt; technique (also called &lt;a href=&quot;https://www.martinfowler.com/bliki/ParallelChange.html&quot;&gt;parallel change&lt;/a&gt;).
The API expand pattern allows to introduce a breaking in 3 steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add element&lt;/li&gt;
  &lt;li&gt;Deprecate what added element replace&lt;/li&gt;
  &lt;li&gt;Remove once consumers have switched&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While it’s a totally valid technique, the last step can be tricky if there are many consumers or if there are far from you.
You should read what &lt;a href=&quot;/apidays-interface-doing-apis-right-and-doing-right-apis/#versioning-handling-changes&quot;&gt;Sam Newman said about the cost of change at API Days Interface 2020&lt;/a&gt;.
In my humble opinion, working seriously on design and thinking about how your API may evolve will help you avoid having to use this technique.&lt;/p&gt;

&lt;p&gt;I will not say more for now, writing one or more posts about API change and versioning is on my to-do list.&lt;/p&gt;

&lt;h1 id=&quot;share-between-ui-and-bff-when-owning-both&quot;&gt;Share between UI and BFF when owning both&lt;/h1&gt;

&lt;p&gt;The radar states that the use of &lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/ui-bff-shared-types&quot;&gt;16. UI/BFF shared types&lt;/a&gt; is increasing and that companies should try this technique on a project that can handle the risk (trial).
That looks like a very good idea as long as both UI and BFF belong to the same team.
So don’t ever think about using this technique between UI and regular API, you should be decoupled as much as you can from elements you don’t own.&lt;/p&gt;

&lt;h1 id=&quot;compute-encrypted-data-to-preserve-privacy&quot;&gt;Compute encrypted data to preserve privacy&lt;/h1&gt;

&lt;p&gt;The first time I heard about the &lt;a href=&quot;&quot;&gt;20. Homomorphic encryption&lt;/a&gt; (&lt;a href=&quot;&quot;&gt;technique section&lt;/a&gt;) was in 2016 at an API conference: The Česká spořitelna bank was using it experimentally to share data with third party.
The idea is that using this technique, the encrypted data are still computable.
You can send them to an untrusted third party who will do some calculation with them and return you the results that you will decrypt.
According to the radar, it became fairly easy to use it.
But while having this technique in mind since 2016 and working in the financial industry, I’m still longing to work an API that will allow me to use it.&lt;/p&gt;

&lt;h1 id=&quot;unleash-the-power-of-apis-while-its-possible&quot;&gt;Unleash the power of APIs (while it’s possible)&lt;/h1&gt;

&lt;p&gt;If you want to build an event-driven architecture, you should take a look at &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;.
While being a widely adopted distributed event streaming platform, actually managing it does not seem quite simple.
That’s why some companies launch their Kafka as a service offers, they run it, you use it.
But as stated in the radar, some companies have gone a little farther and started to offer “Kafka without Kafka”.
How is this possible?
Only thanks to APIs.&lt;/p&gt;

&lt;p&gt;APIs (whatever their nature, web, messaging or whatever) offer amazing possibilities when it comes to replace the engine behind the interface.
Thanks to these &lt;a href=&quot;https://www.thoughtworks.com/radar/platforms/kafka-api-without-kafka&quot;&gt;45. Kafka API without Kafka&lt;/a&gt; describes in the &lt;a href=&quot;https://www.thoughtworks.com/radar/platforms&quot;&gt;Platforms&lt;/a&gt; section, you use a service that looks like Kafka but that is actually not.
It allows companies to provide their technology similar to kafka to people who are used to it without any modification.
From my perspective, the main to understand point here is not about Kafka (though it is actually interesting) but how anyone can provide a service compatible with an existing solution.
What is needed is to simply offer the same interface.
And, for now, that’s still “possible but check your lawyers are ready” thanks to the recent legal decision in the &lt;a href=&quot;https://apievangelist.com/2021/04/13/My-oracle-vs-google-api-copyright-journey/&quot;&gt;Google vs Oracle API Copyright case&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Beware that &lt;a href=&quot;https://www.thoughtworks.com/radar/platforms/kafka-api-without-kafka&quot;&gt;Kafka API without Kafka&lt;/a&gt; is in “Assess”, it’s worth exploring to understand how it could affect you.
Note also that such solutions may not be fully compatible all Kafka features&lt;/p&gt;

&lt;h1 id=&quot;lets-give-a-try-to-fast-api-python-framework&quot;&gt;Let’s give a try to Fast API Python framework&lt;/h1&gt;

&lt;p&gt;I work with data scientists to help them build APIs and they obviously use Python.
So, discovering in the &lt;a href=&quot;https://www.thoughtworks.com/radar/languages-and-frameworks&quot;&gt;Languages &amp;amp; Frameworks&lt;/a&gt; section of the radar, a new Python web API framework such &lt;a href=&quot;https://fastapi.tiangolo.com/&quot;&gt;Fast API&lt;/a&gt; having Thoughtworks seal of approval (&lt;a href=&quot;https://www.thoughtworks.com/radar/languages-and-frameworks/fastapi&quot;&gt;86. FastAPI&lt;/a&gt;), made my day.
Beware, Fast API is still on “Trial” for Thoughtworks, that means “Enterprises should try this technology on a project that can handle the risk”.
As I’m starting to work with Python for a complete overhaul of the API Stylebook, a personal project that perfectly can handle such risk, I may give it a try.&lt;/p&gt;

&lt;h1 id=&quot;adopt-and-not-assess-openapi-linting-and-why-i-nearly-fell-off-my-chair&quot;&gt;Adopt and not assess OpenAPI linting (and why I nearly fell off my chair)&lt;/h1&gt;

&lt;p&gt;And last but not least, the radar mentions 2 OpenAPI linters in the &lt;a href=&quot;https://www.thoughtworks.com/radar/tools&quot;&gt;tools&lt;/a&gt; section:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar/tools/spectral&quot;&gt;77. Spectral&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar/tools/zally&quot;&gt;79. Zally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI Specification&lt;/a&gt; (fka. the Swagger Specification) is a format allowing you to describe a web API contract.
An OpenAPI linter will help you to ensure that the design of an API conforms to your guidelines (or style guide).&lt;/p&gt;

&lt;p&gt;I know both of these tools for quite a long time now.
&lt;a href=&quot;https://opensource.zalando.com/zally/&quot;&gt;Zally&lt;/a&gt; was the first industrial/high quality OpenAPI linter I encountered but I find it quite complex to use, there’s a cli, a server, you need to use Kotlin to write your rules.
And once I discovered &lt;a href=&quot;https://github.com/stoplightio/spectral&quot;&gt;Spectral&lt;/a&gt;, I totally forgot Zally.&lt;/p&gt;

&lt;p&gt;A simple &lt;code&gt;npm install -g @stoplight/spectral&lt;/code&gt; and you can start.
Writing rules is quite simple, though like any “code”, you definitely need to test them.
I use it extensively every day while doing API design reviews, check my &lt;a href=&quot;https://apihandyman.io/the-augmented-api-design-reviewer/&quot;&gt;Augmented API Design Reviewer&lt;/a&gt; talk to learn more about it.&lt;/p&gt;

&lt;p&gt;Note that I prefer Spectral in my context, I find it simpler, I could simply achieve what I wanted easily, it’s integration with Stoplight Studio is very convenient and it constantly evolves.
But remember, there are no silver bullets, so test those 2 and choose the one that suits you.&lt;/p&gt;

&lt;p&gt;While being quite happy to see those 2 OpenAPI linters in the radar, there are 2 problems regarding how this topic is presented in my humble opinion.&lt;/p&gt;

&lt;p&gt;First, they are in “assess” (worth exploring to see how it will affect you), while I can understand that classification probably based on “how many companies use them”, I definitely think they should be in “adopt” (industry should adopt these items).
Designing API is hard, ensuring consistency is hard and such linters participate in simplifying designers job and ensure a certain level of consistency in your API surface.
Note that such tools will never, ever replace a human powered API design review.&lt;/p&gt;

&lt;p&gt;The second problem in the radar is what is said about “specs” and OpenAPI in the Spectral description, and especially this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While this tool is a welcome addition to the API development workflow, it does raise the question of whether a non-executable specification should be so complex as to require an error-checking technique designed for programming languages. Perhaps developers should be writing code instead of specs?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I nearly fell off my chair.&lt;/p&gt;

&lt;p&gt;This completely misses the point.
It leaves readers totally unaware of API design questions and do not help to grasp how they can take advantage of the OpenAPI specification and such a linter to design consistent APIs.
That gives a totally wrong perspective of OpenAPI and OpenAPI linters in general, and Spectral in particular.
While I met and still meet people who actually are in such state of mind, even don’t giving a 💩 about API design and everything around, I wouldn’t have expected that from a company such as Thoughtworks.
I usually succeed to change people mind about this topic, they realize API design and everything around is a thing, but if Thoughtworks tells something different that will make my work more complicated 😅.
I would love to know how the authors came to writing this, did I missed something?&lt;/p&gt;

&lt;p&gt;Hopefully, I was glad to see the discourse about OpenAPI linters is totally different in the Zally’s description and offers the right perspective on the topic.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As the API specification ecosystem matures, we’re seeing more tools built to automate style checks. Zally is a minimalist OpenAPI linter that helps to ensure an API conforms to the team’s API style guide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe it’s due to these particular pandemic times, but it seems that there’s a lack of alignment between the 2 authors of these advices.
That second advice on OpenAPI linters is far much better, consider it applies to Spectral too.&lt;/p&gt;

&lt;p&gt;And if I can add my opinionated 2 cents about API design, OpenAPI and linters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You MUST have an API design first approach&lt;/li&gt;
  &lt;li&gt;You MUST write API design guidelines (or style guide) describe the look and feel of your APIs&lt;/li&gt;
  &lt;li&gt;You MUST use the OpenAPI (or whatever) specification to describe the result of your work on design&lt;/li&gt;
  &lt;li&gt;You MUST use an OpenAPI (or whatever) linter to ensure your APIs conform to your style guides (and Spectral is a very good tool to do that)&lt;/li&gt;
  &lt;li&gt;You MUST do an API design review with human beings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider all those items should be “Adopt” according to Thoughtworks classification.&lt;/p&gt;

&lt;p&gt;If you want to learn more about the OpenAPI Specification, API guidelines, API design reviews and Spectral, you should look at my following talks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apihandyman.io/openapi-trek-api-days-london-2016/&quot;&gt;OpenAPI Trek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apihandyman.io/api-styleguide-the-lord-of-api-designs/&quot;&gt;The Lord of API Designs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apihandyman.io/api-design-reviewers-starter-set/&quot;&gt;The API Design Reviewer’s Starter Set&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apihandyman.io/the-augmented-api-design-reviewer/&quot;&gt;The Augmented API Design Reviewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Thoughtworks Technology Radar 24, an “opinionated guide to technology frontiers”, came out last 15th of April, 2021 and I thought it could be interesting to read it from an API perspective, hence this post sharing my thoughts on it. As always it is really interesting and full of valuable insights, though I nearly fell off my chair while reading the Tools section which talks about OpenAPI linters (if it’s not a click bait, I don’t know what it is).</summary></entry><entry><title type="html">404 Vs 405 Vs 501</title><link href="https://apihandyman.io/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/" rel="alternate" type="text/html" title="404 Vs 405 Vs 501" /><published>2021-04-21T00:00:00+00:00</published><updated>2021-04-21T00:00:00+00:00</updated><id>https://apihandyman.io/404-vs-405-vs-501</id><content type="html" xml:base="https://apihandyman.io/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/">&lt;p&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.
This first post answers the following question: given that a &lt;code&gt;GET /resources/123&lt;/code&gt; request returns a &lt;code&gt;200 OK&lt;/code&gt;, what should be the response to &lt;code&gt;DELETE /resources/123&lt;/code&gt; if &lt;code&gt;DELETE&lt;/code&gt; method is not implemented? &lt;code&gt;404 Not Found&lt;/code&gt;, &lt;code&gt;405 Method Not Allowed&lt;/code&gt; or &lt;code&gt;501 Not Implemented&lt;/code&gt;?&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Choosing HTTP status codes Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.&lt;div class=&quot;alert alert-info&quot;&gt;
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use &lt;a class=&quot;alert-link&quot; href=&quot;https://webconcepts.info/concepts/http-status-code/&quot;&gt;Erik Wilde's Web Concepts&lt;/a&gt;.
&lt;/div&gt;Very special thanks to all Twitter people participating to the &lt;a href=&quot;https://twitter.com/search?q=%23choosehttpstatuscode&amp;amp;src=typed_query&quot;&gt;#choosehttpstatuscode&lt;/a&gt; polls and discussions&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/a&gt;&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-context&quot;&gt;The context&lt;/h1&gt;

&lt;p&gt;In my &lt;a class=&quot;post-link&quot; href=&quot;/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/&quot;&gt;Batch (Github) API calls with CSV and Postman runner and visualizer&lt;/a&gt; post, I used the Github REST API and discovered it was impossible to delete an issue on a repository with a &lt;code&gt;DELETE /{user}/{repository}/issues/{issueId}&lt;/code&gt; request simply because it was not implemented.
Unfortunately, the Github API warned me with a quite awkward &lt;code&gt;404 Not Found&lt;/code&gt; though a &lt;code&gt;GET&lt;/code&gt; on the very same issue returned a &lt;code&gt;200 OK&lt;/code&gt; that tells “this issue exists”.
That’s quite a contradiction.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/twitter-poll.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Twitter poll results&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;According to a Twitter poll I made, a few voters (10%) agreed with Github REST API’s &lt;code&gt;404 Not Found&lt;/code&gt; response, most people (56%) would use a &lt;code&gt;405 Method Not Allowed&lt;/code&gt;, but a significant amount (34%) would use &lt;code&gt;501 Not Implemented&lt;/code&gt;.
Let’s see which HTTP status code(s) can be used when a resource actually exists but the method provided in the request is not available.&lt;/p&gt;

&lt;h1 id=&quot;use-405-method-not-allowed-when-method-isnt-defined-in-contract&quot;&gt;Use 405 Method Not Allowed when method isn’t defined in contract&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 405 (Method Not Allowed) status code indicates that the method received in the request-line is known by the origin server but not supported by the target resource.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.5&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.5&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;A &lt;code&gt;405&lt;/code&gt; is a &lt;code&gt;4xx&lt;/code&gt; class status code, which means it’s client’s fault.
Receiving such a response means the client sent to the origin server a request with a method that is not allowed/supported by the target resource.
Let’s rephrase that definition in the context of an API:
a consumer will get a &lt;code&gt;405 Method Not Allowed&lt;/code&gt; response when sending a request with a method which is not explicitly mentioned in in the contract or documentation on the target resource.
For instance, that means if the API’s contract or documentation states the only method supported by a resource &lt;code&gt;/resource&lt;/code&gt; is &lt;code&gt;GET&lt;/code&gt;, a consumer sending a request on this resource using any other method, like &lt;code&gt;DELETE /resource&lt;/code&gt; for instance, will get a &lt;code&gt;405 Method Not Allowed&lt;/code&gt; response.&lt;/p&gt;

&lt;p&gt;Therefore, the &lt;code&gt;405&lt;/code&gt; status code is the one I would have expected from the Github REST API when I tried to delete an issue.
Indeed, the API’s documentation describing the API’s contract of the issue resource (&lt;code&gt;/{user}/{repository}/issues/{issueId}&lt;/code&gt;) only mentions &lt;code&gt;GET&lt;/code&gt; and I sent &lt;code&gt;DELETE&lt;/code&gt;.
It’s clearly my fault, though it’s quite surprising to NOT be able to delete an issue (but that’s another story).&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;405 Method Not Allowed&lt;/code&gt; is the right choice when the method is not defined in contract, but sending a “wrong” method is not always consumer’s fault, that’s where a &lt;code&gt;501 Not Implemented&lt;/code&gt; could be interesting.&lt;/p&gt;

&lt;h1 id=&quot;use-501-not-implemented-when-partially-implementing-a-standard&quot;&gt;Use 501 Not Implemented when partially implementing a “standard”&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 501 (Not Implemented) status code indicates that the server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.6.2&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, Section 6.6.2&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;A &lt;code&gt;5xx&lt;/code&gt; class error means the server is at fault.
A &lt;code&gt;501 Not Implemented&lt;/code&gt; basically says “we’re deeply sorry but &lt;code&gt;METHOD&lt;/code&gt; has not been implemented on this resource and maybe has not been implemented at all on any resource”.&lt;/p&gt;

&lt;p&gt;Sending a &lt;code&gt;TOTALLY-UNKNOWN-METHOD /whatever-resource&lt;/code&gt; could result in getting a &lt;code&gt;501&lt;/code&gt; if the method does not match any &lt;a href=&quot;https://webconcepts.info/concepts/http-method/&quot;&gt;generally known one&lt;/a&gt;, but in that case I would prefer to return a &lt;code&gt;405 Method Not Allowed&lt;/code&gt; as it’s not the server’s fault if the consumer really sent a bullshit method in its request and must send an acceptable one.&lt;/p&gt;

&lt;p&gt;But, imagine you are implementing a “more or less standard” interface contract.
It could be because you work in a regulated industry like banking or an highly inter-connected one like travel or logistics.
It could be because you want to implement a protocol such as WebDAV, which is a extended version of HTTP adding new methods.
It could also be simply because inside your company several components have to share a common interface in order to facilitate communication.&lt;/p&gt;

&lt;p&gt;Imagine now that standard contract you need to implement says consumer can use &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; on &lt;code&gt;/resource&lt;/code&gt; but you only implement &lt;code&gt;GET&lt;/code&gt; in your version 1 for whatever reasonable reason.
In that case, returning a &lt;code&gt;501 Not Implemented&lt;/code&gt; would be the perfect answer as the “standard” contract says that &lt;code&gt;PUT /whatever-resource&lt;/code&gt; is possible but it has not been implemented by the actual provider.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;501 Not Implemented&lt;/code&gt; is a very good answer in such a context of partially implementing a “more or less standard” API, returning a &lt;code&gt;404 Not Found&lt;/code&gt; is totally out of question in any HTTP method related error.&lt;/p&gt;

&lt;h1 id=&quot;never-use-404-not-found-when-receiving-wrong-or-unknown-method&quot;&gt;Never use 404 Not Found when receiving wrong or unknown method&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.4&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;The Github REST API responded with a &lt;code&gt;404 Not Found&lt;/code&gt; to my &lt;code&gt;DELETE /issue-resource-path&lt;/code&gt; request.
According to RFC 7231, that tells the issue identified by the path doesn’t exist (A) or Github is not willing to disclose that issue actually exists (B).
Unfortunately, both options were contradicted by the &lt;code&gt;GET /issue-resource-path&lt;/code&gt; returning a &lt;code&gt;200 OK&lt;/code&gt;.
Indeed, getting this &lt;code&gt;200&lt;/code&gt; tells the issue actually exists (Not A) and Github is willing to disclose it exists (Not B).&lt;/p&gt;

&lt;p&gt;And even if for any reason I was actually not able to see this issue (we’ll talk about that in a later post) and so get a &lt;code&gt;404&lt;/code&gt; on my &lt;code&gt;GET&lt;/code&gt;, I still would prefer to get a &lt;code&gt;405&lt;/code&gt; on my &lt;code&gt;DELETE&lt;/code&gt;, that way I could have quickly know that whatever the issue I want to delete, I will never be able to delete it as it’s not possible according to the API’s contract.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="HTTP Status Codes" /><summary type="html">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This first post answers the following question: given that a GET /resources/123 request returns a 200 OK, what should be the response to DELETE /resources/123 if DELETE method is not implemented? 404 Not Found, 405 Method Not Allowed or 501 Not Implemented?</summary></entry><entry><title type="html">When unicorn poop hits the fan (or how APIs can improve how we build software)</title><link href="https://apihandyman.io/when-unicorn-poop-hits-the-fan-or-how-apis-can-improve-how-we-build-software/" rel="alternate" type="text/html" title="When unicorn poop hits the fan (or how APIs can improve how we build software)" /><published>2021-04-14T00:00:00+00:00</published><updated>2021-04-14T00:00:00+00:00</updated><id>https://apihandyman.io/unicorn-poop</id><content type="html" xml:base="https://apihandyman.io/when-unicorn-poop-hits-the-fan-or-how-apis-can-improve-how-we-build-software/">&lt;p&gt;Do you know what happens when you throw unicorn poop into a fan?
It makes everything better, everyone and everything around looks perfect, covered with joy and happiness.
Working seriously on (public or private) APIs can lead to the same kind of effect on how we build software.
Why?
Because modern web APIs raises the bar of software design and developer experience and so raises awareness and expectations regarding these topics for software in general.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Very special thanks to &lt;a href=&quot;https://twitter.com/mrlapindesign&quot;&gt;@mrlapindesign&lt;/a&gt; for the unicorn poop hits the fan post’s banner.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;from-api-design-to-software-design-and-architecture&quot;&gt;From API design to software design and architecture&lt;/h1&gt;

&lt;p&gt;I help people to design their web APIs in order to help them achieve the creation of APIs that fulfill actual needs and will be easy to understand, easy to use, reusable and evolvable.
But my true aim is actually to help them grow their API design skills so they won’t need my help anymore.
I have seen API designers improving their skills, switching their stance from design beginners (if not skeptical) just seeking a “validated API design badge”, having basic questions like “should we use a POST or a GET” or “is it /resources or /resource?”, to fully aware design experts focusing on needs, able to challenge their own designs, to evaluate pros and cons of various design options and to bring interesting solutions to new design challenges not covered by guidelines.
This is already great, but there’s more to that.
From time to time, I meet someone saying “working on API design improved the way I build software”, and that is a sign of “API unicorn poop” actually hitting the fan.&lt;/p&gt;

&lt;p&gt;Working seriously on API design not only improves the design of our APIs but it helps to better design object data models, database tables, and also messages (Kafka messages deserves to be designed too you know).
And beyond data, you can use your API design skills to write better code, better methods or functions, because API design teaches to question inputs and outputs but also needs and business rules in order to produce something that is useful and simple.
At upper scale, it also improves our vision of the domain we are working on, helping us to organize it in pieces of software that make more sense for us and the outside world, and so improving the architecture of the system.&lt;/p&gt;

&lt;p&gt;Working on API design actually improves the whole software stack behind the interface.
But modern web APIs are not only about interface contract design&lt;/p&gt;

&lt;h1 id=&quot;from-developer-experience-to-everyone-experience&quot;&gt;From developer experience to everyone experience&lt;/h1&gt;

&lt;p&gt;Modern web APIs comes with the concept of DX, Developer eXperience.
It’s basically UX, user experience, focusing on developers who choose to use APIs and write code to actually use them.
A good API design is mandatory to provide a good developer experience.
And that is important not only for public APIs, but also private ones.
Unfortunately, it’s not because an API has one of the best in class design that people will want to use it, will be happy to use it.
How many promising APIs have been totally crippled by terrible registration process, terrible documentation or loony non-standard security or simply because people were not aware those APIs actually exists.
How you find APIs, how simple is their registration process, how clear is the documentation, how standard is their security, how short is the “time to first call”, all those aspects are what will make a terrible or wonderful developer experience.&lt;/p&gt;

&lt;p&gt;Hit by the “API unicorn poop”, you’ll think about the people who will come after you to work on what you build, you’ll think about the people who may have to run and monitor what you build (not everyone as turn to “full develops, you build it, you run it”, and even so, you’ll think about your team).
You’ll start to work on documentation, automation, … you’ll do whatever is possible to ensure that anyone can start to work in a matter of minute if not seconds.
Writing documentation, you’ll work harder on its content, its design in order to ensure it is actually user-friendly and people find what they need instantly.
You may even start to wonder if it’s reasonable to use 123 different technologies in your picoservices architecture, that could be a real HR nightmare to find people actually mastering that obscure framework or language you choose to use just because.&lt;/p&gt;

&lt;p&gt;Basically, working seriously on APIs DX, you’ll start to think about user experience of everyone who will have to work one way or another with what you build, whatever it is.&lt;/p&gt;

&lt;h1 id=&quot;raising-expectations-starting-a-virtuous-circle&quot;&gt;Raising expectations, starting a virtuous circle&lt;/h1&gt;

&lt;p&gt;Obviously and hopefully, some people in the software industry did not wait the Web API train to think about design and developer experience, but there was still a lot to do in this area when Web APIs became a thing and there’s still much to do even after that.
Now working on design and developer experience became a de facto standard when providing public APIs, then it started to contaminate private APIs and I believe it will irremediably contaminate everything in software beyond interface contracts.&lt;/p&gt;

&lt;p&gt;If I was pessimistic, I would say that companies creating software for themselves or others should sense they can save or earn much money by creating software that fulfill actual needs, are easy to understand, easy to use and reuse, can evolve easily, and offer a overall descent experience.
But I prefer to see that from a more optimistic perspective, having been shown empathy and be very happy with that, people will raise their standard, change their perspective and in return build software along with an experience that are as good as the one they’ve encountered.&lt;/p&gt;

&lt;p&gt;So, please, next time you create a technology, framework, build an application/system for your company, or simply write code, throw unicorn poop in the fan, think about design and developer experience; if you don’t do it for others, do it at least for you.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p class=&quot;mb-0&quot;&gt;You'll thank me later&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;&lt;cite title=&quot;Source Title&quot;&gt;Adrian Monk&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Do you know what happens when you throw unicorn poop into a fan? It makes everything better, everyone and everything around looks perfect, covered with joy and happiness. Working seriously on (public or private) APIs can lead to the same kind of effect on how we build software. Why? Because modern web APIs raises the bar of software design and developer experience and so raises awareness and expectations regarding these topics for software in general.</summary></entry><entry><title type="html">Batch (Github) API calls with CSV and Postman runner and visualizer</title><link href="https://apihandyman.io/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/" rel="alternate" type="text/html" title="Batch (Github) API calls with CSV and Postman runner and visualizer" /><published>2021-04-07T00:00:00+00:00</published><updated>2021-04-07T00:00:00+00:00</updated><id>https://apihandyman.io/postman-csv-demo</id><content type="html" xml:base="https://apihandyman.io/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/">&lt;p&gt;Do you need to make a repetitive task that could be done through an API instead of a UI?
Do you need to make many API calls but don’t want to code?
This post is made for you: you’ll learn to use Postman and CSV files to batch API calls.
You may also learn a thing or two about API design, Github APIs (yes, plural) and other Postman features (variables, security, command line, visualizer, …) in the making.
If you never have used Postman or Github APIs, no problem, everything will be explained.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;about-the-problem-and-solution&quot;&gt;About the problem and solution&lt;/h1&gt;

&lt;p&gt;While the problem and solution are quite simple, it’s a great occasion to learn many things.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-to-solve&quot;&gt;The problem to solve&lt;/h2&gt;

&lt;p&gt;I think it’s Garfield, a famous philosopher, who once said &lt;em&gt;Laziness is the mother of invention&lt;/em&gt;.
Every time I have a repetitive task to do, I always try to find a way to let machine do it for me.
As I’m the API Handyman, it often ends by taking advantage of an API.
Recently, I had to create many issues in some &lt;em&gt;random issue tracker&lt;/em&gt; based on some data in my emails.
Hopefully, that issue tracker comes with an API and I could easily get the input data in a structure way by a simple copy/paste from my email client.
So instead of having to laboriously fill N times a form, I had to make N API calls with structured data as input, and Postman can help to do that.&lt;/p&gt;

&lt;h2 id=&quot;what-youll-learn-while-solving-it&quot;&gt;What you’ll learn while solving it&lt;/h2&gt;

&lt;p&gt;In order to keep this demonstration easy to redo by anyone, we’ll use the github API to create issues on a dummy public repository with data coming from a CSV file.&lt;/p&gt;

&lt;p&gt;In this post, you’ll learn to use Postman (UI) and Newman (command line):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create Postman workspace, collections and requests&lt;/li&gt;
  &lt;li&gt;Make REST GET and POST (with body) API calls&lt;/li&gt;
  &lt;li&gt;Define and use variables&lt;/li&gt;
  &lt;li&gt;Configure a collection to make secured API call&lt;/li&gt;
  &lt;li&gt;Run all requests of a collection with data coming from a CSV file with Postman&lt;/li&gt;
  &lt;li&gt;Export collections and environments&lt;/li&gt;
  &lt;li&gt;Run all requests of a collection with data coming from a CSV file in a terminal with Newman&lt;/li&gt;
  &lt;li&gt;Make GraphQL API calls&lt;/li&gt;
  &lt;li&gt;Setup a visualizer to render API call results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll also learn use Github REST and GraphQL APIs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Get a personal access token to call Github APIs (REST or GraphQL)&lt;/li&gt;
  &lt;li&gt;Get current user data (REST)&lt;/li&gt;
  &lt;li&gt;List a repository’s issues (REST)&lt;/li&gt;
  &lt;li&gt;Add an issue to a repository (REST)&lt;/li&gt;
  &lt;li&gt;Delete an issue (GraphQL)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we will talk about some principles of API design:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Predictable design&lt;/li&gt;
  &lt;li&gt;Error design&lt;/li&gt;
  &lt;li&gt;Be careful when copying others (especially famous companies)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;setting-up-postman-for-a-first-github-api-call&quot;&gt;Setting up Postman for a first Github API call&lt;/h1&gt;

&lt;p&gt;Postman is a wonderful tool that I have been using for many years to make API calls.
It has constantly evolved over the years and now supports many cool features; it is now advertized as “The Collaboration Platform for API Development (note: this post is not sponsored by Postman).
Go to &lt;a href=&quot;https://www.postman.com/downloads/&quot;&gt;https://www.postman.com/downloads/&lt;/a&gt; to download and install Postman, if you don’t already have it.
You can also use the browser version (but you’ll have to create an account).
Our first Github API call will retrieve current user information.&lt;/p&gt;

&lt;h2 id=&quot;trying-to-make-a-first-api-call&quot;&gt;Trying to make a first API call&lt;/h2&gt;

&lt;p&gt;Launch Postman, we’ll create a “Postman CSV Demo” workspace, a “Github” collection, a “List current user” request calling &lt;code&gt;GET https://api.github.com/user&lt;/code&gt; (see &lt;a href=&quot;https://docs.github.com/en/rest/reference/users#get-the-authenticated-user&quot;&gt;Github REST API documentation&lt;/a&gt;) and make our first call:&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-top-menubar.png&quot; class=&quot;image-simple&quot; alt=&quot;Workspaces&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;In top &lt;em&gt;menu bar&lt;/em&gt;, click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-workspaces-menu.png&quot; class=&quot;image-inline&quot; alt=&quot;Workspaces&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-workspaces-menu-top.png&quot; class=&quot;image-simple&quot; alt=&quot;+ New Workspace&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-plus-workspace-button.png&quot; class=&quot;image-inline&quot; alt=&quot;+ New Workspace&quot; /&gt; button&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-workspace-name.png&quot; class=&quot;image-simple&quot; alt=&quot;Create workspace window name field&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Set workspace name to “Postman CSV Demo”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-workspace-visibility.png&quot; class=&quot;image-simple&quot; alt=&quot;Create workspace window visibility drop list&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Change visibility to “Personal”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-workspace-buttons.png&quot; class=&quot;image-simple&quot; alt=&quot;Create workspace window buttons&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on “Create Workspace” button&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-workspace-created.png&quot; class=&quot;image-simple&quot; alt=&quot;Workspace created&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-new-button.png&quot; class=&quot;image-inline&quot; alt=&quot;New&quot; /&gt; button next to “Postman CSV Demo” workspace name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-collection-button.png&quot; class=&quot;image-simple&quot; alt=&quot;Create collection button&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on “Collection” item in the “Create New” window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-collection-created.png&quot; class=&quot;image-simple&quot; alt=&quot;Collection created&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Change “New Collection” name to “Github”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-collection-right-click-add-request.png&quot; class=&quot;image-simple&quot; alt=&quot;Collection contextual menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Right click on the “Github” collection in the left panel and select “Add request”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-request-created-read-current-user.png&quot; class=&quot;image-simple&quot; alt=&quot;Request created&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Change “New Request” name to “Read current user”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-request-url-set.png&quot; class=&quot;image-simple&quot; alt=&quot;URL set&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Set request URL to &lt;code&gt;https://api.github.com/user&lt;/code&gt;, click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-save-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Save button&quot; /&gt; and hit the &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-send-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Send button&quot; /&gt; button …&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-request-failed-authorization.png&quot; class=&quot;image-simple&quot; alt=&quot;Response telling authorization is required&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;… to get a 401 Unauthorized error telling that authentication is required&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;getting-a-github-personal-access-token&quot;&gt;Getting a Github personal access token&lt;/h2&gt;

&lt;p&gt;The easiest way to get access to the Github API, if you have two factor authentication activated (and you MUST have it activated), is to generate a personal access token.
For our demonstration we will generate one granting access to public repositories:&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-profile-menu.png&quot; class=&quot;image-simple&quot; alt=&quot;Github profile menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Go to your &lt;a href=&quot;https://github.com/settings/profile&quot;&gt;Github account settings&lt;/a&gt; by clicking on your profile icon and clicking on “Settings” (at the bottom)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-settings-menu.png&quot; class=&quot;image-simple&quot; alt=&quot;Github settings menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Scroll down and click on &lt;a href=&quot;https://github.com/settings/apps&quot;&gt;Developer setting&lt;/a&gt; in the left menu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-developer-settings.png&quot; class=&quot;image-simple&quot; alt=&quot;Github settings menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;In developer setting page, click on &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Personal access tokens&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-personal-access-tokens.png&quot; class=&quot;image-simple&quot; alt=&quot;Github personal access tokens&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &lt;a href=&quot;https://github.com/settings/tokens/new&quot;&gt;Generate new token&lt;/a&gt; (you may have to provide your password)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-token-description.png&quot; class=&quot;image-simple&quot; alt=&quot;Github token description&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;In the “Note” field, type “postman-csv-demo”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-scopes-public.png&quot; class=&quot;image-simple&quot; alt=&quot;Public repo scope checked&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Check the &lt;code&gt;public_repo&lt;/code&gt; scope under repo. Note that this scopes obviously gives access to public repositories only, if you want to access private ones, you’ll have to check the &lt;code&gt;repo&lt;/code&gt; scope (which is less obvious).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-token-validate.png&quot; class=&quot;image-simple&quot; alt=&quot;Github token generate button&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-token-generate-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Generate token button&quot; /&gt; at the bottom of the page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-token-generated.png&quot; class=&quot;image-simple&quot; alt=&quot;Github token generated&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Copy the generated token by clicking on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-token-copy-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Copy button&quot; /&gt; (use this token with caution, never, ever, commit this value in any public source code repository!)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;configuring-authorization-in-postman-and-make-a-successful-first-api-call&quot;&gt;Configuring Authorization in Postman and make a successful first API call&lt;/h2&gt;

&lt;p&gt;Having an access token, we’ll configure our collection in order to make all requests that it will contain use it.
But we will do that in a secure way using an environment variable, it’s a best practice that allows to share collections without the risk of sharing sensitive data:&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-workspace-created.png&quot; class=&quot;image-simple&quot; alt=&quot;Workspace created&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-new-button.png&quot; class=&quot;image-inline&quot; alt=&quot;New&quot; /&gt; button next to &quot;Postman CSV Demo&quot; workspace name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-environment-button.png&quot; class=&quot;image-simple&quot; alt=&quot;Create environment button&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &quot;Environment&quot; item in the &quot;Create New&quot; window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-environment-created.png&quot; class=&quot;image-simple&quot; alt=&quot;Environment created&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Change &quot;New Environment&quot; name to &quot;Github&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-environment-github-token.png&quot; class=&quot;image-simple&quot; alt=&quot;Github token variable&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Add a &lt;code&gt;github_token&lt;/code&gt; variable and paste the Github token in its initial value and click outside the field (&lt;em&gt;That should populate also the current value&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-environment-github-to-save.png&quot; class=&quot;image-simple&quot; alt=&quot;Github token variable to save&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-save-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Save button&quot; /&gt; to save the “Github” environment and its &lt;code&gt;github_token&lt;/code&gt; variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-environment-select-github.png&quot; class=&quot;image-simple&quot; alt=&quot;Activate Github environment&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;In the upper left corner, click on “No Environment” and select the newly created “Github” environment in order to make its variables accessible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-collection-auth-type.png&quot; class=&quot;image-simple&quot; alt=&quot;Collection authorization type&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on the “Github” collection’s name, in the Authorization tab, change Type from “No Auth” to “Bearer Token”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-collection-auth-token.png&quot; class=&quot;image-simple&quot; alt=&quot;Collection authorization type&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Set token value to &lt;code&gt;{{github_token}}&lt;/code&gt; (&lt;em&gt;If the value is red instead of orange, it means the variable is not found. It’s probably because you didn’t select the “Github” environment&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-collection-to-save.png&quot; class=&quot;image-simple&quot; alt=&quot;Collection to save&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-save-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Save button&quot; /&gt; (&lt;em&gt;if you don’t you’ll get a 401&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-request-success.png&quot; class=&quot;image-simple&quot; alt=&quot;200 OK response&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Go to the “Read current user” request and hit &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-send-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Send button&quot; /&gt; again … now it works! You should get a 200 OK response along with your user’s data.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h1 id=&quot;creating-one-to-many-issues-with-github-rest-api&quot;&gt;Creating one to many issues with Github REST API&lt;/h1&gt;

&lt;p&gt;Now that everything has been set up, let’s list issues and create one to many.
We will work with a dummy repository, its URL on Github website will be something like &lt;em&gt;https://github.com&lt;/em&gt;&lt;strong&gt;/user/repo&lt;/strong&gt;.
To list issues, we’ll send a GET &lt;em&gt;https://api.github.com/repos&lt;/em&gt;&lt;strong&gt;/user/repo&lt;/strong&gt;&lt;em&gt;/issues&lt;/em&gt; request and to create an issue we’ll to send a POST request on the same URL.
Using GET on a collection resource to list things and POST on the same resource to create a thing that totally makes sense, we’ll discover that unfortunately Github API does not always make sense.&lt;/p&gt;

&lt;h2 id=&quot;listing-issues&quot;&gt;Listing issues&lt;/h2&gt;

&lt;p&gt;Let’s first create our dummy repository with UI and list issues with API:&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/github-repository-issues.png&quot; class=&quot;image-simple&quot; alt=&quot;Github repo issues&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Go to your &lt;a href=&quot;https://github.com&quot;&gt;Github account&lt;/a&gt; and &lt;a href=&quot;https://github.com/new&quot;&gt;create&lt;/a&gt; a new public repository, then go to the issues tab and copy the &lt;code&gt;/user/repo/issues&lt;/code&gt; part of the newly created repository’s URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-collection-dots-menu.png&quot; class=&quot;image-simple&quot; alt=&quot;Postman collection menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;In Postman, click on the &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-dots-button.png&quot; class=&quot;image-inline&quot; alt=&quot;... button&quot; /&gt; button on “Github” collection and select “Add request”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-request-new-list-issues-url.png&quot; class=&quot;image-simple&quot; alt=&quot;Postman new request list issues URL&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Set request’s name to “List issues”, in the URL type &lt;code&gt;https://api.github.com/repos&lt;/code&gt; and paste the &lt;code&gt;/user/repo/issues&lt;/code&gt; part of the newly created repository’s URL&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;API design digression&lt;/em&gt;
You obviously noticed that the UI URLs are similar to the API ones, in the case of Github that’s a really good idea because both UI and API give access to the exact same product and that helps developers to learn how works the API.
But note that it is not always a good idea to mimic your UI in your API as it can make it less reusable in other use cases.&lt;/p&gt;

&lt;p&gt;We could stop here and hit the send button to list issues, but in order to keep our request and project maintainable and reusable, we’ll replace user and repo by variables:&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-set-variable-pop.png&quot; class=&quot;image-simple&quot; alt=&quot;Select text in URL to get set variable menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;In the URL, select your &lt;code&gt;user&lt;/code&gt; (mine is &lt;code&gt;arno-di-loreto&lt;/code&gt;), a “Set as variable” menu appears, click on it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-set-variable-menu.png&quot; class=&quot;image-simple&quot; alt=&quot;Set text as variable menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on “+ Set as new variable”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-list-issues-github-user-variable-configuration.png&quot; class=&quot;image-simple&quot; alt=&quot;Github user variable configuration&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Set name to &lt;code&gt;github_user&lt;/code&gt;, select “Environment: Github” scope and click on “Set Variable”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-list-issues-github-user-variable-url.png&quot; class=&quot;image-simple&quot; alt=&quot;Github user variable in URL&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;User has been replaced by the variable &lt;code&gt;/repos/{{github_user}}/repo/issues&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-list-issues-github-repo-variable-url.png&quot; class=&quot;image-simple&quot; alt=&quot;User and repo replaced by variables in URL&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Repeat with your &lt;code&gt;dummy repo name&lt;/code&gt; to create a &lt;code&gt;github_repo&lt;/code&gt; variable in Github environment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-list-issues-to-save.png&quot; class=&quot;image-simple&quot; alt=&quot;List issues request to save&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Don’t forget to &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-save-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Save button&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-list-issues-empty.png&quot; class=&quot;image-simple&quot; alt=&quot;Empty issues list&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Now you can hit &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-send-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Send button&quot; /&gt; and get an empty list as response because there are no issues in the newly created repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;create-an-issue&quot;&gt;Create an issue&lt;/h2&gt;

&lt;p&gt;Let’s fill that empty issues list by creating an issue.
As the Github REST API follows common practices, we are supposed to do a POST request on the same URL as the one used to list issues:&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-duplicate.png&quot; class=&quot;image-simple&quot; alt=&quot;Request duplicate menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Right click on the “List issues” request and select “Duplicate”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-rename.png&quot; class=&quot;image-simple&quot; alt=&quot;Rename request with pen&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Select the newly created “List issues in repository Copy” request and change its name to “Create issue” by clicking on the pen that appear next to the request name when hovering over it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-change-method.png&quot; class=&quot;image-simple&quot; alt=&quot;Method menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on “GET” to change method to “POST” and then hit the &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-send-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Send button&quot; /&gt; button…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-error.png&quot; class=&quot;image-simple&quot; alt=&quot;Method menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt; … Oops, there’s a 422 error!&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;We actually forgot to provide some data in the body, but the error &lt;code&gt;message&lt;/code&gt; is totally unclear about that.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;An error response that don't help as much as it could&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;message&amp;quot;: &amp;quot;Invalid request.\n\nFor &amp;#39;links/0/schema&amp;#39;, nil is not an object.&amp;quot;,
    &amp;quot;documentation_url&amp;quot;: &amp;quot;https://docs.github.com/rest/reference/issues#create-an-issue&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Such cryptic response is really an example to NOT follow, an error message must clear and help to solve the problem.
But at least, there’s a &lt;a href=&quot;https://docs.github.com/rest/reference/issues#create-an-issue&quot;&gt;link&lt;/a&gt; to the documentation (&lt;code&gt;documentation_url&lt;/code&gt;) (which is a very good idea!), if you follow it you’ll see that we need to supply at least a &lt;code&gt;title&lt;/code&gt; and there are other data such as the &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try set this request a body but just with the &lt;code&gt;body&lt;/code&gt; property:&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-body-tab.png&quot; class=&quot;image-simple&quot; alt=&quot;Request body tab&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Go to the &quot;Body&quot; tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-raw-selected.png&quot; class=&quot;image-simple&quot; alt=&quot;Request body raw button radio&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on &quot;raw&quot; button radio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-json-selected.png&quot; class=&quot;image-simple&quot; alt=&quot;Request body raw button radio&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on the &quot;Text&quot; menu to select &quot;JSON&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-body-json.png&quot; class=&quot;image-simple&quot; alt=&quot;Request body raw button radio&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Add a JSON object with a “body” property set to some random string (you can copy the following sample)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Create issue (incomplete) body&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;body&amp;quot;: &amp;quot;Body of issue created by Postman&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, if you hit &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-send-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Send button&quot; /&gt; , it fails again with the following response:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;An error response that actually helps&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;message&amp;quot;: &amp;quot;Invalid request.\n\n\&amp;quot;title\&amp;quot; wasn&amp;#39;t supplied.&amp;quot;,
    &amp;quot;documentation_url&amp;quot;: &amp;quot;https://docs.github.com/rest/reference/issues#create-an-issue&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But the error is clearer this time, we know exactly how to fix the problem: add missing &lt;code&gt;title&lt;/code&gt; property.
Think about that the next time you design and then code an API.
OK, end of API design digression, let’s provide a valid request body with a &lt;code&gt;title&lt;/code&gt; and a &lt;code&gt;body&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Create issue (complete) body&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;title&amp;quot;: &amp;quot;Issue created by Postman&amp;quot;,
    &amp;quot;body&amp;quot;: &amp;quot;Body of issue created by Postman&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Click on &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-save-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Save button&quot; /&gt; and hit &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-send-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Send button&quot; /&gt; one more time, you’ll get a &lt;code&gt;201 Created&lt;/code&gt; response containing all data of the created issue.
If you go back to the “List issues” request to send it again, you should get an non empty list containing the created issue.
Obviously, if you also go the dummy repository on Github, you’ll find that issue in the issues tab (I have to admit that I find quite satisfying to see the result of API calls appearing in UI).&lt;/p&gt;

&lt;h2 id=&quot;creating-many-github-issues-with-postman-runner-and-csv&quot;&gt;Creating many github issues with Postman Runner and CSV&lt;/h2&gt;

&lt;p&gt;If you need to create many issues, you could just modify the “Create issue” request’s body and hit &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-send-button.png&quot; class=&quot;image-inline&quot; alt=&quot;Send button&quot; /&gt; as many times as needed.
But that would be quite cumbersome right? What about trying the lazy way?&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-create-issue-save.png&quot; class=&quot;image-simple&quot; alt=&quot;Unsaved create issue request&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Just in case, ensure you actually saved the “Create Issue”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-collection-duplicate.png&quot; class=&quot;image-simple&quot; alt=&quot;Github collection duplicate menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Right click on the “Github” collection and select “Duplicate”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-collection-copy-rename-duplicate.png&quot; class=&quot;image-simple&quot; alt=&quot;Github collection rename menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Right click on the “Github Copy” collection and select “Rename” to rename it “Github Batch Issues Create”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-create-collection-clean.png&quot; class=&quot;image-simple&quot; alt=&quot;Request delete menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Delete all requests EXCEPT the “Create Issue” one by right clicking on their name and selecting Delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-create-issue-body.png&quot; class=&quot;image-simple&quot; alt=&quot;Request body with variables&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Select the “Create Issue” request, select the body tab and replace &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; values by &lt;code&gt;{{title}}&lt;/code&gt; and &lt;code&gt;{{body}}&lt;/code&gt; variables as follow&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Create issue request's body with variables&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;title&amp;quot;: &amp;quot;{{title}}&amp;quot;,
    &amp;quot;body&amp;quot;: &amp;quot;{{body}}&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But from where will come those variables?
From a CSV (Comma Separated Values) file!
Open your favorite text editor, and put some issues titles and bodies as follow and save the file somewhere.
The first line contains the names of the variables (&lt;code&gt;title&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;), the other lines contain actual titles and bodies.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Issues data in CSV format&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-csv line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;title,body
A first issue, First issue&amp;#39;s body
Another issue, Second issue&amp;#39;s body
Third issue,Yet another issue&amp;#39;s body
Fourth issue,Too many issues
Five,It doesn&amp;#39;t work
Six,It really doesn&amp;#39;t work&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, we will trigger one API call per CSV file line (excluding the first one which holds the variable names):&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-run.png&quot; class=&quot;image-simple&quot; alt=&quot;Collection run button&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Select the “Github Batch Issues Create” collection and click on the “Run” button&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-open-csv.png&quot; class=&quot;image-simple&quot; alt=&quot;Select CSV file&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on “Select File” and open the previously created CSV file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-preview-open.png&quot; class=&quot;image-simple&quot; alt=&quot;CSV data preview&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Note that the number of iterations matches the number of line (minus title one) in the CSV file. Click on the “Preview” button&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-preview.png&quot; class=&quot;image-simple&quot; alt=&quot;CSV data preview&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Check that the file is correctly interpreted, then close the preview&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-run-launch.png&quot; class=&quot;image-simple&quot; alt=&quot;Launch run button&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;And finally, hit “Run Github Batch Issues Create” button&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Postman will do all the work and create all the issues provided in the CSV file.
It simply makes and API call for each line, replacing the &lt;code&gt;{{title}}&lt;/code&gt; and &lt;code&gt;{{body}}&lt;/code&gt; variables by the value provided the CSV file’s line.&lt;/p&gt;

&lt;div class=&quot;image border&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-result.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Run result&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You can list issues with an API call of check Github web site to see all the created issues.
Note that there are 7 issues, that’s the one created to check our Create Issue API call was actually working plus the six other ones created with the CSV file.&lt;/p&gt;

&lt;div class=&quot;image border&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-github-batch-result-github.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Issues list on github website&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;it-works-also-on-the-command-line&quot;&gt;It works also on the command line&lt;/h1&gt;

&lt;p&gt;If you need to industrialize doing batch API calls this way, having to use UI is not really convenient.
Hopefully, you can run collection on the command line using Postman’s Newman.
So, let’s see how to create many Github issues using our “Github Batch Issues Create” collection and Newman.&lt;/p&gt;

&lt;h2 id=&quot;install-newman&quot;&gt;Install Newman&lt;/h2&gt;

&lt;p&gt;You’ll need &lt;a href=&quot;https://nodejs.org/en/download/current/&quot;&gt;Node.js&lt;/a&gt; to install and run Newman.
Installing Newman is quite simple, just open a terminal and run a good old &lt;code&gt;npm install -g newman&lt;/code&gt; and you’re done.
Check Newman &lt;a href=&quot;https://learning.postman.com/docs/running-collections/using-newman-cli/command-line-integration-with-newman/&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&quot;export-collection-and-environment-file&quot;&gt;Export collection and environment file&lt;/h2&gt;

&lt;p&gt;To run the “Github Batch Issues Create” collection, we obviously need the collection itself but also the “Github” environment variables, let’s export them both:&lt;/p&gt;

&lt;table class=&quot;tutorial-steps&quot;&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-export-collection-menu.png&quot; class=&quot;image-simple&quot; alt=&quot;Collection menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on … near the “Github Batch Issues Create” collection name and select “Export”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-export-collection-dialog.png&quot; class=&quot;image-simple&quot; alt=&quot;Export collection dialog&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Keep default export format, click the “Export” button and save the collection file in the same folder as the CSV file created earlier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-environments.png&quot; class=&quot;image-simple&quot; alt=&quot;Environment tab&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Go to the “Environment” tab (in Postman’s window left panel) and select the Github environment by clicking on it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-environment-menu.png&quot; class=&quot;image-simple&quot; alt=&quot;Environment menu&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;Click on … near the Share button (upper right corner), select “Export” and save the environment file in the same folder as the CSV file&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;creating-many-github-issues-on-command-line-with-newman&quot;&gt;Creating many github issues on command line with Newman&lt;/h2&gt;

&lt;p&gt;Now, we’re all set to run the “Github Batch Issues Create” collection on the command line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open a terminal&lt;/li&gt;
  &lt;li&gt;Go to the folder containing the csv, collection and environment files&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;newman run collection_filename -e environment_filename -d csv_filename&lt;/code&gt; (with your actual collection, environment and csv filenames!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And tada, one “Create Issue” request has been done for each line in the CSV file (again)!&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/newman-result.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Newman execution result&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You can optionally check the newly created issued in Postman with the List issues request or go on Github.
Note that as we didn’t modify the CSV file between the Postman and Newman run, the 6 new issues are the same as the 6 previous ones.&lt;/p&gt;

&lt;h1 id=&quot;cleaning-the-mess-with-github-graphql-api&quot;&gt;Cleaning the mess with Github GraphQL API&lt;/h1&gt;

&lt;p&gt;As an exercise you can try to delete the issues that has been created using Postman (or Newman), a collection and a CSV file containing ids of issues to delete.
Do not overlook this exercise that looks quite simple but is actually not, there is a trap and a interesting Postman feature to discover.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The rest of this section shows how to do so (with less screenshots as by now you should know how to find your way in Postman UI).&lt;/p&gt;

&lt;h2 id=&quot;trying-to-delete-an-issue&quot;&gt;Trying to delete an issue&lt;/h2&gt;

&lt;p&gt;As the Github API is a REST API, I assume that deleting an issue simply means sending a &lt;code&gt;DELETE /issues-resource-path/{issueId}&lt;/code&gt; request.
To find the actual URL, let’s use the “List issues” request again, it returns something like that:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[
    {
        &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/repos/arno-di-loreto/postman-csv-demo/issues/13&amp;quot;,
        &amp;quot;repository_url&amp;quot;: &amp;quot;https://api.github.com/repos/arno-di-loreto/postman-csv-demo&amp;quot;,
        &amp;quot;labels_url&amp;quot;: &amp;quot;https://api.github.com/repos/arno-di-loreto/postman-csv-demo/issues/13/labels{/name}&amp;quot;,
        &amp;quot;comments_url&amp;quot;: &amp;quot;https://api.github.com/repos/arno-di-loreto/postman-csv-demo/issues/13/comments&amp;quot;,
        &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/repos/arno-di-loreto/postman-csv-demo/issues/13/events&amp;quot;,
        &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/arno-di-loreto/postman-csv-demo/issues/13&amp;quot;,
        &amp;quot;id&amp;quot;: 848749267,
        &amp;quot;node_id&amp;quot;: &amp;quot;MDU6SXNzdWU4NDg3NDkyNjc=&amp;quot;,
        &amp;quot;number&amp;quot;: 13,
        ...
    },
    ...
]&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A github issue seems to have 3 “ids”: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;node_id&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt;, which one to choose?
No need to actually think about it because the ready to use &lt;code&gt;url&lt;/code&gt; is actually provided!
That’s pretty handy.
And by the way it tells us that the id to use is &lt;code&gt;number&lt;/code&gt; (with user and repo name).&lt;/p&gt;

&lt;p&gt;Let’s try to delete the first issue in the list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click on the url property’s value&lt;/li&gt;
  &lt;li&gt;That opens a new request tab&lt;/li&gt;
  &lt;li&gt;Hit the Send button to check what happens when doing a GET on that URL&lt;/li&gt;
  &lt;li&gt;You actually get the issue&lt;/li&gt;
  &lt;li&gt;Now change method to DELETE and hit send again …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That returns a &lt;code&gt;404 Not Found&lt;/code&gt;, does that mean this issue doesn’t exist?!
Obviously not, because a GET on it actually returned something.
Let’s check what the &lt;a href=&quot;https://docs.github.com/rest&quot;&gt;documentation&lt;/a&gt; says (link provided in &lt;code&gt;documentation_url&lt;/code&gt;), look for &lt;a href=&quot;https://docs.github.com/en/rest/reference/issues&quot;&gt;Issues&lt;/a&gt; in the left navigation bar.&lt;/p&gt;

&lt;p&gt;Actually, you can’t delete an issue with Github REST API!&lt;/p&gt;

&lt;p&gt;Seriously, don’t do that at home, use HTTP protocol correctly, never, ever return a 404 Not Found when a method is not available, return a 405 Method Not Allowed instead.&lt;/p&gt;

&lt;h2 id=&quot;actually-deleting-an-issue&quot;&gt;Actually deleting an issue&lt;/h2&gt;

&lt;p&gt;Hopefully there are 2 Github APIs: the REST one and the GraphQL one.
And you can delete issues with Github GraphQL API using the &lt;code&gt;deleteIssue&lt;/code&gt; mutation.
And even more hopefully, you can use the same token to access both APIs.&lt;/p&gt;

&lt;p&gt;I will not go into details about GraphQL.
For what we need to do today, you only need to know that to send requests to a GraphQL API you always use a POST request and tell what you want to do in the body using GraphQL query language.
In GraphQL, a request can contains many queries (to read data) and mutations (to modify data), actually mutations can be seen as functions.
You can read my &lt;a href=&quot;/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/&quot;&gt;And GraphQL for all&lt;/a&gt; post to learn more about GraphQL.&lt;/p&gt;

&lt;p&gt;Let’s try to use this &lt;code&gt;deleteIssue&lt;/code&gt; mutation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select the “Github” collection&lt;/li&gt;
  &lt;li&gt;Create a new “Delete issue (GraphQL)” request&lt;/li&gt;
  &lt;li&gt;Set its method to “POST”&lt;/li&gt;
  &lt;li&gt;Set its URL to &lt;code&gt;https://api.github.com/graphql&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Go to the “Body” tab&lt;/li&gt;
  &lt;li&gt;Select “GraphQL” radio button&lt;/li&gt;
  &lt;li&gt;Paste the following GraphQL body&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Delete issue GraphQl request body&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-graphql line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;mutation {
    deleteIssue(input: { issueId: &amp;quot;but which id put here?&amp;quot; }) { 
        repository { 
            name
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The question is, which id should we provide in the &lt;code&gt;issueId&lt;/code&gt; property?
We have seen in the REST API that an issue has 3 different ids, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;id&lt;/code&gt;: &lt;code&gt;848749267&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;node_id&lt;/code&gt;: &lt;code&gt;MDU6SXNzdWU4NDg3NDkyNjc=&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;number&lt;/code&gt;: &lt;code&gt;13&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the request does not provide the repository name, that excludes the &lt;code&gt;number&lt;/code&gt; as its value is probably not universally unique across all repositories of all users.
The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;node_id&lt;/code&gt; could be that unique.&lt;/p&gt;

&lt;p&gt;Try to set &lt;code&gt;issueId&lt;/code&gt; with one of the &lt;code&gt;id&lt;/code&gt; of your issues and hit the send button.
You’ll get this 200 OK response (sigh… HTTP is only used for transport with GraphQL APIs):&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Error&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-graphql line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;data&amp;quot;: {
        &amp;quot;deleteIssue&amp;quot;: null
    },
    &amp;quot;errors&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;NOT_FOUND&amp;quot;,
            &amp;quot;path&amp;quot;: [
                &amp;quot;deleteIssue&amp;quot;
            ],
            &amp;quot;locations&amp;quot;: [
                {
                    &amp;quot;line&amp;quot;: 2,
                    &amp;quot;column&amp;quot;: 5
                }
            ],
            &amp;quot;message&amp;quot;: &amp;quot;Could not resolve to a node with the global id of &amp;#39;848749267&amp;#39;&amp;quot;
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As &lt;code&gt;node_id&lt;/code&gt; is the only one left and as the error message talks about “node”, it seems to be the expected value.
Try again, and now you’ll get another 200 OK signifying that the issue has been deleted.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Issue deleted!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-graphql line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;data&amp;quot;: {
        &amp;quot;deleteIssue&amp;quot;: {
            &amp;quot;repository&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;dummy-repository&amp;quot;
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that this response contains the name of the repo that was holding the deleted issue.
Now that you know how to delete an issue, it’s quite easy to delete all the issue you have created.
I will just give you one last tip.&lt;/p&gt;

&lt;h2 id=&quot;one-last-tip-generating-csv-file-with-ids-in-postman&quot;&gt;One last tip: “Generating” CSV file with Ids in Postman&lt;/h2&gt;

&lt;p&gt;To delete multiple issues using the method we have been using to create them, you need a CSV file containing the ids of the issues you want to delete.
You could list issues using Postman and copy/paste them one by one in that file.
You could also use the powerful JSON command line processor &lt;code&gt;jq&lt;/code&gt; (see my &lt;a href=&quot;/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/&quot;&gt;post series&lt;/a&gt; about it)
But what about “generating” that CSV in Postman?&lt;/p&gt;

&lt;p&gt;To do so, we’ll use the &lt;a href=&quot;https://learning.postman.com/docs/sending-requests/visualizer/&quot;&gt;Visualize&lt;/a&gt; feature of Postman.
By adding some Javascript code in the Tests tab of a request you can setup a visualizer for the returned data.
That can be used to create awesome charts or more simple tables, this is what we’ll do here.&lt;/p&gt;

&lt;p&gt;Go the the Tests tab of the “List issues” request in “Github” collection and copy/paste the following Javascript code:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Setup visualizer in Tests tab&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-js line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;// Handlebar template
var templateIdsOnly = `
    &amp;lt;table bgcolor=&amp;quot;#FFFFFF&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;issueId&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;

        {{#each response}}
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;{{node_id}}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        {{/each}}
    &amp;lt;/table&amp;gt;
`;

// Set visualizer
pm.visualizer.set(templateIdsOnly, {
    // Pass the response body parsed as JSON as `data`
    response: pm.response.json()
});&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This Javascript code creates a &lt;code&gt;templateIdsOnly&lt;/code&gt; &lt;a href=&quot;https://handlebarsjs.com/&quot;&gt;Handlebar&lt;/a&gt; template.
This template is pretty basic, it builds a HTML table with a single column title &lt;code&gt;issueId&lt;/code&gt;.
This table will contain a line line holding the &lt;code&gt;node_id&lt;/code&gt; value of each item returned by the API call. 
After that it configures the Postman visualizer (&lt;code&gt;pm.visualizer&lt;/code&gt;) to use the template on the API cal response data (&lt;code&gt;pm.response.json()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Once this is done, hit the Send button and click on Visualize in the response and tada, you get a one column table with its node_id title and all node_id values:&lt;/p&gt;

&lt;div class=&quot;image border&quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/postman-visualize-ids.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Visualize result in Postman&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Just select all text and copy/paste it in a file that you’ll use as input to delete all issues.&lt;/p&gt;

&lt;p&gt;Obviously, in our case as we need a single value for each request, that is not really a CSV file that has been “generated”.
If you need to get multiple value, just add a comma and the new value in the template (don’t forget title) as follow&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Actually generating CSV data&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-js line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;// Handlebar template
var templateCsv = `
    &amp;lt;table bgcolor=&amp;quot;#FFFFFF&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;issueId,body&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;

        {{#each response}}
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;{{node_id}},{{body}}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        {{/each}}
    &amp;lt;/table&amp;gt;
`;

// Set visualizer
pm.visualizer.set(templateCsv, {
    // Pass the response body parsed as JSON as `data`
    response: pm.response.json()
});&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;From now on, you have all you need to delete multiple issues with the runner in Postman or with Newman.&lt;/p&gt;

&lt;h1 id=&quot;delete-access-token&quot;&gt;Delete access token&lt;/h1&gt;

&lt;p&gt;Once you’re done, beware to not commit the environnement file with active access token.
I recommend deleting your Github access token if you don’t use it anymore.
Go to your &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Personal Access Token list&lt;/a&gt; on Github and click on the “delete” button for the “postman-csv-demo” token.&lt;/p&gt;

&lt;h1 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h1&gt;

&lt;p&gt;I hope that the next time you’ll need to batch API calls, you’ll remember what you’ve seen in this post.
Doing CSV data based API batch calls is pretty simple once you know that feature exists in Postman (and in its command line counter part Newman).
The visualize feature can be really useful too in that case but it can be used to do far more advanced data rendering.
And don’t forget to use environment variables to store sensitive data in Postman.&lt;/p&gt;

&lt;p&gt;I hope that you’ll also remember the few design principles and errors that we have seen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being consistent with common practices (and HTTP/REST principles), ease learning to use an API (people can guess how to use APIs)&lt;/li&gt;
  &lt;li&gt;Including link to documentation is quite useful&lt;/li&gt;
  &lt;li&gt;Never return unclear error that does not help to solve the problem&lt;/li&gt;
  &lt;li&gt;Never return 404 Not Found status code when an HTTP method is not available on an actually existing resource, use 405 Method Not Allowed instead&lt;/li&gt;
  &lt;li&gt;Having consistent URL between UI and API can be a good idea but not always (it may make API less reusable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And last but not least, we’ve seen that even famous companies such as Github can make mistakes with their APIs.
That means that you must be careful when taking inspiration from existing APIs.
Hopefully, in the case of Github, the problems don’t have much consequences, the API is overall of good quality and usable (and the documentation is quite good), but be careful not to ruin developer experience with more terrible mistakes.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="API Toolbox" /><summary type="html">Do you need to make a repetitive task that could be done through an API instead of a UI? Do you need to make many API calls but don’t want to code? This post is made for you: you’ll learn to use Postman and CSV files to batch API calls. You may also learn a thing or two about API design, Github APIs (yes, plural) and other Postman features (variables, security, command line, visualizer, …) in the making. If you never have used Postman or Github APIs, no problem, everything will be explained.</summary></entry><entry><title type="html">7 ways leading to wrong ownership and killing APIs</title><link href="https://apihandyman.io/7-ways-leading-to-wrong-ownership-and-killing-apis/" rel="alternate" type="text/html" title="7 ways leading to wrong ownership and killing APIs" /><published>2021-03-28T00:00:00+00:00</published><updated>2021-03-28T00:00:00+00:00</updated><id>https://apihandyman.io/ownership</id><content type="html" xml:base="https://apihandyman.io/7-ways-leading-to-wrong-ownership-and-killing-apis/">&lt;p&gt;After hundreds of API design reviews, I can tell that the most neglected aspect of API governance is ownership.
Unfortunately, that’s probably the most important one.
Without true ownership, your APIs will probably be totally wrong.
Without true ownership, your employees will be terribly sad or leave.
Without true ownership, your company may even die.
As an API design reviewer, I believe that my role is also to warn the teams I’m working with about this topic and help them to fix the problem.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;ownership-done-wrong&quot;&gt;Ownership done wrong&lt;/h1&gt;

&lt;p&gt;In this post, I’ll share with you 7 ways leading to wrong ownership that I have actually witnessed.&lt;/p&gt;

&lt;h2 id=&quot;letting-consumers-dictate-their-will&quot;&gt;Letting consumers dictate their will&lt;/h2&gt;

&lt;p&gt;That’s a very classic one.
After decades of building point to point web services that serve for highly specific needs and highly specific consumers, teams may be tempted to go on as before and just say yes to every single request of any consumer resulting in non reusable and totally bloated APIs.
In such cases, it’s often hard at the beginning to switch to a true API provider stance and be the actual owner of the APIs.
You’ll have to make consumers understand that as an API provider you can’t just make an API only for them exactly as they wish.
Reversing roles, and so becoming the true owner, is often a simple matter of explaining that &lt;em&gt;who can do more, can do less&lt;/em&gt; and that your more generic API design is actually able to fullfil many specific needs.&lt;/p&gt;

&lt;h2 id=&quot;mapping-api-to-micro-organization&quot;&gt;Mapping API to micro-organization&lt;/h2&gt;

&lt;p&gt;It’s not unusual to have a business domain split across different small teams, each one working on a specific part because of process or technology.
The problem is that some may be tempted to build an API per team resulting in many micro-APIs.
By doing so you may needlessly expose your internal organization (who said Conway’s law?) and build micro-APIs that are worthless without each others.
For example, if a team works on the “Customer Creation API” and the other one on “Customer modification and read API”, it will be cumbersome to use those 2 APIs if that separation does not make any sense from a business perspective and even more if most consumers actually need both set of operations.
In that case, you’ll have to find organizational and technical ways to expose and maintain a unified API façade that will be meaningful for consumers.
That especially means that ownership encompass the 2 subsets of operations.
And by the way, that could be a signal that your human organization is not the good one.&lt;/p&gt;

&lt;h2 id=&quot;not-being-the-golden-source&quot;&gt;Not being the golden source&lt;/h2&gt;

&lt;p&gt;In big companies replicating data is unfortunately very common, not all companies are aware of Jeff Bezos mandate (which basically says do APIs for between team communication or you’re fired).
That means that more often than not, data is replicated and sometimes enhanced the same ways dozens of times.
At some extent, some team may be tempted to expose APIs providing data they don’t actually own.
Depending on whom these APIs are exposed to that could be a real problem.
If it’s just a quick win used inside a team while waiting the true owner build they’re own APIs that could be OK.
If not, data officers and even actual provider may not really happy with that.
But most important, not being the actual owner, the team building the API may not work enough on design and just build an ugly technical connector because they don’t really care about it.&lt;/p&gt;

&lt;h2 id=&quot;outsourcing-implementation&quot;&gt;Outsourcing implementation&lt;/h2&gt;

&lt;p&gt;I have never seen a successful API resulting from owner delegating implementation to someone else.
In best cases, there’s so much delegation that owner don’t actually own the API, it’s designed in a totally independent and usually bad way.
In worst cases, the owner may have strong views on how the API should look like (and that’s totally normal) but these views are not shared by the people who will actually build the API resulting in conflicts and the API is not released before the owner actually find a way to be able to build the API themselves.&lt;/p&gt;

&lt;h2 id=&quot;delegating-design-to-developers-without-business-knowledge&quot;&gt;Delegating design to developers without business knowledge&lt;/h2&gt;

&lt;p&gt;I can’t count how many times I had to work on API design reviews with developers without business knowledge.
That’s terrible for API design because they are unable to answer my business oriented questions and make decisions.
API design is not really a matter of POST /this and which database is used underneath, it’s first and foremost a matter of needs and business rules.
An API must be owned by both business AND developers, they must work together on design.&lt;/p&gt;

&lt;h2 id=&quot;delegating-api-stuff-to-center-of-expertise&quot;&gt;Delegating API stuff to center of expertise&lt;/h2&gt;

&lt;p&gt;This one is quite close to previous case.
As APIs become more and more important for companies, especially big ones, they’re tempted to build an API center of excellence or any other type of structure concentrating all API related expertise.
If that leads to teams fully delegating APIs building to these experts, that will only lead to terrible APIs as if those experts actually know how to build and design APIs, they probably know nothing of the business domain.
A center of expertise should only exist to help, empower and train non-experts in order to make them self-sufficient on a new topic.&lt;/p&gt;

&lt;h2 id=&quot;suffering-from-dictatorial-api-governance&quot;&gt;Suffering from dictatorial API governance&lt;/h2&gt;

&lt;p&gt;And last, but not least, a dictatorial or even just a little bit too strong governance has a subtle but terrible effect: it inevitably disempowers people, takes API ownership from them.
Why?
Simply because, having extremist API design reviewers that actually don’t help people design their API but just yell at them and actually constrain them so much that they can’t design anything themselves lead to only one thing: “OK, Mr Inquisitor, design it for me, so I can move on and deliver my stuff”.
Not only people loose ownership but they also loose the will to learn and improve, the consequences at scale for the company will be terrible.
People who actually build APIs will not grow their expertise (and be sad or leave).
And the resulting API will be of low quality, probably less usable, reusable, evolvable.
In the 21st century, I believe that it that could kill a company in the long run.&lt;/p&gt;

&lt;h1 id=&quot;what-ownership-actually-requires&quot;&gt;What ownership actually requires&lt;/h1&gt;

&lt;p&gt;So how to be sure that an “organization” actually is the true owner of an API?
It must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be the actual owner of data, services, domain, components&lt;/li&gt;
  &lt;li&gt;Represent a meaningful business domain leading to meaningful and self sufficient API(s)&lt;/li&gt;
  &lt;li&gt;Know domain from business perspective&lt;/li&gt;
  &lt;li&gt;Know domain from technical perspective&lt;/li&gt;
  &lt;li&gt;Be able to design (maybe with some help but without over delegating)&lt;/li&gt;
  &lt;li&gt;Be able to make decisions&lt;/li&gt;
  &lt;li&gt;Be able to actually implement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An “organization” can be a team or a group of teams but be warned that making different teams working together may not be that easy, maybe you should rethink your human organization to solve that problem.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">After hundreds of API design reviews, I can tell that the most neglected aspect of API governance is ownership. Unfortunately, that’s probably the most important one. Without true ownership, your APIs will probably be totally wrong. Without true ownership, your employees will be terribly sad or leave. Without true ownership, your company may even die. As an API design reviewer, I believe that my role is also to warn the teams I’m working with about this topic and help them to fix the problem.</summary></entry><entry><title type="html">The Augmented API Design Reviewer</title><link href="https://apihandyman.io/the-augmented-api-design-reviewer/" rel="alternate" type="text/html" title="The Augmented API Design Reviewer" /><published>2020-12-13T00:00:00+00:00</published><updated>2020-12-13T00:00:00+00:00</updated><id>https://apihandyman.io/the-augmented-api-design-reviewer</id><content type="html" xml:base="https://apihandyman.io/the-augmented-api-design-reviewer/">&lt;p&gt;My 2020 talk, &lt;em&gt;The Augmented API Design Reviewer&lt;/em&gt; is about (partial) API Design review automation with the OpenAPI Specification and Spectral.&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;API Design Reviews can be a total nightmare when it comes to check API Design Guidelines conformance. Hopefully, this can be automated using the OpenAPI Specification and Spectral, a JSON/YAML linter. Using these tools, you’ll be able to focus on other more interesting tasks such as investigating if the API fullfils the identified needs. But that will only work if you know how to build and use Spectral rulesets. During this session you’ll discover the basics of Spectral and how to actually use it at scale by discovering how to design rules and rulesets, how to ensure they actually work, and also by learning the differents ways of using Spectral.&lt;/p&gt;

&lt;h1 id=&quot;video&quot;&gt;Video&lt;/h1&gt;

&lt;div id=&quot;MAHW5DmM9j4&quot; class=&quot;third-party-content third-party-content-youtube&quot;&gt;
    &lt;div class=&quot;card third-party-content-warning&quot;&gt;
        &lt;img class=&quot;card-img&quot; src=&quot;/images/thirdpartycontents/the-augmented-api-design-reviewer-asc.jpg&quot; alt=&quot;Card image&quot; /&gt;
        &lt;div class=&quot;card-img-overlay d-flex&quot;&gt;
            &lt;div class=&quot;my-auto mx-auto text-center&quot;&gt;
                &lt;p&gt;This content is hosted on youtube.com.&lt;/p&gt;
                &lt;p&gt;By showing this third party content you accept YouTube (Google)'s 
                    &lt;a class=&quot;privacy-policy&quot; href=&quot;https://policies.google.com/privacy&quot; target=&quot;_blank&quot;&gt;privacy policy&lt;/a&gt;.
                &lt;/p&gt;
                &lt;form&gt;
                    &lt;a href=&quot;javascript:thirdPartyConsent('MAHW5DmM9j4', 'youtube')&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Show third party content&lt;/a&gt;
                    &lt;div class=&quot;form-check&quot;&gt;
                        &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input third-party-content-remember&quot; /&gt;
                        &lt;label class=&quot;form-check-label&quot; for=&quot;exampleCheck1&quot;&gt;Remember my choice&lt;/label&gt;
                        &lt;p&gt;(can be changed in &lt;a class=&quot;privacy-policy&quot; href=&quot;/privacy&quot;&gt;privacy settings&lt;/a&gt;)&lt;/p&gt;
                      &lt;/div&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;iframe-container third-party-content-iframe third-party-content-iframe-disabled&quot;&gt;
        &lt;iframe class=&quot;iframe-responsive&quot; data-src=&quot;https://www.youtube-nocookie.com/embed/MAHW5DmM9j4?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
        &lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;slides&quot;&gt;Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/slidedecks/the-augmented-api-design-reviewer/the-augmented-api-design-reviewer.pdf&quot; download=&quot;the-augmented-api-design-reviewer.pdf&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Download PDF&lt;/a&gt;
&lt;a href=&quot;/slidedecks/the-augmented-api-design-reviewer/the-augmented-api-design-reviewer.pdf&quot; target=&quot;_blank&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Open PDF&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;iframe-container&quot;&gt;
    &lt;iframe class=&quot;iframe-responsive&quot; src=&quot;/slidedecks/the-augmented-api-design-reviewer/index.html&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talk" /><summary type="html">My 2020 talk, The Augmented API Design Reviewer is about (partial) API Design review automation with the OpenAPI Specification and Spectral. Abstract API Design Reviews can be a total nightmare when it comes to check API Design Guidelines conformance. Hopefully, this can be automated using the OpenAPI Specification and Spectral, a JSON/YAML linter. Using these tools, you’ll be able to focus on other more interesting tasks such as investigating if the API fullfils the identified needs. But that will only work if you know how to build and use Spectral rulesets. During this session you’ll discover the basics of Spectral and how to actually use it at scale by discovering how to design rules and rulesets, how to ensure they actually work, and also by learning the differents ways of using Spectral. Video This content is hosted on youtube.com. By showing this third party content you accept YouTube (Google)'s privacy policy. Show third party content Remember my choice (can be changed in privacy settings) Slides Download PDF Open PDF</summary></entry><entry><title type="html">Doing APIs right and doing right APIs</title><link href="https://apihandyman.io/apidays-interface-doing-apis-right-and-doing-right-apis/" rel="alternate" type="text/html" title="Doing APIs right and doing right APIs" /><published>2020-07-26T00:00:00+00:00</published><updated>2020-07-26T00:00:00+00:00</updated><id>https://apihandyman.io/api-days-interface-apis-right-right-apis</id><content type="html" xml:base="https://apihandyman.io/apidays-interface-doing-apis-right-and-doing-right-apis/">&lt;p&gt;API Days Interface being online made the experience a bit different but after 3 days, I felt almost as usual; exhausted and my brain boiling. In previous post, I shared my feelings about my first online conference. Now let’s talk about the content; Sam Newman doing a facepalm, API design, architecture, governance and my new favorite quote “Doing APIs right, doing right APIs”.
 &lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;API Days Interface 2020 Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;
INTERFACE, by API Days gathered best past 7 years speakers, entire global community, and the API landscape leaders around our most popular topics. In this 2 part series, I share my feeling attending an online conference and what I learned.
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/apidays-interface-speaking-into-the-void/&quot;&gt;1 - Speaking into the void&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;2 - Doing APIs right and doing right APIs&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;design&quot;&gt;Design&lt;/h1&gt;

&lt;p&gt;As usual, API design is a center piece of any API conference. Again we had brilliant demonstration of why the API design first approach prevail and I was pleased to see some long awaited features added to the OpenAPI Specification.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Speaker&lt;/th&gt;
      &lt;th&gt;Session&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Mike Amundsen, Author of “Designing and Building Web APIs” and “Restful API Design”&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f087fcd4b0835001b00cc52&quot; title=&quot;Building great web APIs&quot;&gt;Building great web APIs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Alianna Inzana, Senior Director, Product Management @SmartBear&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bde6f86dfb0001b75dfb9&quot; title=&quot;/Contract/{Collaboration}/DrivenDevelopment&quot;&gt;/Contract/{Collaboration}/DrivenDevelopment&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Darrell Miller, Board Member of Open API Initiative&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c0b5e86dfb0001b75dfe9&quot; title=&quot;The State of Open API Specification&quot;&gt;The State of Open API Specification&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;design-first&quot;&gt;Design first&lt;/h2&gt;

&lt;p&gt;Both &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bde6f86dfb0001b75dfb9&quot; title=&quot;/Contract/{Collaboration}/DrivenDevelopment&quot;&gt;Alianna Inzana&lt;/a&gt; and &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f087fcd4b0835001b00cc52&quot; title=&quot;Building great web APIs&quot;&gt;Mike Amundsen&lt;/a&gt; did a wonderful job describing the API design and build lifecycle and both especially said that design forst approach is key.&lt;/p&gt;

&lt;p&gt;An API must be created to solve business problems for people. In order to be sure that you build the right API and so identified the real needs, you must use a design first approach and request feedback early. Using a standardized API description like the OpenAPI specification and creating mocks will make it easier to check if you’re doing the right API. By working on a design and not an implementation, you can do modification easily and quickly.&lt;/p&gt;

&lt;h2 id=&quot;openapi-specification-improvements&quot;&gt;OpenAPI Specification improvements&lt;/h2&gt;

&lt;p&gt;At a more ground level regarding API design, &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c0b5e86dfb0001b75dfe9&quot; title=&quot;The State of Open API Specification&quot;&gt;Darrell Miller&lt;/a&gt; made my day by announcing two major improvements coming with version 3.1 of the Open Specification (among other modifications):&lt;/p&gt;

&lt;p&gt;OpenAPI 3.1 supports original and standard JSON Schema in its latest version, no more fancy OpenAPI/Swagger variation&lt;/p&gt;

&lt;p&gt;And at last we’ll be able to have a description (and all other possible properties) along with a $ref. Any property set beside the $ref will override what comes from the $ref.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/darrel-miller-overrive-ref.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Darrel Miller&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;APIs and their implementation are nothing without good architecture reliying on clearly identified and understood principles. And they are nothing without organization around them. This conference proposed some sessions that were really good at talking about this.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Speaker&lt;/th&gt;
      &lt;th&gt;Session&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Mary Poppendieck, &lt;em&gt;Author of “Lean Software Development: An Agile Toolkit&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f07f7db516de3001b3b6462&quot; title=&quot;Where do great architecture come from&quot;&gt;Where do great architecture come from&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sam Newman, &lt;em&gt;Author of “Building Microservices and Monolith to Microservices”&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bb86686dfb0001b75df89&quot; title=&quot;Microservices, APIs, and the Cost Of Change&quot;&gt;Microservices, APIs, and the Cost Of Change&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mark Cheshire, &lt;em&gt;Director Product Management for API Management @Red Hat&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c005886dfb0001b75dfdd&quot; title=&quot;When to manage Microservices as a Mesh or as APIs?&quot;&gt;When to manage Microservices as a Mesh or as APIs?&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ronnie Mitra, &lt;em&gt;Author of “Microservice Architecture”&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bef8086dfb0001b75dfc5&quot; title=&quot;The Next API Strategy: Going Borderless&quot;&gt;The Next API Strategy: Going Borderless&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Matthew Reinbold, Director, Platform Services Center of Excellence @Capital One&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f096a054b0835001b00cd16&quot; title=&quot;APIs are Arrangements of Power. Now what?&quot;&gt;APIs are Arrangements of Power. Now what?&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;principles-and-responsability&quot;&gt;Principles and responsability&lt;/h2&gt;

&lt;p&gt;Mary Poppendieck gave an amazing talk about evolution of architectures from the 60s to our time with her &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f07f7db516de3001b3b6462&quot; title=&quot;Where do great architecture come from&quot;&gt;Where do great architecture come from&lt;/a&gt; session. It’s a pity she didn’t have more time, hopefully she may come back at another API Days with a longer slot. I will not retrace here in details all what she said (if you watch only one video of this conference, this is the one).&lt;/p&gt;

&lt;p&gt;In order to build better systems we can rely on principles discovered throughout the years thanks to past failures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redundancy: instead or running one instance, run many&lt;/li&gt;
  &lt;li&gt;Fault isolation: when a component fails, others can still run&lt;/li&gt;
  &lt;li&gt;Local contral: gives each component the capability of running on its own even when it relies on others (caching results for example)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we are still discovering new principles even when relying on old ones. For example in 2000, Google solved a major crisis (indexing software stopped working due to faulty hardware). By combining redundancy and fault isolation principles, they build an architecture composed of cheap machines that tolerates such failure. In 2010 Amazon make a ground breaking evolution by getting rid of the sacrosanct central database and building a distributing database.&lt;/p&gt;

&lt;p&gt;Another interesting aspects is that some architecture principles are not only related to software or hardware. They can be related to organization and people too. And actually, with systems being more and more complex, archicture decisions are mostly people related.&lt;/p&gt;

&lt;p&gt;In 2000, Jeff Bezos, Amazon’s CEO, believed that his company (and the underlying system) couldn’t become huge without encouraing team autonomy, hence the famous memo.&lt;/p&gt;

&lt;p&gt;Teams must be autonomous but do be efficient they need to understand that they are part of a bigger system. Their mission is part of an overall mission.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/mary-poppendieck-responsibility.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Mary Poppendieck&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;microservice-vs-api&quot;&gt;Microservice vs API&lt;/h2&gt;

&lt;p&gt;Sam Newman gave a definition of a microservice and how it relates to API; this is important to remind because the “microservice” name tend to be used for things that are actually not “microservices” and also because APIs and microservices are too often confused:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A microservice is independently deployable&lt;/li&gt;
  &lt;li&gt;A microservice runs as a separate process&lt;/li&gt;
  &lt;li&gt;A microservice’s data are hidden inside its boudaries&lt;/li&gt;
  &lt;li&gt;A microservice can be called via some form of network call: for example via an API which becomes a mean to hide internal implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the microservice is not an API and reverse. The API is only an interface to a microservice.
Also, if your “microservices” share a database with others or are wars or ears running inside a Jboss server for example, those are not microservices.&lt;/p&gt;

&lt;h2 id=&quot;versioning-handling-changes&quot;&gt;&lt;del&gt;Versioning&lt;/del&gt; Handling changes&lt;/h2&gt;

&lt;p&gt;Sam Newman gave a deep dive into versioning during his &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bb86686dfb0001b75df89&quot; title=&quot;Microservices, APIs, and the Cost Of Change&quot;&gt;session&lt;/a&gt;. He especially explained that versioning is not the real problem. It’s not about version 1 and version 2. The real problem is how to handle change, how to handle backward compatibility and incompatibility. And this is even more true when doing microservices which are supposed to be independently deployable: maintaining backward compabitibility is key.&lt;/p&gt;

&lt;p&gt;He gave 4 concrete tips to do so.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have to admit that I was quite proud of myself because I realized that I always say what he told us during my API Design reviews!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;tip-1-hiding-information-is-key&quot;&gt;Tip #1: Hiding information is key.&lt;/h3&gt;

&lt;p&gt;If an upstream consumer can reach into your internal implementation then you can’t change the implementation without breaking the consumer. Consumer and provided are tightly coupled, making any change risky and even impossible.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/sam-newman-01-coupling-to-internal-implementation.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Sam Newman&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Modularization is not a new concept that appeared with APIs and microservices. In 1971, D.L. Parnas published &lt;em&gt;&lt;a href=&quot;https://kilthub.cmu.edu/articles/journal_contribution/On_the_criteria_to_be_used_in_decomposing_systems_into_modules/6607958&quot;&gt;On the criteria to be used tin decomposing systems into modules&lt;/a&gt;&lt;/em&gt;. He looked at how best to define module boundaries and found that “information hiding” worked best.&lt;/p&gt;

&lt;p&gt;Your interface (API) shows what is shared, the rest data and implementation details is your own business. That’s why it is really important do have separate models for data, objects and exposed interfaces (as also always say Mike Admundsen).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/sam-newman-02-information-hiding.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Sam Newman&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If the whole becomes to big, you can split your internal implementation in various sub modules, while keeping the shared interface unique and unmodified. But be warned that only works if the whole set of microservices/modules is handled by the same team.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/sam-newman-03-multiple-microservices.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Sam Newman&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tip-2-cost-of-change-varies&quot;&gt;Tip #2: Cost of change varies&lt;/h3&gt;

&lt;p&gt;Not all changes have the same cost. Some changes have critical consequences and some others have very limited impacts.&lt;/p&gt;

&lt;p&gt;A modification inside a team, on the set of microservices of the Accounts domain above for example has a very low cost because it only has internal impacts. If the change, like a modification of the shared interface, impacts an other team inside the company the cost is higher. If this shared interface is used by multiple teams inside the company, the cost increases again. And lastly, if this change impacts people outside the company, the cost is even more high.&lt;/p&gt;

&lt;p&gt;That means the cost of change increases with the “distance” between the provided and consumer (inside the team, inside the company, outside the company) and the number of consumers.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/sam-newman-04-cost-of-change.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Sam Newman&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The cost of change leads to different ways of taking the decision to actually do this change or not. According to Jeff Bezos, Amazon’s CEO, there are 2 types of decisions. Type 1 are irreversible decisions, it’s impossible to go back, you have to think carefully before taking them. On the opposite type 2 ones are reversible, they don’t cost 0 but you can change your mind very easily and you take no risk doing them.&lt;/p&gt;

&lt;p&gt;If the change has impacts only inside a team, that’s a reversible decision make can be taken locally inside the team. On the opposite, a decision impacting a public facing API provided to people outside the company is an irreversible decision which requires more discussion and a formal approval.Getting the balance right regarding those decisions is key to having an organization that thrives from team autonomy.&lt;/p&gt;

&lt;h3 id=&quot;tip-3-catch-accidental-breakages&quot;&gt;Tip #3: Catch accidental breakages&lt;/h3&gt;

&lt;p&gt;Even when having found the right balance for decision making, people can still do mistakes like replacing a property by another in an API response (that’s actually removing the original property). Such modification breaks the consumers.&lt;/p&gt;

&lt;p&gt;That’s why it is important to have separate models (as already said in tip #1). Doing such modification requires more work and requires explicit changes that requires you to think about it and so you’ll notice it.&lt;/p&gt;

&lt;p&gt;But you can’t rely only on people actually noticing that, you need testing. And to do tests, you need schema (JSON schema, Protobuf, OpenAPI, …) to actually check the difference between old and new version (that’s also why design first is important).&lt;/p&gt;

&lt;h3 id=&quot;tip-4-expose-multiple-endpoints&quot;&gt;Tip #4: Expose multiple endpoints&lt;/h3&gt;

&lt;p&gt;Once you know you are doing a change impacting others, avoid lock step release. Requireing coordination between consumer and provider is the enemy, the anti-thesis of independen deployability. That means, you must give to to consumer to upgrade/&lt;/p&gt;

&lt;p&gt;To do so you can expose multiple separates ervice versions. But there are a few challenges doing so:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Service discovery&lt;/li&gt;
  &lt;li&gt;Doubling infrastructure costs money&lt;/li&gt;
  &lt;li&gt;Keeping data consistency between the 2 versions can be hard&lt;/li&gt;
  &lt;li&gt;And also bug fixing can be bothering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To solve that you can expose 2 endpoints, one for each version inside the same component. That way, you shift from complex infrastructure issue to a more simpler design/implementation issue.&lt;/p&gt;

&lt;p&gt;Switching from one version to another can be as simple as using path, the accept header or a domain.&lt;/p&gt;

&lt;h2 id=&quot;microservices-indieservices&quot;&gt;&lt;del&gt;Microservices&lt;/del&gt; Indieservices&lt;/h2&gt;

&lt;p&gt;During Q&amp;amp;A, Mehdi Medjaoui asked Newman how he felt about miniservices, macroservices, nanoservices and other {whatever size}services. His reaction made me burst out laughing (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bb86686dfb0001b75df89&quot; title=&quot;Microservices, APIs, and the Cost Of Change&quot;&gt;jump at 31:45&lt;/a&gt; to see it), he looked totally desperate and did a long facepalm.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/facepalm.gif&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Jean Luc Picard doing a facepalm&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Sam Newman's reaction (reenactment by Jean-Luc Picard)&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;More seriously, he stated that the name microservice which imply “size” is actually a problem. He want to go back in time and choose another name focusing on the real important aspect: independent deployability.&lt;/p&gt;

&lt;p&gt;Medjaoui proposed indieservices and after 2 second Newman said that would be probably better than microservices.&lt;/p&gt;

&lt;h2 id=&quot;boundaries&quot;&gt;Boundaries&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bef8086dfb0001b75dfc5&quot; title=&quot;The Next API Strategy: Going Borderless&quot;&gt;The Next API Strategy: Going Borderless&lt;/a&gt; by Ronnie Mitra and &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c005886dfb0001b75dfdd&quot; title=&quot;When to manage Microservices as a Mesh or as APIs?&quot;&gt;Choosing between API gateway and service mesh&lt;/a&gt; by Mark Cheshire sessions gave really good insights about how to define and manage the internal and external boundaries or your system and they resonate with what Sam Newman said about microservices.&lt;/p&gt;

&lt;h3 id=&quot;boundaries-as-a-provider&quot;&gt;Boundaries as a provider&lt;/h3&gt;

&lt;p&gt;Mark Cheshire said that at first making the decision between API Management and Service Mesh looks quite simple.&lt;/p&gt;

&lt;p&gt;API Management is used for North-South traffic. North being outside the organization and south being inside. With API Management, there’s an API Gateway (a proxy) that sits between the provider and its consumers. Consumers can access to APIs exposed on that gateway by registering to a developer portal. Those APIs are considered as products.&lt;/p&gt;

&lt;p&gt;Service Mesh is used for East-West traffic, both sides being inside the organization. Service mesh comes as a side car proxy on microservices which handles the communication with other microservices (dealing with discovery, logs/observability, retry, …).&lt;/p&gt;

&lt;p&gt;So it looks like the decision should be made on does the communication take place inside or outide my company. But that’s not the case. A company/organization can be split in various domains (however you call them). And these domain boundaries must be treated the same way as enterprise boundary (API Management). Inside the domains you may use service meshes.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/mark-cheshire-03-domain-boundaries.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Mark Cheshire/Redhat&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;What distingues inter and intra-domain traficc is the relation between provider and consumers. Are they in the same team? How many consumers? Explicit contract needed?&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/mark-cheshire-04-inter-vs-intra-domain-traffic.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Mark Cheshire/Redhat&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;boundaries-as-a-consumer&quot;&gt;Boundaries as a consumer&lt;/h3&gt;

&lt;p&gt;Ronnie Mitra explained that a system is usually complex and difficult to understand and use. Hiding complexity of microservices, APIs, data and third party providers will ease the use of this complex system.&lt;/p&gt;

&lt;p&gt;You can’t change someone else’s API (&lt;em&gt;I add: you can’t change someone else’s API even if they are in the same company as yours, but that’s another story I’ll tell another day&lt;/em&gt;). In order to avoid building a brittle and tightly couple relation with API providers, you must proxy others APIs with a sub-domain having its own (anti-corruption) model. Reminder: That’s basically what you would do for your own API, separating data/object/API model as sais Sam Newman and Mike Amundsen.&lt;/p&gt;

&lt;p&gt;Capabilities don’t interoperate. You may need to build an layer of orchestration to weave microservices capabilities together. There’s a big centralization/decentralization trade-off decision to do here.&lt;/p&gt;

&lt;p&gt;Data is all over the place (&lt;em&gt;especially when splitted across dozens if not hundreds of microservices&lt;/em&gt;). Data need to be collected and catalgues to be useful.&lt;/p&gt;

&lt;p&gt;So many APIs and so many components lead to a system that is difficult to understand and manage. You need to build access and management components that represent this system as a monolith.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/apidays-interface-doing-apis-right-and-doing-right-apis/ronnie-mitra-05-borderless.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Copyright Ronnie Mitra&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;By building all these layers, creating new boundaries, you can create a system so simple that it looks totally borderless.&lt;/p&gt;

&lt;h2 id=&quot;organization&quot;&gt;Organization&lt;/h2&gt;

&lt;p&gt;As you may have noticed, architecture is more about principles and choosing the right organization than technology. Actually technology questions are not the main ones. In his session &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f096a054b0835001b00cd16&quot; title=&quot;APIs are Arrangements of Power. Now what?&quot;&gt;“APIs are Arrangements of Power. Now what?”&lt;/a&gt;, Matthew Reinbold gave really good insights about how organization matters for architecture and strategy.&lt;/p&gt;

&lt;p&gt;The most important one is that you can take advantage of architecture to change your organization. This strategy is called the inverse Conway maneuver in reference to Conway’s law that tells “Organizations design systems that mirrors their own communication structure”.&lt;/p&gt;

&lt;p&gt;Why doing that? Because in order to succeed, an organization must realigned itself around capabilities and the architecture must be aligned on this too. Changing organization is always hard and sometimes it may be easier to start with architecture, so the inverse Conway maneuver makes sense. And if you don’t think this works, just take a look at what Amazon became after the Jeff Bezos mandates.&lt;/p&gt;

&lt;h1 id=&quot;governance&quot;&gt;Governance&lt;/h1&gt;

&lt;p&gt;You may want to skip that section because you think governance sucks, but please read it. Indeed, for many people, governance is a dirty word, synonym of pointless, useless and terrible processes and constraints dictated by some crazy people from the top of their ivory towers. And they are right because unfortunately such totally wrong governance exists. Hopefully it’s not always the case, there are some people and company who do governance in a totally different way.&lt;/p&gt;

&lt;p&gt;Without &lt;em&gt;proper&lt;/em&gt; governance at &lt;em&gt;every level&lt;/em&gt; from design to API strategy, your company’s employees will be very sad and your company may even fail. Most sessions were tied in a way or another to governance (even the one I talked about in previous section about architecture). The following ones were explicitely talking about this topic and may give you some ideas to create or improve your existing governance.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Speaker&lt;/th&gt;
      &lt;th&gt;Session&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alan Glickenhouse, API Strategist @IBM&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09bc4b8c46ce001bff21a6&quot; title=&quot;Recommendations for API Governance and an API Economy Center of Excellence&quot;&gt;Recommendations for API Governance and an API Economy Center of Excellence&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Phil Sturgeon, Architect @Stoplight&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c32ba86dfb0001b75e013&quot; title=&quot;Automating style guides for REST, gRPC, or GraphQL&quot;&gt;Automating style guides for REST, gRPC, or GraphQL&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Erik Wilde, Co-Author of “Continuous API Management”&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0972664b0835001b00cd1c&quot; title=&quot;How to Guide your API Program and Platform&quot;&gt;How to Guide your API Program and Platform&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;John Phenix, Chief API Architect @HSBC&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09b44c8c46ce001bff21a0&quot; title=&quot;Automating API Governance&quot;&gt;Automating API Governance&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arnaud Lauret, Author of “The Design of Web APIs”&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f091a6c4b0835001b00cca7&quot; title=&quot;The Augmented API Design Reviewer&quot;&gt;The Augmented API Design Reviewer&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What follows is a summary of all ideas coming from all sessions around governance.&lt;/p&gt;

&lt;h2 id=&quot;the-right-level-of-governance&quot;&gt;The right level of governance&lt;/h2&gt;

&lt;p&gt;Governance is not doing the police. Governance is doing all that can be done to make people do the right thing the right way easily. Whatever this thing is, creating an API product, design an API, securing an API, … A very good governance is the one you don’t actually see.&lt;/p&gt;

&lt;p&gt;You don’t need to govern everything just because you need it, governance must have a reason, an objective. You must govern as little as possible, you must govern the minimum need to deliver value and manage risk (the consequences of not doing right).&lt;/p&gt;

&lt;h2 id=&quot;guidelines&quot;&gt;Guidelines&lt;/h2&gt;

&lt;p&gt;You cannot govern based of personal preferences that will change from one day to another, from one person to another. You need clearly written rules, you need guidelines. Often reduced to API Design Guidelines, you can (even must) create guidelines for every level: API Strategy, API Program, API Platform, API Product, API Design, architecture, domain definition, …&lt;/p&gt;

&lt;p&gt;The first step will be to make people share their practices, then you’ll be able to create your guidelines based on those practices.&lt;/p&gt;

&lt;p&gt;Guidelines describe (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0972664b0835001b00cd1c&quot; title=&quot;How to Guide your API Program and Platform&quot;&gt;Erik Wilde&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why they exist, which issue they are solving&lt;/li&gt;
  &lt;li&gt;What can be done to address this issue&lt;/li&gt;
  &lt;li&gt;How to implement the solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the major benefits of having guidelines is ensuring a certain level of consistency. Consistency matters because inconcistency wastes times, especially inconsistent API design which means that ALL consumers will have a lot of work to do (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c32ba86dfb0001b75e013&quot; title=&quot;Automating style guides for REST, gRPC, or GraphQL&quot;&gt;Phil Sturgeon&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;automating-api-design-reviews&quot;&gt;Automating API Design Reviews&lt;/h2&gt;

&lt;p&gt;API Design Guidelines are important, but let’s be honest: most APIs developers will not read the organization’s API manifesto. If they do they won’t remember it. If they do they won’t reread it looking for changes (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c32ba86dfb0001b75e013&quot; title=&quot;Automating style guides for REST, gRPC, or GraphQL&quot;&gt;Phil Sturgeon&lt;/a&gt;). So you must automate guidelines controls as much as possible to make their (and reviewer’s) life easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0c32ba86dfb0001b75e013&quot; title=&quot;Automating style guides for REST, gRPC, or GraphQL&quot;&gt;Phil Sturgeon&lt;/a&gt;, &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09b44c8c46ce001bff21a0&quot; title=&quot;Automating API Governance&quot;&gt;John Phenix&lt;/a&gt; and &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f091a6c4b0835001b00cca7&quot; title=&quot;The Augmented API Design Reviewer&quot;&gt;myself&lt;/a&gt; talked about API Design review automation using &lt;a href=&quot;https://github.com/stoplightio/spectral&quot;&gt;Spectral&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We all agreed on the fact that API design review cannot be completely replace by automation. An API linter will not tell you if the design is actually accurate, if this resource’s name is the good one or if the API is actually the one that is needed. But it simplifies the process massively, removing 80% or rejections before reviewers even look.&lt;/p&gt;

&lt;h2 id=&quot;scaling-and-shifting-api-design-governance&quot;&gt;Scaling and Shifting API Design Governance&lt;/h2&gt;

&lt;p&gt;The mosy visible aspect of governance is API design governance. Without it, your API landscape will be a totally inconsistent nightmare that will make loose time to all of your consumers. Therefore you must ensure that API are design properly with API design reviews.&lt;/p&gt;

&lt;p&gt;Depending on your context (locations, size, number of APIs), you may use different organization model to do so (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09b44c8c46ce001bff21a0&quot; title=&quot;Automating API Governance&quot;&gt;John Phenix&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Centralized: A core expert team do all reviews. This is a consistent but not scalable approach&lt;/li&gt;
  &lt;li&gt;Federated: API champions enforce standard locally. This is a scalable but not consistent approach.&lt;/li&gt;
  &lt;li&gt;Automated: Designs are automatically reviewed by some magic programs. This is scalable and consistent but is far from comprehensive. Indedd, such program will not tell you if the API is the right one.&lt;/li&gt;
  &lt;li&gt;Hybrid: Focus human-power on what cannot be checked automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever approach you have, you’ll notice that in the long run the discussions will shift from “Are we doing APIs right” (meaning conforming to our design guidelines) to “Are we doing the right APIs” (API product vision).&lt;/p&gt;

&lt;h1 id=&quot;doing-apis-right-and-doing-right-apis&quot;&gt;Doing APIs right and doing right APIs&lt;/h1&gt;

&lt;p&gt;It’s time to conclude. What do I retain in the end? Well, besides Sam Newman doing a facepalm, I will remember that “it’s the people that matter, the people that last, not machines, not technology. Change is not Kubernetes or Service Mesh, change is people” (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f096a054b0835001b00cd16&quot; title=&quot;APIs are Arrangements of Power. Now what?&quot;&gt;Matthew Reinbold&lt;/a&gt;). And also a clever way to say that they are two sides of doing APIs:  “Doing APIs right and doing right APIs” (&lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f0bde6f86dfb0001b75dfb9&quot; title=&quot;/Contract/{Collaboration}/DrivenDevelopment&quot;&gt;Alianna Inzana&lt;/a&gt; and &lt;a href=&quot;https://interface.virtualconference.com/#/conference/5f09b44c8c46ce001bff21a0&quot; title=&quot;Automating API Governance&quot;&gt;John Phenix&lt;/a&gt;). Based on my experience, I can tell you that helping people doing the APIs right with appropriate governance will help them making right APIs by themselves in the long run.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">API Days Interface being online made the experience a bit different but after 3 days, I felt almost as usual; exhausted and my brain boiling. In previous post, I shared my feelings about my first online conference. Now let’s talk about the content; Sam Newman doing a facepalm, API design, architecture, governance and my new favorite quote “Doing APIs right, doing right APIs”.</summary></entry><entry><title type="html">APIs You Won’t Hate Podcast - The API Handyman Cometh</title><link href="https://apihandyman.io/apis-you-wont-hate-podcast-the-api-handyman-cometh/" rel="alternate" type="text/html" title="APIs You Won’t Hate Podcast - The API Handyman Cometh" /><published>2020-07-09T00:00:00+00:00</published><updated>2020-07-09T00:00:00+00:00</updated><id>https://apihandyman.io/apis-you-wont-hate-podcast-the-api-handyman-cometh</id><content type="html" xml:base="https://apihandyman.io/apis-you-wont-hate-podcast-the-api-handyman-cometh/">&lt;p&gt;It was great to chat with Phil Sturgeon and Matt Trask on the APIs You Won’t Hate Podcast. We talked about API Design and Reviews, and we also talk about life in quarantine, as France completely shut down and how Phil made it back in time to England before the lock downs took place.
&lt;!--more--&gt;
Listen on &lt;a href=&quot;https://dev.to/apisyouwonthatepodcast/episode-6-the-api-handyman-cometh&quot;&gt;APIs You Won’t Hate&lt;/a&gt;&lt;/p&gt;</content><author><name>Phil Sturgeon, Matt Trask &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">It was great to chat with Phil Sturgeon and Matt Trask on the APIs You Won’t Hate Podcast. We talked about API Design and Reviews, and we also talk about life in quarantine, as France completely shut down and how Phil made it back in time to England before the lock downs took place.</summary></entry><entry><title type="html">I’d Rather Be Writing Podcast - API Design and Usability</title><link href="https://apihandyman.io/i-d-rather-be-writing-podcast-api-design-and-usability/" rel="alternate" type="text/html" title="I’d Rather Be Writing Podcast - API Design and Usability" /><published>2020-07-08T00:00:00+00:00</published><updated>2020-07-08T00:00:00+00:00</updated><id>https://apihandyman.io/i-d-rather-be-writing-podcast-api-design-and-usability</id><content type="html" xml:base="https://apihandyman.io/i-d-rather-be-writing-podcast-api-design-and-usability/">&lt;p&gt;I had the pleasure to chat with Tom Johnson for his I’d Rather Be Writing Podcast. We talked about my book, The Design of Web APIs, and specifically best practices for designing web APIs and focus on the roles technical writers can play.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Listen on &lt;a href=&quot;https://idratherbewriting.com/blog/api-design-usability-arnaud-lauret-podcast/&quot;&gt;idratherbewriting.com&lt;/a&gt;&lt;/p&gt;</content><author><name>Tom Johnson &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">I had the pleasure to chat with Tom Johnson for his I’d Rather Be Writing Podcast. We talked about my book, The Design of Web APIs, and specifically best practices for designing web APIs and focus on the roles technical writers can play.</summary></entry></feed>