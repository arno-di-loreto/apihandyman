<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2022-03-26T13:12:17-05:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">We always forget to select a Postman environment</title><link href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/" rel="alternate" type="text/html" title="We always forget to select a Postman environment" /><published>2022-03-26T00:00:00-05:00</published><updated>2022-03-26T00:00:00-05:00</updated><id>https://apihandyman.io/we-always-forget-to-select-a-postman-environment</id><content type="html" xml:base="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/"><![CDATA[<p>When using Postman, it’s a best practice to store API token values in environment secret variables.
Environment variables can also be used to store other variables uses in scripts.
But when opening a collection, we often forget to select an environment and spend a few seconds if not minutes or more trying to figure out what the problem is with a request. Just to realize in the end that we just forgot to select an environment.
How can this be avoided?
<!--more-->
This post is actually my first “Postman Collection Post”, I’ll share the tips and tricks I learn while using Postman.</p>

<p>The <a href="https://www.postman.com/apihandyman/workspace/postman-tips-and-tricks/documentation/143378-215afe9b-9b7d-459d-b020-361dbf1c5bf4">Don’t forget to select an environment</a> collection demonstrates how to take advantage of <code>pm.environment.name</code> in Pre-Scripts to prevent sending a request and have a clear error message when an environment is not selected. The use case that will be used to demonstrate all that is retrieving a tweet with Twitter v2 API. The aim of this collection being error handling, you’ll need to have an actual access to Twitter v2 API only if you want to make the request succeed.</p>

<p><a href="https://god.gw.postman.com/run-collection/143378-215afe9b-9b7d-459d-b020-361dbf1c5bf4?action=collection%2Ffork&amp;collection-url=entityId%3D143378-215afe9b-9b7d-459d-b020-361dbf1c5bf4%26entityType%3Dcollection%26workspaceId%3D028152cd-d2f2-497f-a533-72e3d50e1b48"><img src="/images/commons/run-in-postman.svg" alt="Run in Postman" /></a></p>

<p>(Click on the “View complete collection documentation” link in lower right corner to see documentation in full screen)</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[When using Postman, it’s a best practice to store API token values in environment secret variables. Environment variables can also be used to store other variables uses in scripts. But when opening a collection, we often forget to select an environment and spend a few seconds if not minutes or more trying to figure out what the problem is with a request. Just to realize in the end that we just forgot to select an environment. How can this be avoided?]]></summary></entry><entry><title type="html">Organize Apis Around Business Domains And Capabilities Not Tools</title><link href="https://apihandyman.io/organize-apis-around-business-domains-and-capabilities-not-tools/" rel="alternate" type="text/html" title="Organize Apis Around Business Domains And Capabilities Not Tools" /><published>2022-03-23T00:00:00-05:00</published><updated>2022-03-23T00:00:00-05:00</updated><id>https://apihandyman.io/organize-apis-around-business-domains-and-capabilities-not-tools</id><content type="html" xml:base="https://apihandyman.io/organize-apis-around-business-domains-and-capabilities-not-tools/"><![CDATA[<p>People don’t want drills, they want to make holes. APIs are interfaces exposed by pieces of software, our modern tools. But it would be a terrible idea to think of APIs just as interfaces to tools. APIs must be organized around our business domains and capabilities.
This post is the second of the “3 dimensions to consider for a successful API-First strategy” series.</p>

<!--more-->

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">3 dimensions to consider for a successful API-First strategy Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text"><p>When talking about “organizing”, “classifying” or “categorizing” APIs, the private/partner/public classification is the one that comes first very often. But that’s not the only way of labeling APIs and this classification alone is far from sufficient to understand the implications of making APIs a first-class citizen in your organization.</p>

<p>In the past years, when I was advocating APIs to business and IT people in a company engaged in an API-First journey (though it has decades-old legacy systems), I very often described APIs being organized in 3 dimensions in order to help them discover and grasp some important API-first challenges and benefits: API Layers, Business domains (or capabilities), and Ownership.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item"><a href="/organizing-apis-in-layers-system-business-and-experience-apis/">1 - Organizing APIs in System, Business, and Experience Layers</a></li>
          
        
          
          <li class="list-group-item active">2 - Organize APIs around business domains and capabilities, not tools</li>
          
        
        
          
          
          
        
          
          
          
          <li class="list-group-item disabled">3 - No successful APIs without true ownership (coming soon)</li>
          
        
      </ul>
    </div>
  </div>
</div>

<p>In this second post, we’ll talk about organizing APIs around business domains and capabilities and not tools. This perspective is critical in order to build APIs that will be easy-to-understand, easy-to-use, easy-to-evolve, and limit coupling.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/organize-apis-around-business-domains-and-capabilities-not-tools/organize-around-business-not-tools.png" class="figure-img img-fluid" /></figure>
</div>

<h1 id="wrong-organization-around-tools">Wrong organization around tools</h1>

<p>APIs are Application Programming Interfaces, they allow pieces of software to interact with each other. They allow tools to talk to each other, great! But let’s be honest, people don’t want to use your tools. And you don’t want to give them access to your tools. Both of you’ll regret it. What terrible things will irremediably happen when giving access to API “A” that brutally maps tool “A”?</p>

<p>People may have a hard time grasping what they can do with this “A” API just because its name does not mean anything. Choosing the right name for an API is far more important than you may think, especially for internal APIs. You should Read my <a href="/pink-fluffy-unicorn-api-wtf-or-3-reasons-why-choosing-a-not-meaningful-API-name-can-be-a-problem/">Pink Fluffy Unicorn API? WTF? (or 3 reasons why choosing a not meaningful API name can be a problem)</a> to discover more about this topic.</p>

<p>Even if you give a meaningful name to the API of Tool A, you’ll still have problems. Indeed, API giving direct access to tools does not usually provide a user-friendly interface. They can be quite cryptic and usually requires a high level of expertise. Most of the time they’re made to make the tool work, not let people fulfill their needs. People can also be overwhelmed by the amount of function available.</p>

<p>As people have hard times using them, they will lose time. You’ll also lose time too accompanying them, answering all of their questions. It costs a lot of time and so a lot of money to use them. If people have the choice they will probably not use them.</p>

<p>And if people use such “Tool API” that increases the coupling between systems, because they require a high level of expertise. What will happen when the vendor tool evolves? Everyone using it will be impacted, it will be a total nightmare to coordinate everyone.</p>

<p>If you read the previous post in this series, that should sound familiar: the API of a tool is usually a terrible system API and must be hidden at all costs, only used by a handful of trusted and expert consumers.</p>

<h1 id="business-domain-driven-design">Business domain driven design</h1>

<p>To fulfill what it’s supposed to do, an organization takes advantage of various capabilities offered by its business domains. For a company selling products, the apparent business domains are doing the company “stuff” such as sales or R&amp;D., and there are also less obvious support business domains like HR or accounting. Each domain will rely on people and their tools to function.</p>

<p>A business domain may expose one or more APIs, depending on the domain’s composition. As this matter is often related to microservices, know that size does not matter when deciding if you should put all capabilities of a domain inside a single or many APIs. What matters is that each API is a meaningful and independent set of operations. Meaningful because it offers capabilities that make sense together and are helpful to the “outside world” outside the domain. Independent because the API can be used without any other one. That does not forbid using an API in conjunction with others, but if that’s always necessary, there’s probably something wrong with how the domains are organized or split.</p>

<p>A business API may rely on more than one tool’s system APIs. That’s pretty convenient to hide you have two different software solutions to do the same thing. Such architecture often happens with fusion and acquisition. It can also come from organizational constraints. Two separate teams doing the same tasks but targeting different regions or customers may use various tools (because of actual regulation constraints or lack of tooling governance).</p>

<p>A business domain is under no obligation to expose all of its capabilities (and so its APIs). There are tools that people from the outside will never see; that’s absolutely fine. A business domain is also under no obligation to expose its capabilities precisely as they work inside. The less a domain shows what is happening in its black box, the better; it reduces coupling between systems.</p>

<p>A business domain may rely on other domains, but a bi-directional relationship is usually problematic, especially when it concerns a specific business process. That usually leads to less reusable APIs.</p>

<p>Taking advantage of methods such as <a href="https://en.wikipedia.org/wiki/Domain-driven_design">domain-driven design</a> or <a href="https://en.wikipedia.org/wiki/Event_storming">event storming</a> can be helpful to figure out how to divide an organization or a domain.</p>

<h1 id="whatever-the-layer-apis-belong-to-a-domain">Whatever the layer, APIs belong to a domain</h1>

<p>This second organizational perspective (the first one being the API layers), shows that system APIs and business APIs both belong to business domains. Is that also the case of experience APIs? Yes, experience APIs can belong to a consumer-oriented or provider-oriented business domain.
A backend-for-frontend (BFF) built by a mobile application team belongs to this team’s domain (a “consumer domain”). A tailor-made product experience API may belong to its underlying domain or to an entirely independent one.
So all types of APIs belong to a business domain, the only visible ones being business and experience APIs.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/organize-apis-around-business-domains-and-capabilities-not-tools/all-apis-belong-to-a-domain.png" class="figure-img img-fluid" /></figure>
</div>

<p>In the next post, we’ll talk about the third and probably most important dimension of API organization: Ownership.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[People don’t want drills, they want to make holes. APIs are interfaces exposed by pieces of software, our modern tools. But it would be a terrible idea to think of APIs just as interfaces to tools. APIs must be organized around our business domains and capabilities. This post is the second of the “3 dimensions to consider for a successful API-First strategy” series.]]></summary></entry><entry><title type="html">Organizing Apis In Layers System Business And Experience Apis</title><link href="https://apihandyman.io/organizing-apis-in-layers-system-business-and-experience-apis/" rel="alternate" type="text/html" title="Organizing Apis In Layers System Business And Experience Apis" /><published>2022-03-16T00:00:00-05:00</published><updated>2022-03-16T00:00:00-05:00</updated><id>https://apihandyman.io/organizing-apis-in-layers-system-business-and-experience-apis</id><content type="html" xml:base="https://apihandyman.io/organizing-apis-in-layers-system-business-and-experience-apis/"><![CDATA[<p>Either for historical, organizational, or technical reasons, not all APIs are at the same level, especially in organizations that do not start their API-First journey from scratch. APIs can be organized into three different layers: system APIs, business APIs, and experience APIs. This post is the first of the “3 dimensions to consider for a successful API-First strategy” series.
<!--more--></p>

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">3 dimensions to consider for a successful API-First strategy Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text"><p>When talking about “organizing”, “classifying” or “categorizing” APIs, the private/partner/public classification is the one that comes first very often. But that’s not the only way of labeling APIs and this classification alone is far from sufficient to understand the implications of making APIs a first-class citizen in your organization.</p>

<p>In the past years, when I was advocating APIs to business and IT people in a company engaged in an API-First journey (though it has decades-old legacy systems), I very often described APIs being organized in 3 dimensions in order to help them discover and grasp some important API-first challenges and benefits: API Layers, Business domains (or capabilities), and Ownership.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list">
      
      <ul class="list-group list-group-flush">
        
          
          <li class="list-group-item active">1 - Organizing APIs in System, Business, and Experience Layers</li>
          
        
          
          <li class="list-group-item"><a href="/organize-apis-around-business-domains-and-capabilities-not-tools/">2 - Organize APIs around business domains and capabilities, not tools</a></li>
          
        
        
          
          
          
        
          
          
          
          <li class="list-group-item disabled">3 - No successful APIs without true ownership (coming soon)</li>
          
        
      </ul>
    </div>
  </div>
</div>

<p>In this first post, we’ll talk about organizing APIs in layers (system, business, experience). That allows uncovering some architecture questions such as “how can I APIfy my IT mess” while instilling the importance and benefits of “don’t make me think” APIs.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/organizing-apis-in-layers-system-business-and-experience-apis/api-layers.png" class="figure-img img-fluid" /></figure>
</div>

<h1 id="system-apis-layer">System APIs Layer</h1>

<p>The lowest or most hidden API layer is the system APIs layer. System APIs aim to simplify access to software solutions, but just from a technical perspective.</p>

<p>If you have a good old mainframe system, you may build (or buy) an HTTP access layer façade to put it on top of it to facilitate access to its COBOL programs. Not-so-old Commercial-Off-The-Shelf software products (COTS) are unfortunately known to provide terrible APIs (when they provide some).  Software-As-A-Service (SAAS) solutions usually provide APIs. They usually are less terrible than COTS ones but not always, unfortunately.</p>

<p>These different APIs are system APIs. They give direct access to the heart of a system, can be tainted by the provider’s technical perspective, or often require a high level of technical or business/subject matter expertise and possibly some knowledge of the underlying implementation.</p>

<p>They MUST stay private and never be exposed publicly to the outside world. Exposing them to other teams inside the organization should be done cautiously. If that can be avoided, that would be much better.</p>

<p>They offer a terrible DX. It takes an awfully long time to integrate them into other systems for the uninitiated consumers. Their provider will also lose time in the making as they will have to accompany closely consumers, answers to their many questions.</p>

<p>Using them leads to a detrimental tight coupling because they require a high level of expertise. Such coupling must only exist with very few other systems.</p>

<p>And the icing on the cake, they are prone to cause security issues. That’s less true for SAAS but almost a certainty for COTS. More often than not they do not propose standard security like OAuth 2, instead, you may have a basic auth with static login and password. Hopefully, that could possibly be solved by adding an API gateway on top of it. But that will never solve permissions/rights issues that will inevitably arise.</p>

<p>So, system APIs are not what we could call “good” APIs nowadays but at least they exist! They at least allow other systems (you own) to be plugged into the system that exposes them. And no worries if they are complex and not totally secured, that’s the job of the next layer to simplify all that.</p>

<h1 id="business-apis-layer">Business APIs Layer</h1>

<p>Business APIs aim to propose a computerized version of an organization’s (either a company’s, a business unit’s, or a team’s) added value skills, knowledge, and expertise. (Maybe I should talk about “subject matter” APIs?)</p>

<p>Note that “business” means the organization’s business in a broad sense, hence “what they do”. For instance, an insurance company may provide APIs allowing to subscribe to a home insurance contract. On the “opposite” of the spectrum, if the organization’s job is providing databases-as-a-service because it’s a cloud provider or an infrastructure team, a business API may allow creating databases.</p>

<p>This API layer is the only mandatory one. Those business APIs can be private or public (or partner), consumed inside or outside the organization. They can exist on their own or be built on top of system APIs or other business APIs.</p>

<p>Their main purpose is to expose the “organization stuff for dummies”. They require a low level of expertise to be used. They hide as much as possible the internal mess, especially those ugly system APIs, to make them easy to use and reduce coupling with consumers.</p>

<p>They are totally secured, they especially have to fix possible holes that exist in their underlying system APIs. They can be reused in many different contexts. That’s possible because they focus on fulfilling business needs from the outside-of-the-organization-providing-them perspective.</p>

<p>In an ideal world, as they are secured and easy to use, they can be used by anyone inside or outside of the organization (see Jeff Bezos mandate).</p>

<p>Such vision has a nice side effect on costs of development and time-to-market. It takes a few minutes for anyone inside the organization to use a business API without the need of bothering the provider with thousands of questions (like with system APIs). Pushed to the extreme, a private API can be turned into a profitable (public or partner) product in a matter of minutes.</p>

<p>But even if they are supposed to be highly reusable, sometimes, these business APIs can be not enough when used alone or need to be tweaked for specific needs.</p>

<h1 id="experience-apis-layer">Experience APIs Layer</h1>

<p>Experience APIs are created to adapt and orchestrate business APIs for specific technical or business needs.</p>

<p>The most known examples of experience APIs are BFFs, not Best Friends Forever but Backend For Frontends. Usually, for performance concerns, some mobile application development teams create such BFFs to transform and aggregate API calls and avoid mobile applications triggering multiple calls. It’s not uncommon to have GraphQL experience APIs built on top of REST business APIs.</p>

<p>Sometimes such experience APIs do not do that many modifications to their underlying APIs. They just act as a buffer of change, allowing to decouple consumers from business APIs. That could be useful when a modification made on a business APIs must not be reported on consumers outside of the organization. But that possibly leads to an API anti-pattern: not eating your own API dog food.</p>

<p>Experience APIs can also be created for pure business concerns. An organization may want to create a totally new product by aggregating various business APIs. Such experience APIs are supposed to be created quickly. Someone has an idea, boom an experience API is created minutes later to test it. What may have started as a proof of concept must in the end become a new business API in case of success.</p>

<p>Experience APIs must be used with caution when they are not BFFs owned by the consumers. Indeed without care, an organization could end with as many specific variations of its business APIs as it has consumers or partners. That’s a nightmare to maintain (talk to that about software vendors who customize their products for their customers).</p>

<h1 id="the-api-layer-cake">The API layer cake</h1>

<p>So, as you can see, not all APIs are equals, they’re not on the same level. It’s critical to understand that existing raw APIs (the system ones) are not to be accessible by many, are too complex and possibly unsecured. Building business-oriented easy-to-use API façades are a good way to put lipstick on the API pig. Those business APIs will provide a cleaner API surface, allowing anyone to build anything on top of them. In last resort, for highly specific needs, you can build experience APIs providing tailor-made features. But don’t fall into the one partner/consumer equals one experience API trap.</p>

<p>Here’s a recap of the 3 API layers:</p>

<table>
  <thead>
    <tr>
      <th>API Layer</th>
      <th>Purpose</th>
      <th>Public APIs</th>
      <th>Private APIs</th>
      <th>Security</th>
      <th>Usability</th>
      <th>Reusability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>System APIs</td>
      <td>Technically simplifies access</td>
      <td>Never</td>
      <td>Reduce at all cost</td>
      <td>⭐️</td>
      <td>⭐️</td>
      <td>⭐️</td>
    </tr>
    <tr>
      <td>Business APIs</td>
      <td>You stuff for dummies</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>⭐️⭐️⭐️⭐️⭐️</td>
      <td>⭐️⭐️⭐️⭐️⭐️</td>
      <td>⭐️⭐️⭐️⭐️⭐️</td>
    </tr>
    <tr>
      <td>Experience APIs</td>
      <td>Adapt and/or aggregate</td>
      <td>No for BFFs, Yes for Products</td>
      <td>Yes</td>
      <td>⭐️⭐️⭐️⭐️⭐️</td>
      <td>⭐️ to ⭐️⭐️⭐️⭐️⭐️</td>
      <td>⭐️ to ⭐️⭐️⭐️⭐️⭐️</td>
    </tr>
  </tbody>
</table>

<p>In next post, we’ll discuss the importance of <a href="/organize-apis-around-business-domains-and-capabilities-not-tools/">organizing APIs around business domains and capabilities, not tools</a>.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Either for historical, organizational, or technical reasons, not all APIs are at the same level, especially in organizations that do not start their API-First journey from scratch. APIs can be organized into three different layers: system APIs, business APIs, and experience APIs. This post is the first of the “3 dimensions to consider for a successful API-First strategy” series.]]></summary></entry><entry><title type="html">Building a healthy and profitable relationship between tools and specifications</title><link href="https://apihandyman.io/building-a-healthy-and-profitable-relationship-between-tools-and-specifications/" rel="alternate" type="text/html" title="Building a healthy and profitable relationship between tools and specifications" /><published>2022-03-09T00:00:00-06:00</published><updated>2022-03-09T00:00:00-06:00</updated><id>https://apihandyman.io/building-a-healthy-and-profitable-relationship-between-tools-and-specifications</id><content type="html" xml:base="https://apihandyman.io/building-a-healthy-and-profitable-relationship-between-tools-and-specifications/"><![CDATA[<p>We may never have a clear answer to the question “what comes first? Tools or Specifications?”. What is sure is people create tools or specifications based on their needs. Those tools and specifications, like OpenAPI, AsyncAPI, or JSON Schema, are tightly intricated. What could be done to build a healthy and profitable relationship?
<!--more--></p>

<p><em>This post’s banner is a diagram of the six possible types of symbiotic relationship, from mutual benefit to mutual harm. Symbiosis (from Greek , symbíōsis, “living together”, from , sýn, “together”, and , bíōsis, “living”) is any type of a close and long-term biological interaction between two different biological organisms, be it mutualistic, commensalistic, or parasitic. The organisms, each termed a symbiont, must be of different species.
Source <a href="https://en.wikipedia.org/wiki/Symbiosis">Symbiosis - Wikipedia</a></em></p>

<p><em>Special thanks to <a href="https://twitter.com/bpedro/status/1501192001269776389?s=20&amp;t=w9IgXoM8o6sHIrcxXg5BJQ">Bruno Pedro for raising the “who’s first” question</a> while I was tweeting on that “no tools, no standard/specification” topic.</em></p>

<h1 id="why-do-specifications-need-tools--and-reverse">Why do specifications need tools  and reverse?</h1>

<p>Let’s take an example. I could talk about the OpenAPI Specification but to change I’ll talk about <a href="https://json-schema.org/">JSON Schema</a> (which is actually used by OpenAPI).</p>

<p>JSON Schema aims to describe formally your data formats. For instance, if I build a command-line tool that needs a configuration file. I can define its structure using a JSON Schema without writing a single line of my application code (I’m in the design first/spec first team!).</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">A JSON Schema</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy"><code class="code-block">{
    &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,
    &quot;title&quot;: &quot;SuperCliConfiguration&quot;,
    &quot;required&quot;: [
        &quot;sourceRepository&quot;
    ],
    &quot;properties&quot;: {
        &quot;sourceRepository&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;pattern&quot;: &quot;^https?://.*.git$&quot;
        }
    }
}</code></pre>
  </div>
</div>

<p>The JSON Schema specification is human-readable and as an (experienced) human being, I can see that, in the “SuperCliConfiguration” schema, the property “sourceRepository” is required and it must be a URL ending with “.git”.</p>

<p>But not all human beings can read such a format easily, especially when it describes complex schemas. And not all of them are happy reading JSON. So it is nicer to show them a rendering that is more accessible.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/building-a-healthy-and-profitable-relationship-between-tools-and-specifications/json-schema-rendering.png" class="figure-img img-fluid" /></figure>
</div>

<p>Such documentation tool taking advantage of JSON Schema is great in itself, that enhances my tool’s documentation. But it would be a pity to confine this format to documentation.</p>

<p>Such a specification document is interestingly used in code. I can use this schema with the <a href="https://ajv.js.org/">ajv</a> library to check that a configuration file is valid without writing much code.</p>

<p>And that’s not all, the schema I have created is not only interesting for me. If someone else wants to build a tool that generates my tool’s configuration file based on some data they have, they can take advantage of my JSON Schema to do so.</p>

<p>A specification without tools will never be used widely and will probably disappear quickly. Indeed, without tools taking advantage of it, what’s the point of a specification? It’s like writing a musical score and never playing it.</p>

<p>The tools specifications relationship is not a one-way one. People creating tools can avoid losing time reinventing the wheel by taking advantage of specifications.</p>

<p>And even more important, tools enhance their interoperability by using specifications. They share a kind of “standard” (not all specifications are strictly standard anointed by some standard organization) easing communication with other tools (in a broad sense, it’s not only about APIs). And, icing on the cake, those interoperable tools using specifications become part of a greater whole, enhancing their visibility, letting them participate in various ecosystems.</p>

<p>So, no specifications without tools.
And “not no tools without specifications”, but better tools with specifications.
But what can be done on both sides to ensure a healthy relationship profitable to everyone involved?</p>

<h1 id="tools-perspective">Tools perspective</h1>

<p>As someone involved in the creation of a tool that could take advantage of a specification, I would expect the following when looking for information about a specification:</p>

<ul>
  <li>A clean short description of what the specification does, what problems it is trying to solve</li>
  <li>A few use cases examples that show me how the specification could be or actually is used in the real world, accompanied by short code samples</li>
  <li>An exhaustive list of complete use cases, explaining everything in details</li>
  <li>An exhaustive, example-based, description of every element of the specification</li>
  <li>Some reference implementations</li>
  <li>Obviously the technical documentation à la RFC (for the purists)</li>
</ul>

<p>I also hope any fashion of presenting information and teaching to be used. I expect not only text but also figures, interactive diagrams, tutorials, videos, ready-to-use git repositories, … In my wildest dreams, I would love to see also training and certifications.</p>

<p>If you’ve read me or seen me talking about API DX (Developer eXperience) and documentation, what is described above should sound vaguely familiar. With modern web APIs, we’ve been used to be able to understand and use an API in no time, easily. Being provided with information and helper material/tools in many forms. That should be the same for anything, and specifications are no exception.</p>

<p>Not taking care of the IX, Implementer eXperience may seriously hinder a specification adoption. It may also lead to incomplete and even invalid implementation, hindering, even more, the specification adoption.</p>

<h1 id="specification-perspective">Specification perspective</h1>

<p>As someone who is involved in the creation of a specification or as a user of the tool taking advantage of a specification, I expect the following from implementers:</p>

<ul>
  <li>Explain from a high perspective why the spec is used in the tool</li>
  <li>Explicitly state which version(s) of the specification is (are) supported</li>
  <li>Explicitly state which portion/feature/part of the spec is supported and for what purpose</li>
  <li>Explicitly state which portion/feature/part of the spec is not supported (and possibly why)</li>
  <li>Provide a roadmap of specification support (for instance, for OpenAPI, <a href="/we-need-to-talk-openapi-3-is-4-years-old-but-swagger-2-is-still-predominant/">knowing if 3.0 and 3.1 support is planned and for when is welcomed</a>)</li>
</ul>

<p>People creating specs AND tools’ users need to know how specifications are actually used.</p>

<p>Regarding specification creators, some could object “why would I do extra work for them”. Well, “they” work hard on defining a specification for the community, so be nice to them, what they do is good for you remember? Your tool becomes part of a huge ecosystem thanks to their work (and yours actually). Not that means specifications creators should provide a standard way of stating what is used on how (and possibly a simple way of doing that).</p>

<p>And in any case, you can’t get rid of providing that information to people who will possibly use your tools. Personally, if I had to choose, I’ll use the tool that tells me the whole story because I don’t want to discover too late that  “… oops, we said we support OpenAPI 3, well, … not totally, we don’t use the security definitions … and we do not support multi-document specifications”.</p>

<h1 id="to-be-continued">To be continued</h1>

<p>This post is just the first one on that topic, the relationship between specifications and tools. There will be probably more to come as I investigate more on the concepts of implementers’ experiences and specification implementation scorecard/notation/evaluation.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[We may never have a clear answer to the question “what comes first? Tools or Specifications?”. What is sure is people create tools or specifications based on their needs. Those tools and specifications, like OpenAPI, AsyncAPI, or JSON Schema, are tightly intricated. What could be done to build a healthy and profitable relationship?]]></summary></entry><entry><title type="html">Underestimated and unexpected IT challenges of API initiatives</title><link href="https://apihandyman.io/underestimated-and-unexpected-it-challenges-of-api-initiatives/" rel="alternate" type="text/html" title="Underestimated and unexpected IT challenges of API initiatives" /><published>2022-03-02T00:00:00-06:00</published><updated>2022-03-02T00:00:00-06:00</updated><id>https://apihandyman.io/underestimated-and-unexpected-it-challenges-of-api-initiatives</id><content type="html" xml:base="https://apihandyman.io/underestimated-and-unexpected-it-challenges-of-api-initiatives/"><![CDATA[<p>As an IT member, you convinced your boss that APIs were a thing and IT department should take them seriously.
Congratulations! 
That’s good, very good.
Not only for you and your IT but for your whole organization.
All you need to do now is choose an API gateway solution and you’re done…
So you think.
The API journey, even just at IT level, is full of pitfalls. 
<!--more--></p>

<h1 id="it-is-often-where-apis-start">IT is often where APIs start</h1>

<p>There are still plenty of companies, government agencies and various organizations that didn’t yet really took the API train.
But when they finally take it, it’s often thanks to some IT initiative.
Because, hey, APIs originally are software stuff.</p>

<p>IT led API initiatives are not always perfect, but they can lead to not so minor and cool enhancements, and even initiate an organization’s total transformation, making it truly API-First.
Indeed, at worst taking APIs seriously at IT level will make your IT systems become modular, make them capable of fulfilling new needs easily, achieving faster time to market.
And at best, some IT people can start to advocate at business and exec level that APIs could be worth of interest outside of IT.
When those people hear that company could make more business with APIs, they may listen, they may be contaminated by the API frenzy.
But that’s another story.
Let’s just focus on the challenges that can happen when a company’s IT start to take APIs seriously.</p>

<h1 id="some-challenges">Some challenges</h1>

<p>I’ll share here what I’ve witnessed myself on various API journeys.
This post is not intended to be exhaustive and provide solutions to all challenges.</p>

<h2 id="api-management-setup-and-management">API management setup and management</h2>

<p>When someone says APIs, API management vendors come out of the woodwork, promising wonders.
Their API management solutions will solve all of your organization’s API problems so easily!
Since you were not born yesterday and you know that magic-software-that-solves-all-problems don’t exist, you guess it could be a little bit exaggerated.</p>

<p>But what you may not realize is that even if API management solutions can actually help you to expose securely your APIs and manage their consumers.
Also possibly gave you an idea of your existing APIs through the provided developer portal (well, once those APIs have been exposed on the gateway).
Integrating and managing this solution can be far more complicated than you thought in the beginning.</p>

<p>Who will be allowed to develop on this solution? 
(Yes, you’ll need to develop on this solution).
How to manage this solution lifecycle? (It will need to be updated regularly).
How to connect it to your identity providers?
How to connect it to CI/CD to automatically expose interface contracts?
How to ensure that only API owner can actually deploy their APIs throught CI/CD?
Will there be a single or multiple instance of API gateway(s)?
Will there be a single API management solution or multiple ones?
By who and how consumers will be managed? (defining which application can consumer which API)
How consumers will get their credentials securely (and possibly automatically)?
How will they be securely renewed regularly?</p>

<p>Nothing unsolvable, but better study well this matter to have all aspects in mind when starting the API management part of your API initiative.</p>

<h2 id="ensuring-existing-systems-capacity-and-security">Ensuring existing systems capacity and security</h2>

<p>Let’s APIfy this system!
That means, let’s add more load on this system which was quite protected in the guts of our IT. 
Very often, APIs come as an addition to the load of a system, so better triple check the current status and if the system can absorb the new load without failing.
That may also open systems that were quite protected, are you sure those new APIs don’t create security issues?</p>

<h2 id="acquiring-api-design-skills">Acquiring API design skills</h2>

<p>APIs are originally an IT matter.
We, the IT, have been connecting pieces of software together for decades.
So, obviously, we know perfectly how to do APIs, and how to do them well.</p>

<p>While it can be sometimes true, it’s more often false.
Not that people are totally bad at designing APIs, systems are actually running well.
But those APIs are technical connectors usually requiring a high level of expertise of the underlying system.</p>

<p>Most of the time there’s not much work to do, a few design reviews a bit of training and hello beautiful APIs.
People magically realize the value of working on design (and icing on the cake it can have huge impact on code and architecture quality).
But sometimes, changing mindsets on the importance of design is really hard because some developers/tech leads/architects are quite stubborn to stay polite.</p>

<p>Also a side note, I can understand that seasoned developers never having seen another company for the last 3 decades may not be aware of the importance of designing an API to make it easy to understand and easy to use, or may not know how to do it.
But I’m quite annoyed to see that university/engineering school absolutely don’t teach API design, at least in France (don’t know if this matter is covered by boot camps or in other countries).</p>

<h2 id="avoiding-dictatorial-governance">Avoiding dictatorial governance</h2>

<p>Creating consistent API is important for usability and security among many other things.
That requires defining rules and organizing a bit of controls, all that can resumed in two words: API governance.
If care is not taken, it can turn really bad in scary dictatorship, everyone fearing the API police.
It can totally screw your IT led API initiative and cripple the future business led API initiative.
If you want to learn more about this, <a href="/human-centered-api-governance/">watch my “Human Centered API Governance” session</a>.</p>

<h2 id="including-api-design-in-software-lifecycle">Including API design in software lifecycle</h2>

<p>When I was conducting API design review, I can’t count how many times I received a “can you check this design please, we push it in production tomorrow” email.
Not only IT people will probably need to acquire design skills but also modify a bit their software lifecycle to include a design phase BEFORE development.
It can be complicated when people are doing “agile” development (yeah “agile”, because it can be anything and everything).
Not because of process, but because it requires to change habits, change mindsets, just like on design.</p>

<p>Honestly it’s quite simple as long as you don’t fall into the “Big Design Up Front” (<a href="https://swiber.dev/launch-a-winning-strategy-for-api-design-first#big-design-up-front">thank to my colleague Kevin for putting a name on something I couldn’t name</a>) and ruin agile efforts.
Adding a short design phase during the sprint before development or right at the beginning work pretty well (it takes only a few hours).</p>

<h2 id="acquiring-provider-and-consumer-stances">Acquiring provider and consumer stances</h2>

<p>When starting the API journey, even just at IT level, you have to realize that to create good APIs, they must be own by someone.
And those API owners have to acquire the provider stance.
I’ve seen teams so used to say yes to everything, resulting in highly specific software only working for the team requesting the evolutions, they continue to work the same way with APIs.
That must be changed.
API owner must learn, not to say no (well sometimes it’s needed), but to take request and put them in place for the greater good of their API product and ALL of its present and future consumers.
On the other side, API consumers must learn to request new features without going crazy if it’s not exactly made as they would have imagined.</p>

<h2 id="making-business-and-it-work-together-for-a-bright-public-api-future">Making business and IT work together for a bright public API future</h2>

<p>And last but not least.
Purely IT led API initiative, without any business perspective involved will only succeed to put a technical infrastructure in place.
One way or another people having business knowledge, subject matter experts (SMEs) must be involved when defining the boundaries of APIs, what they do and how they do it.
Both perspectives, IT and business, must be taken into account to define APIs that literally represent “this domain for dummies” (and we don’t care if those “dummies” are inside or outside the organization).
Those APIs must be easy to understand and easy to use by anyone, reusable in various contexts, and easy to evolve.</p>

<p>If you don’t do that, what do you think will happen when some high level business exec realizes the importance of APIs from a business perspective and take for granted that if IT has done APIs they can be provided easily to the outside world?
They will not be happy, but more than that, a huge part of what was invested in the IT led API initiative will have been done for nothing.
The company will lose time and have a longer time to market</p>

<h1 id="oops-i-did-it-again">Oops, I did it again</h1>

<p>Even when I try to talk about API from an IT perspective, I can’t do it without talking about their business perspective and their impact on organization.
That’s because even if there are purely IT challenges, in the end, an IT led API initiative can benefit the whole organization from a busines perspective.
It’s because APIs (and IT in general) and business are totally intertwined, that’s the spirit of being API-First.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[As an IT member, you convinced your boss that APIs were a thing and IT department should take them seriously. Congratulations! That’s good, very good. Not only for you and your IT but for your whole organization. All you need to do now is choose an API gateway solution and you’re done… So you think. The API journey, even just at IT level, is full of pitfalls.]]></summary></entry><entry><title type="html">Why do we need API design guidelines?</title><link href="https://apihandyman.io/why-do-we-need-api-design-guidelines/" rel="alternate" type="text/html" title="Why do we need API design guidelines?" /><published>2022-02-23T00:00:00-06:00</published><updated>2022-02-23T00:00:00-06:00</updated><id>https://apihandyman.io/why-do-we-need-api-design-guidelines</id><content type="html" xml:base="https://apihandyman.io/why-do-we-need-api-design-guidelines/"><![CDATA[<p>Why do we need API design guidelines?
Why do I need this boring set of constraining rules telling me how to design APIs?
Why can’t I design APIs the way I like (which is the best one by the way).
What would I (and my organization) gain taking advantage of API design guidelines?
<!--more--></p>

<p><em>That’s yet another interesting question coming from the Internet, if you have such API questions don’t hesitate to ping me, I may be able to respond through a blog post.</em></p>

<h1 id="consistent-apis">Consistent APIs</h1>

<p>The first reason why you need API design guidelines is to ensure a certain level of consistency throughout your whole API surface.</p>

<p>Creating consistent APIs, APIs that share the same look and feel, is key to build a great developer experience.
Indeed, once someone has learned to use one of your APIs, using another one that looks and behaves in the same fashion as this first API is fairly easy.
Just like when you use any app on your smartphone, they share common behaviors of the operating system.
Just like when you use a mobile app, desktop app or website of a given company, those different “applications” in a broad sense share a look and feel defined by the company providing those services.
With consistency, you can speed up learning, people can guess how things work.</p>

<p>If you think that achieving consistency in API design can be done without really thinking about, without defining rules, let me tell you about a simple exercise that I do when teaching the fundamentals of (REST) API design.
I love this exercise, because it never misses to make attendees realize they definitely need API design guidelines to design consistent APIs.
I ask the attendees to choose the paths to represent a “list of users” and “a user”, the only constraint is that those paths must be valid from a REST perspective, hence being able to represent a resource in a unique way.
We often end with the following responses:</p>

<ul>
  <li><code>/users</code> and <code>/users/{userId}</code></li>
  <li><code>/users</code> and <code>/user/{id}</code> (<a href="https://apihandyman.io/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/">seriously don’t do that</a>)</li>
  <li><code>/user</code> and <code>/user/{userId}</code></li>
  <li><code>/user</code> and <code>/user-{reference}</code></li>
  <li><code>/utilisateurs</code> and <code>/utilisateurs/{referenceUtilisateur}</code> (that’s french)</li>
</ul>

<p>All those path are technically valid from a pure REST perspective, each one allows to represent the list of users and a single user.
They are technically valid but each response is different from the others, these solutions are inconsistent.
Even people working in the same organization working on the exact same use case can achieve inconsistent designs. 
That’s why you need API design guidelines.
They are many possible variations when having to design API, you need to choose a single way to “style” your APIs and write it down in your guidelines.</p>

<h1 id="less-discussions">Less discussions</h1>

<p>But what is the “right” way to represent a “list of users”, <code>/users</code> or <code>/user</code>?
I have an <a href="https://apihandyman.io/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/">opinion</a> on that topic, you may have another one.
Without having settle this debate once and for all, be prepared to face endless debates about very basic API design concerns such as this one.
Seriously, it’s not fun to waste time on such discussions.
I prefer <code>/users</code>, but if the guidelines created before I arrive in the company say it’s <code>/user</code>, so be it.
What really matter is what the API does, that’s on that topic we should “waste” our time, not choosing between turquoise and cyan.</p>

<p>But that does not mean you should never discuss guidelines.
Honestly, if the guidelines if my company says <code>/users</code> and <code>/user/{userId}</code> which is a total non-sense, leading to poor DX, we’ll have to discuss that again.
But be professional, if the existing rules are just different from what you’re used to but make sense and create consistent APIs, don’t be an asshole, accept difference.</p>

<h1 id="simpler-api-design">Simpler API design</h1>

<p>Not all designers are seasoned one, not all designers have been working in the organization for years.
Without guidelines, beginner designers will, at best loose their time chasing the response to the question <code>/users</code> or <code>/user</code>, or which HTTP status code use in “that” context, and at worst, randomly choose a way of designing APIs based on today’s humor.
<a href="https://apihandyman.io/nobody-cares-about-api-design-guidelines/">Well-structured-designer-friendly API design guidelines</a> accompanied with a touch of automation (who said <a href="https://apihandyman.io/toolbox/spectral/">Spectral</a>) will speed up their learnings of the way of designing APIs in general and in your organization.</p>

<p>And guidelines are not only of interest for beginners. 
Seasoned designers may also loose their time looking for solutions to complex problems such as “how to handle long operations” or “how to handle gateway message size limitations”, problem which could be solved once and for all and put into the guidelines.</p>

<h1 id="simpler-api-design-review">Simpler API design review</h1>

<p>API designer reviewers are masters in API design able to spot the tiniest “imperfection” in a design, a not so clear naming, a design pattern that could cripple evolutions, … (Actually API design reviewers a far more than that, but that’s another story).
But just like designers, though being “API Design Jedi Masters”, reviewers can be new to the organization, they can forget some specific point.
So having a source of truth to refer to is a great help for reviewers to comfort their reviews and also having pacified discussions with designers (because “sorry, that’s not what you’re used to, but this is how we do here”).</p>

<h1 id="the-source-of-automation">The source of automation</h1>

<p>And last but not least, I mentioned automation (API design linting) with <a href="https://apihandyman.io/toolbox/spectral/">Spectral</a>): API design guidelines will be the source of any automated control of API design.
Jumping right into writing some code controlling your design conforms to your organization’s way of designing APIs is a terrible idea.
It would be just like writing an OpenAPI document, focusing on <code>GET /this</code> and <code>POST /that</code> without being sure of what the API is supposed to do, without being able to describe in natural language the needs that the API must fulfil.
Also, even a must have in your toolbox, tools such as Spectral, will not be able to capture all that you can put in your design guidelines (such as when choose solution A over B).</p>

<h1 id="you-need-api-design-guidelines">You need API design guidelines</h1>

<p>So the question it not really “do you need API design guidelines?” but “what are you waiting for to create API design guidelines?”.
It’s never too late to do so, indeed, you can create guidelines even when you already have existing APIs.
But that’s another story.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Why do we need API design guidelines? Why do I need this boring set of constraining rules telling me how to design APIs? Why can’t I design APIs the way I like (which is the best one by the way). What would I (and my organization) gain taking advantage of API design guidelines?]]></summary></entry><entry><title type="html">Hacking Elgato Key Light With Postman</title><link href="https://apihandyman.io/hacking-elgato-key-light-with-postman/" rel="alternate" type="text/html" title="Hacking Elgato Key Light With Postman" /><published>2022-02-16T00:00:00-06:00</published><updated>2022-02-16T00:00:00-06:00</updated><id>https://apihandyman.io/hacking-elgato-key-light-with-postman</id><content type="html" xml:base="https://apihandyman.io/hacking-elgato-key-light-with-postman/"><![CDATA[<p>Want to learn how to hack a desktop app calling an API and learn some API design principles?
This post is made for you.
When I got my Elgato Key Light, my first questions were: “can I control it without using the official control center using an API?” and “is the API easy to understand and use?”.
Thanks to Postman’s proxy feature, I was able to easily hack the API.
But I was also able to review it in the making, and there’s some interesting API design learnings to share.
<!--more--></p>

<h1 id="why-this-post">Why this post?</h1>

<p>I recently joined Postman (the company) and while I have been using Postman (the tool) since its creation, I didn’t much used it the last 4 years as I was spending most of my time doing API design reviews and not much using APIs.
I forgot many things, and during that time Postman has evolved a lot!
So, I my goal is to (re)learn how to use (and hack) extensively Postman.
Instead of keeping all that for myself, I’ll share my learnings in multiple blog posts.</p>

<p>As I just received an Elgato Key Light to enhance the quality on my video calls and video recordings (that’s worth the investment!) and as this device comes with an API, I thought “Hacking my Elgato Key Light” was the perfect topic to start (re)learning how to use Postman.
Everything explained here and in future posts should be reusable “as is” with the other variants of Elgato Lights.
And if you have other connected devices coming with desktop control application, you should be able to do what I’ll show you with them.</p>

<p>And as always, this post is not only about using a tool, we’ll talk about some API design principles in the making!</p>

<h1 id="discovering-the-key-light-api">Discovering the Key Light API</h1>

<p>To control the Elgato Key Light, you can install the Elgato Control Center on you computer (Mac or Windows), there are also iOS and Android apps.
In order to hack the Elgato Key Light, I need to discover what requests can be done.
To do so, I captured the HTTP traffic going out of the Elgato Control Center desktop application using Postman as a proxy.</p>

<h2 id="setting-up-postman-proxy">Setting up Postman Proxy</h2>

<p>With Postman, you can intercept HTTP traffic in 2 different ways, the Interceptor that runs in Chrome or the Proxy that can be used to capture any HTTP traffic on your machine.
We will use the second option.</p>

<p>The whole documentation is available here: <a href="https://learning.postman.com/docs/sending-requests/capturing-request-data/capturing-http-requests/">Capturing HTTP Request</a>.
Here’s a light recap of what I did on my Mac:</p>

<h3 id="configuring-postman">Configuring Postman</h3>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/postman-proxy-configuration.jpg" class="figure-img img-fluid" /></figure>
</div>

<ul>
  <li>Start Postman</li>
  <li>Create a “Hacking Elgato Key Light” workspace</li>
  <li>Create a new collection “Capture Control Center - Raw”</li>
  <li>Start proxy with “Capture requests and cookies” in status bar (bottom right)</li>
  <li>Use “Via Proxy”</li>
  <li>Check Save Responses for Requests</li>
  <li>Click “Enable Proxy”
    <ul>
      <li>Keep 5555 port</li>
      <li>Click on enable proxy</li>
    </ul>
  </li>
  <li>Now “Proxy is enabled”</li>
  <li>Save requests to previously created collection and choose “Capture Control Center - Raw”</li>
  <li>Check “Domain name” and “Endpoints” in “Organize requests by”</li>
</ul>

<h3 id="configuring-os">Configuring OS</h3>

<p>Note: I’m using a Mac, but it shouldn’t be that different on Windows.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/macos-network-configuration.jpg" class="figure-img img-fluid" /></figure>
</div>

<ul>
  <li>Open “Network” in System Preferences</li>
  <li>Select your first network interface</li>
  <li>Click on “Advanced…”</li>
  <li>Go to “Proxies” tab</li>
  <li>Check “Web Proxy (HTTP)”</li>
  <li>Set Web Proxy Server host and port to <code>localhost</code> and <code>5555</code></li>
  <li>Remove local adresses patterns from “Bypass proxy settings for these Hosts &amp; Domains”</li>
  <li>Click “OK”</li>
  <li>And don’t forget to clik on “Apply”</li>
</ul>

<p>Now we’re ready to capture HTTP traffic.</p>

<h2 id="capturing-too-much-http-traffic">Capturing (too much) HTTP traffic</h2>

<p>Back in Postman, click on the “Start Capture” button and play with the Elgato Control Center.
You can turn on or off the light, change brightness and temperature.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/postman-capturing-http-traffic.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>Once done, click on Stop and you’ll find all requests in the “Capture Control Center - Raw”.
Requests are organized by domain and endpoint, each request being materialized as an example.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/first-capture-collapsed.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>That’s pretty neat, I have a good overview of the requests done during the capture.
But I have 2 problems:</p>

<ul>
  <li>First, there are request coming from another application (Chrome)</li>
  <li>Second, there are many request examples as you can see below</li>
</ul>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/first-capture-too-much-examples.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>While it’s not really a problem for the GET requests, it’s more annoying to understand what is done with the PUT one.</p>

<h2 id="capturing-the-right-http-traffic">Capturing (the right) HTTP traffic</h2>

<p>In order to avoid being poluted with too much requests, let’s try something more subtil.
First, let’s start a new capture but with some changes in the configuration.
To only get traffic for the Key Light, set “URL must contain” to “elgato”.
And to keep only PUT requests, add <code>PUT</code> to “Methods”.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/capture-filter-configuration.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>Then, when using the Elgato Control Center, let’s do one thing at a time.</p>

<ul>
  <li>For instance, turning the light on</li>
  <li>Then go back to Postman, and stop the capture</li>
  <li>Check the request (checkbox before Status)</li>
  <li>And click on “+ Add to collection”</li>
  <li>Create a new “Capture Control Center - Selected” collection</li>
</ul>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/capture-selected.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>Now go to the newly created collection and rename the cryptic example to “Turn on”.
You can do that for “Turn off”, “Set temperature to maximum”, …
Everything that comes to your mind.
You can also capture multiple request and select a subset to add them to the collection.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/hacking-elgato-key-light-with-postman/capture-selected-collection.jpg" class="figure-img img-fluid" /></figure>
</div>

<p>Now we have everything to play with the API, we just have to copy/paste/modify the requests.
If you run into strange 400 errors, check if you don’t have a hard coded <code>content-length</code> (yes without caps) in your request headers.
They come from the HTTP traffic capture and are not overrided by Postman (because “you” set them).</p>

<div class="alert alert-warning"><h4 class="alert-heading">Reset OS proxy configuration</h4><hr />
<p>Don’t forget to reset your OS proxy configuration once you’ve finished!</p>

</div>

<h1 id="reviewing-the-key-light-api">Reviewing the Key Light API</h1>

<p>Thanks, to the capture HTTP traffic sessions, and taken for granted that the base URL of all requests is <code>http://device-name.local:9123/elgato</code>, we know that the Elgato Key Light API proposes the following operations:</p>

<ul>
  <li><code>GET /accessory-info</code></li>
  <li><code>GET /lights/settings</code></li>
  <li><code>GET /lights</code></li>
  <li><code>PUT /lights</code></li>
</ul>

<p>We’ll focus this review on <code>GET /accessory-info</code> and <code>GET/PUT /ligths</code>.</p>

<h2 id="the-neat-get-accessory-info-entry-point">The neat GET /accessory-info entry point</h2>

<p>Looking at this operation’s response (below), we see some basic information like the product name and more technical information like some firmware information.
What caught my eye is the <code>features</code> list, it contains a <code>lights</code> value.
Based on other requests which paths start by <code>/lights</code>, I can guess that if one day I get another Elgato product with an API I can give a try to <code>GET /accessory-info</code>, look at the values in features, which could be “something” and then try a <code>GET /something</code>, <code>PUT /something</code> and possibly <code>GET /something/settings</code>.
It’s not an hypermedia API, but at least it provides some hints that help you to use other Elgato APIs.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">GET /accessory-info response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-copy"><code class="code-block">{
    &quot;productName&quot;: &quot;Elgato Key Light&quot;,
    &quot;hardwareBoardType&quot;: 53,
    &quot;firmwareBuildNumber&quot;: 200,
    &quot;firmwareVersion&quot;: &quot;1.0.3&quot;,
    &quot;serialNumber&quot;: &quot;BW21K1A01548&quot;,
    &quot;displayName&quot;: &quot;&quot;,
    &quot;features&quot;: [
        &quot;lights&quot;
    ]
}</code></pre>
  </div>
</div>

<h2 id="the-not-so-neat-get-and-put-lights">The not so neat GET and PUT /lights</h2>

<p>The following body is used by the Elgato Control Center when modifying the light status.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">/lights resource</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-copy"><code class="code-block">{
    &quot;numberOfLights&quot;: 1,
    &quot;lights&quot;: [
        {
            &quot;on&quot;: 1,
            &quot;brightness&quot;: 50,
            &quot;temperature&quot;: 143
        }
    ]
}</code></pre>
  </div>
</div>

<p>It is composed of 3 pieces of information:</p>

<ul>
  <li><code>on</code>: Indicates if the light is on (1) or off (0)</li>
  <li><code>brightness</code>: The brightness level in % from 0 to 100</li>
  <li><code>temperature</code>: A quite cryptic integer representing the light temperature which goes from 2900K (344) to 7000K (143)</li>
</ul>

<h3 id="when-non-human-readable-status-is-not-a-problem">When non human readable status is not a problem</h3>

<p>While I usually prefer human readable strings for such status (like “on” and “off”), that’s still easy to understand.
Especially in that case where there are only 2 values.
Also, it’s fairly common to have on and off represented by 0 and 1, so Elgato follows a common practice, that’s good.
And actually, when you have to use those values in code to turn the light on and off, that’s actually pretty convenient.
So when designing API, think about understandability by humans, but also usability in code.</p>

<h3 id="simple-consumer-side-business-rule">Simple consumer side business rule</h3>

<p>Strangely (or not), the application limits the bounds of brightness to [3,100].
But I was able to set brightness to 0 with Postman, it actually turns the light off (without changing the <code>on</code> value).
Maybe the API should handle that and manages those boundaries if that’s important.
Never let consumer deals with provider’s business logic, even <a href="https://apihandyman.io/choosing-between-raw-and-processed-data-when-designing-an-api/">the simplest one</a>, it will be really hard to modify it in ALL consumers and may lead to problems (hopefully I didn’t ruin my Key Light).</p>

<h3 id="silent-error">Silent error</h3>

<p>By the way I also tested to set brightness to 110%.
I didn’t got a <code>400 Bad Request</code> as I expected but a <code>200 OK</code>!
The Key Light didn’t exploded hopefully.
Actually, the brightness was not modified, it kept its previous value.
That’s a bad design, as a consumer/user, the API didn’t warned me that I sent a value that will never ever be accepted.
So better return an explicit error.</p>

<h3 id="terribly-complex-consumer-side-business-rule">Terribly complex consumer side business rule</h3>

<p>That’s the worst part of the API, at least until I get more information about light temperature.
To control the temperature, the Elgato Control Center App proposes a slide which goes from 7000K to 2900K (K is for <a href="https://en.wikipedia.org/wiki/Color_temperature">Kelvin</a>). 
But when it calls the API to change the temperature, it’s not 2900, 6000 or 7000 that is sent but 344, 167 or 143.
I check a few values to understand what was the correspondance and realized there was some voodoo-non-linear-maths-physics magic involved.
That means consumers have to know some internal business logic that MUST be provider’s business only.
That’s a terrible idea, it makes the API really hard to use (and again: what will happen if the business rule has to evolve?).
Hopefully, I’m sure I’ll find a way to make that more simple with some Postman magic.</p>

<h3 id="convenient-partial-modification">Convenient partial modification</h3>

<p>Last but not least, you’re under no obligation to send everything in the <code>PUT</code> body.
That may raise some HTTP-extremists’ eyebrows, but I find this really convenient.
That way, I can just turn light on without having to know current temperature and brightness with the following body that got rid of <code>numberOfLights</code>, <code>brightness</code> and <code>temperature</code>.
Maybe providing a PATCH would make this request more HTTP-compliant.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Turn on</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-copy"><code class="code-block">{
    &quot;lights&quot;: [
        {
            &quot;on&quot;: 1,
        }
    ]
}</code></pre>
  </div>
</div>

<h1 id="your-private-api-is-not-so-private">Your private API is not so private</h1>

<p>By the way, what I’ve done here is a good reminder about “your private API is not so private”.
So be careful about how you design it in order to, at least, block consumers doing things that could harm your providing system and, at best, to provide a simple to understand and simple to use API, even for those who are not supposed to use it.</p>

<h1 id="to-be-continued">To be continued</h1>

<p>As you can see “hacking” a desktop application that sends (unsecure and local) HTTP request is quite simple with a proxy (there are other tools than Postman to do so, for instance I remember using <a href="https://portswigger.net/burp/releases/professional-community-2022-1-1?requestededition=community">Burp Suite</a> a long time ago).
With what we’ve done we can easily create requests that will do what we want by just copy/pasting/modifying the examples resulting from the HTTP traffic capture.
I’m working on a complete collection allowing to control the Elgato Key Light and doing so I used a few tricks that I’ll show in future post(s).
In the meanwhile, you can already see what I’ve done by clicking on the button below.</p>

<p><a href="https://app.getpostman.com/run-collection/143378-88ada3a6-de53-4599-93cf-cc0a5d365cd9?action=collection%2Ffork&amp;collection-url=entityId%3D143378-88ada3a6-de53-4599-93cf-cc0a5d365cd9%26entityType%3Dcollection%26workspaceId%3Df0a96dd6-c7d8-46f7-9e62-4b95f25c4e43#?env%5BElgato%20Key%20Light%5D=W3sia2V5IjoibGlnaHRfbmFtZSIsInZhbHVlIjoiRWxnYXRvIEtleSBMaWdodCAxODc2IiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiJFbGdhdG8gS2V5IExpZ2h0IDE4NzYiLCJzZXNzaW9uSW5kZXgiOjB9LHsia2V5IjoiYmFzZV91cmwiLCJ2YWx1ZSI6Imh0dHA6Ly9lbGdhdG8ta2V5LWxpZ2h0LTE4NzYubG9jYWw6OTEyMy9lbGdhdG8iLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6Imh0dHA6Ly9lbGdhdG8ta2V5LWxpZ2h0LTE4NzYubG9jYWw6OTEyMy9lbGdhdG8iLCJzZXNzaW9uSW5kZXgiOjF9LHsia2V5IjoiYmFzZV91cmxfdGVtcGxhdGUiLCJ2YWx1ZSI6Imh0dHA6Ly9OQU1FLmxvY2FsOjkxMjMvZWxnYXRvIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiJodHRwOi8vTkFNRS5sb2NhbDo5MTIzL2VsZ2F0byIsInNlc3Npb25JbmRleCI6Mn1d"><img src="https://run.pstmn.io/button.svg" alt="Run in Postman" /></a></p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Want to learn how to hack a desktop app calling an API and learn some API design principles? This post is made for you. When I got my Elgato Key Light, my first questions were: “can I control it without using the official control center using an API?” and “is the API easy to understand and use?”. Thanks to Postman’s proxy feature, I was able to easily hack the API. But I was also able to review it in the making, and there’s some interesting API design learnings to share.]]></summary></entry><entry><title type="html">Choosing between raw and processed data when designing an API</title><link href="https://apihandyman.io/choosing-between-raw-and-processed-data-when-designing-an-api/" rel="alternate" type="text/html" title="Choosing between raw and processed data when designing an API" /><published>2022-02-09T00:00:00-06:00</published><updated>2022-02-09T00:00:00-06:00</updated><id>https://apihandyman.io/choosing-between-raw-and-processed-data-when-designing-an-api</id><content type="html" xml:base="https://apihandyman.io/choosing-between-raw-and-processed-data-when-designing-an-api/"><![CDATA[<p>Look how trees are represented in Piet Mondrian’s paintings shown in this post’s banner.
On the left they are represented in a figurative way, on the right totally abstracted.
This is what we’ll discuss in this post, not figurative vs abstract painting, but raw vs processed data in API design.
Choosing between raw or processed data, date of birth vs age for instance, has a direct impact on developer experience but also on provider’s.
<!--more--></p>

<div class="alert alert-info"><h4 class="alert-heading">About Piet Mondrian</h4><hr />
<div class="image ">
    <figure class="figure">
        <img src="/images/choosing-between-raw-and-processed-data-when-designing-an-api/mondrian-composition.jpg" class="figure-img img-fluid" /><figcaption class="figure-caption">Composition II in Red, Blue, and Yellow, 1930</figcaption></figure>
</div>
<p><a href="https://en.wikipedia.org/wiki/Piet_Mondrian">Piet Mondrian</a>, is one of the pioneers of abstract art, but started with figurative painting.
You may know him by his compositions such as the one above.
This post banner is composed of two of his paintings.
On the left side : <a href="https://commons.wikimedia.org/wiki/File:Mondriaan_-_grazende_kalfjes.jpg">Grazing cows in a polder</a> (oil on canvas, between 1901 and 1903), on the right side: <a href="https://commons.wikimedia.org/wiki/File:Blossoming_apple_tree,_by_Piet_Mondriaan.jpg">Blossoming apple tree</a> (oil on canvas, 1912).</p>

</div>

<h1 id="a-not-so-simple-question">A not so simple question</h1>

<p>Here’s a question that I often ask when doing API design training sessions.
Let’s say we are designing an API to “manage Users” (not the best crystal clear need ever, but it’s just a basic example).
To fullfil some goal/job to be done, users’ age must be returned.
As the underlying system stores users’ date of birth, what should we do?</p>

<ul>
  <li>Return date of birth only (hence raw data)</li>
  <li>Return age only (hence processed data)</li>
  <li>Return both date of birth and age (hence raw and processed data)</li>
</ul>

<div class="alert alert-warning"><h4 class="alert-heading">Be sure of the needs!</h4><hr /><p>We will not discuss that here, but in real condition, you must be sure about WHY the age is needed and HOW it will be used. Always be careful and triple check that the need that has been identified is the right one.</p>

</div>

<h1 id="raw-data-and-terrible-consumer-side-business-logic">Raw data and (terrible) consumer side business logic</h1>

<p>We could return date of birth only.
Indeed, calculating an age, the number of years between today and a date is not that complicated.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">How to NOT calculate age in JS</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn btn-secondary code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-copy"><code class="code-block">const birthDate = Date.parse(&#39;2004-04-10&#39;);
const today = Date.now();
const differenceInMs = today - birthDate;
const differenceInYears = differenceInMs / 1000 / 3600 / 24 / 365; // 17.847940055048202
const age = Math.round(differenceInYears); // 18</code></pre>
  </div>
</div>

<p>It’s not that complicated to calculate an age, but some people can still make errors, as shown in the JS code snippet above.
If “users” were citizens, such error could give the right to vote to someone who is not 18 yet (we can vote at 18 in France).
That means returning raw data may lead to consumers implementing some business logic the wrong way and so can lead to more or less terrible errors.</p>

<p>Oh, you could check that consumers actually do it well …
But, honestly don’t do that.
It may possibly work with one or two consumers close to you, but how will you manage that with dozens of consumers that are actual customers?
Spoiler: you won’t.</p>

<p>And even if by chance all consumers could calculate the “age” well, what will happen if you, as the API provider, want to change that business logic?
What if, in the beginning, the “age” was supposed to be the raw number of years as a float number and now you changed your mind and want it rounded without decimals (yes rounded because some business logic reason).
It will be complicated to tell all consumers to change that in their own code.</p>

<p>And even if consumers are willing to update their code, they may simply be unable to implement that business logic.
During some recent session, one of the attendees raised a very good point: unfortunately people die.
I never have thought of that!
If the API manages “users” (whatever it means) who can die, deriving age from the date of birth will not work.
And just in case it crossed your mind, don’t even dare to think returning date of death along date of birth.</p>

<p>So it seems better to return processed data such as an age than raw data such as a date of birth.
But avoiding consumers implementing business logic is not the only reason you would return processed data instead of raw data.</p>

<h1 id="sensitive-raw-data-processed-data-to-the-rescue">Sensitive raw data? Processed data to the rescue!</h1>

<p>Indeed, there’s another possible problem here if we return the date of birth to fulfill our “age” need.
A date of birth could be considered a sensitive piece of data in some places, it even could help identify a user.</p>

<p>Just in case you’re not aware of that: privacy matters whatever you build; and APIs are no exception.
And if you don’t care, some regulations like <a href="https://en.wikipedia.org/wiki/General_Data_Protection_Regulation">GDPR</a> will force you to care about it.</p>

<p>So in such a situation, having to deal with sensitive raw data, it could be interesting to process it and make it less sensitive.
Here, returning an age instead of the date of birth would solve the problem.
Note that if it’s so sensitive, you may also have to rethink about why you actually store it, but that’s another story.</p>

<p>So again, returning the age (processed data) instead of date of birth (raw data) seems to be a good idea.</p>

<h1 id="processed--raw-data-for-more-usages">Processed + Raw data for more usages</h1>

<p>But don’t forget that your API must be usable for various use cases.
If we set aside the possible sensitivity of date of birth, maybe it could be interesting to return both values.
Indeed, date of birth could make sense for other possible use cases.
Refrain to return just what is needed for the first identified use cases.
Always expand your vision to a broader context.
How many times I’ve seen web services and APIs dealing with totally dumb subsets of business concepts, missing data that are important in general whatever you do …
But data that were not needed for the first use case 🤦🏻‍♂️.</p>

<h1 id="raw-vs-process-data-impacts-developer-and-provider-experiences">Raw vs process data impacts developer and provider experiences</h1>

<p>Obviously, this raw vs processed data question is not only for age vs date of birth.
You can apply this reasoning for any piece of data.</p>

<p>Think carefully before returning raw data that will be processed on the consumer side.
Remember that an API is supposed to be “YOUR stuff for dummies”, do not delegate YOUR business logic to consumers.
It may make your API harder to use for consumers, they need your expertise to use it, and so that cripples developer experience.
They can do mistakes, and even if they don’t, you won’t be able to modify that consumer side business logic easily, and so that cripple your provider experience.</p>

<p>But do not do it too much either, check that how the data will be processed is actually YOUR job.
If not careful, you could end with a very specialized API working for a specific consumer.
And so this API will be hard to reuse in broader contexts by other consumers.
Again that impacts both developer and provider experience.</p>

<p>Also think about the sensitivity of the raw data you need to return.
Think about it not only fearing regulators but also for your users safety and yours, the less sensitive data, the better.
Returning processed data hiding the original raw data will avoid you many headaches, hence have a better provider experience.</p>

<p>And last but not least, it’s not because processed data is returned that you must remove the original raw data.
It could be useful for other purposes and so enhance developer experience.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Look how trees are represented in Piet Mondrian’s paintings shown in this post’s banner. On the left they are represented in a figurative way, on the right totally abstracted. This is what we’ll discuss in this post, not figurative vs abstract painting, but raw vs processed data in API design. Choosing between raw or processed data, date of birth vs age for instance, has a direct impact on developer experience but also on provider’s.]]></summary></entry><entry><title type="html">7 years being the API Handyman, the age of reason?</title><link href="https://apihandyman.io/7-years-being-the-api-handyman-the-age-of-reason/" rel="alternate" type="text/html" title="7 years being the API Handyman, the age of reason?" /><published>2022-02-02T00:00:00-06:00</published><updated>2022-02-02T00:00:00-06:00</updated><id>https://apihandyman.io/7-years-being-the-api-handyman-the-age-of-reason</id><content type="html" xml:base="https://apihandyman.io/7-years-being-the-api-handyman-the-age-of-reason/"><![CDATA[<p>This time, no “API blah blah blah”, this time, it’s personal.
February 2022 marks a major landmark, I can’t believe I launched the API Handyman blog 7 years ago!
Being 7 years old is supposed to mark the “age of reason”.
Did I reached it?
I think so, but it took me more than 7 years.
<!--more--></p>

<h1 id="failing-and-healing">Failing and healing</h1>

<p>The creation of the API Handyman blog was the starting point of a new path in my career after a few dark years.</p>

<h2 id="before-the-blog">Before the blog</h2>

<p>I started my career as a developer in 2002, then I became a software analyst (people who write specs for developers), a project manager and finally an application manager.
I followed what was quite a usual path in France at that time, but I did it without really thinking about it.
And that was a huge mistake (don’t do that at home), I realized that being a manager was definitely not for me.
But I realized it almost too late.</p>

<p>Indeed, after a few years, I was always exhausted, getting sick fairly often, not happy with most of what I had to do on my daily job.
I was actually not happy at all; and this situation had a terrible impact on my family’s life.
I didn’t realize all that consciously until that one day my body wouldn’t let me go to the office. 
Hopefully, I was in a situation where I could change that.
I actually did go to the office that one day, but to request a position change.
Hopefully my manager was also managing the architecture team and I could join it.
And so I was back to what I really liked: coding, tinkering with proof of concepts, designing systems, …
I never have been so happy for years (I was as happy when I was a developer).
I was happy but not totally confident in my experience.
I was wondering if what I’ve done in the past years was valuable if I want to work somewhere else.</p>

<h2 id="starting-a-blog">Starting a blog</h2>

<p>Before actually moving to the architecture team, I had to lead a major API project and became interested in the topic.
Thanks to my manager, I discovered the <a href="https://apievangelist.com">API Evangelist</a> (the guy who invented “APIs blah blah blah”) and also was able to attend my very first API conference in December 2014.
At the API Days Paris conference, getting out of my cave, I saw all those stars on stage sharing their knowledge.
Listening to them, I was thinking “that’s amazing stuff” but also “wait, I ran into that problem too, I solved it a bit differently”, “hey, I did that too!”…
Suddenly I realized that many of those “stars” were normal people sharing their stories.</p>

<p>All that made me realized that I actually did not lost my time but learned valuable and interesting things in the past years (sometimes by trial and errors) .
During all my career, I have been working on connecting pieces of software together.
I worked on distributed (and heterogenous) systems, file transfers, SOA (Service Oriented Architecture), IVR (Interactive Voice Response), web, mobile and what we call now (web) APIs.
I realized that sharing my stories could help others.
And as a few months earlier, I had given a hand to my wife to migrate her blog from some platform to a self hosted Wordpress, it did not take me long to think about starting my own blog to talk about APIs.</p>

<p>But why did I created the “API Handyman Blog” and not “Arnaud Lauret’s Blog”?
I was quite intimidated to publicly “speak” (actually write) about APIs, so hiding behind a nickname was convenient.
I wanted a funny name that would make people know that this blog was about APIs.
So I searched an “API <em>whatever</em>” name and came with “API Handyman” because it perfectly reflected my vision of what I do with software and APIs.</p>

<p>It took me weeks, especially to write my very first post, but at last on the 7th February 2015 the API Handyman blog was live with my very first post “<a href="/why-you-must-design-your-private-api-in-english/">Why you must design your private API in english</a>”.
The very first comment (yeah, there were comments at that time), came from the API Evangelist himself, I was totally crazy.</p>

<p>Writing about APIs hoping helping others, actually helped me more than I would have imagined.
I met amazing people, make new friends, talked at conferences, live tweeted dozens of conference sessions, wrote a book, got two wonderful jobs.
But more than that, I became API Handyman.</p>

<h1 id="becoming-the-api-handyman">Becoming the API Handyman</h1>

<p>Slowly, but surely, I became “API Handyman” (or he became me?) because the content I create and my work feed each other, but also because I finally chose to wear my API Handyman costume everyday to become a confident API expert.</p>

<h2 id="creating-content-is-hard-but-worth-the-cost">Creating content is hard but worth the cost</h2>

<p>Creating content was hard in the “beginning”, it actually took me years to become more comfortable doing it.
In the beginning writing a post could take me weeks.
I spent more than 2 years on my book The Design of Web APIs.
Creating my conference session was also hard, I remember finishing my first keynote preparation at 3pm, a few hours before presenting.
But session after session it became easier.</p>

<p>Was it worth the cost?
Totally.
All this hard work helped me getting better at explaining things, articulating ideas, and telling stories.
It also helped me to learn more about many topics.
Even when I want to talk about something I do everyday, I often realize that I need to think more about it or do researches in order to actually be able to explain it in an easy to understand way.
That definitely help me getting better at doing my daily job “helping people to understand and to create APIs”.</p>

<p>I made all this work easier by doing it only when I wanted to and by trying to keep it as fun as possible.
Working on the form, using pop-culture reference, and creating high quality visuals really helps me.</p>

<h2 id="becoming-a-confident-api-expert">Becoming a confident API expert</h2>

<p>Speaking of pop-culture reference, I created T-shirts (actually, I asked my wife to draw them) such as the “Masters of the APIverse”, “Respect my API Style Guide” or “API Titans Go!” to wear them when going at conferences, it’s my API Handyman costume (no, I don’t wear underwear over pants like Superman).
When I became an API architect for Natixis, I decided to wear them everyday, whatever I was doing, whoever I was suppose to meet.
I remember being lost in a building and encountering someone I’ve never met who told me “I think we have a meeting together”.
Those t-shirts helped me breaking the ice in some meetings.</p>

<p>They helped me in being more confident, but didn’t do all the work.
Working day after day with dozens of different teams, doing hundred of API design reviews/workshops/training while being more and more the API Handyman, I at last accepted myself as an expert (Oh, <a href="/and-what-if-im-wrong-overcoming-fears-and-doubts-while-designing-apis/">I still have the impostor syndrome, but I learned to live with it</a>).
I hope not to be an arrogant one.
I’m not here to yell at people, but listen to them and help them (if they want to be helped) in their context, not providing out of the blue inapplicable solutions, always willing to learn new things.
I’m capable to say “I don’t understand”, “I don’t know” and ask “silly” questions (there’s actually no silly questions).</p>

<h1 id="whats-next">What’s next</h1>

<p>Being the API Handyman was quite fun and exciting so far, especially, the last 4 years at Natixis which were totally amazing.
But my Natixis adventure is over because I couldn’t refuse an even more amazing offer.
I just joined Postman and will go on being the API Handyman there (you’ll be able to read more about this on Postman’s blog).</p>

<p>Since I started the API Handyman blog, I rationally analyzed and accepted 2 wonderful job offers, I became and accepted myself as an expert taking advantage of my past and willing to learn.
So, yes, professionally speaking, I think I have reached the age of reason, both as API Handyman and Arnaud Lauret.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[This time, no “API blah blah blah”, this time, it’s personal. February 2022 marks a major landmark, I can’t believe I launched the API Handyman blog 7 years ago! Being 7 years old is supposed to mark the “age of reason”. Did I reached it? I think so, but it took me more than 7 years.]]></summary></entry><entry><title type="html">What to consider when building an API sandbox</title><link href="https://apihandyman.io/what-to-consider-when-building-an-api-sandbox/" rel="alternate" type="text/html" title="What to consider when building an API sandbox" /><published>2022-01-26T00:00:00-06:00</published><updated>2022-01-26T00:00:00-06:00</updated><id>https://apihandyman.io/what-to-consider-when-building-an-api-sandbox</id><content type="html" xml:base="https://apihandyman.io/what-to-consider-when-building-an-api-sandbox/"><![CDATA[<p>Used through the “try it” feature of an API’s documentation or directly called by a consumer application, an API sandbox is a great way to let developers play with an API and learn how it works without giving them access to the actual production environment.
But what is an “API sandbox” actually?
Is it just a mock?
It can be that … or far more than that.
Let’s see what could be the features of an API sandbox.
<!--more-->
This post is a sequel to my previous post “<a href="/a-few-concerns-to-be-aware-of-when-adding-try-it-feature-to-api-documentation/">A few concerns to be aware of when adding try it feature to API documentation</a>”.</p>

<h1 id="what-is-an-api-sandbox">What is an API sandbox</h1>

<p>An API sandbox is an application or set of applications that simulates an actual API.
Quite often tied to the “try it” feature, which allows to make API calls from an API’s documentation, it could also reveal to be quite useful directly called from code created by developers who subscribed to use the API.</p>

<p>Regardless of how it is used, the main purpose of a sandbox is usually to be the playground that help people learn how the API works.
In an ideal world, consumers should be able to write code against the API sandbox and then be able to switch their API calls from the sandboxed version to the real version without any modification (besides configuration).</p>

<p>Usually, the first thought regarding a sandbox is that, if the real API provides a <code>GET /this</code> or a <code>POST /that</code>, its sandbox counterpart will propose them too, mimicking their behavior in a more or less accurate fashion.
That could make think a sandbox is “just” a basic mock, which is not always the case.</p>

<h1 id="what-are-the-features-of-an-api-sandbox">What are the features of an API sandbox</h1>

<p>If an API sandbox is supposed to mimic what the real API does, let’s see what happen when consumers interact with a real “task list” API:</p>

<ul>
  <li>Consumers calling the API to “search tasks” without an access token get an error.</li>
  <li>Obtaining an access token can be done in a machine to machine way or involving an end user authentication, depending on what they want to do.</li>
  <li>Consumers calling the API with an access token tied to wrong scopes get an error. For instance if the access token has not the scope “write access”, consumers are not allowed to “create a task”.</li>
  <li>When calling the API (with an access token), they get an accurate response which is consistent with their request, either for a success or failure. For instance, if they “search tasks”, they get a list of tasks matching their search parameters. If they “create a task”, providing a user name and a description, in return they get the input data plus a server generated id. If they forgot to provide the username, or provide a non existing user, or provide a user for which they are not allowed to create a task, they get an error telling them so.</li>
  <li>For a subsequent request, they get a response which is consistent with previous calls. Like seeing their created tasks in the response of “search tasks” or being able to retrieve the created task based on the returned id (with “read task”).</li>
  <li>Depending on consumer and/or end user profile, consumers may be allowed to do or not to do specific API calls, like reading or deleting a specific task created by other consumer for instance</li>
  <li>And finally an API call or an internal process running without consumer interaction may trigger something that impacts the consumers or the end users outside of the API. For instance, an SMS or an email could be sent to the user identified in the created task or a webhook may be called.</li>
</ul>

<p>But a sandbox shouldn’t only simulate the real API, it should also provide any “meta-feature” that will help people learn how to use it.
And last but not least, the sandbox should be easily “integrable” in the API documentation.</p>

<p>If we sum those 3 dimensions, that mean an API sandbox is supposed to propose the following features:</p>

<ul>
  <li>Expose the same interface contract as the real API</li>
  <li>Provide useful data</li>
  <li>Simulate implementation and dependencies behaviors</li>
  <li>Save and restore data</li>
  <li>Simulate high level security</li>
  <li>Simulate non API visible dependencies</li>
  <li>Be API first</li>
</ul>

<h2 id="expose-the-same-interface-contract-as-the-real-api">Expose the same interface contract as the real API</h2>

<p>Using the API, or a fake version of it in this case, really helps to learn how an API work and what you can do with it.
The most minimal API sandbox must expose the same interface contract as the original API.
It must provide all of the operations described in the interface contract.
All those operations, such as <code>GET /this</code> and <code>POST /that</code>, must respect the paths, parameters, body, data models, HTTP status codes, … described in the original interface contract.
And the contract must be respected even in case of error (which is often neglected).
Working at this level is usually made working with an API specification such as the OpenAPI Specification.</p>

<p>But “just” simulating the interface contract is usually not enough for a sandbox.</p>

<h2 id="provide-useful-data">Provide useful data</h2>

<p>It’s quite simple to simulate an interface contract based on a specification document using randomly generated and inconsistent data for each call.
But that’s not really useful to learn how the API works.
Indeed, if I “search tasks”, I would prefer to get a meaningful <code>description</code> such as <code>write a blog post</code> instead of <code>lorem ipsum</code>, or worse <code>azljkiqjnlkjpoi</code>, for each element in the list.
Also, once I got my list of tasks, I would be very happy to pick the <code>id</code> of one of them,  such as <code>123</code>, to do a <code>GET /tasks/123</code> (“read task”) and get data which is consistent with my previous call.</p>

<p>On top of that, providing useful global data sets allowing to cover various use cases is important.
In our “task list” case, it could be having tasks with all possible types and states or tasks created by various users.
The more real the data, the better the experience and so the learning.
But more important, the less risk of variations between code running against sandbox and production.</p>

<p>But, as I often say, an API is not only about data, an API proposes a service; there’s added value logic inside an API.
And just working at data level is sometimes not enough to simulate that.</p>

<h2 id="simulate-implementation-and-dependencies-behaviors">Simulate implementation and dependencies behaviors</h2>

<p>The implementation of an API holds 3 types of logic a sandbox must try to reproduce as closely to reality as possible:</p>

<ul>
  <li>Surface controls</li>
  <li>Application level security</li>
  <li>Business rules</li>
</ul>

<p>Surface controls are all the parameters/properties presence, format and value checks.
Is the mandatory <code>username</code> present? Is the task <code>type</code> value in allowed values list?
Most of the time, those controls can be directly tied to the interface contract description.
But due to limitations or lack of knowledge of the specification used (do you know that you can specify a regex pattern for a string property in OpenAPI for instance), that sometimes requires more work.</p>

<p>Application level security are those controls an implementation will do to ensure that consumer and possible end user don’t see or do  more than they should.
They are based on access token information (consumer, scopes, end user, roles) and business data.
For instance, “is this user allowed to modify this specific task?” or “what are the specific tasks this user can see?”.</p>

<p>And last but not least, the business rules.
They are the heart of the implementation: what is done to fullfil what the API is supposed to do.
These are the controls and actions made by the implementation based on business logic and data.
For instance, “Does this user for who I’m supposed to create a tasks exists?”, “I read the task for this id”, “the time of a tasks is the sum of time of all subtask” or “everything is OK, I insert a task in this table of the database”.</p>

<p>Note that an implementation can rely on dependencies.
Depending on your context you may or may not have to work on simulating what is happening in those dependencies.
If our simple “task list” API use case implementation is composed of a basic whatever-language monolithic server application and a database, no dependency problem.
But what it relies on a “user” component to check if a user exists for instance?
Do we need to simulate that component?
And how?
Do we create a single sandbox or one per component?</p>

<p>Also what if this component exposes a “user” API that can be used by the same consumers?
Should the “task list” sandbox do what is necessary to propagate data to the “user” sandbox to have a consistent <code>tasksCount</code> property while calling “read user”?</p>

<p>Whatever the complexity of the implementation algorithms and architecture, data needs to be saved in the end more often than not in order to provide a realistic and consistent behavior.</p>

<h2 id="save-protect-and-restore-data">Save, protect and restore data</h2>

<p>Being able to retrieve a previously created or modified task means that the corresponding data have been saved.
If we go on along that line, data can be modified or deleted.
And if the data can be created, modified, or deleted, it may mean in the end that the data will be, not corrupted (the implementation is supposed to prevent that), but seriously messed up.
The quite useful task list containing all types and statuses combinations could not be there anymore for instance.
So maybe some data should be protected against modification and deletion, but that could possibly make the API less realistic.
Another option could be to provide a way to restore the sandbox into an initial clean state when needed.</p>

<p>If data can be modified, in a broad sense, how long should it be kept?
Forever or only for a given amount of time?
Maybe data should be restored automatically to its initial state at some point.</p>

<p>Also, allowing to modify sandbox data for whatever reason should be done not forgetting that, at a given moment, various consumers may work with the sandbox independently.
They should be able to do that without being bothered by what others do (and reverse).
Being able to actually separate who is doing what could be interesting in order to prevent problems, and working on security could help on that topic (among other things).</p>

<h2 id="simulate-high-level-security">Simulate high level security</h2>

<p>What I call “high level security” concerns what is usually handled by an API gateway and an identity provider.
That means deciding which consumer can access which API (even which operation inside an API), obtaining an access token to make API calls with or without end user authentication, and control those access tokens.
For instance, a consumer may be allowed to “read task” but not to “modify task”.
Note that, it does not mean that this consumer may read all tasks, it will be up to the implementation to check if a specific consumer is allowed to read a specific task (see Simulate implementation and dependencies behaviors above).</p>

<p>Simulating the implementation is already quite a burden, so why bother adding such complexity to a sandbox?</p>

<p>Even when your API uses standard security, such as Oauth 2 or OpenId connect, don’t take for granted that everyone knows all possible “give me an API access token” dances.
There always will be beginners who never have used them before, and even those who have encountered such way of securing APIs may need a refresh.
So, having an API sandbox allowing to to test how to get an access token is welcomed.</p>

<p>Also, in order to test various use cases, consumers may need an access token attached to specific scopes and possibly specific end user.
Being able to get ready to use or taylor made access token would be of great help.</p>

<p>And finally, just being able to differentiate which consumer makes an API call to the sandbox may help regarding the partitioning of saved/restored data.</p>

<h2 id="simulate-non-api-visible-dependencies">Simulate non API visible dependencies</h2>

<p>Depending on the kind of service provided, consumers may interact with the system exposing it in other ways than calling the API.
For instance, what if the user identified in a task is notified by an email or an SMS upon its creation?
What if, when task is closed (however it is done), the consumer which has created it is notified through a webhook call?
Providing to consumers a kind of administration console logging what should happen outside of the API would help to show all that.</p>

<p>All those features being implemented would make a terrific sandbox, but it’s not over yet, there’s one last feature to think about.</p>

<h2 id="be-api-first">Be API First</h2>

<p>Some of the previous features imply the consumers interact with the sandbox for doing other things than what the original API and surrounding elements are supposed to do:</p>

<ul>
  <li>Knowing which are the available use cases (useful data)</li>
  <li>Getting a ready to use access token, which may require to know who are the predefined users (high level security)</li>
  <li>Knowing if something happened outside of the API (non API visible dependencies)</li>
</ul>

<p>Being API first and providing one or more APIs to deal with these “meta-functions” is a must have for such an advanced sandbox.
Such “sandbox API” could be used to build great API documentation (always in sync seamless “try it” providing everything people need, like the possible use cases for an operation).
And why not let it be “consumed by consumers” too (or at least other apps developed by their developers), if they need to reset their sandbox state they would probably be happy to do that programmatically.</p>

<h1 id="so-much-work">So much work?</h1>

<p>As you can see, providing an accurate and complete sandbox may require to care about many features.
Hopefully, you don’t always need such level of accuracy.
In a next post, we’ll see various tools and architecture patterns that could help you achieve the right level of API sandbox.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Used through the “try it” feature of an API’s documentation or directly called by a consumer application, an API sandbox is a great way to let developers play with an API and learn how it works without giving them access to the actual production environment. But what is an “API sandbox” actually? Is it just a mock? It can be that … or far more than that. Let’s see what could be the features of an API sandbox.]]></summary></entry></feed>