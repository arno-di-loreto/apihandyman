<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2020-05-16T01:19:00+00:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>{&quot;input&quot; : &quot;learn&quot;, &quot;output&quot; : &quot;share&quot;}</subtitle><entry><title type="html">API Toolbox - JQ and OpenAPI - Part 2 - Using JQ command line arguments, functions and modules</title><link href="https://apihandyman.io/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/" rel="alternate" type="text/html" title="API Toolbox - JQ and OpenAPI - Part 2 - Using JQ command line arguments, functions and modules" /><published>2020-02-03T00:00:00+00:00</published><updated>2020-02-03T00:00:00+00:00</updated><id>https://apihandyman.io/api-toolbox-jq-and-openapi-part-2</id><content type="html" xml:base="https://apihandyman.io/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/">&lt;p&gt;Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. In the previous part of this JQ and OpenAPI Series, we learned to invoke JQ and how to extract data from JSON documents using some of its many filters. Now we will discover how to build flexible and easily reusable JQ filters by creating functions and modules and also using command line arguments.&lt;!--more--&gt; We will continue working on OpenAPI files, at the end of this second part, we’ll have built a multi-criteria OpenAPI search and some reusable filters, especially one that you’ll be able to reuse anytime you’ll have to deal with JQ command line parameters.&lt;/p&gt;

&lt;h1 id=&quot;jq-and-openapi-post-series&quot;&gt;JQ and OpenAPI post series&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/&quot; target=&quot;jq&quot;&gt;JQ’s documentation&lt;/a&gt; is quite complete and there are many tutorials and Stackoverflow answers, so why bother writing this series? First reason, I regularly meet people working with APIs and/or JSON files who actually don’t know JQ exists and how it could save their life (or at least their time). Second reason, I often use it with OpenAPI specification files and I found that showing how JQ can be used on such a widely adopted and familiar JSON based format could help to learn how to use it (and also writing this post actually helped me to improve my JQ skills!).&lt;/p&gt;

&lt;p&gt;This JQ and OpenAPI series is composed of the following posts:&lt;/p&gt;

&lt;ul&gt;
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/&quot;&gt;Part 1 - Using JQ to extract data from OpenAPI files&lt;/a&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;strong&gt;Part 2 - Using JQ command line arguments, functions and modules&lt;/strong&gt;&lt;/li&gt;
    
  
  &lt;li&gt;Part 3 - Modifying OpenAPI files with JQ (coming soon)&lt;/li&gt;
  &lt;li&gt;Part 4 - Bonus: coloring JQ's raw output (coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;get-posts-content&quot;&gt;Get post’s content&lt;/h1&gt;

&lt;p&gt;All examples shown in this post are based on JQ 1.6 and OpenAPI 3. All examples can be copied using the &lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt; button and downloaded using the &lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt; one on code snippets. All source code can be retrieved from the &lt;a href=&quot;https://github.com/arno-di-loreto/jq-and-openapi/&quot; target=&quot;jq&quot;&gt;JQ and OpenAPI post series’ github repository&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;git clone https://github.com/arno-di-loreto/jq-and-openapi/
cd jq-and-openapi
git checkout part-2

&lt;/pre&gt;
  
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ git clone https://github.com/arno-di-loreto/jq-and-openapi/
[apihandyman.io]$ cd jq-and-openapi
[apihandyman.io]$ git checkout part-2&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h1 id=&quot;listing-operations-using-functions-and-modules&quot;&gt;Listing operations using functions and modules&lt;/h1&gt;

&lt;p&gt;In previous post, we built a filter that lists the operations available in an OpenAPI file. In this first section, we will just refactor the JQ code to make it more readable and reusable using functions and modules. The following listing shows what happens when using the new version of list-operations.jq on the demo OpenAPI file.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r -f list-operations.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Same result as in part 1 but list-operations.jq has changed under the hood&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r -f list-operations.jq demo-api-openapi.json
get     /accounts       List accounts
get     /accounts/{id}  Get an account
post    /beneficiaries  Register a beneficiary
get     /beneficiaries  List beneficiaries
delete  /beneficiaries/{id}     Delete a beneficiary (deprecated)
patch   /beneficiaries/{id}     Updates a beneficiary (deprecated)
get     /beneficiaries/{id}     Get a beneficiary
get     /sources        List transfer sources
get     /sources/{id}/destinations      List transfer source&amp;#39;s destinations
post    /transfers      Transfer money
get     /transfers      List money transfers
get     /transfers/{id} Get a money transfer
patch   /transfers/{id}
delete  /transfers/{id} Cancel a money transfer&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;It seems nothing has changed, it still outputs operations HTTP methods, paths and summaries, but under the hood, the JQ file used has changed as shown in the following listing.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-operations.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code&gt;include &quot;module-openapi&quot;; # Imports module-openapi.jq file

oas_operations | # Function coming from module-openapi.jq file
oas_operations_to_text  # Function coming from module-openapi.jq file&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Let’s see how it was created, we’ll discover functions and then modules.&lt;/p&gt;

&lt;h2 id=&quot;creating-functions&quot;&gt;Creating functions&lt;/h2&gt;

&lt;p&gt;As a reminder, here’ the previous version of the &lt;code&gt;list-operations.jq&lt;/code&gt; file we created in previous part. It is composed of three steps. Steps 1 and 2 build an array of operation object containing a (HTTP) method, path, summary and deprecated indicator. Step 3 aims to print this array as tab separated text.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-operations-original.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-original.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot;&gt;&lt;code&gt;# 1 - Selects paths objects
#--------------------------
# returns [{key: path, value: path value}]
.paths # Selects the paths property content
| to_entries # Transforms
             # { &quot;/resources&quot;: { &quot;get&quot;: {operation data}}} 
             # to 
             # [ { &quot;key&quot;: &quot;/resources&quot;, 
             #     &quot;value&quot;: { &quot;get&quot;: {operation data}} ]
| map(select(.key | test(&quot;^x-&quot;) | not)) # Gets rid of x-tensions
# 2 - Creates an array of operations
#-----------------------------------
# returns [{path, method, summary, deprecated}]
| map ( # Applies a transformation to each element
  .key as $path # Stores the path value (.key) 
                  # in a variable ($path) for later use
  | .value # Keeps only the path's content 
           # { &quot;get&quot;: {operation data}}
  | to_entries # Transforms 
               # { &quot;get&quot;: {operation data}}
               # to
               # [ { &quot;key&quot;: &quot;get&quot;, 
               #     &quot;value&quot;: {operation data}} ]
  | map( # Applies a transformation to each element
    select( # Keeps only elements for which the following is true
      # With IN, which returns true if the value is one of its
      # parameters, we can get rid of x- , parameters
      # description and summary properties
      .key | IN(&quot;get&quot;, &quot;put&quot;, &quot;post&quot;, &quot;delete&quot;, 
         &quot;options&quot;, &quot;head&quot;, &quot;patch&quot;, &quot;trace&quot;)
    )
    | # Creates a new JSON object
    {
      method: .key,
      path: $path, # Using the variable defined on line 4
      summary: .value.summary?,
      deprecated: .value.deprecated?
    }
  )[] # Flattens array to avoid having an array 
      # of array of {path, method, summary, deprecated}
) # Now we have an array of {path, method, summary, deprecated}
# 3 - Outputs tab separated raw text
#-----------------------------------
| map( # Applies a transformation to each element
  .method + &quot;\t&quot; + 
  .path + &quot;\t&quot; + 
  .summary + 
  (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
)
[] # Flattens array for raw output&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s focus on step 3, which is shown below, and build a function that does the same job.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;We will create a function for step 3&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-original.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot; data-start=&quot;42&quot;&gt;&lt;code&gt;# 3 - Outputs tab separated raw text
#-----------------------------------
| map( # Applies a transformation to each element
  .method + &quot;\t&quot; + 
  .path + &quot;\t&quot; + 
  .summary + 
  (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
)
[] # Flattens array for raw output&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Defining a function in JQ is quite simple: at the beginning of the file, add a &lt;code&gt;def function_name:&lt;/code&gt; put some filters and end by &lt;code&gt;;&lt;/code&gt; and you’re done. The &lt;code&gt;oas_operation_to_text&lt;/code&gt; which basically contains step 3’s filters is shown below.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Defining the oas_operation_to_text function&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-with-to-text-function.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code&gt;def oas_operations_to_text: # Defining a function that
                            # Prints operations as raw text
  map( # Applies a transformation to each element
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end
&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If defining a function in JQ is quite simple, using it is even more simple. Just call it like any regular JQ filter. The following listing shows how step 3’s code has been replaced by the new &lt;code&gt;oas_operation_to_text&lt;/code&gt; custom filter which is on top of the file.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Using the oas_operation_to_text function&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-with-to-text-function.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot; data-start=&quot;53&quot;&gt;&lt;code&gt;# 3 - Outputs tab separated raw text
#-----------------------------------
| oas_operations_to_text&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Here’s the full modified list-operations.jq file including the &lt;code&gt;oas_operation_to_text&lt;/code&gt; definition at the beginning and its calling on the last line.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-operations-with-to-text-function.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations-with-to-text-function.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot; data-line=&quot;1-10,55&quot;&gt;&lt;code&gt;def oas_operations_to_text: # Defining a function that
                            # Prints operations as raw text
  map( # Applies a transformation to each element
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end

# 1 - Selects paths objects
#--------------------------
# returns [{key: path, value: path value}]
.paths # Selects the paths property content
| to_entries # Transforms
             # { &quot;/resources&quot;: { &quot;get&quot;: {operation data}}} 
             # to 
             # [ { &quot;key&quot;: &quot;/resources&quot;, 
             #     &quot;value&quot;: { &quot;get&quot;: {operation data}} ]
| map(select(.key | test(&quot;^x-&quot;) | not)) # Gets rid of x-tensions
# 2 - Creates an array of operations
#-----------------------------------
# returns [{path, method, summary, deprecated}]
| map ( # Applies a transformation to each element
  .key as $path # Stores the path value (.key) 
                  # in a variable ($path) for later use
  | .value # Keeps only the path's content 
           # { &quot;get&quot;: {operation data}}
  | to_entries # Transforms 
               # { &quot;get&quot;: {operation data}}
               # to
               # [ { &quot;key&quot;: &quot;get&quot;, 
               #     &quot;value&quot;: {operation data}} ]
  | map( # Applies a transformation to each element
    select( # Keeps only elements for which the following is true
      # With IN, which returns true if the value is one of its
      # parameters, we can get rid of x- , parameters
      # description and summary properties
      .key | IN(&quot;get&quot;, &quot;put&quot;, &quot;post&quot;, &quot;delete&quot;, 
         &quot;options&quot;, &quot;head&quot;, &quot;patch&quot;, &quot;trace&quot;)
    )
    | # Creates a new JSON object
    {
      method: .key,
      path: $path, # Using the variable defined on line 4
      summary: .value.summary?,
      deprecated: .value.deprecated?
    }
  )[] # Flattens array to avoid having an array 
      # of array of {path, method, summary, deprecated}
) # Now we have an array of {path, method, summary, deprecated}
# 3 - Outputs tab separated raw text
#-----------------------------------
| oas_operations_to_text&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s great, using functions big JQ filters are far more readable. But what about being able to reuse these functions?&lt;/p&gt;

&lt;h2 id=&quot;creating-a-module-with-reusable-functions&quot;&gt;Creating a module with reusable functions&lt;/h2&gt;

&lt;p&gt;Creating JQ &lt;em&gt;modules&lt;/em&gt; that define reusable functions is, again, quite simple. Just put some functions in a JQ file and you’re done. The following listing shows a &lt;code&gt;module-openapi.jq&lt;/code&gt; module file defining two functions. There’s the &lt;code&gt;oas_operation_to_text&lt;/code&gt; we have just created and also an &lt;code&gt;oas_operations&lt;/code&gt; which do the same as steps 1 and 2 of the &lt;code&gt;list-operations.jq&lt;/code&gt; file (returning an array of operations). Note that there’s a light modification (line 43/44), this function returns also the &lt;code&gt;input_filename&lt;/code&gt; and the original value of each operations (for a later use) besides its HTTP method, path, summary and deprecated flag.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;module-openapi.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-openapi.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot;&gt;&lt;code&gt;# This is a reusable JQ module defining useful
# OpenAPI specification (OAS) processing functions

def oas_operations: # Defining a listoperations function
                    # returning {path, method, summary, original}
  # 1 - Selects paths objects
  #--------------------------
  # returns [{key: path, value: path value}]
  .paths # Selects the paths property content
  | to_entries # Transforms
              # { &quot;/resources&quot;: { &quot;get&quot;: {operation data}}} 
              # to 
              # [ { &quot;key&quot;: &quot;/resources&quot;, 
              #     &quot;value&quot;: { &quot;get&quot;: {operation data}} ]
  | map(select(.key | test(&quot;^x-&quot;) | not)) # Gets rid of x-tensions
  # 2 - Creates an array of operations
  #-----------------------------------
  # returns [{path, method, summary, deprecated}]
  | map ( # Applies a transformation to each element
    .key as $path # Stores the path value (.key) 
                    # in a variable ($path) for later use
    | .value # Keeps only the path's content 
            # { &quot;get&quot;: {operation data}}
    | to_entries # Transforms 
                # { &quot;get&quot;: {operation data}}
                # to
                # [ { &quot;key&quot;: &quot;get&quot;, 
                #     &quot;value&quot;: {operation data}} ]
    | map( # Applies a transformation to each element
      select( # Keeps only elements for which the following is true
        # With IN, which returns true if the value is one of its
        # parameters, we can get rid of x- , parameters
        # description and summary properties
        .key | IN(&quot;get&quot;, &quot;put&quot;, &quot;post&quot;, &quot;delete&quot;, 
          &quot;options&quot;, &quot;head&quot;, &quot;patch&quot;, &quot;trace&quot;)
      )
      | # Creates a new JSON object
      {
        method: .key,
        path: $path, # Using the variable defined on line 4
        summary: .value.summary?,
        deprecated: .value.deprecated?,
        original: .value, # Keeping original value, just in case 😉
        source: input_filename # Adding source file, also just in case 😉
      }
    )[] # Flattens array to avoid having an array 
        # of array of {path, method, summary, deprecated}
  ) # Now we have an array of {path, method, summary, deprecated}
; # oas_operations function's end

def oas_operations_to_text: # Defining a function that
                            # Prints operations as raw text
  map( # Applies a transformation to each element
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s get back to the new version of &lt;code&gt;list-operations.jq&lt;/code&gt; (shown below) to see how this module is actually used. The module is include with the &lt;code&gt;include &amp;lt;module name without extension&amp;gt;;&lt;/code&gt; line. Then any functions defined in it can be used like any other regular JQ filter as shown on line 3 and 4 where &lt;code&gt;oas_operations&lt;/code&gt; and &lt;code&gt;oas_operations_to_text&lt;/code&gt; are used.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-operations.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/list-operations.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code&gt;include &quot;module-openapi&quot;; # Imports module-openapi.jq file

oas_operations | # Function coming from module-openapi.jq file
oas_operations_to_text  # Function coming from module-openapi.jq file&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;managing-modules-locations&quot;&gt;Managing modules locations&lt;/h2&gt;

&lt;asciinema-player poster=&quot;npt:1:20&quot; title=&quot;Managing JQ modules location&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-location.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;p&gt;The following listings shows different ways of managing reusable modules location with JQ (see &lt;a href=&quot;https://stedolan.github.io/jq/manual/#Modules&quot;&gt;modules&lt;/a&gt; in the JQ’s documentation for a complete description of what can be done).
It starts by a a first command done inside the &lt;code&gt;jq-and-openapi&lt;/code&gt; folder.
It simply returns the first operation’s summary of the &lt;code&gt;demo-api-openapi.json&lt;/code&gt; file using the &lt;code&gt;oas_operations[0]&lt;/code&gt; filter composed of the &lt;code&gt;oas_operations&lt;/code&gt; function and the &lt;code&gt;[]&lt;/code&gt; array filter.
As you can see, there’s no need to create a JQ file to use a module, just use the &lt;code&gt;include&lt;/code&gt; directive in the &lt;code&gt;'&amp;lt;filter&amp;gt;'&lt;/code&gt; argument on the command line.
Then we go a level up, and obviously redoing the same exact command does not work anymore: the &lt;code&gt;module-openapi.jq&lt;/code&gt; cannot be found in the current folder as it is in the &lt;code&gt;jq-and-openapi&lt;/code&gt; one.
Hopefully, you can use the &lt;code&gt;-L &amp;lt;path list&amp;gt;&lt;/code&gt; argument to tell JQ where to look for modules.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; demo-api-openapi.json
cd ..
jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
jq -r -L jq-and-openapi &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Indicating where to find modules with -L argument&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; demo-api-openapi.json
List accounts
[apihandyman.io]$ cd ..
[apihandyman.io]$ jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
jq: error: module not found: module-openapi

jq: 1 compile error
[apihandyman.io]$ jq -r -L jq-and-openapi &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
List accounts&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;If there are modules that you use extensively, it would be interesting to put them in a &lt;code&gt;~/.jq&lt;/code&gt; folder. Therefore, no longer need for the &lt;code&gt;-L&lt;/code&gt; argument as shown below. JQ looks for the modules mentioned in &lt;code&gt;include&lt;/code&gt; directives in this folder automatically.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;mkdir ~/.jq
cp jq-and-openapi/module-openapi.jq ~/.jq
jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Using ~/.jq default folder to store modules&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ mkdir ~/.jq
[apihandyman.io]$ cp jq-and-openapi/module-openapi.jq ~/.jq
[apihandyman.io]$ jq -r &amp;#39;include &amp;quot;module-openapi&amp;quot;; oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
List accounts&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;~/.jq&lt;/code&gt; can also be a file. In that case, you don’t even need to &lt;code&gt;include&lt;/code&gt; anything, as shown below. Any function defined in this file is usable inside any of your filters. I personally do not recommend to do this because that makes your filters dependencies invisible (and can also result in a quite huge unmaintainable &lt;code&gt;.jq&lt;/code&gt; file).&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;rm -rf ~/.jq
cp jq-and-openapi/module-openapi.jq ~/.jq
jq -r &amp;#39;oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Using ~/.jq default file to store functions&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ rm -rf ~/.jq
[apihandyman.io]$ cp jq-and-openapi/module-openapi.jq ~/.jq
[apihandyman.io]$ jq -r &amp;#39;oas_operations[0].summary&amp;#39; jq-and-openapi/demo-api-openapi.json
List accounts&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h1 id=&quot;searching-operations-using-command-line-arguments&quot;&gt;Searching operations using command line arguments&lt;/h1&gt;

&lt;p&gt;Now that we have a reusable module that provides functions to list operations of an OpenAPI specification file and print them as tab separated text, let’s work on a multiple-criteria and multiple-file search.&lt;/p&gt;

&lt;h2 id=&quot;passing-an-argument-to-jq-filters&quot;&gt;Passing an argument to JQ filters&lt;/h2&gt;

&lt;p&gt;In order to make this search flexible, we’ll need to be able to accept search arguments coming from outside our filter in order to avoid having to modify it on each different search. Passing arguments to JQ is done with &lt;code&gt;--arg &amp;lt;name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt; as shown below. Inside the filter, you can access a &lt;code&gt;--arg&lt;/code&gt; with &lt;code&gt;$&amp;lt;name&amp;gt;&lt;/code&gt;. In this case &lt;code&gt;$foo&lt;/code&gt; returns &lt;code&gt;bar&lt;/code&gt;. Note also in this example the &lt;code&gt;-n&lt;/code&gt; flag which is used to tell JQ to not expect any JSON input. That’s pretty useful to make demos of some JQ’s features but also to generate JSON from scratched based on some arguments values.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -n --arg foo bar &amp;#39;{foo: $foo}&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Passing an argument with --arg (and discovering -n flag)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -n --arg foo bar &amp;#39;{foo: $foo}&amp;#39;
{
  &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;searching-operations-accessible-for-a-scope&quot;&gt;Searching operations accessible for a scope&lt;/h2&gt;

&lt;p&gt;The following listing shows which operations are accessible to a consumer when it is given the &lt;code&gt;transfer:admin&lt;/code&gt; security scope. The scope value is provided to the filter using &lt;code&gt;--arg &amp;lt;name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r --arg scope transfer:admin -f search-operations-using-scope.jq demo-api-openapi.json 

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Searching operations using a given scope&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r --arg scope transfer:admin -f search-operations-using-scope.jq demo-api-openapi.json 
post    /transfers      Transfer money
get     /transfers      List money transfers
get     /transfers/{id} Get a money transfer
delete  /transfers/{id} Cancel a money transfer&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;In an OpenAPI file, you’ll find the scopes that will grant access to an operation in its security property under a &lt;code&gt;{name}&lt;/code&gt;.
According the OpenAPI Specification, &lt;em&gt;each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object. If the security scheme is of type “oauth2” or “openIdConnect”, then the value is a list of scope names required for the execution. For other security scheme types, the array MUST be empty&lt;/em&gt;.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/jq-openapi-scopes.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;For our use case, we just need to list all values (scopes) under all &lt;code&gt;security.{name}&lt;/code&gt; of each operation and keep the operations for which the provided scope is found in this list. The following listing shows how this is achieved in the &lt;code&gt;search-operations-using-scope.jq&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First (line 4), it lists existing operations using the &lt;code&gt;oas_operations&lt;/code&gt; function (coming from &lt;code&gt;module-openapi&lt;/code&gt; included on line 1)&lt;/li&gt;
  &lt;li&gt;Then (line 5), it filters the returned operations based on their scopes by working on each of the &lt;code&gt;original&lt;/code&gt; operation’s data coming from the OpenAPI file. To do so:
    &lt;ul&gt;
      &lt;li&gt;It first checks if there’s a &lt;code&gt;security&lt;/code&gt; property (line 7)&lt;/li&gt;
      &lt;li&gt;Then creates a list of scopes (line 9 and 10)&lt;/li&gt;
      &lt;li&gt;And (line 11 to 14), if the &lt;code&gt;index&lt;/code&gt; of &lt;code&gt;$scope&lt;/code&gt; (provided through the &lt;code&gt;--arg scope &amp;lt;value&amp;gt;&lt;/code&gt;) is greater than 0 (meaning it is in the list), the operation is returned&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;And finally (line 19), it prints the remaining operations as tab separated values using the &lt;code&gt;oas_operations_to_text&lt;/code&gt; function (coming from &lt;code&gt;module-openapi&lt;/code&gt; included on line 1)&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;search-operations-using-scope.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/search-operations-using-scope.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code&gt;include &quot;module-openapi&quot;; # Looks for a module-openapi.jq file

# Expects a --arg scope value parameter
oas_operations # Comes from module-operations.jq
| map(select( # Filters on operation scopes
    # security is not always present
    if .original.security? != null then
      # Creating an array containg all scopes
      [ .original.security | 
        map(to_entries | map(.value)[])[][] ] | 
      index( # Index returns the index of a value in array
        $scope # $scope value is provided on the command line
              # --arg scope value
      ) &amp;#62;= 0 # If &amp;#60; 0, it has not been found
    else
      false # No security defined, so return false
    end
  ))
| oas_operations_to_text  # Comes from module-operations.jq&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;That’s cool, but there’s a little problem. When using the &lt;code&gt;search-operations-using-scope.jq&lt;/code&gt; without providing the scope value, it does not work: JQ complains that &lt;code&gt;$scope&lt;/code&gt; is not defined, as shown below.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r -f search-operations-using-scope.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;What happens when scope is not provided&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r -f search-operations-using-scope.jq demo-api-openapi.json
jq: error: $scope is not defined at &amp;lt;top-level&amp;gt;, line 12:
        $scope # $scope value is provided on the command line        
jq: 1 compile error&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Does that mean we can’t do a multi-criteria search because it requires to be able to provide multiple &lt;em&gt;optional&lt;/em&gt; parameters? Of course not, that problem can be solved.&lt;/p&gt;

&lt;h2 id=&quot;solving-the-command-line-argument-problem&quot;&gt;Solving the command line argument “problem”&lt;/h2&gt;

&lt;asciinema-player poster=&quot;npt:1:20&quot; title=&quot;Solving the command line argument problem&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-2/solving-argument-problem.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;p&gt;The following listing shows how to safely access a command line named argument using the &lt;code&gt;$ARGS.named&lt;/code&gt; filter. If &lt;code&gt;$name&lt;/code&gt; causes an error if no &lt;code&gt;--arg name value&lt;/code&gt; is provided on the command line, &lt;code&gt;$ARGS.named['name']&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt; without causing any.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -n --arg foo hello --arg bar world &amp;#39;{foo: $foo, bar: $bar}&amp;#39;
jq -n --arg foo hello &amp;#39;{foo: $foo, bar: $bar}&amp;#39;
jq -n --arg foo hello &amp;#39;{foo: $ARGS.named[&amp;quot;foo&amp;quot;], bar: $ARGS.named[&amp;quot;bar&amp;quot;]}&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Using $ARGS.named&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -n --arg foo hello --arg bar world &amp;#39;{foo: $foo, bar: $bar}&amp;#39;
{
  &amp;quot;foo&amp;quot;: &amp;quot;hello&amp;quot;,
  &amp;quot;bar&amp;quot;: &amp;quot;world&amp;quot;
}
[apihandyman.io]$ jq -n --arg foo hello &amp;#39;{foo: $foo, bar: $bar}&amp;#39;
jq: error: $bar is not defined at &amp;lt;top-level&amp;gt;, line 1:
{foo: $foo, bar: $bar}                 
jq: 1 compile error
[apihandyman.io]$ jq -n --arg foo hello &amp;#39;{foo: $ARGS.named[&amp;quot;foo&amp;quot;], bar: $ARGS.named[&amp;quot;bar&amp;quot;]}&amp;#39;
{
  &amp;quot;foo&amp;quot;: &amp;quot;hello&amp;quot;,
  &amp;quot;bar&amp;quot;: null
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;That’s very handy, but what if I want to set an argument to a default value if it is not provided? I just need to use the following &lt;code&gt;module-args&lt;/code&gt; module. It defines a &lt;code&gt;init_parameter(default_values)&lt;/code&gt; function returning an object containing parameters set to the value coming from &lt;code&gt;--arg &amp;lt;name&amp;gt;&lt;/code&gt; or a default value it is not provided. To do so, for each entry (key/value) of a &lt;code&gt;default_values&lt;/code&gt; object parameter, it checks if the named arguments (&lt;code&gt;$ARGS.named&lt;/code&gt;) contains the key and if so, sets the output value to the one provided on the command line. If not, it keeps the default one. By the way, that means that JQ functions can also use parameters besides their regular input. But note that you don’t need to prefix their name by &lt;code&gt;$&lt;/code&gt; to access them.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;module-args.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-args.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code&gt;# Initializes parameters based on provided named arguments (--arg).
# If an argument is not provided, its default value is used.
# default_values example:
# {
#   argument: &quot;default value&quot;,
#   anotherArgument: null,
# }
def init_parameters(default_values):
  default_values | 
  # Updates values for provided parameters
  with_entries(
    # $ARGS contains all --arg parameters
    if $ARGS.named[.key] != null then 
      .value = $ARGS.named[.key] 
    else 
      .value = .value
    end
  )
;&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The following listing shows how this function can be used. Just call the &lt;code&gt;init_parameter&lt;/code&gt; function with an object containing the default values and put its result in a variable (here &lt;code&gt;$parameter&lt;/code&gt;) for later use (&lt;code&gt;$parameter.foo&lt;/code&gt; for example). Here the default value of &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;default foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;’s is &lt;code&gt;null&lt;/code&gt;. Only &lt;code&gt;bar&lt;/code&gt; is provided, so the output contains &lt;code&gt;foo&lt;/code&gt;’s default value and &lt;code&gt;bar&lt;/code&gt; command-line-provided value.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -n --arg bar &amp;quot;bar from command line&amp;quot; &amp;#39;include &amp;quot;module-args&amp;quot;; init_parameters({foo: &amp;quot;default foo&amp;quot;, bar: null}) as $parameters| {foo: $parameters.foo, bar: $parameters.bar}&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Optional parameters with default values&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -n --arg bar &amp;quot;bar from command line&amp;quot; &amp;#39;include &amp;quot;module-args&amp;quot;; init_parameters({foo: &amp;quot;default foo&amp;quot;, bar: null}) as $parameters| {foo: $parameters.foo, bar: $parameters.bar}&amp;#39;
{
  &amp;quot;foo&amp;quot;: &amp;quot;default foo&amp;quot;,
  &amp;quot;bar&amp;quot;: &amp;quot;bar from command line&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;searching-operations-on-multiple-criteria-and-multiple-files&quot;&gt;Searching operations on multiple criteria and multiple files&lt;/h2&gt;

&lt;asciinema-player poster=&quot;npt:1:20&quot; title=&quot;Searching operations demo&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-2/search-demo.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;p&gt;Now that we know how to provide multiple optional parameters, let’s do a multi-criteria search. The following listing shows the &lt;code&gt;get&lt;/code&gt; operations on paths containing &lt;code&gt;sources&lt;/code&gt; across all available &lt;code&gt;*.json&lt;/code&gt; files. The first value on each line is the filename (limited to 20 characters).&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq --arg path_contains sources --arg method get -r -f search-operations.jq *.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Operations on path containing source with method get&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq --arg path_contains sources --arg method get -r -f search-operations.jq *.json
[demo-another-api-swa]  get     /resources
[demo-api-openapi.jso]  get     /sources        List transfer sources
[demo-api-openapi.jso]  get     /sources/{id}/destinations      List transfer source&amp;#39;s destinations&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Here’s the &lt;code&gt;search-operations.jq&lt;/code&gt; file who does that. It reuses functions we have seen before, &lt;code&gt;oas_operations&lt;/code&gt; from the &lt;code&gt;module_openapi.jq&lt;/code&gt; file and &lt;code&gt;init_parameters&lt;/code&gt; from the &lt;code&gt;module-args.jq&lt;/code&gt; file. It also uses new functions &lt;code&gt;filter_operations&lt;/code&gt;, &lt;code&gt;default_filters&lt;/code&gt;, &lt;code&gt;print_oas_operations&lt;/code&gt; and &lt;code&gt;default_print_parameters&lt;/code&gt; from &lt;code&gt;module-openapi-search.jq&lt;/code&gt;. There are 3 steps: getting operations data, filtering them and finally printing them. There’s nothing new on the first step, we already have used this function. Let’s see what is happening on the second and after that the third step.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;search-operations.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/search-operations.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code&gt;include &quot;module-openapi&quot;;
include &quot;module-args&quot;;
include &quot;module-openapi-search&quot;;

# Gets operations data
oas_operations
# Filters operations
| filter_oas_operations(init_parameters(default_filters))
# Prints operations
| print_oas_operations(init_parameters(default_print_parameters).format)&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The following listing shows the new functions used to filter operations. The &lt;code&gt;default_filters&lt;/code&gt; only returns the search filters default value to be used in conjunction with &lt;code&gt;init_parameters&lt;/code&gt; and so get cleans values from optional command line arguments. The &lt;code&gt;filter_oas_operation&lt;/code&gt; expects a &lt;code&gt;filter&lt;/code&gt; object whose structure is the same as the one returned by default filters. This operations runs a &lt;code&gt;map(select())&lt;/code&gt; on the operations list. Each filter is triggered if &lt;code&gt;filters.&amp;lt;name&amp;gt;&lt;/code&gt; is not null. There’s nothing really new regarding JQ’s filters besides line 41. The filtering on paths is done using the &lt;code&gt;contains&lt;/code&gt; filter which we hadn’t seen before.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Filtering operations (module-openapi-search.jq)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-openapi-search.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot; data-start=&quot;3&quot;&gt;&lt;code&gt;# Available filters and their default values
# To be used with init_parameters
def default_filters:
{
  deprecated: null,
  method: null,
  code: null,
  scope: null,
  path_contains: null
};

# Filters operations coming from oas_operations
# Each filter is used only if corresponding filters.&amp;#60;name&amp;#62; parameter is provided
def filter_oas_operations(filters):
  map(
    select(
    # Filters on deprecated
    (filters.deprecated == null or 
      (.deprecated | tostring) == filters.deprecated) and
    # Filters on HTTP method
    (filters.method == null or 
      .method == filters.method) and
    # Filters on HTTP status code
    (filters.code == null or 
      (.original.responses | has(filters.code))) and
    # Filters on security scope
    (filters.scope == null or
      (if .value.security? != null then
        [ .value.security | 
          map(to_entries | 
          map(.value)[])[][]] | 
        index(filters.scope) &amp;#62;= 0
      else
        false
      end)
    ) and
    # Filters on path
    (filters.path_contains == null or 
      (.path | contains(filters.path_contains))
    )
  )
);
&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The following listing shows the new functions used to print the operations. It uses the same mechanism as the filter functions regarding the command line arguments.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Printing operations (module-openapi-search.jq)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-openapi-search.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot; data-start=&quot;46&quot;&gt;&lt;code&gt;# Same as oas_operations_to_text but with source
def oas_operations_to_text_with_source: 
  map( # Applies a transformation to each element
    &quot;[&quot; + .source[0:20] + &quot;]\t&quot; +
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end

# To be used with init_parameters
def default_print_parameters:
{
  format: &quot;text_with_source&quot;
  # All values: 
  #  text_with_source, text_without_source, json_flat or null for json
};

# Prints oas_operations (filtered or not) in various format
def print_oas_operations(format):
  if format == &quot;text_with_source&quot; then
      oas_operations_to_text_with_source
  elif format == &quot;text_without_source&quot; then
      oas_operations_to_text
  elif format == &quot;json_flat&quot; then
    .[] # Flattening for multifiles, pipe result into a jq -s
  else
    .
  end
;
&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the full file:&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Filtering operations (module-openapi-search.jq)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-2/module-openapi-search.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot;&gt;&lt;code&gt;include &quot;module-openapi&quot;;

# Available filters and their default values
# To be used with init_parameters
def default_filters:
{
  deprecated: null,
  method: null,
  code: null,
  scope: null,
  path_contains: null
};

# Filters operations coming from oas_operations
# Each filter is used only if corresponding filters.&amp;#60;name&amp;#62; parameter is provided
def filter_oas_operations(filters):
  map(
    select(
    # Filters on deprecated
    (filters.deprecated == null or 
      (.deprecated | tostring) == filters.deprecated) and
    # Filters on HTTP method
    (filters.method == null or 
      .method == filters.method) and
    # Filters on HTTP status code
    (filters.code == null or 
      (.original.responses | has(filters.code))) and
    # Filters on security scope
    (filters.scope == null or
      (if .value.security? != null then
        [ .value.security | 
          map(to_entries | 
          map(.value)[])[][]] | 
        index(filters.scope) &amp;#62;= 0
      else
        false
      end)
    ) and
    # Filters on path
    (filters.path_contains == null or 
      (.path | contains(filters.path_contains))
    )
  )
);

# Same as oas_operations_to_text but with source
def oas_operations_to_text_with_source: 
  map( # Applies a transformation to each element
    &quot;[&quot; + .source[0:20] + &quot;]\t&quot; +
    .method + &quot;\t&quot; + 
    .path + &quot;\t&quot; + 
    .summary + 
    (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
  )
  [] # Flattens array for raw output
; # oas_operations_to_text function's end

# To be used with init_parameters
def default_print_parameters:
{
  format: &quot;text_with_source&quot;
  # All values: 
  #  text_with_source, text_without_source, json_flat or null for json
};

# Prints oas_operations (filtered or not) in various format
def print_oas_operations(format):
  if format == &quot;text_with_source&quot; then
      oas_operations_to_text_with_source
  elif format == &quot;text_without_source&quot; then
      oas_operations_to_text
  elif format == &quot;json_flat&quot; then
    .[] # Flattening for multifiles, pipe result into a jq -s
  else
    .
  end
;

&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;That concludes this second path of the JQ and OpenAPI series. Here’s the summary of what we have seen in this post:&lt;/p&gt;

&lt;h2 id=&quot;functions-and-modules&quot;&gt;Functions and modules&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Creating a function is done with &lt;code&gt;def name: &amp;lt;filters&amp;gt;;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;To invoke a function just use its &lt;code&gt;name&lt;/code&gt; like for any regular filter&lt;/li&gt;
  &lt;li&gt;Functions can have parameters &lt;code&gt;def name(parameter)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Inside a function a parameter can be used with &lt;code&gt;parameter&lt;/code&gt; (without $)&lt;/li&gt;
  &lt;li&gt;A module is a JQ file containing reusable functions&lt;/li&gt;
  &lt;li&gt;A module is loaded using the &lt;code&gt;include filename_without_extension&lt;/code&gt; directive&lt;/li&gt;
  &lt;li&gt;Use &lt;code&gt;-L&lt;/code&gt; command line parameter to tell JQ where to find modules&lt;/li&gt;
  &lt;li&gt;Put your favorite modules in &lt;code&gt;~/.jq&lt;/code&gt; folder so JQ can find them without using &lt;code&gt;-L&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;command-line-arguments&quot;&gt;Command line arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Passing a named argument to JQ filters is done with &lt;code&gt;--arg name value&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A named argument value can be retrieved with &lt;code&gt;$name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Using &lt;code&gt;$name&lt;/code&gt; will provoke an error if no &lt;code&gt;--arg name value&lt;/code&gt; is provided&lt;/li&gt;
  &lt;li&gt;All named arguments are available with &lt;code&gt;$ARGS.named&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$ARGS.named[name]&lt;/code&gt; returns null (wihout error) if no &lt;code&gt;--arg name value&lt;/code&gt; is provided&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-null-argument&quot;&gt;The null argument&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;-n&lt;/code&gt; (&lt;code&gt;--null&lt;/code&gt;) arguments tells JQ to not expect input JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-filters&quot;&gt;New filters&lt;/h2&gt;

&lt;table class=&quot;table table-sm&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th span=&quot;3&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;index(element)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the index of an element inside an array (-1 if not found)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#index(s),rindex(s)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;contains(element)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&quot;resources&quot; | contains(&quot;source&quot;)
&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns true the element is in input&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#contains(element)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$ARGS.named&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the command line named argument (--arg name value)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Invokingjq&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next&lt;/h1&gt;

&lt;p&gt;In next post, we’ll learn to modify OpenAPI files with JQ.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="API Toolbox" /><summary type="html">Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. In the previous part of this JQ and OpenAPI Series, we learned to invoke JQ and how to extract data from JSON documents using some of its many filters. Now we will discover how to build flexible and easily reusable JQ filters by creating functions and modules and also using command line arguments.</summary></entry><entry><title type="html">API Toolbox - JQ and OpenAPI - Part 1 - Using JQ to extract data from OpenAPI files</title><link href="https://apihandyman.io/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/" rel="alternate" type="text/html" title="API Toolbox - JQ and OpenAPI - Part 1 - Using JQ to extract data from OpenAPI files" /><published>2020-01-15T00:00:00+00:00</published><updated>2020-01-15T00:00:00+00:00</updated><id>https://apihandyman.io/api-toolbox-jq-and-openapi-part-1</id><content type="html" xml:base="https://apihandyman.io/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/">&lt;p&gt;Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. In this 4 parts post series, you’ll discover why and how I use JQ with OpenAPI Specification files. But more important, you’ll get some basic and more advanced example of how to use JQ on any JSON document to get and modify JSON data as you want. In this first part we’ll focus on what is JQ, why I use it with OpenAPI files and we’ll learn how to invoke JQ and discover some of the many JQ filters that can be used to extract data from JSON.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;This 4 parts post is the first one of a new API Toolbox category in which I’ll talk about the tools I use when doing API related stuff, why I use them and how. This post is also my first one using &lt;a href=&quot;https://asciinema.org/&quot;&gt;Asciinema&lt;/a&gt;, an awesome tool allowing to record and share terminal sessions.&lt;/p&gt;

&lt;h1 id=&quot;jq-and-openapi-post-series&quot;&gt;JQ and OpenAPI post series&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/&quot; target=&quot;jq&quot;&gt;JQ’s documentation&lt;/a&gt; is quite complete and there are many tutorials and Stackoverflow answers, so why bother writing this series? First reason, I regularly meet people working with APIs and/or JSON files who actually don’t know JQ exists and how it could save their life (or at least their time). Second reason, I often use it with OpenAPI specification files and I found that showing how JQ can be used on such a widely adopted and familiar JSON based format could help to learn how to use it (and also writing this post actually helped me to improve my JQ skills!).&lt;/p&gt;

&lt;p&gt;This JQ and OpenAPI series is composed of the following posts:&lt;/p&gt;

&lt;ul&gt;
  
    
    &lt;li&gt;&lt;strong&gt;Part 1 - Using JQ to extract data from OpenAPI files&lt;/strong&gt;&lt;/li&gt;
    
  
    
    &lt;li&gt;&lt;a class=&quot;page-link&quot; href=&quot;/api-toolbox-jq-and-openapi-part-2-using-jq-command-line-arguments-functions-and-modules/&quot;&gt;Part 2 - Using JQ command line arguments, functions and modules&lt;/a&gt;&lt;/li&gt;
    
  
  &lt;li&gt;Part 3 - Modifying OpenAPI files with JQ (coming soon)&lt;/li&gt;
  &lt;li&gt;Part 4 - Bonus: coloring JQ's raw output (coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-jq-and-why-i-use-it-on-openapi-files&quot;&gt;What is JQ and why I use it (on OpenAPI files)&lt;/h1&gt;

&lt;p&gt;According to &lt;a href=&quot;https://stedolan.github.io/jq/&quot; target=&quot;jq&quot;&gt;JQ’s website&lt;/a&gt;, &lt;em&gt;jq can mangle the data format that you have into the one that you want with&lt;/em&gt; and also &lt;em&gt;jq is like &lt;code&gt;sed&lt;/code&gt; for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt; and friends let you play with text.&lt;/em&gt;&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-jq.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;I have been using JQ to transform JSON data when making API calls on the command line for quite a while, but lately I have been using it to manipulate OpenAPI Specification files. This is the use case I will focus on in this post (I’ll keep the API calls use case for another post).&lt;/p&gt;

&lt;p&gt;The OpenAPI Specification (or OAS) is a standard and programming-language agnostic REST API description format. It can be used during the design of an API to formally describe the API’s contract. It can also be used to generate documentation, generate code or to configure tools such as API gateways. An OpenAPI file can be in YAML or JSON format. If you want to learn more about this format, read &lt;a href=&quot;/openapi/&quot; target=&quot;openapi&quot;&gt;What is the OpenAPI Specification&lt;/a&gt;. In order to have a good understanding of an OpenAPI document structure, you should check my &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot; target=&quot;openapi&quot;&gt;OpenAPI Map&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my daily job I have to work with OpenAPI files when doing API design reviews. Tools such as SwaggerUI or ReDoc easily provide a user friendly view of OpenAPI files, but when it comes to have a more specific view to check various design concerns, you need to use something else. I can use JQ when I want to know  which operations can be used with a given Oauth Scope, where a reusable schema is used or checking if an API or multiples APIs are consistent.
I also have to deal with OpenAPI files when working on my company’s API catalog. I had to generate API calls body to load OpenAPI files into it, I had to extract some data from them with JQ to do so. I also had to modify them to remove deprecated elements in order to avoid showing them in their documentation.&lt;/p&gt;

&lt;p&gt;The examples shown in this post are based on my regular use of JQ+OpenAPI but I expanded my original JQ scripts set with other ones in order to show more of JQ’s features.&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;p&gt;If you want to play with JQ and OpenAPI as you read this post, you’ll need to install JQ and download this post’s related content(JQ scripts, OpenAPI demo files and Asciinema sessions and their underlying scripts).&lt;/p&gt;

&lt;h2 id=&quot;install-jq&quot;&gt;Install JQ&lt;/h2&gt;

&lt;p&gt;JQ is a portable command line tool that’s very easy to install. Its website states that &lt;em&gt;jq is written in portable C, and it has zero runtime dependencies. You can download a single binary, &lt;code&gt;scp&lt;/code&gt; it to a far away machine of the same type, and expect it to work&lt;/em&gt; (&lt;code&gt;scp&lt;/code&gt; is a file transfer tool). This is actually true, I have tested it on Linux servers, Windows CMD terminal, Windows Gitbash (standalone and inside VS Code) and MacOS terminal: never had a problem with it.&lt;/p&gt;

&lt;p&gt;To install JQ on my personnal Macbook, I used &lt;code&gt;brew install jq&lt;/code&gt;. On my professional Windows laptop, I simply downloaded the binary and added it to my PATH environment variable. Check &lt;a href=&quot;https://stedolan.github.io/jq/download/&quot; target=&quot;jq&quot;&gt;JQ’s download page&lt;/a&gt; to see all available versions and ways to install it.&lt;/p&gt;

&lt;p&gt;Once installed, open a terminal and run &lt;code&gt;jq --help&lt;/code&gt; to check if everything is OK.&lt;/p&gt;

&lt;h2 id=&quot;get-posts-content&quot;&gt;Get post’s content&lt;/h2&gt;

&lt;p&gt;All examples shown in this post are based on JQ 1.6 and OpenAPI 3. All examples can be copied using the &lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt; button and downloaded using the &lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt; one on code snippets. All source code can be retrieved from the &lt;a href=&quot;https://github.com/arno-di-loreto/jq-and-openapi/&quot; target=&quot;jq&quot;&gt;JQ and OpenAPI post series’ github repository&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;git clone https://github.com/arno-di-loreto/jq-and-openapi/
cd jq-and-openapi
git checkout part-1

&lt;/pre&gt;
  
  &lt;div class=&quot;code-toolbar&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ git clone https://github.com/arno-di-loreto/jq-and-openapi/
[apihandyman.io]$ cd jq-and-openapi
[apihandyman.io]$ git checkout part-1&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Most of this post’s examples are run against the same OpenAPI file (&lt;code&gt;demo-api-openapi.json&lt;/code&gt;) which is a slightly modified version of an example coming from my book &lt;em&gt;The Design of Web APIs&lt;/em&gt;, I added a few elements here and there, convert it from YAML to JSON and uglify it.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;demo-api-openapi.json (uglyfied OpenAPI 3.0)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-1/demo-api-openapi.json&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-json line-numbers&quot;&gt;&lt;code&gt;{&quot;openapi&quot;:&quot;3.0.0&quot;,&quot;info&quot;:{&quot;title&quot;:&quot;Banking API&quot;,&quot;version&quot;:&quot;1.0.0-snapshot&quot;,&quot;description&quot;:&quot;The Banking API provides access to the [Banking Company](http://www.bankingcompany.com) services, which include bank account information, beneficiaries, and money transfer management.&amp;#60;!--more--&amp;#62;\n\n# Authentication\n\n## How to \n- Register\n- Create an APP\n- Request credentials\n\n# Use cases\n\n## Transferring money to an account or preexisting beneficiary\n\nThe _transfer money_ operation allows one to transfer an `amount` of money from a `source` account to a `destination` account or beneficiary.\nIn order to use an appropriate `source` and `destination`, we recommend to use _list sources_ and _list source's destinations_ as shown in the figure below (instead of using _list accounts_ and _list beneficiaries_).\n\n![Diagram](http://localhost:9090/12.2-operation-manual-diagram.svg)\n\n## Cancelling a delayed or recurring money transfer\n\n- List money transfers: To list existing money transfers and select the one to delete\n- Cancel a money transfer: To cancel the selected money transfer\n&quot;,&quot;contact&quot;:{&quot;name&quot;:&quot;The Banking API team&quot;,&quot;email&quot;:&quot;api@bankingcompany.com&quot;,&quot;url&quot;:&quot;developer.bankingcompany.com&quot;}},&quot;tags&quot;:[{&quot;name&quot;:&quot;Transfers&quot;,&quot;description&quot;:&quot;Everything you need to manage money transfers. A money transfer consists in transferring money from a source account to a destination account.&quot;},{&quot;name&quot;:&quot;Beneficiaries&quot;,&quot;description&quot;:&quot;Everything you need to manage money transfer beneficiaries. Beneficiaries are pre-registred external accounts that can be used as destinations for money transfers.&quot;}],&quot;paths&quot;:{&quot;/accounts&quot;:{&quot;get&quot;:{&quot;tags&quot;:[&quot;Accounts&quot;],&quot;summary&quot;:&quot;List accounts&quot;,&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;User's accounts&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;required&quot;:[&quot;properties&quot;],&quot;properties&quot;:{&quot;items&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;items&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/Account&quot;}}}}}}}}}},&quot;/accounts/{id}&quot;:{&quot;get&quot;:{&quot;tags&quot;:[&quot;Accounts&quot;],&quot;summary&quot;:&quot;Get an account&quot;,&quot;parameters&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;in&quot;:&quot;path&quot;,&quot;description&quot;:&quot;Account's id&quot;,&quot;required&quot;:true,&quot;schema&quot;:{&quot;type&quot;:&quot;string&quot;}}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The account&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/Account&quot;}}}}},&quot;x-implementation&quot;:{&quot;security&quot;:{&quot;description&quot;:&quot;Only accounts belonging to user referenced in security data;\nreturn a 404 if this is not the case\n&quot;,&quot;source&quot;:{&quot;system&quot;:&quot;security&quot;,&quot;location&quot;:&quot;jwt.sub&quot;},&quot;fail&quot;:404}}}},&quot;/beneficiaries&quot;:{&quot;post&quot;:{&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;Register a beneficiary&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:create&quot;,&quot;beneficiary:admin&quot;]}],&quot;responses&quot;:{&quot;201&quot;:{&quot;description&quot;:&quot;Beneficiary added&quot;}}},&quot;get&quot;:{&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;List beneficiaries&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:read&quot;,&quot;beneficiary:admin&quot;]}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The beneficiaries list&quot;}}}},&quot;/beneficiaries/{id}&quot;:{&quot;parameters&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;in&quot;:&quot;path&quot;,&quot;description&quot;:&quot;Beneficiary's id&quot;,&quot;required&quot;:true,&quot;schema&quot;:{&quot;type&quot;:&quot;string&quot;}}],&quot;delete&quot;:{&quot;deprecated&quot;:true,&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;Delete a beneficiary&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:delete&quot;,&quot;beneficiary:admin&quot;]}],&quot;responses&quot;:{&quot;204&quot;:{&quot;description&quot;:&quot;Beneficiary deleted&quot;}}},&quot;patch&quot;:{&quot;deprecated&quot;:true,&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;Updates a beneficiary&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:admin&quot;]}],&quot;requestBody&quot;:{&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/BeneficiaryUpdate&quot;}}}},&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The updated beneficiary&quot;}}},&quot;get&quot;:{&quot;tags&quot;:[&quot;Beneficiaries&quot;],&quot;summary&quot;:&quot;Get a beneficiary&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;beneficiary:read&quot;,&quot;beneficiary:admin&quot;]}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The beneficiary&quot;}}}},&quot;/sources&quot;:{&quot;get&quot;:{&quot;summary&quot;:&quot;List transfer sources&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;description&quot;:&quot;Not all bank accounts can be used as a source\nfor a money transfers. This operation returns\nonly the accounts elligible as a money transfer\nsource.\n&quot;,&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The transfer sources&quot;}}}},&quot;/sources/{id}/destinations&quot;:{&quot;parameters&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;in&quot;:&quot;path&quot;,&quot;description&quot;:&quot;Source's id&quot;,&quot;required&quot;:true,&quot;schema&quot;:{&quot;type&quot;:&quot;string&quot;}}],&quot;get&quot;:{&quot;summary&quot;:&quot;List transfer source's destinations&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;description&quot;:&quot;Depending on the source account, only specific\nbeneficiaries or accounts can be used as a money\ntransfer destination.\nThis operation returns them.\n&quot;,&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The transfer destination&quot;}}}},&quot;/transfers&quot;:{&quot;post&quot;:{&quot;summary&quot;:&quot;Transfer money&quot;,&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;transfer:create&quot;,&quot;transfer:admin&quot;]}],&quot;tags&quot;:[&quot;Transfers&quot;],&quot;description&quot;:&quot;This operation allows one to transfer an `amount` of money from a `source` account to a `destination` account.\nThere are three different types of money transfer:\n  - Immediate -- these are executed as soon as the request is received \n  - Delayed -- these are executed upon a given future `date`\n  - Recurring -- these are executed a given `occurrences` number of times at a given `frequency` -- the first occurrence being executed immediately or at a given `date`\n&quot;,&quot;requestBody&quot;:{&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferRequest&quot;},&quot;examples&quot;:{&quot;immediate&quot;:{&quot;summary&quot;:&quot;Immediate transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed immediately&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2}},&quot;delayed&quot;:{&quot;summary&quot;:&quot;Delayed transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed at a given date&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;}},&quot;recurring&quot;:{&quot;summary&quot;:&quot;Recurring transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed at a given date reurringly&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;,&quot;occurrences&quot;:1,&quot;frequency&quot;:&quot;MONTHLY&quot;}}}}}},&quot;responses&quot;:{&quot;201&quot;:{&quot;description&quot;:&quot;Immediate or recurring transfer executed&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferResponse&quot;},&quot;examples&quot;:{&quot;immediate&quot;:{&quot;summary&quot;:&quot;Immediate transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed immediately&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2}},&quot;recurring&quot;:{&quot;summary&quot;:&quot;Recurring transfer&quot;,&quot;description&quot;:&quot;The first occurence is executed immediately&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;,&quot;occurrences&quot;:1,&quot;frequency&quot;:&quot;MONTHLY&quot;}}}}}},&quot;202&quot;:{&quot;description&quot;:&quot;Delayed or recurring delayed transfer accepted&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferResponse&quot;},&quot;examples&quot;:{&quot;delayed&quot;:{&quot;summary&quot;:&quot;Delayed transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed at a given date&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;}},&quot;recurring&quot;:{&quot;summary&quot;:&quot;Recurring transfer&quot;,&quot;description&quot;:&quot;The money transfer is executed at a given date reurringly&quot;,&quot;value&quot;:{&quot;source&quot;:&quot;000534115776675&quot;,&quot;destination&quot;:&quot;000567689879878&quot;,&quot;amount&quot;:456.2,&quot;date&quot;:&quot;2019-03-19&quot;,&quot;occurrences&quot;:1,&quot;frequency&quot;:&quot;MONTHLY&quot;}}}}}},&quot;400&quot;:{&quot;description&quot;:&quot;The transfer is rejected due to an error in the request properties or an insufficient balance.\nEach error provides the property `source` of the error along with a human-readable `message` and its `type`:\n\n- MANDATORY_PROPERTY: The property indicated in `source` is missing\n- INVALID_FORMAT: The format of the property indicated in `source` is invalid\n- INVALID_VALUE: The value of the property indicated in `source` is invalid\n- INSUFFICIENT_BALANCE: The `amount` property is higher than the `source` account balance\n&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/ConsumerError&quot;}}}}}},&quot;get&quot;:{&quot;summary&quot;:&quot;List money transfers&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;transfer:read&quot;,&quot;transfer:admin&quot;]}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;Transfers list&quot;,&quot;content&quot;:{&quot;application/json&quot;:{&quot;schema&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferList&quot;}}}}}}},&quot;/transfers/{id}&quot;:{&quot;parameters&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;in&quot;:&quot;path&quot;,&quot;description&quot;:&quot;Transfer's id&quot;,&quot;required&quot;:true,&quot;schema&quot;:{&quot;type&quot;:&quot;string&quot;}}],&quot;get&quot;:{&quot;summary&quot;:&quot;Get a money transfer&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;transfer:read&quot;,&quot;transfer:admin&quot;]}],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The money transfer&quot;},&quot;404&quot;:{&quot;description&quot;:&quot;The money transfer does not exist&quot;}}},&quot;x-tension-example&quot;:{&quot;some&quot;:&quot;value&quot;},&quot;patch&quot;:{&quot;tags&quot;:[&quot;Transfers&quot;],&quot;responses&quot;:{&quot;200&quot;:{&quot;description&quot;:&quot;The money transfer has been update&quot;}}},&quot;delete&quot;:{&quot;summary&quot;:&quot;Cancel a money transfer&quot;,&quot;tags&quot;:[&quot;Transfers&quot;],&quot;security&quot;:[{&quot;BankingAPIScopes&quot;:[&quot;transfer:delete&quot;,&quot;transfer:admin&quot;]}],&quot;description&quot;:&quot;Only delayed or recurring money transfer can be canceled&quot;,&quot;responses&quot;:{&quot;204&quot;:{&quot;description&quot;:&quot;The money transfer has been deleted&quot;},&quot;404&quot;:{&quot;description&quot;:&quot;The money transfer does not exist&quot;}}}}},&quot;components&quot;:{&quot;securitySchemes&quot;:{&quot;BankingAPIScopes&quot;:{&quot;type&quot;:&quot;oauth2&quot;,&quot;flows&quot;:{&quot;implicit&quot;:{&quot;authorizationUrl&quot;:&quot;https://auth.bankingcompany.com/authorize&quot;,&quot;scopes&quot;:{&quot;transfer:create&quot;:&quot;Create transfers&quot;,&quot;transfer:read&quot;:&quot;Read transfers&quot;,&quot;transfer:delete&quot;:&quot;Delete transfers&quot;,&quot;transfer:admin&quot;:&quot;Create, read, and delete transfers&quot;,&quot;beneficiary:create&quot;:&quot;Create beneficiaries&quot;,&quot;beneficiary:read&quot;:&quot;List beneficiaries&quot;,&quot;beneficiary:delete&quot;:&quot;delete beneficiaries&quot;,&quot;beneficiary:admin&quot;:&quot;Create, read, and delete beneficiaries&quot;,&quot;account:read&quot;:&quot;Read accounts&quot;,&quot;account:admin&quot;:&quot;Read accounts&quot;}}}}},&quot;schemas&quot;:{&quot;BeneficiaryUpdate&quot;:{&quot;description&quot;:&quot;A beneficiary update parameter&quot;,&quot;properties&quot;:{&quot;name&quot;:{&quot;type&quot;:&quot;string&quot;}}},&quot;UselessSchema&quot;:{&quot;description&quot;:&quot;An unused useless schema&quot;,&quot;type&quot;:&quot;string&quot;},&quot;TransferRequest&quot;:{&quot;description&quot;:&quot;A money transfer request&quot;,&quot;required&quot;:[&quot;source&quot;,&quot;destination&quot;,&quot;amount&quot;],&quot;properties&quot;:{&quot;deprecatedPropertyExample&quot;:{&quot;deprecated&quot;:true,&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;An example of a deprecated property&quot;},&quot;source&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;Source account number&quot;,&quot;minLength&quot;:15,&quot;maxLength&quot;:15,&quot;pattern&quot;:&quot;^\\d{15}$&quot;,&quot;example&quot;:&quot;000534115776675&quot;},&quot;destination&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;Destination account number&quot;,&quot;minLength&quot;:15,&quot;maxLength&quot;:15,&quot;pattern&quot;:&quot;^\\d{15}$&quot;,&quot;example&quot;:&quot;000567689879878&quot;},&quot;amount&quot;:{&quot;type&quot;:&quot;number&quot;,&quot;example&quot;:456.2,&quot;minimum&quot;:0,&quot;exclusiveMinimum&quot;:true},&quot;date&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;format&quot;:&quot;date&quot;,&quot;description&quot;:&quot;Execution date for a delayed transfer\nor first execution date for a recurring one\n&quot;,&quot;example&quot;:&quot;2019-03-19&quot;},&quot;occurrences&quot;:{&quot;type&quot;:&quot;integer&quot;,&quot;description&quot;:&quot;Number of times a recurring transfer will be executed\n&quot;,&quot;example&quot;:2,&quot;minimum&quot;:2,&quot;maximum&quot;:100},&quot;frequency&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;Frequency of recurring transfer's execution&quot;,&quot;example&quot;:&quot;MONTHLY&quot;,&quot;enum&quot;:[&quot;WEEKLY&quot;,&quot;MONTHLY&quot;,&quot;QUARTERLY&quot;,&quot;YEARLY&quot;]}}},&quot;TransferResponse&quot;:{&quot;allOf&quot;:[{&quot;required&quot;:[&quot;id&quot;,&quot;type&quot;,&quot;status&quot;],&quot;properties&quot;:{&quot;id&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;1611e71f-1bb2-412f-8c43-92b275a5c321&quot;},&quot;type&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;enum&quot;:[&quot;IMMEDIATE&quot;,&quot;DELAYED&quot;,&quot;RECURRING&quot;],&quot;example&quot;:&quot;RECURRING&quot;},&quot;status&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;An immediate transfer is always `EXECUTED`, a delayed transfer can be `EXECUTED` or `PENDING` and a recurring one is always `PENDING`\n&quot;,&quot;enum&quot;:[&quot;EXECUTED&quot;,&quot;PENDING&quot;],&quot;example&quot;:&quot;PENDING&quot;},&quot;requestDate&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;2019-09-19&quot;}}},{&quot;$ref&quot;:&quot;#/components/schemas/TransferRequest&quot;}]},&quot;TransferList&quot;:{&quot;properties&quot;:{&quot;items&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;items&quot;:{&quot;$ref&quot;:&quot;#/components/schemas/TransferResponse&quot;}}}},&quot;ConsumerError&quot;:{&quot;required&quot;:[&quot;errors&quot;],&quot;properties&quot;:{&quot;errors&quot;:{&quot;description&quot;:&quot;A list of errors providing detailed information about the problem&quot;,&quot;type&quot;:&quot;array&quot;,&quot;minItems&quot;:1,&quot;items&quot;:{&quot;required&quot;:[&quot;source&quot;,&quot;type&quot;,&quot;message&quot;],&quot;properties&quot;:{&quot;source&quot;:{&quot;description&quot;:&quot;the property source of the error&quot;,&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;amount&quot;,&quot;enum&quot;:[&quot;source&quot;,&quot;destination&quot;,&quot;amount&quot;,&quot;date&quot;,&quot;occurrences&quot;,&quot;frequency&quot;]},&quot;type&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;MANDATORY_PROPERTY&quot;,&quot;enum&quot;:[&quot;MANDATORY_PROPERTY&quot;,&quot;INVALID_FORMAT&quot;,&quot;INVALID_VALUE&quot;,&quot;INSUFFICIENT_BALANCE&quot;]},&quot;message&quot;:{&quot;description&quot;:&quot;a human-readable error message&quot;,&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;The money transfer's amount must be provided&quot;}}}}}},&quot;ProviderError&quot;:{&quot;properties&quot;:{&quot;errors&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;minItems&quot;:1,&quot;maxItems&quot;:1,&quot;items&quot;:{&quot;properties&quot;:{&quot;message&quot;:{&quot;type&quot;:&quot;string&quot;}}}}}},&quot;Account&quot;:{&quot;properties&quot;:{&quot;balance&quot;:{&quot;description&quot;:&quot;The balance in the account's default currency&quot;,&quot;type&quot;:&quot;object&quot;,&quot;title&quot;:&quot;Amount&quot;,&quot;required&quot;:[&quot;value&quot;,&quot;currency&quot;],&quot;properties&quot;:{&quot;value&quot;:{&quot;description&quot;:&quot;Balance's value using the number of decimal places defined by ISO 4217&quot;,&quot;externalDocs&quot;:{&quot;description&quot;:&quot;Decimal places table&quot;,&quot;url&quot;:&quot;https://www.currency-iso.org/en/home/tables/table-a1.html&quot;},&quot;type&quot;:&quot;number&quot;,&quot;x-implementation&quot;:{&quot;description&quot;:&quot;The real time balance (not the daily one!)&quot;,&quot;source&quot;:{&quot;system&quot;:&quot;Core Banking&quot;,&quot;data&quot;:&quot;ZBAL0.RTBAL&quot;}}},&quot;currency&quot;:{&quot;description&quot;:&quot;An ISO 4217 code&quot;,&quot;externalDocs&quot;:{&quot;url&quot;:&quot;https://www.iso.org/iso-4217-currency-codes.html&quot;},&quot;type&quot;:&quot;string&quot;,&quot;example&quot;:&quot;USD&quot;,&quot;x-implementation&quot;:{&quot;source&quot;:{&quot;system&quot;:&quot;Core Banking&quot;,&quot;data&quot;:&quot;ZBAL0.RTCUR&quot;}}}}}}}}}}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;There are also two other almost empty examples used when working on multiple files.&lt;/p&gt;

&lt;h1 id=&quot;invoke-jq&quot;&gt;Invoke JQ&lt;/h1&gt;

&lt;p&gt;In this first section, we’ll learn how to invoke JQ and its basic principles. The whole content of this section has been recorded with Asciinema (but is available as regular text right after the player).&lt;/p&gt;

&lt;asciinema-player poster=&quot;npt:1:20&quot; title=&quot;Invoke JQ&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-1/invoke-jq.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;h2 id=&quot;beautify-and-color-json&quot;&gt;Beautify and color JSON&lt;/h2&gt;

&lt;p&gt;As shown in the following listing, the &lt;code&gt;demo-api-openapi.json&lt;/code&gt; file is quite complex to read when printed on a terminal when using &lt;code&gt;cat demo-api-openapi.json&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;cat demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Let's see what's inside the demo-api-openapi.json OpenAPI file&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ cat demo-api-openapi.json
{&amp;quot;openapi&amp;quot;:&amp;quot;3.0.0&amp;quot;,&amp;quot;info&amp;quot;:{&amp;quot;title&amp;quot;:&amp;quot;Banking API&amp;quot;, ...}
# The whole document is printed one a single line
# That&amp;#39;s totally unreadable 😱&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Of course we could open our favorite code editor and beautify it. But this can also be done on the command line thanks to JQ. All we need to do is piping (with &lt;code&gt;|&lt;/code&gt;) the file content to JQ like this &lt;code&gt;cat api-openapi.json | jq '.'&lt;/code&gt;. Icing on the cake, the output is colored. Note that you can also simply call JQ with the JSON’s filename like this: &lt;code&gt;jq '.' demo-api-openapi.json&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;cat demo-api-openapi.json | jq &amp;#39;.&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Let's pipe this into JQ to see if it's better&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ cat demo-api-openapi.json | jq &amp;#39;.&amp;#39;
{
  &amp;quot;openapi&amp;quot;: &amp;quot;3.0.0&amp;quot;,
  &amp;quot;info&amp;quot;: {
    &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
    ...
}
# JSON is beautified and colored 😍&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq &amp;#39;.&amp;#39; demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;JQ can also be called with a file parameter&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq &amp;#39;.&amp;#39; demo-api-openapi.json
{
  &amp;quot;openapi&amp;quot;: &amp;quot;3.0.0&amp;quot;,
  &amp;quot;info&amp;quot;: {
    &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
    ...
}
# JSON is beautified and colored 😍&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The first parameter of a JQ command, here &lt;code&gt;'.'&lt;/code&gt;, is the JQ filter that will be used to process the provided JSON. This &lt;code&gt;.&lt;/code&gt; filter, named identity, is the most simple one, it only returns what it gets. Obviously, I wouldn’t write such a huge blog post to talk about a tool that only beautifies and colors JSON. Let’s see some basic JQ filtering in action.&lt;/p&gt;

&lt;h2 id=&quot;extract-data-from-json&quot;&gt;Extract data from JSON&lt;/h2&gt;

&lt;p&gt;Even beautified and colored, the file is still quite complex to read. Indeed, the beautified JSON file is around 750 lines long. What if we only want to see the info section? It’s dead simple, we only need to use the &lt;code&gt;.info&lt;/code&gt; JQ filter on the file with &lt;code&gt;jq '.info' demo-api-openapi.json&lt;/code&gt; as shown below. And you probably already guessed how to get only the API’s name (called title in OpenAPI): &lt;code&gt;.info.title&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq &amp;#39;.&amp;#39; demo-api-openapi.json | wc -l
jq &amp;#39;.info&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.title&amp;#39; demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Only showing the info section or the API's name (title)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq &amp;#39;.&amp;#39; demo-api-openapi.json | wc -l
     753
# Beautified JSON is 750 lines long 
[apihandyman.io]$ jq &amp;#39;.info&amp;#39; demo-api-openapi.json
{
  &amp;quot;title&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The Banking API provides access ...&amp;quot;,
  &amp;quot;contact&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;The Banking API team&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;api@bankingcompany.com&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;developer.bankingcompany.com&amp;quot;
  }
}

[apihandyman.io]$ jq &amp;#39;.info.title&amp;#39; demo-api-openapi.json
&amp;quot;Banking API&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;The most simple JQ filters simply consist in describing the paths of the element you want to get.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-basic-filter.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;Being able to simply extract a value from a JSON is quite interesting, but that’s only the tip of the tip of the tip the iceberg.&lt;/p&gt;

&lt;h2 id=&quot;generate-tailor-made-json&quot;&gt;Generate tailor made JSON&lt;/h2&gt;

&lt;p&gt;With a JQ filter, you can generate tailor made JSON containing exactly what you want, how you want it. To do so, use the &lt;code&gt;{}&lt;/code&gt; object constructor and describe what you want in it almost just like you would write a JSON object. The following listing show how to create an object containing the API name, its version and the contact’s name. Each value is the result of a JQ filter applied to the JSON provided to the filter.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq &amp;#39;{name: .info.title, version: .info.version, contact: .info.contact.name}&amp;#39; demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;JQ can totally transform the provided JSON&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq &amp;#39;{name: .info.title, version: .info.version, contact: .info.contact.name}&amp;#39; demo-api-openapi.json
{
  &amp;quot;name&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
  &amp;quot;contact&amp;quot;: &amp;quot;The Banking API team&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;generate-raw-text&quot;&gt;Generate raw text&lt;/h2&gt;

&lt;p&gt;JQ is also able to output raw text instead of JSON. To do so, a filter just need to return a value. The following listing shows three attempts of printing text. The first example (line 1) simply prints the API name (&lt;code&gt;.info.title&lt;/code&gt;) as we already have done before. The output contains no JSON structure, only the requested value as a quoted string (&lt;code&gt;&quot;Banking API&quot;&lt;/code&gt;). The second one (line 4) tries to outputs tab separated API’s name, version and contact’s name. Note that the &lt;code&gt;+&lt;/code&gt; operator is used to concatenate the different values which can come from the provided JSON (&lt;code&gt;.info.title&lt;/code&gt; for example) but can also be static ones (&lt;code&gt;&quot;\t&quot;&lt;/code&gt;, the tab separator). Unfortunately, the result is not what is expected, the tabs (&lt;code&gt;\t&lt;/code&gt;) are not interpreted. In order to actually get raw text that will be fully interpreted by the terminal, the &lt;code&gt;-r&lt;/code&gt; flag must be provided to JQ. This is what is shown in the last example (line 10): there is no more quotes, and the value are separated by tabs.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq &amp;#39;.info.title&amp;#39; demo-api-openapi.json
jq &amp;#39;.info.title + &amp;quot;\t&amp;quot; + .info.version + &amp;quot;\t&amp;quot; + .info.contact.name&amp;#39; demo-api-openapi.json
jq -r &amp;#39;.info.title + &amp;quot;\t&amp;quot; + .info.version + &amp;quot;\t&amp;quot; + .info.contact.name&amp;#39; demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;JQ can generate raw text (don't forget -r flag)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq &amp;#39;.info.title&amp;#39; demo-api-openapi.json
&amp;quot;Banking API&amp;quot;

[apihandyman.io]$ jq &amp;#39;.info.title + &amp;quot;\t&amp;quot; + .info.version + &amp;quot;\t&amp;quot; + .info.contact.name&amp;#39; demo-api-openapi.json
&amp;quot;Banking API\t1.0.0-snapshot\tThe Banking API team&amp;quot;

[apihandyman.io]$ jq -r &amp;#39;.info.title + &amp;quot;\t&amp;quot; + .info.version + &amp;quot;\t&amp;quot; + .info.contact.name&amp;#39; demo-api-openapi.json
Banking API     1.0.0-snapshot  The Banking API team&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;pipe-jq-commands-and-filters&quot;&gt;Pipe JQ commands and filters&lt;/h2&gt;

&lt;p&gt;Piping is a powerful command line concept: the result of a first command can be forwarded to another one using a pipe (&lt;code&gt;|&lt;/code&gt;) . This is what we have done on our first JQ command: we took the result of a &lt;code&gt;cat&lt;/code&gt; command (which outputs the content of a file) to provided it to JQ and the output of JQ can be forwarded to another command which could be, for example, another JQ one, as shown in the following listing.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;cat demo-api-openapi.json | jq &amp;#39;{name: .info.title, version: .info.version, contact: .info.contact.name}&amp;#39; | jq -r &amp;#39;.name + &amp;quot;\t&amp;quot; + .version&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;JQ commands can be chained with pipe (like many other command line ones)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ cat demo-api-openapi.json | \
jq &amp;#39;{name: .info.title, version: .info.version, contact: .info.contact.name}&amp;#39; | \
jq -r &amp;#39;.name + &amp;quot;\t&amp;quot; + .version&amp;#39;
Banking API     1.0.0-snapshot&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;JQ also takes advantage of this piping concept. Indeed, JQ filters can be chained using pipe as shown in the following listing. The full JSON document is (implicitly) provided to the first filter which creates an object containing a name, version and title and its result is forwarded, using &lt;code&gt;|&lt;/code&gt;, to another filter which return a string containing tab separated name and version.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r &amp;#39;{name: .info.title, version: .info.version, contact: .info.contact.name} | .name + &amp;quot;\t&amp;quot; + .version&amp;#39; demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;More interesting, JQ filters can be chained too with (also with pipe)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r &amp;#39;{name: .info.title, version: .info.version, contact: .info.contact.name} | .name + &amp;quot;\t&amp;quot; + .version&amp;#39; demo-api-openapi.json
Banking API     1.0.0-snapshot&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;use-jq-files&quot;&gt;Use JQ files&lt;/h2&gt;

&lt;p&gt;As a JQ filter chain becomes complex, writing it on the command line can become cumbersome and error prone. Fortunately, JQ comes with a useful &lt;code&gt;-f file&lt;/code&gt; flag allowing to load filters from a file as shown in the following listing. The new command line gives the same result as the one before, the only difference is that the filters are now loaded from the &lt;code&gt;basics.jq&lt;/code&gt; file (files containing JQ filters usually have a &lt;code&gt;.jq&lt;/code&gt; extension).&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r -f basics.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;When JQ scripts become complex, better use a JQ file (-f file.jq)&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r -f basics.jq demo-api-openapi.json
Banking API     1.0.0-snapshot&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;basics.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-1/basics.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code&gt;# Files are easier to read and can be commented
# Creates an object
{
  name: .info.title, 
  version: .info.version, 
  contact: .info.contact.name
} |
# Outputs tab separated name and version
# + can be used to concatene almost everything
# (as you will see in later examples)
# Don't forget the -r flag
.name + &quot;\t&quot; + .version&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Now that we know the basics of JQ, let’s try more complex stuff on OpenAPI JSON files.&lt;/p&gt;

&lt;h1 id=&quot;use-jq-filters-on-an-openapi-file&quot;&gt;Use JQ filters on an OpenAPI file&lt;/h1&gt;

&lt;p&gt;In this section, we’ll learn to use some of the many JQ filters by extracting data from an OpenAPI file. For each example, you get:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A fully detailed, step by step asciinema bash session explaining how the result is achieved&lt;/li&gt;
  &lt;li&gt;An OpenAPI structure figure and description (based on the &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;OpenAPI Map&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;A list of (new) JQ filters used&lt;/li&gt;
  &lt;li&gt;A summarized explanation of how the result is achieved (⚠️ far less details than in the asciinema bash session)&lt;/li&gt;
  &lt;li&gt;A fully commented JQ file&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-paths&quot;&gt;List paths&lt;/h2&gt;

&lt;p&gt;Let’s start by extracting the API’s paths:&lt;/p&gt;

&lt;asciinema-player poster=&quot;npt:26&quot; title=&quot;List API's paths&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-paths.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r -f list-paths.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;List API's paths&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r -f list-paths.jq demo-api-openapi.json 
/accounts
/accounts/{id}
/beneficiaries
/beneficiaries/{id}
/sources
/sources/{id}/destinations
/transfers
/transfers/{id}&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;In an OpenAPI file, the available paths are the keys of the &lt;code&gt;paths&lt;/code&gt; object.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-paths.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;To get these paths, we’ll use the following JQ filters:&lt;/p&gt;

&lt;table class=&quot;table table-sm&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th span=&quot;3&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.foo&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.foo.bar&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns element targeted by period separated path&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#ObjectIdentifier-Index:.foo,.foo.bar&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns object's keys (properties names)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#keys,keys_unsorted&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.[]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.[index]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns all or some elements of an object or array identified by an index&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Array/ObjectValueIterator:.[]&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To extract the paths, we only need to use the &lt;code&gt;keys&lt;/code&gt; filter on the paths object identified by &lt;code&gt;.paths&lt;/code&gt;. This &lt;code&gt;keys&lt;/code&gt; filter returns an array containing the keys (property names, hence the paths in our case) of an object. Then we use &lt;code&gt;[]&lt;/code&gt; on the result to flatten the array in order to get raw text.&lt;/p&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-paths.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-paths.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers&quot;&gt;&lt;code&gt;# 1 - Selects the paths object
#-----------------------------
.paths
# 2 - Keeps only the keys in paths (/whatever)
#---------------------------------------------
| keys
# 3 - Flattens the array (for raw output)
#---------------------------------------- 
[]&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;list-http-methods&quot;&gt;List HTTP methods&lt;/h2&gt;

&lt;p&gt;Let’s go a level deeper to list all HTTP methods used in an API:&lt;/p&gt;

&lt;asciinema-player poster=&quot;npt:31&quot; title=&quot;List HTTP methods&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-http-methods.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r -f list-http-methods.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;List used HTTP methods&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r -f list-http-methods.jq demo-api-openapi.json
delete
get
patch
post&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;In an OpenAPI file, HTTP methods are keys inside a path object. Unfortunately, path objects may have other properties than HTTP methods ones, like &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;parameters&lt;/code&gt; or &lt;code&gt;x-&lt;/code&gt; custom properties (we take for granted that there is no &lt;code&gt;$ref&lt;/code&gt; properties). So we’ll need to clean this array to get rid of all other properties than HTTP methods.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-http-methods.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;To list all of these HTTP methods, we’ll use 4 new  JQ filters:&lt;/p&gt;

&lt;table class=&quot;table table-sm&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th span=&quot;3&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;[1, 2, 3]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;[.foo, .bar]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;[.items[].name]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Creates an array&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Arrayconstruction:[]&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;map(filter)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Applies a filter to each element of an array&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#map(x),map_values(x)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;select(filter returning boolean)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns element for which filter returns true&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#select(boolean_expression)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;IN(value1, value2, value3)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns true if element is one of the values&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#SQL-StyleOperators&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The JQ file that follows can be roughly split in 4 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 1) To create the array of path objects properties, we use the array constructor &lt;code&gt;[filter]&lt;/code&gt; and inside it do the necessary with various filters to get all keys of all path objects. Note how &lt;code&gt;[]&lt;/code&gt; is used on &lt;code&gt;.paths&lt;/code&gt; to only keep its properties content without caring about the actual paths names.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 11) Then to clean the array of unwanted values, we use the &lt;code&gt;map&lt;/code&gt; filter which allows to apply a filter to each element of a list. The filter executed by &lt;code&gt;map&lt;/code&gt; consists in &lt;code&gt;select(. | IN(&quot;value 1&quot;, ..., &quot;value N&quot;))&lt;/code&gt;. The &lt;code&gt;select&lt;/code&gt; filter let pass values for which its parameter filter returns true. In our case, the &lt;code&gt;select&lt;/code&gt; parameter filter use &lt;code&gt;IN&lt;/code&gt; which returns true if the provided value is one of its parameter (here, all possible HTTP methods). Note that inside select &lt;code&gt;.&lt;/code&gt; represents the current element of the array being processed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 23) Then, we apply the &lt;code&gt;unique&lt;/code&gt; filter to the array of all HTTP methods of all paths in order to keep a single occurrence of each.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 27) And eventually the resulting array is flatten with &lt;code&gt;[]&lt;/code&gt; for raw output.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-http-methods.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-http-methods.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot; data-line=&quot;1-4,11-13,23-25,27-28&quot;&gt;&lt;code&gt;# 1 - Creates an array of all HTTP methods
#     inside paths[&quot;/whatever&quot;]
#-----------------------------------------
# It returns [&quot;get&quot;, &quot;post&quot;,&quot;summary&quot;,&quot;x-example&quot;, &quot;post&quot;]
[
  .paths[] # Selects the paths[&quot;/whatever&quot;] properties content
           # to keeps only the operations
  | keys[] # Keeps only the keys (HTTP methods and few other things)
           # and flattens array
]
# 2 - Cleans keys to keep only HTTP method
#-----------------------------------------
# It returns [&quot;get&quot;, &quot;post&quot;, &quot;post&quot;]
| map( # Applies a filter to each element
  select( # Keeps only elements for which the following is true
   # With IN, which returns true if the value is one of its
   # parameters, we can get rid of x- , parameters
   # description and summary properties
   IN(&quot;get&quot;, &quot;put&quot;, &quot;post&quot;, &quot;delete&quot;, 
      &quot;options&quot;, &quot;head&quot;, &quot;patch&quot;, &quot;trace&quot;)
  )
)
# 3 - Keeps an occurrence of each HTTP method
#--------------------------------------------
# It returns [&quot;get&quot;, &quot;post&quot;]
| unique # Keeps only an occurence of each element
# 4 - Generates raw string
#-------------------------
[] # Flattens array for raw output&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;count-http-status-codes-usage&quot;&gt;Count HTTP status codes usage&lt;/h2&gt;

&lt;p&gt;Now we take another step deeper into the OpenAPI file by listing all HTTP status codes and sorting them by how many times they are used.&lt;/p&gt;

&lt;asciinema-player poster=&quot;npt:26&quot; title=&quot;Count HTTP status codes usage&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-http-status-codes.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r -f list-http-status-codes.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Count how many times HTTP status codes are used&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r -f list-http-status-codes.jq demo-api-openapi.json
200     10
201     2
204     2
404     2
202     1
400     1&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;In an OpenAPI files, HTTP status codes used to signify how went the API call are located in the &lt;code&gt;responses&lt;/code&gt; properties of all operations (identified by an HTTP method) which are located inside all paths (identified by a path like &lt;code&gt;/whatever&lt;/code&gt;) in the &lt;code&gt;paths&lt;/code&gt; property. In the responses object, each response object is identified by its HTTP status code or by “default”. Note that the response object can also contains &lt;code&gt;x-&lt;/code&gt; custom properties that we’ll need to get rid of.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-http-status-codes.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;To list HTTP status codes and how many times they are used, we’ll learn how to use the following new JQ filters:&lt;/p&gt;

&lt;table class=&quot;table table-sm&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th span=&quot;3&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.foo?&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Does not return an error if targeted element does not exist&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#OptionalObjectIdentifier-Index:.foo?&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;test(regex)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;test(regex;flags)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns true if element matches regex&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#test(val),test(regex;flags)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;not&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns opposite boolean element&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#and/or/not&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;group_by(path_expression)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;group_by(.foo)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Groups array elements according to provided path (returns array of array)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#group_by(path_expression)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;br /&gt;&lt;code&gt;{name1: filter, name2: another_filter}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Creates an object&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#ObjectConstruction:{}&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;length&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the length of element (array, object, string, null)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#length&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;sort_by&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns element sort by value or path_expression&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#sort,sort_by(path_expression)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Turns any element into a string&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#tostring&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The JQ file that follows is split in 5 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 1) The first step looks like previous example’s, but this time we go 2 levels deeper. We also use &lt;code&gt;?&lt;/code&gt; when getting responses property content because not all properties inside a path object are actual operations. Indeed some of them can be simple string (summary, description), object (servers) or array (parameters) and therefore not have a responses properties. Without &lt;code&gt;?&lt;/code&gt;, using &lt;code&gt;.responses&lt;/code&gt; would return an error when used on properties such as summary or description. With &lt;code&gt;?&lt;/code&gt;, no error but a null value is returned. The same goes for &lt;code&gt;keys?&lt;/code&gt; which may be fed with a null values having no keys at all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 12) On the second step, we need to get rid of possible &lt;code&gt;x-&lt;/code&gt; properties. This is done like in previous example with a &lt;code&gt;map(select(filter))&lt;/code&gt;. In this case, the select’s filter checks if the value does not start by &lt;code&gt;x-&lt;/code&gt; using the &lt;code&gt;test&lt;/code&gt; filter which return true if the value matches the regex parameter and then &lt;code&gt;not&lt;/code&gt; to negate this result.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 21) Now we have an array containing all HTTP status codes of all operations, we can count how many times each one is used. This is done using &lt;code&gt;group_by&lt;/code&gt; which group equal values together. It takes an array of something and returns an array of array of something. Each internal array containing equal values. Once that is done we can create on object for each internal array using &lt;code&gt;map&lt;/code&gt;. It contains the HTTP status code which is the first value in the array (which contains the same value multiple times) and a count which is the &lt;code&gt;length&lt;/code&gt; of the array.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 32) Then we can sort this array of {code, count} by descending count using &lt;code&gt;sort_by(-.count)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 37) And eventually we generate the tab separated raw text output with &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt;. Note how count is converted into a string before being concatenated.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-http-status-codes.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-http-status-codes.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot; data-line=&quot;1-3,12-14,21-24,32-34,37-38&quot;&gt;&lt;code&gt;# 1 - Selects all properties of all responses
#--------------------------------------------
# It returns [&quot;404&quot;, &quot;200&quot;, &quot;200&quot;, &quot;x-example&quot;]
[
  .paths[][].responses? # ? avoid getting an error if
                        # responses does not exist
  | keys? # ? avoid getting an error if . is not an
          # object and has no keys
  | .[] # [ [&quot;404&quot;, &quot;200&quot;], [&quot;200&quot;, &quot;x-example&quot;] ] ⤵️
      #                     [&quot;404&quot;, &quot;200&quot;, &quot;200&quot;, &quot;x-example&quot;]
]
# 2 - Removes x- properties
#--------------------------
# It returns [&quot;200&quot;, &quot;404&quot;, &quot;200&quot;]
| map( # Applies a filter to each element
  select( # Keep elements for which what follows return true
    test(&quot;^x-&quot;) # Returns true if value match the regex parameter
    | not # Returns the opposite of a boolean value
  )
) 
# 3 - Counts how many times each code is used
#--------------------------------------------
# It returns [ {&quot;code&quot;: &quot;404&quot;, &quot;count&quot;: 1}, 
#              {&quot;code&quot;: &quot;200&quot;, &quot;count&quot;: 2} ]
| group_by(.) # [&quot;404&quot;, &quot;200&quot;, &quot;200&quot;] ➡️ [[&quot;400&quot;],[&quot;200&quot;, &quot;200&quot;]]
| map( # Applies a filter to each element
  { # Creates an object
    code: .[0], # [&quot;200&quot;, &quot;200&quot;] ➡️ [&quot;200&quot;] ➡️ &quot;200&quot;
    count: length # [&quot;200&quot;, &quot;200&quot;] ➡️ 2
  }
)
# 4 - Sorts by descending count
#------------------------------
# It returns [ {&quot;code&quot;: &quot;200&quot;, &quot;count&quot;: 2}, 
#              {&quot;code&quot;: &quot;404&quot;, &quot;count&quot;: 1} ]
| sort_by(-.count) # Sort array by parameter value
# 5 - Generates tab separated string output
#------------------------------------------
| map( # Applies a filter to each element
  .code + 
  &quot;\t&quot; + 
  (.count | tostring) # count is a number
                      # it must be converted to string
                      # to be concatenated to other string
)[] # Flattens array for raw output&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;list-operations&quot;&gt;List operations&lt;/h2&gt;

&lt;p&gt;Now, let’s try something more interesting: extracting the API’s operation list.&lt;/p&gt;

&lt;asciinema-player poster=&quot;npt:26&quot; title=&quot;List operations&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-operations.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;p&gt;As the following listing shows, we will extract for each operation, its HTTP method, path, summary and indicate if the operation is deprecated.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r -f list-operations.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;List operations&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r -f list-operations.jq demo-api-openapi.json 
get     /accounts       List accounts
get     /accounts/{id}  Get an account
post    /beneficiaries  Register a beneficiary
get     /beneficiaries  List beneficiaries
delete  /beneficiaries/{id}     Delete a beneficiary (deprecated)
patch   /beneficiaries/{id}     Updates a beneficiary (deprecated)
get     /beneficiaries/{id}     Get a beneficiary
get     /sources        List transfer sources
get     /sources/{id}/destinations      List transfer source&amp;#39;s destinations
post    /transfers      Transfer money
get     /transfers      List money transfers
get     /transfers/{id} Get a money transfer
patch   /transfers/{id}
delete  /transfers/{id} Cancel a money transfer&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;Thanks to previous examples, we start to know an OpenAPI file structure. The operation’s paths come first, then their HTTP method and a level below, we can access to summary and deprecated properties which are both optional.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-operations.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;To generate the operations list, we’ll learn how to use the following new JQ filters:&lt;/p&gt;

&lt;table class=&quot;table table-sm&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th span=&quot;3&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;to_entries&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Takes an object and returns an array of key and value objects&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#to_entries,from_entries,with_entries&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.foo as $some_variable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Defines a reusable variable&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Variable/SymbolicBindingOperator:...as$identifier|...&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;if condition then filter else another_filter end&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Conditions filter execution&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#if-then-else&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The following JQ script is split in 3 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 1) We start by creating an array of {&lt;code&gt;key: /path, value: path content}&lt;/code&gt; using &lt;code&gt;to_entries&lt;/code&gt; on &lt;code&gt;.paths&lt;/code&gt;. Then we filter this array to get rid of possible x-tensions checking the key value does not start by “x-“ using &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; as already seen in a previous example.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 11) Then we create an array of {path, method, summary, deprecated} objects. To get rid of possible extensions we reuse the &lt;code&gt;IN&lt;/code&gt; filter seen previously. The interesting thing in this step is how we define (line 15) and use (line 35) the &lt;code&gt;$path&lt;/code&gt; variable. Such variable definition is very useful to keep some values for later use without impacting the data flow. Indeed the data coming out of &lt;code&gt;.key as $ path&lt;/code&gt; is the exactly the same as the one that came in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Line 42) And to finish, we output tab separated raw text (adding deprecated mention when necessary). See line 48 how an &lt;code&gt;if then else&lt;/code&gt; can be used.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-operations.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-operations.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot;&gt;&lt;code&gt;# 1 - Selects paths objects
#--------------------------
# returns [{key: path, value: path value}]
.paths # Selects the paths property content
| to_entries # Transforms
             # { &quot;/resources&quot;: { &quot;get&quot;: {operation data}}} 
             # to 
             # [ { &quot;key&quot;: &quot;/resources&quot;, 
             #     &quot;value&quot;: { &quot;get&quot;: {operation data}} ]
| map(select(.key | test(&quot;^x-&quot;) | not)) # Gets rid of x-tensions
# 2 - Creates an array of operations
#-----------------------------------
# returns [{path, method, summary, deprecated}]
| map ( # Applies a transformation to each element
  .key as $path # Stores the path value (.key) 
                  # in a variable ($path) for later use
  | .value # Keeps only the path's content 
           # { &quot;get&quot;: {operation data}}
  | to_entries # Transforms 
               # { &quot;get&quot;: {operation data}}
               # to
               # [ { &quot;key&quot;: &quot;get&quot;, 
               #     &quot;value&quot;: {operation data}} ]
  | map( # Applies a transformation to each element
    select( # Keeps only elements for which the following is true
      # With IN, which returns true if the value is one of its
      # parameters, we can get rid of x- , parameters
      # description and summary properties
      .key | IN(&quot;get&quot;, &quot;put&quot;, &quot;post&quot;, &quot;delete&quot;, 
         &quot;options&quot;, &quot;head&quot;, &quot;patch&quot;, &quot;trace&quot;)
    )
    | # Creates a new JSON object
    {
      method: .key,
      path: $path, # Using the variable defined on line 4
      summary: .value.summary?,
      deprecated: .value.deprecated?
    }
  )[] # Flattens array to avoid having an array 
      # of array of {path, method, summary, deprecated}
) # Now we have an array of {path, method, summary, deprecated}
# 3 - Outputs tab separated raw text
#-----------------------------------
| map( # Applies a transformation to each element
  .method + &quot;\t&quot; + 
  .path + &quot;\t&quot; + 
  .summary + 
  (if .deprecated then &quot; (deprecated)&quot; else &quot;&quot; end)
)
[] # Flattens array for raw output&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;list-x-tensions&quot;&gt;List x-tensions&lt;/h2&gt;

&lt;p&gt;It can be of interest to know which extensions are used in an OpenAPI document, where they are located and what are their values.&lt;/p&gt;

&lt;asciinema-player poster=&quot;npt:26&quot; title=&quot;List API's paths&quot; author=&quot;Arnaud Lauret&quot; rows=&quot;24&quot; cols=&quot;80&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-xtensions.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r -f list-xtensions.jq demo-api-openapi.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Listing extensions, their locations and values&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers code-collapsed&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r -f list-xtensions.jq demo-api-openapi.json
[
  {
    &amp;quot;name&amp;quot;: &amp;quot;x-implementation&amp;quot;,
    &amp;quot;path&amp;quot;: [
      &amp;quot;paths&amp;quot;,
      &amp;quot;/accounts/{id}&amp;quot;,
      &amp;quot;get&amp;quot;,
      &amp;quot;x-implementation&amp;quot;
    ],
    &amp;quot;ref&amp;quot;: &amp;quot;#/paths/~1accounts~1{id}/get/x-implementation&amp;quot;,
    &amp;quot;value&amp;quot;: {
      &amp;quot;security&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;Only accounts belonging to user referenced in security data;\nreturn a 404 if this is not the case\n&amp;quot;,
        &amp;quot;source&amp;quot;: {
          &amp;quot;system&amp;quot;: &amp;quot;security&amp;quot;,
          &amp;quot;location&amp;quot;: &amp;quot;jwt.sub&amp;quot;
        },
        &amp;quot;fail&amp;quot;: 404
      }
    }
  },
  {
    &amp;quot;name&amp;quot;: &amp;quot;x-tension-example&amp;quot;,
    &amp;quot;path&amp;quot;: [
      &amp;quot;paths&amp;quot;,
      &amp;quot;/transfers/{id}&amp;quot;,
      &amp;quot;x-tension-example&amp;quot;
    ],
    &amp;quot;ref&amp;quot;: &amp;quot;#/paths/~1transfers~1{id}/x-tension-example&amp;quot;,
    &amp;quot;value&amp;quot;: {
      &amp;quot;some&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  {
    &amp;quot;name&amp;quot;: &amp;quot;x-implementation&amp;quot;,
    &amp;quot;path&amp;quot;: [
      &amp;quot;components&amp;quot;,
      &amp;quot;schemas&amp;quot;,
      &amp;quot;Account&amp;quot;,
      &amp;quot;properties&amp;quot;,
      &amp;quot;balance&amp;quot;,
      &amp;quot;properties&amp;quot;,
      &amp;quot;value&amp;quot;,
      &amp;quot;x-implementation&amp;quot;
    ],
    &amp;quot;ref&amp;quot;: &amp;quot;#/components/schemas/Account/properties/balance/properties/value/x-implementation&amp;quot;,
    &amp;quot;value&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The real time balance (not the daily one!)&amp;quot;,
      &amp;quot;source&amp;quot;: {
        &amp;quot;system&amp;quot;: &amp;quot;Core Banking&amp;quot;,
        &amp;quot;data&amp;quot;: &amp;quot;ZBAL0.RTBAL&amp;quot;
      }
    }
  },
  {
    &amp;quot;name&amp;quot;: &amp;quot;x-implementation&amp;quot;,
    &amp;quot;path&amp;quot;: [
      &amp;quot;components&amp;quot;,
      &amp;quot;schemas&amp;quot;,
      &amp;quot;Account&amp;quot;,
      &amp;quot;properties&amp;quot;,
      &amp;quot;balance&amp;quot;,
      &amp;quot;properties&amp;quot;,
      &amp;quot;currency&amp;quot;,
      &amp;quot;x-implementation&amp;quot;
    ],
    &amp;quot;ref&amp;quot;: &amp;quot;#/components/schemas/Account/properties/balance/properties/currency/x-implementation&amp;quot;,
    &amp;quot;value&amp;quot;: {
      &amp;quot;source&amp;quot;: {
        &amp;quot;system&amp;quot;: &amp;quot;Core Banking&amp;quot;,
        &amp;quot;data&amp;quot;: &amp;quot;ZBAL0.RTCUR&amp;quot;
      }
    }
  }
]&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The OpenAPI Specification is extensible, it means that custom data can be added to it for various purpose. The custom data structures can either be called extensions, x-tensions or vendor extension. In order to allow standard parsers to not raise an error, such custom data structure must be added using a specific key name starting by “x-“ in order to identify them. The tricky part with extensions in our case, is that they can be located (almost) anywhere in a document, the only sure thing is that they have a key name starting by “x-“. To learn more about this, check &lt;a href=&quot;/writing-openapi-swagger-specification-tutorial-part-9-extending-the-openapi-specification/&quot; target=&quot;openapi&quot;&gt;OpenAPI (Swagger) 2.0 Tutorial - Part 9 - Extending the OpenAPI Specification&lt;/a&gt; (note: extension management did not change between version 2.0 and 3).&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/jq-openapi-extensions.png&quot; /&gt;
      
    &lt;/div&gt;

&lt;p&gt;To list all extensions as shown in the terminal listing above, we’ll learn how to use the following JQ filters:&lt;/p&gt;

&lt;table class=&quot;table table-sm&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th span=&quot;3&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;paths&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Lists all possible paths in documents, each path is represented as an array&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#paths,paths(node_filter),leaf_paths&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;br /&gt;&lt;code&gt;value1 + value2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Adds/concatenates/merges numbers/strings/arrays or objects&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;Addition:+&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;map_values(filter)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Updates all provided values with filter&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#map(x),map_values(x)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;gsub(regex;replacement)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;gsub(&quot;toreplace&quot;;&quot;replaced)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replaces a string within a string&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#gsub(regex;string),gsub(regex;string;flags)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;join(separator)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;join(&quot;,&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Joins string with a separator&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#join(str)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;getpath(path)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;getpath([&quot;a&quot;,&quot;path&quot;])&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns value corresponding to a path (defined as an array), see also paths&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#getpath(PATHS)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The following JQ script consist in 3 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(Line 1) First, we need to store the full document for later use (to get the extensions value)&lt;/li&gt;
  &lt;li&gt;(Line 5) Then we list all extensions paths by using &lt;code&gt;paths&lt;/code&gt; which returns all possible paths and removing the ones that do not have a leaf starting with a “x-“.&lt;/li&gt;
  &lt;li&gt;(Line 18) And last step, we build an object containing data for each found extension. This data consists in a name, a path, a JSON pointer named ref and the value.
    &lt;ol&gt;
      &lt;li&gt;(Line 26) A in-file JSON pointer starts with “#/” and then each level is separated from its neighbour by a “/”. This is easily achieved by using &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;. But a JSON pointer cannot contains “/”. That’s why we use &lt;code&gt;map_values&lt;/code&gt; in order to replace them by &lt;code&gt;~1&lt;/code&gt; with &lt;code&gt;gsub&lt;/code&gt;. The &lt;code&gt;map_values&lt;/code&gt; works like &lt;code&gt;map&lt;/code&gt; but do not return result in an array and therefore allows to do in place modification.&lt;/li&gt;
      &lt;li&gt;(Line 42) In order to get the extension value we use &lt;code&gt;getpath&lt;/code&gt; on the saved document. Note how we have to define a &lt;code&gt;$path&lt;/code&gt; variable to use it in getpath.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-xtensions.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-xtensions.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot;&gt;&lt;code&gt;# 1 - Stores document for later use
#----------------------------------
. as $document # Variable used on line 23 to get 
               # extension value from its path
# 2 - Lists extensions paths
#---------------------------
| [
  paths # Lists ALL possible paths in documents 
        # (each path is represented as an array)
  | select( # Keeps only the values for which 
            # what follows return true
    .[-1] # Gets the path leaf (last item in array)
          # Equivalent to .[.|length-1]
    | tostring # Converts to string for next step 
    | test(&quot;^x-&quot;) # Checks if leaf name starts with x-
  )
]
# 3 - Sets all data for each extension occurence
#-----------------------------------------------
# returns an array of {name, path, ref, value}
| map( # Applies a filter to each element
  {
    name: .[-1], # Gets the path leaf (last item in array)
                 # Equivalent to .[.|length-1]
    path: .,
    # 3.1 - Creates a JSON pointer to extension
    #------------------------------------------
    ref: (
      &quot;#/&quot; + # adds numbers, strings, arrays or objects
      (
        . 
        | map_values( # Applies a filter on each value
                      # (in place modification)
          gsub(&quot;/&quot;;&quot;~1&quot; ) # replaces a value in a string
                          # / must be replace by ~1
                          # in a JSON pointer
        )
        | join(&quot;/&quot;) # concatenates string with 
                  # a separator
      )
    ), 
    # 3.2 - Gets extension value from original document
    #--------------------------------------------------
    value: (
      . as $path # storing value path in 
                 # a variable for next step
      | $document | getpath($path) # extracting value 
                                   # from original document
                                   # variable defined on line 3
    )
  }
)&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;process-multiple-openapi-files&quot;&gt;Process multiple OpenAPI files&lt;/h1&gt;

&lt;p&gt;So, we have learned to use JQ filters on a single OpenAPI file, but what if we need to work on multiple files? In this section we’ll learn how to invoke JQ on multiple files and see it in action on two OpenAPI files.&lt;/p&gt;

&lt;h2 id=&quot;invoke-jq-on-multiple-files&quot;&gt;Invoke JQ on multiple files&lt;/h2&gt;

&lt;p&gt;JQ’s filename parameter can contain wildcards, allowing to work on multiple files at once.&lt;/p&gt;

&lt;asciinema-player poster=&quot;npt:1:20&quot; title=&quot;Invoke JQ on multiple files&quot; rows=&quot;24&quot; cols=&quot;80&quot; author=&quot;Arnaud Lauret&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-1/invoke-jq-multiple-files.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;p&gt;We can, for example, extract the API name of each OpenAPI file using the following command as shown in the following listing (the github repository contains two OpenAPI demo files, both having the &lt;code&gt;.json&lt;/code&gt; extension).&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -r &amp;#39;.info.title&amp;#39; *.json

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Processing multiple files with JQ&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -r &amp;#39;.info.title&amp;#39; *.json 
Banking API
Another Example API&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;p&gt;That’ looks good, but if the filter outputs JSON, the result is a concatenation of the JSONs returned for each file, which is not a valid JSON document, as shown on line 1 of the following listing. In order to get something valid, like an array containing all results, you can pipe this result to a &lt;code&gt;jq -s&lt;/code&gt; command (line 11) which will magically creates a valid JSON array. The &lt;code&gt;-s&lt;/code&gt; flag (or &lt;code&gt;--slurp&lt;/code&gt;) reads the entire input stream into a large array and run the filter just once instead of running the filter for each JSON object in the input. Not also that we didn’t provide any filter to the second JQ command. The ‘.’ filter is actually optional (either you use the -s flag or not).&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq &amp;#39;{name: .info.title, file: .info.version}&amp;#39; *.json
jq &amp;#39;{name: .info.title, file: .info.version}&amp;#39; *.json | jq -s

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Pipe to jq -s (or --slurp) to create arrays&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers code-collapsed&quot; data-line=&quot;1,11&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq &amp;#39;{name: .info.title, file: .info.version}&amp;#39; *.json
{
  &amp;quot;name&amp;quot;: &amp;quot;Another API&amp;quot;,
  &amp;quot;file&amp;quot;: &amp;quot;1.2&amp;quot;
}
{
  &amp;quot;name&amp;quot;: &amp;quot;Banking API&amp;quot;,
  &amp;quot;file&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;
}

[apihandyman.io]$ jq &amp;#39;{name: .info.title, file: .info.version}&amp;#39; *.json \
                | jq -s
[
  {
    &amp;quot;name&amp;quot;: &amp;quot;Another API&amp;quot;,
    &amp;quot;file&amp;quot;: &amp;quot;1.2&amp;quot;
  },
  {
    &amp;quot;name&amp;quot;: &amp;quot;Banking API&amp;quot;,
    &amp;quot;file&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;
  }
]&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Obviously, when it comes to work with multiple elements on the command line, you can use your favorite commands such as xargs and/or find as shown below.&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;ls *.json | xargs jq -r &amp;#39;.info.title&amp;#39;
find . -type f -name &amp;quot;*.json&amp;quot; -exec jq -r &amp;#39;.info.title&amp;#39; {} \;
find . -type f -name &amp;quot;*.json&amp;quot; | xargs jq -r &amp;#39;.info.title&amp;#39;

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Use JQ with xargs and find&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code&gt;[apihandyman.io]$ ls *.json | \
                  xargs jq -r &amp;#39;.info.title&amp;#39;
Banking API
Another Example API

[apihandyman.io]$ find . -type f -name &amp;quot;*.json&amp;quot; -exec \
                  jq -r &amp;#39;.info.title&amp;#39; {} \;
Banking API
Another API

[apihandyman.io]$ find . -type f -name &amp;quot;*.json&amp;quot; | \
                xargs jq -r &amp;#39;.info.title&amp;#39;
Banking API
Another API
# Note that find -exec is far less faster than
# find | xargs when working a large number of files&lt;/code&gt;&lt;/pre&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;list-basic-api-information-from-multiple-files&quot;&gt;List basic API information from multiple files&lt;/h2&gt;

&lt;p&gt;For this last (but not least) example, we’ll gather basic information from different OpenAPI files.&lt;/p&gt;

&lt;asciinema-player poster=&quot;npt:1:20&quot; title=&quot;Invoke JQ on multiple files&quot; rows=&quot;24&quot; cols=&quot;80&quot; author=&quot;Arnaud Lauret&quot; src=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-apis.cast&quot;&gt;&lt;/asciinema-player&gt;

&lt;p&gt;We’ll build an array of objects containing for each file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Information about the file itself (its type, version and name),&lt;/li&gt;
  &lt;li&gt;A subset of the info section (API’s name, version and a shorten description)&lt;/li&gt;
  &lt;li&gt;The number of operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that now jq is used on &lt;code&gt;*.json&lt;/code&gt; files and its results is piped into another jq with &lt;code&gt;-s&lt;/code&gt; flag in order to generate an array (as seen in previous section).&lt;/p&gt;

&lt;div&gt;
  &lt;pre class=&quot;copy-hidden&quot;&gt;jq -f list-apis.jq *.json | jq -s

&lt;/pre&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;Getting some basic information about different APIs&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default copy-btn&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-bash line-numbers code-collapsed&quot;&gt;&lt;code&gt;[apihandyman.io]$ jq -f list-apis.jq *.json | jq -s
[
  {
    &amp;quot;specification&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;swagger&amp;quot;,
      &amp;quot;version&amp;quot;: &amp;quot;2.0&amp;quot;,
      &amp;quot;file&amp;quot;: &amp;quot;demo-another-api-swagger.json&amp;quot;
    },
    &amp;quot;name&amp;quot;: &amp;quot;Another API&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.2&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;Does almost nothing&amp;quot;,
    &amp;quot;operations&amp;quot;: 1
  },
  {
    &amp;quot;specification&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;openapi&amp;quot;,
      &amp;quot;version&amp;quot;: &amp;quot;3.0.0&amp;quot;,
      &amp;quot;file&amp;quot;: &amp;quot;demo-api-openapi.json&amp;quot;
    },
    &amp;quot;name&amp;quot;: &amp;quot;Banking API&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0-snapshot&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;The Banking API provides access to the [Banking Company](http://www.bankingcompany.com) services, which include bank account information, beneficiaries, and money transfer management&amp;quot;,
    &amp;quot;operations&amp;quot;: 14
  }
]&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[0].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To get that result, we need to use the following new JQ filters:&lt;/p&gt;

&lt;table class=&quot;table table-sm&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th span=&quot;3&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;input_filename&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the name of the file being processed&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#input_filename&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;indices(string)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;indices(&quot;foo&quot;)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;indices(.foo)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the list indices (in array of string) where a string is found&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#indices(s)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.[start:end]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.[10:15]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns a subset of an array or a substring&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Array/StringSlice:.[10:15]&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The following JQ scripts which generates an array of objects containing information about the specification file itself, the API and its number of operations is composed of 3 parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(Line 2) Part 1 deals with file information. When working on multiple files, it can be very interesting to know from which file comes the data. It’s the case here, hopefully, the &lt;code&gt;input_filename&lt;/code&gt; returns the name of the file being processed (line 8).&lt;/li&gt;
  &lt;li&gt;(Line 11) Part 2 deals with data coming from the info section. The summary is a shorter version of &lt;code&gt;.info.description&lt;/code&gt;. If it contains a &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; tag (found using &lt;code&gt;indices&lt;/code&gt;) we split right before it using &lt;code&gt;.[0:tag position]&lt;/code&gt;. If not we take the first hundred characters (or the whole string if shorter). Note how &lt;code&gt;elif&lt;/code&gt; is used to have more conditions.&lt;/li&gt;
  &lt;li&gt;(Line 28) Part 3 concerns counting operations, it is done almost like counting HTTP status codes.&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;!-- codeblocksize: 20 --&gt;
  &lt;div class=&quot;code-title&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot;&gt;list-apis.jq&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;code-toolbar-for-title&quot;&gt;
    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.parentElement.children[2], this.parentElement.parentElement.parentElement.children[3].children[0])&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/code/api-toolbox-jq-and-openapi/part-1/list-apis.jq&quot;&gt;&lt;i class=&quot;fas fa-file-code&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-copy&quot;&gt;&lt;i class=&quot;fas fa-paste&quot;&gt;&lt;/i&gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;language-jq line-numbers code-collapsed&quot;&gt;&lt;code&gt;{ 
  # 1 - Information about the file itself
  #--------------------------------------
  specification: {
    # Determines the type of specification and the version used
    type: (if has(&quot;openapi&quot;) then &quot;openapi&quot; else &quot;swagger&quot; end),
    version: (if has(&quot;openapi&quot;) then .openapi else .swagger end),
    file: input_filename # The file name because we work
                         # on multiple files
  },
  # 2 - Information about the API (.info)
  #--------------------------------------
  name: .info.title,
  version: .info.version,
  summary: (
    # indices returns an array containing all indices of the
    # provided string found in the input value
    (.info.description | indices(&quot;&amp;#60;!--more--&amp;#62;&quot;)[0]) as $more |
    if $more != null then 
      .info.description[0:$more]
      # summary cannot be longer than 100 characters
    elif (.info.description | length) &amp;#60;= 100 then
      .info.description
    else
      .info.description[0:100] + &quot;[...]&quot;
    end
  ),
  # 3 - Number of operations (an operation is get /path for example)
  #-----------------------------------------------------------------
  operations: (
    [ # Creates an array containing all HTTP methods
      # to count the number of operations
      .paths[] | # Returns the content of eah path object
      keys[] | # Returns the keys of the returned object
               # and flattens the array
      select( # Keeps only the value for which what follows is true
         IN(&quot;get&quot;, &quot;put&quot;, &quot;patch&quot;, &quot;post&quot;, 
            &quot;delete&quot;, &quot;head&quot;, &quot;options&quot;)
      )
    ] | length # Return the length of the array,
               # hence the number of operations
  )
}&lt;/code&gt;&lt;/pre&gt;
  &lt;div class=&quot;code-bottom-toolbar&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-block&quot; onclick=&quot;toggle(this, this.parentElement.parentElement.children[2], this.parentElement.parentElement.children[1].children[0].children[0], true)&quot;&gt;&lt;i class=&quot;fa fa-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;That’s it for this first JQ and OpenAPI post. You know now how to invoke JQ on one or more files and you know how to use the 30ish following JQ filters. These are only a subset of all available filters, check &lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/&quot; target=&quot;jq&quot;&gt;JQ’s documentation&lt;/a&gt; to discover them all.&lt;/p&gt;

&lt;table class=&quot;table table-sm&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th span=&quot;3&quot;&gt;JQ Filters&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;



    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns what is provided&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Identity:.&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.foo&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.foo.bar&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns element targeted by period separated path&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#ObjectIdentifier-Index:.foo,.foo.bar&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.foo?&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Does not return an error if targeted element does not exist&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#OptionalObjectIdentifier-Index:.foo?&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns object's keys (properties names)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#keys,keys_unsorted&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;br /&gt;&lt;code&gt;{name1: filter, name2: another_filter}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Creates an object&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#ObjectConstruction:{}&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;[1, 2, 3]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;[.foo, .bar]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;[.items[].name]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Creates an array&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Arrayconstruction:[]&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;map(filter)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Applies a filter to each element of an array&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#map(x),map_values(x)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;select(filter returning boolean)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns element for which filter returns true&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#select(boolean_expression)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;IN(value1, value2, value3)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns true if element is one of the values&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#SQL-StyleOperators&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;test(regex)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;test(regex;flags)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns true if element matches regex&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#test(val),test(regex;flags)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;not&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns opposite boolean element&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#and/or/not&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;group_by(path_expression)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;group_by(.foo)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Groups array elements according to provided path (returns array of array)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#group_by(path_expression)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;sort_by&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns element sort by value or path_expression&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#sort,sort_by(path_expression)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;length&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the length of element (array, object, string, null)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#length&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Turns any element into a string&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#tostring&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;to_entries&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Takes an object and returns an array of key and value objects&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#to_entries,from_entries,with_entries&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.foo as $some_variable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Defines a reusable variable&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Variable/SymbolicBindingOperator:...as$identifier|...&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;if condition then filter else another_filter end&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Conditions filter execution&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#if-then-else&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;paths&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Lists all possible paths in documents, each path is represented as an array&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#paths,paths(node_filter),leaf_paths&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;getpath(path)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;getpath([&quot;a&quot;,&quot;path&quot;])&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns value corresponding to a path (defined as an array), see also paths&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#getpath(PATHS)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;map_values(filter)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Updates all provided values with filter&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#map(x),map_values(x)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;br /&gt;&lt;code&gt;value1 + value2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Adds/concatenates/merges numbers/strings/arrays or objects&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;Addition:+&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;gsub(regex;replacement)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;gsub(&quot;toreplace&quot;;&quot;replaced)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replaces a string within a string&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#gsub(regex;string),gsub(regex;string;flags)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;join(separator)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;join(&quot;,&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Joins string with a separator&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#join(str)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;indices(string)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;indices(&quot;foo&quot;)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;indices(.foo)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the list indices (in array of string) where a string is found&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#indices(s)&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.[]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.[index]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns all or some elements of an object or array identified by an index&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Array/ObjectValueIterator:.[]&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.[start:end]&lt;/code&gt;&lt;br /&gt;&lt;code&gt;.[10:15]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns a subset of an array or a substring&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#Array/StringSlice:.[10:15]&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;input_filename&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the name of the file being processed&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://stedolan.github.io/jq/manual/v1.6/#input_filename&quot; target=&quot;jq&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You may also have learn a few things about an OpenAPI document structure. If you want to fully master it, look at the &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot; target=&quot;openapi&quot;&gt;OpenAPI Map&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot; target=&quot;openapi&quot;&gt;&lt;img src=&quot;/images/commons/openapi/openapi-map-v3.png&quot; /&gt;&lt;/a&gt;
      
    &lt;/div&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next&lt;/h1&gt;

&lt;p&gt;In next post, we’ll learn to search into OpenAPI files and simplify JQ code by using command line arguments, functions and modules.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="API Toolbox" /><summary type="html">Ever wanted to quickly find, extract or modify data coming from some JSON documents on the command line? JQ is the tool you’re looking for. In this 4 parts post series, you’ll discover why and how I use JQ with OpenAPI Specification files. But more important, you’ll get some basic and more advanced example of how to use JQ on any JSON document to get and modify JSON data as you want. In this first part we’ll focus on what is JQ, why I use it with OpenAPI files and we’ll learn how to invoke JQ and discover some of the many JQ filters that can be used to extract data from JSON.</summary></entry><entry><title type="html">Lessons learned while demoing API to non-developers</title><link href="https://apihandyman.io/lessons-learned-while-demoing-api-to-non-developers/" rel="alternate" type="text/html" title="Lessons learned while demoing API to non-developers" /><published>2019-11-22T00:00:00+00:00</published><updated>2019-11-22T00:00:00+00:00</updated><id>https://apihandyman.io/lessons-learned-while-demoing-api-to-non-developers</id><content type="html" xml:base="https://apihandyman.io/lessons-learned-while-demoing-api-to-non-developers/">&lt;p&gt;What would you do if you had to demo API to non-developers in a highly-constrained context? How would you do without curl, Postman or any other API tool usually used? How would you do without your usual fun API examples? I had to do that a few weeks ago and was quite happy by the questions that arose and the solutions found. The whole story definitely deserves a post in order to share what I’ve learned!&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-request&quot;&gt;The request&lt;/h1&gt;

&lt;p&gt;A part of my job is explaining to developers and non-developers what are APIs and what can be done with them from both technical and business perspectives. I regularly do some presentations or training to do so, especially a very first API 101 session simply consisting in some slides without any hands-on. A few weeks ago, I received a request that seemed quite simple at first: “we want to organize the usual API 101 for non developers … but this time, it would be great to let them make &lt;em&gt;code&lt;/em&gt; some API stuff. And you have less than 45 minutes, probably half an hour”. The objective was to make these people grasp a little bit more than usual what APIs are and let them understand their simplicity during this first session.&lt;/p&gt;

&lt;p&gt;At first, I was like: “oh no problem, we’ll use curl and Postman to make calls to the SWAPI API (an API providing information about the Star Wars movies) or the PokeAPI (providing information Pokemons), it shouldn’t take more than 10 minutes during the presentation, so even with half an hour that should be OK. Unfortunately that was not that simple.&lt;/p&gt;

&lt;h1 id=&quot;beware-the-context-when-choosing-hands-on-tools&quot;&gt;Beware the context when choosing hands-on tools&lt;/h1&gt;

&lt;p&gt;Problems started with the tooling. Indeed, the people attending this session have standard-for-non-developer laptops. These laptops do not come with Postman or curl, and even if the attendees were admins (highly improbable) on these laptops, installing tools would be far too complicated and would take a too long time in such a short session (and it would probably ruin the “APIs are simple” message).&lt;/p&gt;

&lt;p&gt;OK, no problems, only solutions. These machines come with Windows 10 and PowerShell, I’m not familiar with it but I thought “Well, a PowerShell-curl probably exists”. Yes it does, there are &lt;code&gt;Invoke-RestMethod&lt;/code&gt;and &lt;code&gt;Invoke-WebRequest&lt;/code&gt; that seem to do the job. Unfortunately, I did not succeed to make them work with our f****** corporate proxy. As far as I’ve seen, it would have required to make too much complicated stuff and would have taken too much time (I may have missed something).&lt;/p&gt;

&lt;p&gt;And there was also this “code some API stuff” idea. One of my colleagues suggested to use &lt;a href=&quot;https://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;. Brilliant! It’s a browser based tool and therefore it requires absolutely no installation. It allows to tinker with HTML, JS and CSS. I first checked that it was not blocked by our corporate proxy … and yes! It worked. I discovered that JSFiddle (and other similar tools) comes with some useful features (if you pay of course) for training sessions, especially private fiddles. That could be interesting to manage calls to API needing authentication (to safely store credentials). I keep that in a corner of my mind for another time as I didn’t want to use secured APIs during this session. I developed a simple example with basic HTML and JavaScript doing an API call.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/lessons-learned-while-demoing-api-to-non-developers/jsfiddle.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Using JSFiddle and HTML/JS code is maybe too complex for non-developers&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;I thought I could let attendees modify it to make some API calls themselves. From the very beginning I was not comfortable with that. Hopefully, I could test the idea with the persons (non-developers) who made the request and specifically asked for the “code some API stuff”. It didn’t take us long to realize that was a terrible idea. JSFiddle would look terribly complex and having to modify some JS code would be a nightmare for people who never have done that before.&lt;/p&gt;

&lt;p&gt;OK, if attendees could not actually write code in that context, they could at least use their browser to call an API, that’s web APIs we had to talk about after all. All that is needed is typing something in the browser’s address bar. And people could “code” some API stuff by tweaking the URLs and parameters. We, all agreed that was the best option in our context and it fulfilled the requirements.&lt;/p&gt;

&lt;p&gt;But which API to use?&lt;/p&gt;

&lt;h1 id=&quot;take-care-of-finding-api-examples-adapted-to-the-audience&quot;&gt;Take care of finding API examples adapted to the audience&lt;/h1&gt;

&lt;p&gt;I’m used to use &lt;a href=&quot;https://swapi.co/&quot;&gt;SWAPI&lt;/a&gt; (Star War API) when demoing APIs in such 101 sessions. It’s simple, fun and requires no authentication. But, in that context, I realized that using SWAPI would lead to two problems.&lt;/p&gt;

&lt;p&gt;The first problem was simply technical. In such demo I usually use curl to call SWAPI. But in that context I had to use a browser and unfortunately SWAPI is too smart, it handles content negotiation very well. Indeed, when you call SWAPI from a browser, you don’t get raw JSON data but an HTML page. But, I wanted to show some ugly raw JSON data and not HTML! So, I found another funny API, the &lt;a href=&quot;http://www.dnd5eapi.co&quot;&gt;D&amp;amp;D&lt;/a&gt; API. Typing the &lt;a href=&quot;http://www.dnd5eapi.co/api/classes&quot;&gt;http://www.dnd5eapi.co/api/classes&lt;/a&gt; URL in the browser’s address bar shows some beautifully-ugly JSON raw data listing available characters class in the fifth edition of Dungeons &amp;amp; Dragons rule books. I thought it was perfect … but not at all: that’s the seconde problem.&lt;/p&gt;

&lt;p&gt;Indeed, the second problem with such fun API is functional. SWAPI or D&amp;amp;D are totally fun from my perspective, but their fields were thousands light-years away of what matters for the attendees. For this demo we needed an API that would resonate with them. I needed an example that makes sense for people in the financial industry. Hopefully, I found a more suitable API: the &lt;a href=&quot;https://exchangeratesapi.io/&quot;&gt;Foreign Exchange Rate API&lt;/a&gt;. This API provides current and historical foreign exchange rates published by the European Central Bank. Basically, if you want to know how much Japan Yen you can get for a Euro, this API is for you. OK, forex is not a field as fun as Star Wars and D&amp;amp;D but this API provides data the attendees are familiar with (especially the ISO 4217 currency codes), it’s dead simple and provides enough functions and parameters to let total API beginners have fun with it.&lt;/p&gt;

&lt;p&gt;Once the API chosen, I listed the API calls the attendees would have to do and the questions I would ask them during the “API call exercises” part of the session. I was almost done but I wanted to show how this Foreign Exchange Rate API could be used in a simple application along with another API (to show how by combining easily simple API you can do interesting stuff).&lt;/p&gt;

&lt;h1 id=&quot;build-an-all-in-one-demo-application&quot;&gt;Build an all-in-one demo application&lt;/h1&gt;

&lt;p&gt;So, I wrote a simple &lt;a href=&quot;https://arno-di-loreto.github.io/simple-api-demo/&quot;&gt;webapp&lt;/a&gt; (using &lt;a href=&quot;https://jsfiddle.net/arnaudlauret/8catx91d&quot;&gt;JS Fiddle&lt;/a&gt; and &lt;a href=&quot;https://github.com/arno-di-loreto/simple-api-demo&quot;&gt;Github pages&lt;/a&gt; by the way) combining the Foreign Exchange Rate API and the &lt;a href=&quot;https://restcountries.eu/&quot;&gt;REST Countries&lt;/a&gt; API which provide information about countries such as languages, borders, flags, … It consists in a simple form that let users convert an amount in a source currency to a target currency. It also shows trivia about the selected currencies such as the countries which use them and their flags. The available currencies and exchange rate come from the exchange rate API and the country/currency relationship and country flag come from REST country API.&lt;/p&gt;

&lt;p&gt;And then I thought it would be interesting to show the actual API calls that were triggered when using the web application. I first though to use the browser’s developer tools. Indeed, using the network panel and filtering to XHR request, you can see the API calls made by the JavaScript code. But again, that would have been too complex just like showing them JSFiddle (IMHO).&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/lessons-learned-while-demoing-api-to-non-developers/browser-dev-tools.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Filtering XHR request in browser dev tools? Too scary!&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;So I came to the idea of adding an API call log directly within the web application. This log shows which called are done and why. API calls are log during the webpage initial loading but also when users interact with it. On each new action, the new call are added to the top of the list and the previous calls are shown in light grey.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/lessons-learned-while-demoing-api-to-non-developers/demo-app.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Demo application including detailed API call log? Far more non-developers friendly!&lt;/p&gt;
    &lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So I was totally ready for this special 101 session with a bonus hands-on. And hopefully everything went very well, but even if that presentation was very important (because of the very important people in the audience), I will remember more its preparation as it helped me (re)discover very interesting things. Preparing this unusual session reminded me that whatever you do: beware the context before making any choice. I’m also quite happy to have find this idea of building an all-in-one demo application which explain what happens behind the hood and will reuse and expand this concept in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS: Oh, and I almost forgot … it also reminded me how so many tools are unable to deal with corporate proxies easily. I may write something about that one day.&lt;/em&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="Avocado" /><summary type="html">What would you do if you had to demo API to non-developers in a highly-constrained context? How would you do without curl, Postman or any other API tool usually used? How would you do without your usual fun API examples? I had to do that a few weeks ago and was quite happy by the questions that arose and the solutions found. The whole story definitely deserves a post in order to share what I’ve learned!</summary></entry><entry><title type="html">API Design Tips And Tricks - What if consumers can’t do PATCH, PUT or DELETE?</title><link href="https://apihandyman.io/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete/" rel="alternate" type="text/html" title="API Design Tips And Tricks - What if consumers can't do PATCH, PUT or DELETE?" /><published>2019-11-07T00:00:00+00:00</published><updated>2019-11-07T00:00:00+00:00</updated><id>https://apihandyman.io/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete</id><content type="html" xml:base="https://apihandyman.io/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete/">&lt;p&gt;There are quite many APIs out there taking advantage of all standard HTTP methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;). Unfortunately, there are still some cases where consumers can’t use them all. As far as I know, &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; do not cause any problem at all. But as an API provider, do not take for granted that &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and the more dreaded &lt;code&gt;PATCH&lt;/code&gt; HTTP methods can always be used by your consumers. I encountered this problem several times throughout the years and no later than a few weeks ago. Let’s see why and how to solve this problem.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-could-prevent-consumers-from-using-put-patch-or-delete&quot;&gt;What could prevent consumers from using PUT, PATCH or DELETE?&lt;/h1&gt;

&lt;p&gt;I encountered this problem several times, the first one was probably around 2012 and the last one in 2019 a few weeks ago (hence this post). These two experiences, reflect the two possible causes of the inability of consumers to use HTTP methods such as &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt;: network or framework limitations.&lt;/p&gt;

&lt;h2 id=&quot;network-limitations&quot;&gt;Network limitations&lt;/h2&gt;

&lt;p&gt;The first time I encountered such problem, it was around 2012. I was building my first “RESTish” API. At that time I was a total beginner regarding REST APIs (and made quite a few mistakes, but that’s another story). I had read a some books and blog posts about such APIs and discovered that you had to use the HTTP semantic when designing them. So, here I was, carefully choosing the adequate HTTP method depending on what I wanted to do: &lt;code&gt;GET&lt;/code&gt; to read something, &lt;code&gt;POST&lt;/code&gt; to create something, &lt;code&gt;PUT&lt;/code&gt; to replace/update something and &lt;code&gt;DELETE&lt;/code&gt; to delete something (yep, I did not used &lt;code&gt;PATCH&lt;/code&gt; at that time).&lt;/p&gt;

&lt;p&gt;This API was supposed to be used by various consumers including a website built by another team in another company belonging to the same group as mine. This consumer had to pass through various internal network zones of the group to access our APIs. Unfortunately, on their side all their reverse proxies and firewalls only allowed the use of &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. Why? Because for a very long time that was all what websites (or most HTTP based software) needed to operate, so anything else was forbidden (usually for security purpose).&lt;/p&gt;

&lt;h2 id=&quot;framework-limitations&quot;&gt;Framework limitations&lt;/h2&gt;

&lt;p&gt;The last time, I encountered this problem was a few weeks ago in 2019. I am now a little bit more experienced (I even wrote a book about web API design, but that’s another story you can read &lt;a href=&quot;/few-things-i-learned-writing-the-design-of-web-apis&quot;&gt;here&lt;/a&gt;) and a part of my job is helping people design APIs.&lt;/p&gt;

&lt;p&gt;One of the team I’m working with is building an API that is supposed to be used in some famous SAAS CRM solution. As their API deals with some updates, it uses the &lt;code&gt;PATCH&lt;/code&gt; HTTP method as said in our API design guidelines. Unfortunately, the team in charge of calling this API from the SAAS solution encountered some unexpected problems. The SAAS solution’s development framework only knows &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;, it’s impossible to make a call to an external API using &lt;code&gt;PATCH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some other cases of “framework limitations” I encountered were due to the use of ancient on-premise COTS (Commercial-Off-The-Shelf) facing the same problem as this SAAS solution and also the use of old browsers.&lt;/p&gt;

&lt;p&gt;Whatever the reason, that’s a real problem: some consumers may simply be unable to use all of the API features. There are two ways to solve the problem: solving the root cause and if that is not possible find a design workaround.&lt;/p&gt;

&lt;h1 id=&quot;first-solution-solve-the-root-cause&quot;&gt;First solution: solve the root cause&lt;/h1&gt;

&lt;p&gt;Solving the root cause regarding the network limitations shouldn’t be a problem. Indeed, I think that it is probably not a problem anymore, so there’s nothing to solve. But just in case and more for historical purpose, here’s how to handle it. There are probably two categories of people to talk to: the security people and the network people. Back in 2012, when I was building my first API, I encountered the same problem as my colleagues. Our mobile application couldn’t use our brand new API because our reverse proxies also only allowed &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. To solve this problem, I just had to explain to those people that our mobile application actually needed &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; to work properly and show them how other companies were doing to demystify the “new” HTTP methods. Thanks to that, I learned one important thing: before considering any design modification due to some contextual problems, I always check if the problem cannot be solve.&lt;/p&gt;

&lt;p&gt;Unfortunately, my 2012 fellow colleagues, didn’t had the same chance. Modifying the reverse proxies configuration was more complicated for them and would have took a longer time than what we had. And more recently, my colleagues also couldn’t fix the root cause: the framework’s bug or missing feature has been known by the SAAS company for at least 3 years and still hasn’t been solve. So I had to find a design workaround.&lt;/p&gt;

&lt;h1 id=&quot;last-resort-solution-find-a-design-workaround&quot;&gt;Last resort solution: find a design workaround&lt;/h1&gt;

&lt;p&gt;How to modify an API design which takes advantage of the HTTP method semantics in order to be used by consumers which cannot use all the API’s HTTP method? There are two ways to do so: the bad one and the clever one.&lt;/p&gt;

&lt;p&gt;The bad way of modifying the API design to solve this problem would be to simply get rid of the HTTP semantic and simply use &lt;code&gt;POST&lt;/code&gt; for everything (or possibly &lt;code&gt;GET&lt;/code&gt; to read and &lt;code&gt;POST&lt;/code&gt; for the rest). Not using HTTP method semantic is not the problem here, the problem is to heavily modify a design for only a handful of consumers. In Star Trek II The Wrath of Khan (1982), Mr Spock says “Logic clearly dictates that the needs of the many outweigh the needs of the few.”, and he is totally right (at least when it comes to designing APIs). It means, that to solve this problem, the design must be modified in a sufficiently clever way that allows the handful of HTTP restricted consumers to use the API without bothering the vast majority which can shamelessly use all of HTTP methods.&lt;/p&gt;

&lt;p&gt;So, let’s do it the clever way. The minimal set of HTTP methods that can be used by any HTTP consumer is composed of &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. As we need to find a replacement to methods such as &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; which are not safe (they may change resources), the only possible solution is to use &lt;code&gt;POST&lt;/code&gt; to simulate them (because &lt;code&gt;GET&lt;/code&gt; is safe). In order to be able to make the difference between a regular &lt;code&gt;POST&lt;/code&gt; and a &lt;code&gt;POST&lt;/code&gt; simulating let’s say a &lt;code&gt;PATCH&lt;/code&gt; request, a parameter indicating the real HTTP method must be provided. This can be done by providing a HTTP header named &lt;code&gt;X-HTTP-Method&lt;/code&gt;, &lt;code&gt;X-Method-Override&lt;/code&gt; or &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt; (I prefer the last one, it seems to be used more than the others) which value is &lt;code&gt;PATCH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A consumer which is not restricted in its use of HTTP methods will do a regular &lt;code&gt;PATCH&lt;/code&gt; request as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /some-resources/some-id HTTP/1.1

{
  &quot;some&quot;: &quot;data&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A consumer which cannot do a &lt;code&gt;PATCH&lt;/code&gt; request, will send a &lt;code&gt;POST&lt;/code&gt; request along with the parameter stating the “true” HTTP method to be used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /some-resources/some-id HTTP/1.1
X-HTTP-Method-Override: PATCH

{
  &quot;some&quot;: &quot;data&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, what if I tell you that some (really annoying) consumers limited to &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; are also unable to send custom HTTP headers? Better be ready to also allow them to pass the overridden HTTP method as a query parameter such as &lt;code&gt;_httpMethod&lt;/code&gt; or &lt;code&gt;_method&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /some-resources/some-id?_httpMethod=PATCH HTTP/1.1

{
  &quot;some&quot;: &quot;data&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Such design trick is implemented in many APIs and products offering APIs, but don’t be fooled by its simplicity, there are some consequences that you must be aware of.&lt;/p&gt;

&lt;h1 id=&quot;consequences&quot;&gt;Consequences&lt;/h1&gt;

&lt;p&gt;Using this trick will have consequences on security, API gateway configuration, documentation and logs.&lt;/p&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;

&lt;p&gt;First above all: security. Let’s say that an API provides the following operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;POST /resources&lt;/code&gt; which creates some resource, requires the &lt;code&gt;create&lt;/code&gt; Oauth scope&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DELETE /resources&lt;/code&gt; which allows to massively delete some resources, requires the &lt;code&gt;delete&lt;/code&gt; Oauth scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the HTTP method override is implemented without caution (at the actual implementation or on the API gateway securing the API), a consumer which only has the &lt;code&gt;create&lt;/code&gt; scope could unduly massively delete resources by sending a &lt;code&gt;POST /resources?_httpMethod=DELETE&lt;/code&gt; request. So do not forget that security controls must be adapted when adding such mechanism: when an overridden call comes, the relevant security control must be made (in this case, check if the consumer has the &lt;code&gt;delete&lt;/code&gt; scope).&lt;/p&gt;

&lt;h2 id=&quot;api-gateway-configuration&quot;&gt;API Gateway configuration&lt;/h2&gt;

&lt;p&gt;If an API gateway sits in front of the API’s implementation (to deal with high level security), it is usually configured by providing the sets of available operation (as an OpenAPI file if the API gateway provider is smart). If you need to use the HTTP method override trick, you’ll have to update your configuration.&lt;/p&gt;

&lt;p&gt;Let’s says the API provides the following operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;POST /resources&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DELETE /resources&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PUT /resources/{resourceId}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In that case, to support HTTP method override, you’ll need to declare:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A modified &lt;code&gt;POST /resources&lt;/code&gt; with the additional query (&lt;code&gt;_httpParam&lt;/code&gt; for example) and/or header (&lt;code&gt;X-HTTP-Method-Override&lt;/code&gt;) parameters to handle overridden &lt;code&gt;DELETE /resources&lt;/code&gt; requests&lt;/li&gt;
  &lt;li&gt;An unmodified &lt;code&gt;DELETE /resources&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;An unmodified &lt;code&gt;PUT /resources/{resourceId}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A new &lt;code&gt;POST /resources/{resourceId}&lt;/code&gt; to handle overridden &lt;code&gt;PUT /resources/{resourceId}&lt;/code&gt; requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that security and gateway configuration could be simplified by implementing directly the trick at the gateway level once and for all. That way, backend API implementation would not have to deal with that (I’ll probably make a post about dos and don’ts or API gateways).&lt;/p&gt;

&lt;h2 id=&quot;logs&quot;&gt;Logs&lt;/h2&gt;

&lt;p&gt;Such design modification will obviously impacts your API calls logs and dashboards, you’ll have to separate true &lt;code&gt;POST&lt;/code&gt; requests from the overridden &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; ones or find a way to log them cleverly to avoid doing so. Note that you should not totally hide these overridden request, it is always useful to know if this feature is actually used and how.&lt;/p&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;

&lt;p&gt;And finally do not forget to update your documentation. The better is to fully explain the trick once and for all and add links to this explanation when needed. If your reference documentation relies on the same OpenAPI file used for your gateway, you should get rid of trick-specific parameters and operations (the ones you add for the gateway configuration for example) to keep it readable.&lt;/p&gt;

&lt;h1 id=&quot;conclusion-always-analyze-consumers-contexts&quot;&gt;Conclusion: always analyze consumers contexts&lt;/h1&gt;

&lt;p&gt;While a bit annoying, such a problem teaches us a good lesson: always analyze consumers contexts in order to propose an accurate design.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And if you wonder what this post banner means: it’s a toy version of the french Peugeot 405 made by french toy company Majorette. The HTTP status code 405 means Method not allowed.&lt;/em&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><category term="API Design Tips And Tricks" /><summary type="html">There are quite many APIs out there taking advantage of all standard HTTP methods (GET, POST, PATCH, PUT and DELETE). Unfortunately, there are still some cases where consumers can’t use them all. As far as I know, GET and POST do not cause any problem at all. But as an API provider, do not take for granted that DELETE, PUT and the more dreaded PATCH HTTP methods can always be used by your consumers. I encountered this problem several times throughout the years and no later than a few weeks ago. Let’s see why and how to solve this problem.</summary></entry><entry><title type="html">Few things I learned writing The Design of Web APIs</title><link href="https://apihandyman.io/few-things-i-learned-writing-the-design-of-web-apis/" rel="alternate" type="text/html" title="Few things I learned writing The Design of Web APIs" /><published>2019-11-02T00:00:00+00:00</published><updated>2019-11-02T00:00:00+00:00</updated><id>https://apihandyman.io/few-things-i-learned-writing-the-design-of-web-apis</id><content type="html" xml:base="https://apihandyman.io/few-things-i-learned-writing-the-design-of-web-apis/">&lt;p&gt;At last, my book The Design of Web APIs is finished and printed! I gradually got back to a “normal” life since the end of summer as the book entered in its production phase, but it was only when I received the printed copies two weeks ago that I had the feeling that this adventure was really over. And then holding the book in my hands, I wondered if it was worth having spent two years of my life on it, what did I learn spending almost all my free time working on this book? That sounded like a good topic to revive the API Handyman blog.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-design-of-web-apis&quot;&gt;The Design of Web APIs&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;Design of Web APIs&lt;/a&gt; is my first book. Before that, I have been blogging for 2 years before being contacted by Manning to write a book about the OpenAPI Specification. It’s an interesting topic (I spend almost a year writing a extensive &lt;a href=&quot;http://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-1-introduction/&quot;&gt;tutorial&lt;/a&gt; on version 2) but I had other ideas in mind at that time: &lt;em&gt;The Design of Everyday APIs&lt;/em&gt;. I wanted to write a book that teaches API design principles and not a book about a given technology, I wanted to make a sort of API design version of The Design of Everyday Things by Don Norman. I discovered this book thanks to &lt;a href=&quot;https://twitter.com/mamund&quot;&gt;Mike Amundsen&lt;/a&gt;, it changed the way I envision software.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Design of Everyday Things is a best-selling book by cognitive scientist and usability engineer Donald Norman about how design serves as the communication between object and user, and how to optimize that conduit of communication in order to make the experience of using the object pleasurable. One of the main premises of the book is that although people are often keen to blame themselves when objects appear to malfunction, it is not the fault of the user but rather the lack of intuitive guidance that should be present in the design. (&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Design_of_Everyday_Things&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Design of Everyday APIs was only a working title, I never have been comfortable with it as I had the feeling that I was borrowing the fame of Don Norman’s book. Hopefully it was changed to the more simple and obvious &lt;em&gt;The Design of Web APIs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The title is not the only thing that has changed during the creation of this book. The table of content and the content itself has greatly evolve during these two years to become the book I’m so proud of. But more important, I changed by learning a few things.&lt;/p&gt;

&lt;h1 id=&quot;how-to-actually-write-a-technical-book-or-other-things&quot;&gt;How to actually write a technical book (or other things)&lt;/h1&gt;

&lt;p&gt;I’m glad I made this book with a publisher and did not self-publish it because the result would probably have been a terrible mess … if I actually finished it. Having a (good) publisher was great because the people working there helped me in many ways like, for example, fixing typos, challenging the book’s content or gently asking me when I planned to finish the next chapter and so help me keeping the pace. But more important, if I know quite a few things about API design and I like story telling, I didn’t knew how to actually write a book and my publisher taught me to do so. I’m not a professional writer, I may even be wrong, there are probably thousands of books and blog posts about writing, but here’s what I retain after writing this book (and what I try to reuse now when writing anything):&lt;/p&gt;

&lt;p&gt;First define what you will actually talk about in your book. To do so, ask yourself:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Who are your readers?&lt;/li&gt;
  &lt;li&gt;What do they need to know/do before reading the book?&lt;/li&gt;
  &lt;li&gt;What will they learn/be able to do by reading it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the book’s objective is defined, write the table of content (ToC). It is the backbone of the book, your battle plan. It should tell a story that will help readers to achieve the book’s objective.
The first versions can be rough without going to deep into details, just think about the main steps of the story. You’ll fill the details by working on each chapter and maybe adjust the ToC.&lt;/p&gt;

&lt;p&gt;Then for each chapter:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make the elevator pitch of why readers should care about this chapter’s content. It shouldn’t take more than a few sentences.&lt;/li&gt;
  &lt;li&gt;List what readers need to know/do before reading it, basically topics from previous chapters. It may help to spot missed topics.&lt;/li&gt;
  &lt;li&gt;List new concept taught&lt;/li&gt;
  &lt;li&gt;List the examples used to explain the new concepts&lt;/li&gt;
  &lt;li&gt;Sketch the main diagrams that will be used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not that easy to do, don’t be afraid if it takes time but if if really doesn’t work, maybe you should get rid of this chapter and rethink your ToC. With all these elements, it’s easier to write the chapter: once you have a good view the content, you “only” need to focus on how to tell the story in an entertaining way. Without them, be ready to face the white page syndrome and rewrite the chapter endlessly.&lt;/p&gt;

&lt;h1 id=&quot;theres-more-than-what-you-think-you-know-about-the-books-topic&quot;&gt;There’s more than what (you think) you know about the book’s topic&lt;/h1&gt;

&lt;p&gt;By writing a 400 pages book about API design, I ending by knowing far more about this topic than what I knew before starting it. This is not specific to book’s writing, I already noticed that after I started to blog.
Writing a book about API design forced me to actually list all the topics that readers need to be aware of and I “discovered” some topics I didn’t care much about before starting the book. I had to deeply investigate topics these topics but also ones I thought I knew. And most interesting, I had to find new ways of explaining things, finding examples and drawing diagrams while preparing chapters was of great help to do so.&lt;/p&gt;

&lt;h1 id=&quot;how-to-receive-and-provide-feedback&quot;&gt;How to receive and provide feedback&lt;/h1&gt;

&lt;p&gt;I received a lot of feedback during the book’s writing. I worked with a development editor and a technical editor who provided feedback on each chapter. There have been 3 readers reviews made on the first third (6 readers), second third (10 readers) and then first complete version of the book (16 readers). There were comments on the forum/live book. And I also got feedback from my friends and colleagues.&lt;/p&gt;

&lt;p&gt;The two first readers reviews, especially the second one, left me totally depressed. It was really hard to deal with them because some of them were negative. I even &lt;em&gt;felt&lt;/em&gt; that some were too harsh if not mean. I usually consider myself sufficiently adult to be able to get some negative feedback as long as it is argued and there can be a discussion. But, when you get feedback from a dozen readers at once and there is no possible discussion with the PDF file summing up their reviews, that’s really hard to manage, at least for me. Hopefully, I could get beyond that thanks to two things.&lt;/p&gt;

&lt;p&gt;First, I step back and objectively analyze the reviews to split them in smaller elements. Frankly, I don’t remember how I came to do that, probably because my development editor told me to do so or because I usually work like that. But I looked at the reviews and identified every good and bad point, check how many readers talk about them. Doing so I realized that it was not that bad and, even if that always hurt a bit, I agreed with most of the identified problems. I also realized that there was actually only one or two shitty reviewers (sorry, these persons may probably not actually be like that but this is how I felt based on the review) and this lead to my second point.&lt;/p&gt;

&lt;p&gt;So, the second thing that help me to go on after the reviews is that I’m lucky to know some authors who have been there and one of them gave me a really good advice. It could be summarized as “you under no obligation to give a shit about what people say”. Listen to what people say, take what is of interest for you and your book and leave the rest. And if they are not happy with that, tell them to write their own book.&lt;/p&gt;

&lt;p&gt;After these reviews, I realized that I may have been one of these assholes myself. So, I’m really happy that they taught me how to provide better feedback, especially when not face to face, and (I hope) not to be an asshole anymore when providing feedback.&lt;/p&gt;

&lt;h1 id=&quot;be-more-confident&quot;&gt;Be more confident&lt;/h1&gt;

&lt;p&gt;Hopefully, my development and technical editors feedback were more constructive and encouraging, also were comments from my trusted friends and colleagues. That really gave me confidence. I realized that what I was creating was really good (and I just realized that I became confident enough to actually write that the book is good). Besides having good feedback, I got even more confident seeing how all the book’s pieces fit together so well. And being confident about the book’s content made me more confident about what I do in my daily job, that’s priceless.&lt;/p&gt;

&lt;h1 id=&quot;trust-but-verify&quot;&gt;Trust, but verify&lt;/h1&gt;

&lt;p&gt;When you finish to write a book, the work is not over. The final phase is called the production phase. It mostly deals with copy-editing, graphics-editing, typesetting.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy-editing consist in fixing typos, grammar and vocabulary and also ensure a certain consistency in your writing. Note that in my case there was a previous ESL (english as second language) copy-editing phase to fix my frenglish. You must check every single modification made to YOUR text in order to be sure that what is written is ok for YOU. Some modifications may not make sense at all or you may simply not like them. It is your right to not accept such modification.&lt;/li&gt;
  &lt;li&gt;Graphics-editing is copy-editing for figures. Their texts will be copy-edited and their design may be more or less modified depending on their quality/style/size. In my case, my figures were only finally slightly modified but there has been some bug in the process. For an unknown reason, my figures were being totally remade in a new style that I totally hated. Hopefully, I noticed it and made that stopped. Everyone can make mistakes, that is why there are verifications phases, so don’t take them lightly even if you trust the third-parties modifying your work.&lt;/li&gt;
  &lt;li&gt;My definition of typesetting is: ajdusting words (split them sometime) and figure positions to avoid empty spaces. If you ever wondered why in some books figures seem in awkward places, in my experience, that is due to typesetting. I had to request a few modifications, but taking typesetting contraints into consideration, in order to avoid such problems on a few figures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, you can trust, be never forget to verify. Even if it is hard and boring as hell, you must be very careful when your book is modified by third-parties. You have to exhaustively check ALL modifications. Be confident and never refrain yourself to say no if something seem wrong for you.&lt;/p&gt;

&lt;h1 id=&quot;find-a-balance-between-the-book-and-the-rest&quot;&gt;Find a balance between the book and the rest&lt;/h1&gt;

&lt;p&gt;Finding a balance between the book and the rest, especially my family is something that I didn’t do so well at the beginning. If you do write a book, consider defined precisely when you work on it and keep time for your family and possibly for other activities (like reading, playing video games or playing the guitar in my case). That will keep everyone happy (including you) and increase your productivity when writing.&lt;/p&gt;

&lt;h1 id=&quot;never-complain-when-reading-others-books&quot;&gt;Never complain when reading others books&lt;/h1&gt;

&lt;p&gt;And finally, now that I know how hard it is to write a book (and especially to spot all those fucking typos), I will never complain again when I read others books (but I may try to provide some useful and friendly feedback).&lt;/p&gt;

&lt;h1 id=&quot;a-new-beginning&quot;&gt;A new beginning&lt;/h1&gt;

&lt;p&gt;Don’t know if so many people will find this post interesting, but I needed to write it to not forget what I’ve been through. Know that I never regretted starting to write blog posts or the book, so maybe you should think about writing too. Whatever, I’m back on the blog, so stay tune for more API related posts.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">At last, my book The Design of Web APIs is finished and printed! I gradually got back to a “normal” life since the end of summer as the book entered in its production phase, but it was only when I received the printed copies two weeks ago that I had the feeling that this adventure was really over. And then holding the book in my hands, I wondered if it was worth having spent two years of my life on it, what did I learn spending almost all my free time working on this book? That sounded like a good topic to revive the API Handyman blog.</summary></entry><entry><title type="html">Explore the OpenAPI Specification 3.0 with the OpenAPI Map</title><link href="https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map/" rel="alternate" type="text/html" title="Explore the OpenAPI Specification 3.0 with the OpenAPI Map" /><published>2018-03-09T00:00:00+00:00</published><updated>2018-03-09T00:00:00+00:00</updated><id>https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map</id><content type="html" xml:base="https://apihandyman.io/explore-the-openapi-specification-3.0-with-the-openapi-map/">&lt;p&gt;So you want to explore in depth the OpenAPI Specification version 3.0? You should take the OpenAPI Map with you!&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The OpenAPI Specification Visual Documentation is dead, long live the &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;OpenAPI Map&lt;/a&gt;! Very special thanks to &lt;a href=&quot;https://twitter.com/earth2marsh&quot;&gt;Marsh Gardiner&lt;/a&gt; for helping me find this name.&lt;/p&gt;

&lt;h1 id=&quot;what-is-the-openapi-map&quot;&gt;What is the OpenAPI Map?&lt;/h1&gt;

&lt;p&gt;Just in case you missed previous releases, the OpenAPI Map is a representation of the OpenAPI Specification documentation as a tree. Using it, you can see how an OpenAPI document is organized and discover all OpenAPI objects and properties dark secrets.&lt;/p&gt;

&lt;div&gt;
      &lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;&lt;img src=&quot;/images/commons/openapi/openapi-map.png&quot; /&gt;&lt;/a&gt;
      &lt;p class=&quot;img-label&quot;&gt;&lt;a href=&quot;http://openapi-map.apihandyman.io/&quot;&gt;OpenAPI Map&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;

&lt;h1 id=&quot;updated-300-rc0-to-30&quot;&gt;Updated 3.0.0-rc0 to 3.0&lt;/h1&gt;

&lt;p&gt;Besides changing the tool’s name, I have replaced the OAS 3.0.0-rc0 version by 3.0 (3.0.1 precisely). You can now fully explore the OpenAPI Specification 3.0 version. This update from 3.0.0-rc0 to 3.0 was a bit longer than expected. There were quite some changes between the early 3.0.0-rc0 version and 3.0 official release. The version 3.0 is now fully documented and includes a complete changelog from version 2.0.&lt;/p&gt;

&lt;h1 id=&quot;other-enhancements&quot;&gt;Other enhancements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The Open API Map shows version 3.0 by default&lt;/li&gt;
  &lt;li&gt;Version 2.0 is still available via the navigation bar and you can now even access it directly using this link: &lt;a href=&quot;http://openapi-map.apihandyman.io/?version=2.0&quot;&gt;http://openapi-map.apihandyman.io/?version=2.0&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Mandatory properties labels are now in red, no more need to pass mouse over a property to see it &lt;a href=&quot;https://github.com/arno-di-loreto/openapi-map/issues/10&quot;&gt;Issue #10&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;source-available-on-github&quot;&gt;Source available on Github&lt;/h1&gt;

&lt;p&gt;You can fork this project on &lt;a href=&quot;https://github.com/arno-di-loreto/openapi-map&quot;&gt;github&lt;/a&gt;. I have updated the readme in order to help people understand how it works but it may need some further updates. So do not hesite to tell me if you need help to use it.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="elsewhere" /><summary type="html">So you want to explore in depth the OpenAPI Specification version 3.0? You should take the OpenAPI Map with you!</summary></entry><entry><title type="html">How public web APIs raise software bar</title><link href="https://apihandyman.io/how-public-web-apis-raise-software-bar/" rel="alternate" type="text/html" title="How public web APIs raise software bar" /><published>2018-02-26T00:00:00+00:00</published><updated>2018-02-26T00:00:00+00:00</updated><id>https://apihandyman.io/how-public-web-apis-raise-the-software-bar</id><content type="html" xml:base="https://apihandyman.io/how-public-web-apis-raise-software-bar/">&lt;p&gt;While answering some question on my &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;Design of Web APIs&lt;/a&gt; book’s &lt;a href=&quot;https://forums.manning.com/posts/list/42828.page&quot;&gt;forum&lt;/a&gt;, I wrote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now that I have seen brilliant Web APIs that can be used so easily because of their design but also the overall experience some can provide (the famous “DX”) I have become far more demanding and challenging with software in general&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes. Public web APIs definitely raise software bar. The whole software industry should take example on them … &lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-ideal-world-of-public-web-apis&quot;&gt;The Ideal world of public web APIs&lt;/h1&gt;

&lt;p&gt;I have been tinkering with web services and web APIs for a while now and it’s really interesting how the quite technical concept of remote Application Programming Interface moved my perception of sofware from a purely technical vision to something more human centered. I switched from &lt;em&gt;code software that solve problems&lt;/em&gt; to &lt;em&gt;design software that people use to fulfill their needs&lt;/em&gt;. How some companies envision providing public web APIs is even pushing this vision into &lt;em&gt;design software that people will love to use&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How is this possible?&lt;/p&gt;

&lt;p&gt;Willingly or in order to make profit or both, we don’t care, these companies design APIs that you can understand at first sight and use easily to do what you want. But that’s not all, the API comes with all needed material in order to help you seamlessly; reference documentation, tutorial, sandbox, ready to use examples, sdks, … Everything is &lt;em&gt;designed&lt;/em&gt; in order to provide a wonderful experience with a minimal effort. Sometimes, this experience is so perfect, that you are just happy when using this API. Sometimes this experience so invisible that you feel incredibly smart because the whole system let you think that you use it instinctively.&lt;/p&gt;

&lt;p&gt;Both provider and consumer benefits from such experience. Consumers are autonomous, don’t lose time and money to use the API. They are so happy that may even promote the solution. Providers gain easily customers and lessen the need of support (or at least can focus on support where it’s really needed).&lt;/p&gt;

&lt;p&gt;Of course, not all public APIs provide such experience. And in some other domains of the software industry, we are at light years of that…&lt;/p&gt;

&lt;h1 id=&quot;the-crude-reality-of-not-so-dark-corners-of-the-software-industry&quot;&gt;The crude reality of not so dark corners of the software industry&lt;/h1&gt;

&lt;p&gt;Some words about me and my job: I am an architect in the banking industry…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nobody expects the Architect Inquisition!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… but not the dreaded enterprise architect living in his ivory tower. Throwing utopian or unrealistic edict. Burning the heretics who dare to not apply them. No, definitely not that kind. I come from the trenches, I have been a developer, a project manager, a developer team manager. Now as an architect from the trenches, I have to deal with real world problems and find real world solutions. Always striking a balance between the sanity of our IT system, people building it, people running it and people using it and of course … money.&lt;/p&gt;

&lt;p&gt;In my daily job, I work with a motley collection of software solutions: homemade, open source, vendor ones, as a service, on premise, … All these software can be roughly separated in two categories: the software I choose on a shelf and the software I design.&lt;/p&gt;

&lt;p&gt;To tell the truth, I’m getting tired of software solutions I have to choose on a shelf that are only &lt;em&gt;created to solve problems&lt;/em&gt; and not &lt;em&gt;designed for people to fullfil their needs&lt;/em&gt;.
The gap between some enterprise grade software solutions and some (ideal) public web APIs is sometimes so wide that the Hubble telescope would probably not be able to see something from one end to the other. The cost of using some crappy designed solution is sometime really frightening.
When I choose a software, I mainly these criterias:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does it fullfil our business needs?&lt;/li&gt;
  &lt;li&gt;How is it complicated/easy to install, run and use it?&lt;/li&gt;
  &lt;li&gt;Does it provide an API? what’s its quality?&lt;/li&gt;
  &lt;li&gt;How does look like its documentation?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the first question is usually not a problem, the others are too often problematic. And this is usually a huge source of problems, time losed and money losed.&lt;/p&gt;

&lt;h1 id=&quot;a-open-letter-to-enterprise-grade-vendor-solutions&quot;&gt;A open letter to enterprise grade vendor solutions&lt;/h1&gt;

&lt;p&gt;Dear enterprise grade software solution vendors,&lt;/p&gt;

&lt;p&gt;When I use a public web API, I don’t know what’s happening behind the interface and I don’t care. I can also use it easiliy. When I have to install a software on premise, I would like to have something equivalent. Of course I may have to install something and do some configuration. But please, I don’t want to be an expert of your product implementation nor its installation. I don’t want to lose months to install you product. Do you know that you can &lt;em&gt;automate&lt;/em&gt; many things when you use &lt;em&gt;software&lt;/em&gt;? Do you know that now you can even package your solution to provide “one click” installation in some cloud services?&lt;/p&gt;

&lt;p&gt;When I use a public web API, you know what? I have an API to use. I would be glad if your product provide one. Having an API would definitely ease the job of making my motley collection of software work together.&lt;/p&gt;

&lt;p&gt;When I use a public web API, I have some decent and sometimes even pleasant documentation to understand how to use it on my own. I almost never have to talk to someone to get help. So, just stop to provide totally not user friendly, huge and useless documentation that you wouldn’t even use yourself. Stop selling support that you cannot afford. I have seen some product coming with a 300 pages PDF as documentation. Yes 300 pages. And that’s not the most fun, this document contained some code samples… some of them 20 pages long. Unreadable. Unusable.&lt;/p&gt;

&lt;p&gt;When I use a public web API, I sometimes can use it instinctively, because its design conforms to some common pratices. If your solution provides an API (which is a good thing), you would be wise to stick to these common practices. I do not want to have to learn you &lt;em&gt;very smart but very specific and totally different way of thinking&lt;/em&gt; to use your API.&lt;/p&gt;

&lt;p&gt;When I use a public web API, it may evolve. Such evolution may bring some breaking change. But I am warned and I have time to handle them. I can even use the old and new version at the same time. Some provider even support &lt;em&gt;all&lt;/em&gt; past versions seamlessly. I would love do the same thing with your software.&lt;/p&gt;

&lt;p&gt;Sincerely,
Your not future customer.&lt;/p&gt;

&lt;h1 id=&quot;theres-light-at-the-end-of-the-tunnel&quot;&gt;There’s light at the end of the tunnel&lt;/h1&gt;

&lt;p&gt;Is this situation hopeless? No.&lt;/p&gt;

&lt;p&gt;In an ideal world, I would get rid of all these &lt;em&gt;on premise shitty enterprise proprietary software&lt;/em&gt; and use only software as a service with API solutions (the brilliant ones, offering an outstanding experience, of course).
But we do not live in an ideal and simple world. If such solutions to your need exist, some obstables may prevent its use: regulations, security, sensitive data, performance, legacy systems…&lt;/p&gt;

&lt;p&gt;So beside this solution, the light at the end of the tunnel may come thanks to three things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, as a software solutions designer myself, I now try to promote and create human centered solutions that are simple to build, deploy and operate by following what I’ve seen in the public web API space. I try to take into account &lt;em&gt;all&lt;/em&gt; users of such solutions from dev to end user and also ops.&lt;/li&gt;
  &lt;li&gt;Second, when I choose software solutions, I always provide constructive feedback in order to help vendors enhance their solutions whether I select or reject them.&lt;/li&gt;
  &lt;li&gt;Third, some vendors start to understand by themselves, like I did, that creating human centered solutions is worth the cost for both vendor and customer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;but-is-this-really-new&quot;&gt;But is this really new?&lt;/h1&gt;

&lt;p&gt;Fundamentally, what we see in the public web APIs space is only what should be done with any software solution and even with any crafted thing since the beginning of all things.
Would you willingly buy a vegetable peeler that comes with a 200 pages user manual, needs 2 months for installation and is a total pain in the ass to use?
Definitely no.
Then why have we considered such experience totally normal with software for decades?
So, yes public web APIs raise the software bar, but only to the level it should have been since the beginning of time.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><summary type="html">While answering some question on my Design of Web APIs book’s forum, I wrote: Now that I have seen brilliant Web APIs that can be used so easily because of their design but also the overall experience some can provide (the famous “DX”) I have become far more demanding and challenging with software in general Yes. Public web APIs definitely raise software bar. The whole software industry should take example on them …</summary></entry><entry><title type="html">The story behind The Design of Web APIs book</title><link href="https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book/" rel="alternate" type="text/html" title="The story behind The Design of Web APIs book" /><published>2018-02-10T00:00:00+00:00</published><updated>2018-02-10T00:00:00+00:00</updated><id>https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book</id><content type="html" xml:base="https://apihandyman.io/the-story-behind-the-design-of-everyday-apis-book/">&lt;p&gt;I’m thrilled to announce that I’m writing a book about API design: &lt;em&gt;The Design of Everyday APIs&lt;/em&gt; (edit: the book has been renamed &lt;em&gt;The Design of Web APIs&lt;/em&gt; since this post has been written). This book is published by &lt;em&gt;Manning Publications&lt;/em&gt; and the first two chapters are now available on the Manning Early Access Program or &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;MEAP&lt;/a&gt; (affiliate link, use fcclauret discount code to get 37% off). This book is for everyone who wants to learn API design.
But, what’s the story behind this book about API design? To answer this question, let’s talk about my other passion: guitar. &lt;!--more--&gt;&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/the-story-behind-the-design-of-everyday-apis-book/guitar-tabs.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;Guitar tabs&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;I have been playing the guitar for quite a long time. I’m definitely not an outstanding guitar player, I do that just for fun. Even if I have basic knowledge of solfeggio, I mostly use tablatures (or tabs) to learn to play songs. The guitar strings are represented by lines. And numbers on the lines indicate where to put fingers on the fret board. Pretty simple. I can play any song. Well, as long as my fingers dexterity allows it. So, I can play almost any song without even kwnowing which musical note I’m doing. But it can take me a long time to master songs, because I mostly do not get immediately how it works. I cannot play a song without a tablature by just listening to it. I’m also unable to compose music, I’m unable to improvise. And if I want to play another musical instrument like the piano, I would have to relearn everything. All this because I simply (but with dexterity!) move my fingers on a guitar fretboard without really understanding what I’m doing and why. When you really know music, it’s quite different. A friend of mine is a music teacher. He knows everything about solfeggio and music theory. He can improvise and compose. He can play any musical instrument as long as he understand how doing notes.&lt;/p&gt;

&lt;p&gt;But what has this to do with API design?&lt;/p&gt;

&lt;div class=&quot;book-banner-big&quot;&gt;
  &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;&lt;img src=&quot;/images/commons/book/book-vertical.png&quot; /&gt;&lt;/a&gt;
  &lt;p class=&quot;book-banner-vertical-bottom&quot;&gt;use fcclauret discount code to get 37% off (affiliate link)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ve been doing distributed software and working with web services and web APIs for a long time now, designing, building, using and providing them. Like many others, I’ve learned many things from the trenches about API design by practicing … and doing many mistakes. Mistakes, that I could have probably easily avoided if I had been warned. I have discovered the not so obvious scope of the API designer’s job and you know what? Choosing HTTP methods and designing URLs is only a part of it. I have also learned how to design APIs that do exactly what they have been created for. And I have also learned how to shape APIs in order to make them easy-to-understand and easy-to-use.&lt;/p&gt;

&lt;p&gt;But I have also learned something beyond these technical tips and tricks. I have learned what really is an API and what it means to design it.&lt;/p&gt;

&lt;p&gt;Knowing that &lt;code&gt;/library/books/the-design-of-everyday-apis/chapters&lt;/code&gt; is a good a way of designing some REST resource’s URL is important. Knowing that simply returning a &lt;code&gt;400 Bad Request&lt;/code&gt; HTTP status code is not enough is important. Knowing that content negociation is a solution to some use case is important. But knowing and understanding the true reasons &lt;em&gt;why&lt;/em&gt; we should or shouldn’t design API like this or that is far more important. This is guitar tablature vs solfeggio and music theory. Would you be able to improvise when facing a new use case? What would you do when designing a SOAP web services (yes, some people still have to do that), a gRPC API or whatever will come in the future?
I could have been a better API designer faster if I had understood earlier the true essence of API design. There are reasons why designing APIs in certain ways gives outstanding results. Understanding the reasons behind techniques and tips that make APIs great is far more important than just knowing them, because it can help to face any situation and design any type of API. Just like being able to play any musical instrument, improvise and compose.&lt;/p&gt;

&lt;div&gt;
      &lt;img src=&quot;/images/the-story-behind-the-design-of-everyday-apis-book/cryptic-interface.png&quot; /&gt;
      &lt;p class=&quot;img-label&quot;&gt;A quite cryptic interface&lt;/p&gt;
    &lt;/div&gt;

&lt;p&gt;But is it hard to master the &lt;em&gt;API design solfeggio&lt;/em&gt;? Hopefully not at all! The &lt;em&gt;API design solfeggio&lt;/em&gt; is quite simple to grasp as long as you understand what really is an API and how you can find inspiration from everyday objects.
OK, an API is an &lt;em&gt;Application Programming Interface&lt;/em&gt;, but it’s first and foremost an &lt;em&gt;interface&lt;/em&gt; that &lt;em&gt;people&lt;/em&gt; will use in their software to interact with your software.
APIs are interfaces like any others. Look at this &lt;em&gt;UDRC 1138&lt;/em&gt; control panel, its &lt;em&gt;interface&lt;/em&gt;. What could be this device’s purpose? How use it? hard to guess thanks to its poorly designed interface. Think about the many times you have been puzzled or you have grumbled when using a everyday object like a door, a microwave oven, a remote control, a toy, a web site, a mobile application because its design was flawed. Think about the many times you did not complain and were even quite happy using something. 
What seems ridiculous for everyday objects interfaces is as ridiculous for application programming interface. And the opposite is quite true, what works for everyday objects interfaces works for APIs.&lt;/p&gt;

&lt;p&gt;So, while &lt;em&gt;The Design of Everyday APIs&lt;/em&gt; (edit: the book has been renamed &lt;em&gt;The Design of Web APIs&lt;/em&gt; since this post has been written) book is a practical one showing every aspects of API design and many techniques, tips and tricks to design great APIs. It will also explain &lt;em&gt;why&lt;/em&gt; you should design APIs that way and therefore, I hope, give you the eye of the API designer.
I hope you’ll enjoy this book and find it useful to design your everyday APIs and build an API designer mindset. As you can read it on &lt;a href=&quot;http://bit.ly/designwebapis&quot;&gt;MEAP&lt;/a&gt; (affiliate link, use fcclauret discount code to get 37% off) while it is written, I look forward to your feedbacks on MEAP forum.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="posts" /><summary type="html">I’m thrilled to announce that I’m writing a book about API design: The Design of Everyday APIs (edit: the book has been renamed The Design of Web APIs since this post has been written). This book is published by Manning Publications and the first two chapters are now available on the Manning Early Access Program or MEAP (affiliate link, use fcclauret discount code to get 37% off). This book is for everyone who wants to learn API design. But, what’s the story behind this book about API design? To answer this question, let’s talk about my other passion: guitar.</summary></entry><entry><title type="html">API Styleguide, the Lord of API Designs</title><link href="https://apihandyman.io/api-styleguide-the-lord-of-api-designs/" rel="alternate" type="text/html" title="API Styleguide, the Lord of API Designs" /><published>2017-11-12T00:00:00+00:00</published><updated>2017-11-12T00:00:00+00:00</updated><id>https://apihandyman.io/api-styleguide-the-lord-of-api-designs</id><content type="html" xml:base="https://apihandyman.io/api-styleguide-the-lord-of-api-designs/">&lt;p&gt;Join Frodo, Gollum and Gandalf on an epic API design adventure.
In this session, based on my own experience defining and sharing API design common practices in my company and based on the API styles guides that I have collected on &lt;a href=&quot;http://apistylebook.com&quot;&gt;apistylebook.com&lt;/a&gt;, we will discover why we desperately need API style guides and how they can or cannot help us create a smooth API surface for a company.&lt;/p&gt;

&lt;p&gt;Very special thanks to &lt;a href=&quot;https://twitter.com/mrlapindesign&quot;&gt;Mister Lapin&lt;/a&gt; for designing my T-shirt and &lt;a href=&quot;https://twitter.com/kvantomme&quot;&gt;Kristof Van Tomme&lt;/a&gt; for recording the video with my phone.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;youtube embedded embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe width=&quot;740&quot; height=&quot;416&quot; src=&quot;//www.youtube.com/embed/ZUI5gHdhfwk?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;embedpad&quot;&gt;&lt;div class=&quot;speackerdeck embedded embed-responsive embed-responsive-4by3&quot;&gt;&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e820736b440a47119e8f3ccb090a9e7e&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="API Strat" /><category term="API Days" /><category term="Conference" /><category term="Design" /><category term="API Stylebook" /><category term="Video" /><summary type="html">Join Frodo, Gollum and Gandalf on an epic API design adventure. In this session, based on my own experience defining and sharing API design common practices in my company and based on the API styles guides that I have collected on apistylebook.com, we will discover why we desperately need API style guides and how they can or cannot help us create a smooth API surface for a company. Very special thanks to Mister Lapin for designing my T-shirt and Kristof Van Tomme for recording the video with my phone.</summary></entry><entry><title type="html">…And GraphQL for all? talk video on InfoQ</title><link href="https://apihandyman.io/graphql-for-all-talk-video-on-infoq/" rel="alternate" type="text/html" title="...And GraphQL for all? talk video on InfoQ" /><published>2017-09-29T00:00:00+00:00</published><updated>2017-09-29T00:00:00+00:00</updated><id>https://apihandyman.io/graphql-for-all-video-on-infoq</id><content type="html" xml:base="https://apihandyman.io/graphql-for-all-talk-video-on-infoq/">&lt;p&gt;My talk &lt;em&gt;…And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL&lt;/em&gt; which I gave at API Days Paris 2016 last December was recorded and the video is now available on &lt;a href=&quot;https://www.infoq.com/presentations/api-rest-graphql&quot;&gt;InfoQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also read my write up &lt;a href=&quot;/and-graphql-for-all-a-few-things-to-think-about-before-blindly-dumping-rest-for-graphql/&quot;&gt;here on the blog&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="talks" /><category term="Design" /><summary type="html">My talk …And GraphQL for all? A few things to think about before blindly dumping REST for GraphQL which I gave at API Days Paris 2016 last December was recorded and the video is now available on InfoQ. You can also read my write up here on the blog.</summary></entry></feed>