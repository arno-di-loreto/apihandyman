<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-06-12T04:42:22+00:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">Pink Fluffy Unicorn API? WTF? (or 3 reasons why choosing a not meaningful API name can be a problem)</title><link href="https://apihandyman.io/pink-fluffy-unicorn-api-wtf-or-3-reasons-why-choosing-a-not-meaningful-API-name-can-be-a-problem/" rel="alternate" type="text/html" title="Pink Fluffy Unicorn API? WTF? (or 3 reasons why choosing a not meaningful API name can be a problem)" /><published>2021-06-09T00:00:00+00:00</published><updated>2021-06-09T00:00:00+00:00</updated><id>https://apihandyman.io/pink-fluffy-unicorn</id><content type="html" xml:base="https://apihandyman.io/pink-fluffy-unicorn-api-wtf-or-3-reasons-why-choosing-a-not-meaningful-API-name-can-be-a-problem/">&lt;p&gt;It is usually considered a terrible practice to name a property ot a function with a meaningless name when writing code.
But surprisingly, when it comes to choosing application or API name, some people tend to choose names in a more artistic way (says the “API Handyman” who can name some tool “OpenAPI Chainsaw”).
So let’s see 3 reasons why choosing a not meaningful API name can be a problem.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This post is a follow up of a tweet I did a few weeks ago: &lt;em&gt;“Pink Fluffy Unicorn” is a cute but totally wrong name for an API unless it actually deals with pink fluffy unicorns. Please choose a meaningful name that tells what the API does&lt;/em&gt;.
Someone asked some arguments to back this statement because they seem to have to deal with such cute but counter-productive if not dangerous naming strategy.
And I realized that I have never formalized my thoughts on this topic, hence this post (thanks so much Twitter people!)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Very special thanks to &lt;a href=&quot;https://twitter.com/mrlapindesign&quot;&gt;@mrlapingdesign&lt;/a&gt; for drawing this post’s banner.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;it-needs-explanations&quot;&gt;It needs explanations&lt;/h1&gt;

&lt;p&gt;First and most obvious reason why choosing a not totally meaningful name is a terrible idea: it needs explanations.&lt;/p&gt;

&lt;p&gt;When starting a new job in a another company/organization, don’t you ever have grumbled when discovering that all internal tools such as the credential manager or the leave management tool have totally awkward not obvious names?
Of course, after someone explained you all that (for the 99th time) and if you use them everyday, you may remember their names.
But your new colleague, who arrived a few months later, will also struggle to understand what does what at the beginning.
And someone will have to explain all that (again, for the 100th time).
And if you don’t use them often, you’ll forget their name and struggle to find them when you desperately need them.&lt;/p&gt;

&lt;p&gt;And that applies to anything, including APIs.
If I’m looking for the API managing users, I will not search for Pink Fluffy Unicorn API.
And if I’m looking for the API managing file transfers, I will not search for Blue Fluffy Unicorn API.
When I see a Pink Fluffy Unicorn API, I have absolutely no clue about what it does by just reading its name, and that is really annoying.&lt;/p&gt;

&lt;p&gt;Of course, some may object that I could use our awesome API catalog search engine or read the documentation to see that, so using such a not so meaningful name may not be such a big problem.
Maybe, so let’s see the second reason, which is major no-go for me.&lt;/p&gt;

&lt;h1 id=&quot;it-does-not-set-boundaries&quot;&gt;It does not set boundaries&lt;/h1&gt;

&lt;p&gt;Second reason why choosing a not totally meaningful name is a terrible idea: it does not set boundaries.
And that’s a major concerns.
Indeed, a well defined and designed API is supposed to be a independent set of operations covering a meaningful set of related use cases.&lt;/p&gt;

&lt;p&gt;If this set of operations don’t have a meaningful name such as User but is named Pink Fluffy Unicorn, what stops someone to add new features related to a completely different topic such as file transfers?
What stops someone transforming this well defined API into a big ball of mud, a do-it-all API that will make no sense at all and be more complex to maintain?
What stops someone to create a dangerous mixtures composed of internal facing and external facing operations.
Not its name.
Some experienced API designers and developers having working in the team for quite a long time, taking their time to think, actually knowing the purpose of the Pink Fluffly Unicorn, probably won’t do such a mistake but what about beginners or people in a rush?&lt;/p&gt;

&lt;p&gt;Using a meaningful name creates boundaries that will make most people think twice before adding new features into an API while a meaningless name will open doors to anything.&lt;/p&gt;

&lt;h1 id=&quot;it-is-possibly-a-sign-of-api-design-smell&quot;&gt;It is possibly a sign of API design smell&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;Ce que l'on conçoit bien s’énonce clairement, Et les mots pour le dire arrivent aisément (What is well understood is clearly stated, And the words to say it come easily)&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;Nicolas Boileau-Despréaux, L'art poétique&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;The third reason why choosing a not totally meaningful name is a terrible idea is a corollary to the second one: it can be a sign of API design smell.&lt;/p&gt;

&lt;p&gt;Did you choose a meaningless name because you’re actually unable to find a meaningful one?
We all know that choosing names is hard, but if you are really struggling to find a meaningful name for your API, your API Designer senses should tell you that there’s something wrong. 
That could mean your API is not solving the good problem, or solving too much problems or not enough of them.&lt;/p&gt;

&lt;p&gt;Easily finding a meaningful name can comfort your vision of the use case/problems you’re trying to solve with it.&lt;/p&gt;

&lt;h1 id=&quot;sometimes-you-have-to-deal-with-it&quot;&gt;Sometimes you have to deal with it&lt;/h1&gt;

&lt;p&gt;There are cases where a domain, a team or a tool has a not so meaningful name that you would like to keep for reasons such as not totally changing people habits.
Indeed, some people working there for a long time know what means Pink Fluffy Unicorn.
So how to satisfy newcomers and seasoned colleagues?
In such a case you can use a middle ground approach and name your API(s) “Pink Fluffy Unicorn - Meaningful Name”.
That way you ensure seasoned colleagues won’t be surprised.
But most important you ensure that your API surface (your APIs) is well defined (not a big ball of mud) and understandable by newcomers.
Icing on the cake, you also ensure that people easily connect APIs together which can be interesting in a big organization or when providing public/partner APIs (“Twilio” doesn’t mean anything to me but I can get what the “Twilio Messaging API” does).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">It is usually considered a terrible practice to name a property ot a function with a meaningless name when writing code. But surprisingly, when it comes to choosing application or API name, some people tend to choose names in a more artistic way (says the “API Handyman” who can name some tool “OpenAPI Chainsaw”). So let’s see 3 reasons why choosing a not meaningful API name can be a problem.</summary></entry><entry><title type="html">200 Vs 204 Vs 404</title><link href="https://apihandyman.io/empty-lists-http-status-code-200-vs-204-vs-404/" rel="alternate" type="text/html" title="200 Vs 204 Vs 404" /><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><id>https://apihandyman.io/200-vs-204-vs-404</id><content type="html" xml:base="https://apihandyman.io/empty-lists-http-status-code-200-vs-204-vs-404/">&lt;p&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.
This fourth post answers the following question: given that /users is a collection (a list) and no users are named Spock, what should return GET /users?name=spock? 
&lt;code&gt;200 OK&lt;/code&gt;, &lt;code&gt;204 No Content&lt;/code&gt; or &lt;code&gt;404 Not Found&lt;/code&gt;&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Choosing HTTP status codes Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.&lt;div class=&quot;alert alert-info&quot;&gt;
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use &lt;a class=&quot;alert-link&quot; href=&quot;https://webconcepts.info/concepts/http-status-code/&quot;&gt;Erik Wilde's Web Concepts&lt;/a&gt;.
&lt;/div&gt;Very special thanks to all Twitter people participating to the &lt;a href=&quot;https://twitter.com/search?q=%23choosehttpstatuscode&amp;amp;src=typed_query&quot;&gt;#choosehttpstatuscode&lt;/a&gt; polls and discussions&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/&quot;&gt;1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/&quot;&gt;3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;4 - Empty list, HTTP status code 200 vs 204 vs 404&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-context&quot;&gt;The context&lt;/h1&gt;

&lt;p&gt;When you need to represent lists (aka collection resources) in a REST/RESTful/RESTish API, a usual design pattern is to represented with them a &lt;code&gt;/resources&lt;/code&gt; (or &lt;code&gt;/resource&lt;/code&gt;, read &lt;a class=&quot;post-link&quot; href=&quot;/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/&quot;&gt;/resources rules and /resource sucks … or is it the other way around?&lt;/a&gt;).
More often than not, you’ll need to be able to return a subset of the list’s elements.
To do so, a usual (if not standard) design pattern is to add query parameters to provide search filters.
If a &lt;code&gt;GET /users&lt;/code&gt; is supposed to return a list containing all (actually accessible to the consumer and possibly to the end user) users, a &lt;code&gt;GET /users?name=spock&lt;/code&gt; is supposed to return a list containing only the users whose name is &lt;code&gt;spock&lt;/code&gt;.
The question we will answer today basically is: which HTTP status code respond with when returning an empty list.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/empty-lists-http-status-code-200-vs-204-vs-404/twitter-poll.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Twitter poll results&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;According to my Twitter pool, 51% of respondents would return a &lt;code&gt;200 OK&lt;/code&gt;, while 24% would return a &lt;code&gt;204 No Content&lt;/code&gt; and 25% would return a &lt;code&gt;404 Not Found&lt;/code&gt;.
Let’s see what could be the correct answers according to RFC(s) and common practice.&lt;/p&gt;

&lt;h1 id=&quot;the-obvious-200-ok&quot;&gt;The obvious 200 OK&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 200 (OK) status code indicates that the request has succeeded.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.3.1&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.3.1&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Let’s start with the most common and valid response in such a case: &lt;code&gt;200 OK&lt;/code&gt;.
When responding to &lt;code&gt;GET /users&lt;/code&gt;, the API will respond with that HTTP status code along with a list of all (actually accessible to the consumer and possibly to the end user) users users.
When responding to &lt;code&gt;GET /users?name=smith&lt;/code&gt;, the API will respond also that with HTTP status code along with a list contains all users named &lt;code&gt;smith&lt;/code&gt;.
And finally when responding to &lt;code&gt;GET /users?name=spock&lt;/code&gt; and if there are no user name &lt;code&gt;spock&lt;/code&gt;, the API will respond yet another time with that HTTP status code but this time along with an empty list.
That is actually the most common response I have ever seen, probably because most people consider that the &lt;code&gt;/users&lt;/code&gt; collection/list resource exists and &lt;code&gt;name&lt;/code&gt; query param is used to filter the content of the list.&lt;/p&gt;

&lt;p&gt;But there is a more specific HTTP status code that could do the trick too.&lt;/p&gt;

&lt;h1 id=&quot;the-not-so-current-204&quot;&gt;The not so current 204&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 204 (No Content) status code indicates that the server has successfully fulfilled the request and that there is no additional content to send in the response payload body.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.3.5&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.3.5&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;While &lt;code&gt;200 OK&lt;/code&gt; being a valid and the most common answer, returning a &lt;code&gt;204 No Content&lt;/code&gt; could make sense as there is absolutely nothing to return.
It is indeed more often used when responding to a &lt;code&gt;PUT&lt;/code&gt; (replace) or a &lt;code&gt;PATCH&lt;/code&gt; (partial update), when servers don’t want to bother returning the replaced/updated resource or on a &lt;code&gt;DELETE&lt;/code&gt; because there is usually nothing to return after a deletion.
But it can be used on a &lt;code&gt;GET&lt;/code&gt; too.
If the request is valid, has been successfully fulfilled and if there is no additional content to send (which is the case as the returned list would be empty),  &lt;code&gt;204 No Content&lt;/code&gt; is perfectly understandable and valid answer.&lt;/p&gt;

&lt;p&gt;It’s a valid response but I personally will not use it and do not recommend to use it in that case in my context.
Because it is not that common (based on my experience, it’s not absolute truth) and may imply more work.
Actually, I try to avoid using specific/uncommon HTTP status when a more generic/common one works too, that usually simplifies consumer’s job and also designer’s one as there are less possible choices and behaviors (I’ll write a post about that).
Though a consumer must be able to interpret any &lt;code&gt;2xx&lt;/code&gt; as as success and fallback to treat it as &lt;code&gt;200 OK&lt;/code&gt;, that means there will be no response body, so no empty list.
That could easily lead to to possible “null pointer exception” or any equivalent requiring more controls in code.
A &lt;code&gt;200 OK&lt;/code&gt; with an empty list can be treated the same as non empty list without thinking about it.
Note that, consumer may obviously have to check il the list is empty or not to possibly show a message to end user, but the exact same code will work without that control.&lt;/p&gt;

&lt;p&gt;But while simplifying choices, note that using that “simplified HTTP” stance, you’ll loose some “HTTP semantic out of the box”. 
Indeed tne major argument in favor of &lt;code&gt;204 No Content&lt;/code&gt; is that is allows to check empty search results (especially in logs) vs non empty ones without relying on specific response body’s semantic.
That’s quite an interesting feature.
Maybe we need more APIs actually fully using HTTP semantic to make this &lt;code&gt;204 No Content&lt;/code&gt; response more common and a no brainer.&lt;/p&gt;

&lt;p&gt;So choosing between &lt;code&gt;200 OK&lt;/code&gt; and &lt;code&gt;204 No Content&lt;/code&gt;, depends on you and your context.&lt;/p&gt;

&lt;h1 id=&quot;the-not-recommended-404&quot;&gt;The not recommended 404&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.4&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;I just realized that’s the fourth post in this series and &lt;code&gt;404 Not Found&lt;/code&gt; has been involved in all posts so far.
Let’s see what say the HTTP RFCs (with an s) about using it in that use case.&lt;/p&gt;

&lt;p&gt;If we look at this status code definition in RFC 7231 and if we consider that &lt;code&gt;/users&lt;/code&gt; is the resource used even when doing a &lt;code&gt;GET /users?name=spock&lt;/code&gt;, returning that HTTP status code makes no sense at all because the resource &lt;code&gt;/users&lt;/code&gt; exists, it’s just that the list it contains may be empty.&lt;/p&gt;

&lt;p&gt;But is this definition of a resource identifier (excluding query parameters) is actually the correct one?
&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7231#section-2&quot;&gt;Section 2 of RFC 7231&lt;/a&gt; states &lt;em&gt;each resource is identified by a Uniform Resource Identifier (URI), as described in Section 2.7 of &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7230#section-2.7&quot;&gt;RFC 7230&lt;/a&gt;&lt;/em&gt;.
That section 2.7 of RFC 7230 says the “query” (what is between the first &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;) is a part of the resource identifier.
If we follow the link (it’s quite a maze!) conducting to complete description of the query, we eventually arrive at &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.4&quot;&gt;Section 3.4 of RFC 3986&lt;/a&gt; that says &lt;em&gt;the query component contains non-hierarchical data that, along with data in the path component (Section 3.3), serves to identify a resource&lt;/em&gt;.
That basically means that &lt;code&gt;/users?name=spock&lt;/code&gt; is a resource identifier, so returning 404 is valid according to HTTP RFCs if we want to say “sorry no resource match the strict identifier provided in your query” or “there is no such a users list containing users named spock”.
But using that HTTP status code being valid from a pure HTTP perspective, is it actually a good idea to use it in that use case?&lt;/p&gt;

&lt;p&gt;In my humble opinion, based on my experience designing APIs, reading and listening to many API practitioners, analyzing many APIs and doing hundreds of API design reviews, I do not recommend to use it in that case because that would break a common practice.
In most REST/RESTful/RESTish APIs, a “resource identifier” is actually the resource path without the query part, that may be wrong when speaking strictly HTTP but that is the current state of common practice.
In most APIs, &lt;code&gt;404 Not Found&lt;/code&gt; is strongly attached to “there is nothing for the requested path (excluding query parameters)”.
It is returned in case involving &lt;code&gt;/path-that-does-not-exist&lt;/code&gt; or &lt;code&gt;/collection/{id that does not exist}&lt;/code&gt; (see &lt;a class=&quot;post-link&quot; href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;Choosing HTTP status codes Part 2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/a&gt; or &lt;a class=&quot;post-link&quot; href=&quot;/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/&quot;&gt;Choosing HTTP status codes Part 3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410&lt;/a&gt;) but not for empty lists (that’s usually a &lt;code&gt;2xx Success class&lt;/code&gt;).
Also, returning a &lt;code&gt;4xx Client Error Class&lt;/code&gt; says that consumer made an error, is that really the case here?
I don’t think so, the consumer just provided search filters that don’t match any element in a list.&lt;/p&gt;

&lt;p&gt;That’s my reasoned opinion of not using &lt;code&gt;404 Not Found&lt;/code&gt; for empty lists, but if you have valid reasons to use this HTTP status code for this use case, don’t forget to be consistent and provide informative error feedback.
Indeed, if we take for granted that &lt;code&gt;GET /users?name=spock&lt;/code&gt; returns a &lt;code&gt;404 Not Found&lt;/code&gt; if there are no users named spock.
What about &lt;code&gt;GET /users&lt;/code&gt; if there are no users at all? 
It should return the same HTTP status code.
And differentiating this it from a more common &lt;code&gt;/path-that-does-not-exist&lt;/code&gt; will require to add some information in the response body to explain the actual cause of this response.&lt;/p&gt;

&lt;h1 id=&quot;dx-above-all&quot;&gt;DX above all&lt;/h1&gt;

&lt;p&gt;The lesson of today is that following the HTTP protocol is one thing but there are sometimes various options with pros and cons and sometimes being overly strict can lead to design that are less easy to understand.
The question is not about achieving the most perfect design (regarding HTTP) but just achieve a design that makes sense for most people involved and proposes the best as possible DX.
And that D in DX includes developers but also designers.
Simple design rules that makes sense for most are a key factor in your APIs success.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="HTTP Status Codes" /><summary type="html">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This fourth post answers the following question: given that /users is a collection (a list) and no users are named Spock, what should return GET /users?name=spock? 200 OK, 204 No Content or 404 Not Found</summary></entry><entry><title type="html">Generating OpenAPI Descriptions. When is it a good idea?</title><link href="https://apihandyman.io/generating-openapi-descriptions-when-is-it-a-good-idea/" rel="alternate" type="text/html" title="Generating OpenAPI Descriptions. When is it a good idea?" /><published>2021-06-01T00:00:00+00:00</published><updated>2021-06-01T00:00:00+00:00</updated><id>https://apihandyman.io/generating-openapi-descriptions-with-erik-wilde</id><content type="html" xml:base="https://apihandyman.io/generating-openapi-descriptions-when-is-it-a-good-idea/">&lt;p&gt;As a follow up of my “6 reasons why generating OpenAPI sucks” post, I had the pleasure to talk about “is it a good idea to generate OpenAPI descriptions?” with &lt;a href=&quot;https://twitter.com/dret&quot;&gt;Erik Wilde&lt;/a&gt;. In this discussion, we answer this questions at various stages of the API lifecycle: design time, code time, and runtime.
&lt;!--more--&gt;
Watch on &lt;a href=&quot;https://youtu.be/YaiGbEZ0EH4&quot;&gt;Erik Wilde’s Youtube Channel&lt;/a&gt;&lt;/p&gt;</content><author><name>Erik Wilde &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">As a follow up of my “6 reasons why generating OpenAPI sucks” post, I had the pleasure to talk about “is it a good idea to generate OpenAPI descriptions?” with Erik Wilde. In this discussion, we answer this questions at various stages of the API lifecycle: design time, code time, and runtime.</summary></entry><entry><title type="html">/resources rules and /resource sucks … or is it the other way around?</title><link href="https://apihandyman.io/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/" rel="alternate" type="text/html" title="/resources rules and /resource sucks … or is it the other way around?" /><published>2021-05-26T00:00:00+00:00</published><updated>2021-05-26T00:00:00+00:00</updated><id>https://apihandyman.io/resources-vs-resource</id><content type="html" xml:base="https://apihandyman.io/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/">&lt;p&gt;Using singular or plural to represent a list of something is an old debate in computer science, especially in the database field.
But what about APIs then?
It’s still the same, if you look at various APIs, you’ll see that something like “list/search resources” could be either represented by a &lt;code&gt;GET /resources&lt;/code&gt; or a &lt;code&gt;GET /resource&lt;/code&gt;.
Who is right?
Who is wrong?
I have a preference, you may have another, but should we really give importance to such a debate?
Aren’t we missing something?
Let’s investigate that topic and discover what’s really important when choosing collection resource path.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;is-there-a-right-rest-solution&quot;&gt;Is there a “right” REST solution?&lt;/h1&gt;

&lt;p&gt;Regarding choosing between &lt;code&gt;/customer&lt;/code&gt; and &lt;code&gt;/customers&lt;/code&gt;, I often meet people who ask me “is &lt;em&gt;whatever solution&lt;/em&gt; RESTful?” which basically means “what is the &lt;em&gt;right&lt;/em&gt; solution?”.
When doing a choice, I always try to refer to a RFC, standard or common practice in order to make the “right” choice.
So, let’s see what the &lt;a href=&quot;https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;REST Architectural Style dissertation&lt;/a&gt; says about that.&lt;/p&gt;

&lt;p&gt;In short, REST is an architectural style which has been created by Roy Fielding to explain how distributed applications should interact with each other.
He did that to explain how the HTTP protocol work and analyze factually the impact of its possible evolutions.
Actually, he chose to describe factually a model and confront others ideas to this model, rather than just saying “my way is the best”, which is something that we all should think about.
This architectural style defines a set of constraints (client/server separation, statelessness, cacheability, layered system, uniform interface and code on demand)that a REST system must conforms to.&lt;/p&gt;

&lt;p&gt;REST APIs (or RESTful) APIs are supposed to embrace the REST Architectural Style and its constraints.
Actually, this more often than not means those APIs try to conform more or less to HTTP semantic without thinking too much about all REST constraints.
Speaking of constraints, does Mr Fielding dissertation talks about choosing resources paths?
Resource paths (or resource identifiers) are not precisely identified as a constraint but there are some guidance provided:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The definition of resource in REST is based on a simple premise: identifiers should change as infrequently as possible. Because the Web uses embedded identifiers rather than link servers, authors need an identifier that closely matches the semantics they intend by a hypermedia reference, allowing the reference to remain static even though the result of accessing that reference may change over time. REST accomplishes this by defining a resource to be the semantics of what the author intends to identify, rather than the value corresponding to those semantics at the time the reference is created. It is then left to the author to ensure that the identifier chosen for a reference does indeed identify the intended semantics.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://www.ics.uci.edu/~fielding/pubs/dissertation/evaluation.htm#sec_6_2_1&quot;&gt;Roy Fielding, Architectural Styles and the Design of Network-based Software Architectures&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;For what matters in this post, this could be summarized by saying resource identifiers (or path) should change as infrequently as possible and it is up to the author to choose the most adapted semantics.
So as you can see, nothing about singular or plural, according to the REST architectural style, it’s up to us to choose as long as it means something.&lt;/p&gt;

&lt;h1 id=&quot;what-is-sure-dont-do-both&quot;&gt;What is sure: don’t do both&lt;/h1&gt;

&lt;p&gt;So according to REST principles, &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/resource&lt;/code&gt;, you can choose the one you like.
But you have to choose one, you can’t use both, for the sake of consistency and predictability.&lt;/p&gt;

&lt;p&gt;Indeed, it would be quite awkward to do &lt;code&gt;GET /customers&lt;/code&gt; to search or list customers and a &lt;code&gt;GET /order&lt;/code&gt; to list orders.
APIs are supposed to be consistent with themselves and other APIs of the same domain/organization.
Choose one format, write it down in your API design guidelines and ensure that everyone designing APIs in your organization stick to this choice.&lt;/p&gt;

&lt;p&gt;And for those who would come to the idea of using &lt;code&gt;GET /customers&lt;/code&gt; to search or list customers and a &lt;code&gt;GET /customer/{customerId}&lt;/code&gt; to read a specific customer, because “oh, we are reading a single element so let’s go singular now”.
Please don’t do that.&lt;/p&gt;

&lt;p&gt;If people do a &lt;code&gt;GET /whatever&lt;/code&gt; to get a list of whatever they’re used to brainlessly do a &lt;code&gt;GET /whatever/{whateverId}&lt;/code&gt; to get a specific element.
You’ll disturb many people by breaking habits.
But there are more than habits involved here, doing that simply breaks the semantic of paths.
In a file system, do folder names change when you target a file inside them?
In a database, do you change table name when doing a &lt;code&gt;select * where id=whateverId&lt;/code&gt;?
No.
So, please chose one side or the other, no middle ground here.&lt;/p&gt;

&lt;h1 id=&quot;my-reasoned-opinion-plural&quot;&gt;My reasoned opinion: plural&lt;/h1&gt;

&lt;p&gt;I use plural names for collections mostly because of semantics: plural means “it contains multiple elements”. 
Note that I use plural in both path (&lt;code&gt;/customers&lt;/code&gt; is a path of collection resource) but also in data models (&lt;code&gt;customers&lt;/code&gt; is a property representing a list of customers inside a data model).&lt;/p&gt;

&lt;p&gt;Using plural name for a collection also avoid surprise when having singleton resources, for instance &lt;code&gt;GET /customers/{customerId}/address&lt;/code&gt;, I know by reading this that I’ll manipulate a single address and not a list of address.
That’s the main reason why I’m not using singular.
Using singular for collection name would make that less obvious, though the data returned by a &lt;code&gt;GET /customer/{customerId}/address&lt;/code&gt; would give more than a hints about what is actually returned (list or single element).
But that requires to trigger a read operation call to know that (if we don’t rely on documentation at all).&lt;/p&gt;

&lt;p&gt;But let’s be objective, the plural option is not without drawbacks.
Obviously as a machine getting data containing a &lt;code&gt;customerId&lt;/code&gt; (singular) and trying to guess how the API work without taking advantage of the documentation, I have some work to do to “know” that the plural of customer is customers in order to try a &lt;code&gt;GET /customers/{customerId}&lt;/code&gt; (which is quite simple here but determine singular or plural is not always that simple).
But if your API is a true REST API that shouldn’t be a problem because it provides the ready to use links to other resources.
Problem solved if that’s actually a problem, which is not the case most of the time.
Indeed most people don’t care about hypermedia nor automatic API discovery and rely on the API documentation to write code that actually use the API (even for testing).&lt;/p&gt;

&lt;p&gt;Regarding the singular option, I also wonder how then would be called a customer list inside a data model?
I would probably add a suffix (&lt;code&gt;customerList&lt;/code&gt;) but then that introduce inconsistency between path and data, that is another reason why I prefer the plural option.&lt;/p&gt;

&lt;h1 id=&quot;the-truth-is-elsewhere&quot;&gt;The truth is elsewhere&lt;/h1&gt;

&lt;p&gt;I think the lesson to learn here is not determining which one is “better” between &lt;code&gt;/resources&lt;/code&gt; and &lt;code&gt;/resource&lt;/code&gt;, I’m sure someone using singular name has plenty of good reason doing so.
No, the lesson here is that when there is non refutable standard solution, you have to reason to choose one that makes sense.
Avoid “just because” solutions that you can’t explain.
Avoid at all costs “wtf” solutions (like &lt;code&gt;GET /customers&lt;/code&gt; + &lt;code&gt;GET /customer/{customerId}&lt;/code&gt;) introducing complexity or inconsistency.
And don’t forget to put it in your guidelines and ensure that everyone in your organization stick to that decision for the sake of consistency.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Using singular or plural to represent a list of something is an old debate in computer science, especially in the database field. But what about APIs then? It’s still the same, if you look at various APIs, you’ll see that something like “list/search resources” could be either represented by a GET /resources or a GET /resource. Who is right? Who is wrong? I have a preference, you may have another, but should we really give importance to such a debate? Aren’t we missing something? Let’s investigate that topic and discover what’s really important when choosing collection resource path.</summary></entry><entry><title type="html">204 Vs 403 Vs 404 Vs 410</title><link href="https://apihandyman.io/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/" rel="alternate" type="text/html" title="204 Vs 403 Vs 404 Vs 410" /><published>2021-05-19T00:00:00+00:00</published><updated>2021-05-19T00:00:00+00:00</updated><id>https://apihandyman.io/204-vs-403-vs-404-vs-410</id><content type="html" xml:base="https://apihandyman.io/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/">&lt;p&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This third post answers the following question: given that resource with id 123 actually doesn’t exist in the underlying database, what should be the response to &lt;code&gt;GET /resources/123&lt;/code&gt; when consumer is allowed to access such ressource? &lt;code&gt;204 No Content&lt;/code&gt;, &lt;code&gt;403 Forbidden&lt;/code&gt;, &lt;code&gt;404 Not Found&lt;/code&gt; or &lt;code&gt;410 Gone&lt;/code&gt;?&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Choosing HTTP status codes Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.&lt;div class=&quot;alert alert-info&quot;&gt;
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use &lt;a class=&quot;alert-link&quot; href=&quot;https://webconcepts.info/concepts/http-status-code/&quot;&gt;Erik Wilde's Web Concepts&lt;/a&gt;.
&lt;/div&gt;Very special thanks to all Twitter people participating to the &lt;a href=&quot;https://twitter.com/search?q=%23choosehttpstatuscode&amp;amp;src=typed_query&quot;&gt;#choosehttpstatuscode&lt;/a&gt; polls and discussions&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/&quot;&gt;1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/empty-lists-http-status-code-200-vs-204-vs-404/&quot;&gt;4 - Empty list, HTTP status code 200 vs 204 vs 404&lt;/a&gt;&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-context&quot;&gt;The context&lt;/h1&gt;

&lt;p&gt;Let’s say your are creating an API for a library, obviously you’ll design a &lt;code&gt;GET /books&lt;/code&gt; to search for books and a &lt;code&gt;GET /books/{isbn}&lt;/code&gt; to get detailed information about a book.
You did use an &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Standard_Book_Number&quot;&gt;International Standard Book Number&lt;/a&gt; because such a unique and universally known id is far more convenient than an opaque &lt;code&gt;bookId&lt;/code&gt; generated by your implementation.
Indeed using standard/well known values for resource identifiers makes an API more interoperable and usable in other contexts than yours.
Design digression is over, let’s get back to the true topic of this post: choosing an HTTP status code.&lt;/p&gt;

&lt;p&gt;A library may not own all books that have been published on earth , end users may also simply mistype an ISBN or books may have been removed from the library.
What should be the response to a &lt;code&gt;GET /books/{not known, totally wrong or not present anymore ISBN}&lt;/code&gt;?&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/twitter-poll.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Twitter poll results&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;According to my (vague) Twitter poll (which was not explicitly talking about the removed use case), 94% of respondents would return a &lt;code&gt;404 Not Found&lt;/code&gt;, while 4% would return a &lt;code&gt;403 Forbidden&lt;/code&gt; and 2% would return a &lt;code&gt;410 Gone&lt;/code&gt;.
Note also that, in the discussion, some people mentioned returning a &lt;code&gt;204 No Content&lt;/code&gt;.
Let’s see what could be the correct answer(s) according to RFCs.&lt;/p&gt;

&lt;h1 id=&quot;no-brainer-use-404&quot;&gt;No brainer, use 404&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.4&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Let’s start with what is the most common and valid response in such a case: &lt;code&gt;404&lt;/code&gt;
This HTTP status code reason &lt;code&gt;Not Found&lt;/code&gt; is both obvious and actually means what everybody thinks it means (&lt;a href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/#never-ever-use-401-dont-be-fooled-by-its-reason&quot;&gt;which is not always the case&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In our case a &lt;code&gt;GET /books/{totally wrong ISBN}&lt;/code&gt; must return a &lt;code&gt;404&lt;/code&gt;
And that must be your favorite response when consumer is requesting something that doesn’t exist, not only because RFC 7231 says so, but also because people are used to get that response in such a case.
Being consistent with the rest of the world is a rule of thumb when building APIs (or whatever).&lt;/p&gt;

&lt;p&gt;Though people are used to it, there can be some subtleties that requires a more specific HTTP status code when signifying “that doesn’t exist”.&lt;/p&gt;

&lt;h1 id=&quot;has-existed-and-can-do-something-about-it-you-may-use-410&quot;&gt;Has existed and can do something about it, you may use 410&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 410 (Gone) status code indicates that access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.9&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.9&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;In our case a &lt;code&gt;GET /books/{&quot;book that once has been in library but is no more&quot; ISBN}&lt;/code&gt; could return such a status code, especially if the end user is a librarian who deleted a book by mistake.&lt;/p&gt;

&lt;p&gt;Digression: A regular library user may get a &lt;code&gt;404 Not Found&lt;/code&gt; for the same request.
That means that your API may return different responses depending on who is the consumer/end/user.&lt;/p&gt;

&lt;p&gt;Your database state is not your API data state, the data returned by an API may not be exactly how they actually are in the underlying database (we already have seen that in &lt;a href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;previous post&lt;/a&gt;).
It’s not unusual to use a soft delete when removing something from a database and so simply flag it as “deleted” but keeping the data.
There are many reasons to do that, regulations like &lt;a href=&quot;https://en.wikipedia.org/wiki/General_Data_Protection_Regulation&quot;&gt;GDPR&lt;/a&gt; may force you to do so (though you should move such data in another database) or you may want to propose an “undo” possibility.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;410&lt;/code&gt; could also be a good response to a request made on an expired temporary URL (that was valid only for a short period of time, that reminds me to write a post about signed URLs).&lt;/p&gt;

&lt;p&gt;Whatever the reason of signifying that something actually existed, you may return a &lt;code&gt;410 Gone&lt;/code&gt; if and only if consumers can do something about it (like undoing something or requesting a new temporary URL). 
But in that case you should provide information about what they can do about it and how (in response body or at least in documentation).&lt;/p&gt;

&lt;h1 id=&quot;no-scopes-rights-or-privilege-involved-dont-use-403&quot;&gt;No scopes, rights or privilege involved, don’t use 403&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it.  A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.5.3&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.3&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;In our library use case there are no scopes/privileges/rights involved, a &lt;code&gt;GET /books/{wrong ISBN}&lt;/code&gt; will never ever return a &lt;code&gt;403 Forbidden&lt;/code&gt; but a &lt;code&gt;404 Not Found&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;GET /books/{has existed ISBN}&lt;/code&gt; may return a &lt;code&gt;410 Gone&lt;/code&gt; as seen in previous section.
It’s only after that, when trying to undelete the book, maybe with a &lt;code&gt;PUT /books/{&quot;book that once has been in library but is no more&quot; ISBN}&lt;/code&gt;, that the response could be a &lt;code&gt;403 Forbidden&lt;/code&gt; if librarian is not allowed to to so.&lt;/p&gt;

&lt;p&gt;If privileges/rights are involved when accessing resources (either &lt;code&gt;WHATEVER /books/{isbn}&lt;/code&gt; in general or a specific &lt;code&gt;WHATEVER /books/{specific isbn}&lt;/code&gt;), a &lt;code&gt;403&lt;/code&gt; may be returned, you should read &lt;a class=&quot;post-link&quot; href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;Choosing HTTP status codes Part 2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/a&gt; to learn more about that.&lt;/p&gt;

&lt;h1 id=&quot;its-a-consumer-error-dont-use-204&quot;&gt;It’s a consumer error, don’t use 204&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 204 (No Content) status code indicates that the server has successfully fulfilled the request and that there is no additional content to send in the response payload body.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.3.5&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.3.5&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Obviously, I didn’t include &lt;code&gt;204 No Content&lt;/code&gt; in the poll because Twitter only allows 3 choices … 
Well to be honest, though I often meet people wanting to use it that way, I totally forget it for that poll 😅 (and would probably had propose it instead of &lt;code&gt;403 Forbidden&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;No Content&lt;/code&gt; reason may fool you, but the description is quite clear, it doesn’t mean “there’s nothing for this path” but “these is something for this path but not content to return”.
Also that HTTP status is a &lt;code&gt;2xx Success class&lt;/code&gt;, it is not intended to signify that something went wrong which is the case here, consumer did send a non existing/wrong resource id.
So you should avoid using it in such a case.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="HTTP Status Codes" /><summary type="html">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This third post answers the following question: given that resource with id 123 actually doesn’t exist in the underlying database, what should be the response to GET /resources/123 when consumer is allowed to access such ressource? 204 No Content, 403 Forbidden, 404 Not Found or 410 Gone?</summary></entry><entry><title type="html">6 reasons why generating OpenAPI from code when designing and documenting APIs sucks</title><link href="https://apihandyman.io/6-reasons-why-generating-openapi-from-code-when-designing-and-documenting-apis-sucks/" rel="alternate" type="text/html" title="6 reasons why generating OpenAPI from code when designing and documenting APIs sucks" /><published>2021-05-12T00:00:00+00:00</published><updated>2021-05-12T00:00:00+00:00</updated><id>https://apihandyman.io/generating-openapi-sucks</id><content type="html" xml:base="https://apihandyman.io/6-reasons-why-generating-openapi-from-code-when-designing-and-documenting-apis-sucks/">&lt;p&gt;When working with OpenAPI Specification documents to design and document APIs, there are two approaches: either you write it (directly using a text editor or indirectly using an API design GUI), either you generate it from the implementation’s code (using annotations).
Generating OpenAPI Specification documents from code has major drawbacks that you should be aware of in order to choose this approach knowingly.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If you know me, have seen me talking at conferences, have read my posts or my book, you know what is my favorite approach (spoiler: the “write it” one).
But as an API design reviewer I work with many different teams: some use the first approach and others the second one and some use both.
Slowly but surely, the write it approach is gaining ground.
I am pleased to see new teams I have never work with before are already convinced that writing OpenAPI (when design and documenting) is a better approach for them.
And I am even more pleased to see some who were using the “generate it” approach switching to other other one, convinced by my reasons and the problems their encountered.
I thought it could be interesting to share the 6 main reasons why people would stop to use the “generate it” approach and switch to the “write it” one, hence this post.&lt;/p&gt;

&lt;h1 id=&quot;complicates-design&quot;&gt;Complicates design&lt;/h1&gt;

&lt;p&gt;The first reason is that generating OpenAPI from code complicates design.
Indeed, you need to write actual implementation’s code to get something.
You need a fully functional development environment to code and build a more or less empty API’s implementation’s skeleton.&lt;/p&gt;

&lt;p&gt;And not everybody who work on the design of an API can write code.
That may be strange to your eyes, but there are places where developers of an API’s implementation are not the one who will actually design the API, business analysts may have that role.
They work closely with developers but they are the one who actually write the API’s contract.
There are places where those people may work more closely together, contributing to the same OpenAPI document, that would be quite complicated to do that with a generated one if one of them don’t code.&lt;/p&gt;

&lt;p&gt;Some would argue that “writing” OpenAPI is like writing code.
Until not so long ago, you would need to know the syntax to actually write it, but that’s not true anymore.
There are API design GUI that allows anyone (with basic HTTP knowledge) to describe an API without having to write a single line of YAML (or JSON for the most masochistic).&lt;/p&gt;

&lt;h1 id=&quot;forces-to-choose-development-stack&quot;&gt;Forces to choose development stack&lt;/h1&gt;

&lt;p&gt;The second reason is an annoying side effect of having to write actual implementation’s code to get something.
To write code, you actually have to choose a development stack.
When you are working on a totally new software solution making such decisions too early during the overall solution’s design phase may reveal to be a problem.
Indeed, you may realize that the chosen stack was not the more adapted one once you have a full view on what the API is supposed to do and so the written code must be thrown to garbage.
Obviously if that’s just “yet another API in familiar environment”, that reason is null and void.&lt;/p&gt;

&lt;h1 id=&quot;lessens-design-quality&quot;&gt;Lessens design quality&lt;/h1&gt;

&lt;p&gt;Having to write code, especially on an existing application, risks to lessen the API design quality because it may lead to being “inside out” or also less accurate.&lt;/p&gt;

&lt;p&gt;An inside out API design brutally exposes what is happening under the hood resulting in less easy to understand, less easy to use, less easy to evolve APIs.
Seeing existing functions, existing databases, you may be tempted to expose them as is without rethinking them.
That will lead to consumers needing to know how your implementation works when they shouldn’t, leading to tight coupling with them crippling the possibility of evolutions on your side.&lt;/p&gt;

&lt;p&gt;Being polluted by existing implementation or purely development oriented concerns, not only will you expose the engine that should be hidden but you may take shortcuts resulting in less accurate design.
Indeed, for instance, you may choose wrong resources, wrong operations, wrong granularity for an operation or data model or you may simply miss that you should have created a totally new API; all that simply because you were too close to the existing code or data.
Such design will obviously also be less easy to understand, less easy to use, less easy to evolve APIs.&lt;/p&gt;

&lt;h1 id=&quot;casts-doubt-upon-implementation&quot;&gt;Casts doubt upon implementation&lt;/h1&gt;

&lt;p&gt;The big argument of the generate it approach is “no need to synchronize spec and code anymore!”.
Yes that’s true, but that also means you don’t have an independent source of truth for your API’s contract.
Whats was agreed on during the design phase may not be what is actually implemented in the end.
Without a source of truth independent from actual code, there’s no way to test that what is implement is actually ok.
A long time ago, having working with third party contractors building applications for my company that revealed to be a major problem.
And even when working with the family, some errors or modifications may happen inadvertently.&lt;/p&gt;

&lt;h1 id=&quot;complicates-writing-documentation&quot;&gt;Complicates writing documentation&lt;/h1&gt;

&lt;p&gt;Developers who love to write documentation raise your hands!&lt;/p&gt;

&lt;p&gt;Not so many hands risen (that’s a pity, but that’s another story).&lt;/p&gt;

&lt;p&gt;This reason is similar to the first one “Complicates design”.
When working on APIs, people who write the documentation may not be the one who write the code (and note also they may not be the one who do the design).
Doc writers may not want to write code and developers may not want to have people mingling with their codebase.&lt;/p&gt;

&lt;h1 id=&quot;lessens-documentation-quality&quot;&gt;Lessens documentation quality&lt;/h1&gt;

&lt;p&gt;You may not know it but pushing the OpenAPI Specification to its limits allows to write totally awesome API documentation that everyone will love (writing about that is on my to do list).
That’s especially interesting for private APIs, indeed you may not want to do the same level of effort regarding developer portal and producing content.
A complete OpenAPI shown in Redoc, Stoplight Elements or even SwaggerUI will do the trick at almost 0 cost.&lt;/p&gt;

&lt;p&gt;But producing such specification requires to uses all the OpenAPI Specification subtleties and unfortunately not all (if not no) generator allows that (and not all developers are willing to do such effort in their code, because previous reason).
You may possibly tweak what the generator does to achieve some interesting modifications but at what cost?
Whatever you do, generating code irremediably results in less expressive and less complete OpenAPI documents.&lt;/p&gt;

&lt;h1 id=&quot;so-generating-openapi-sucks&quot;&gt;So generating OpenAPI sucks?&lt;/h1&gt;

&lt;p&gt;That’s not what I said, what you should retain from this is is that there are &lt;em&gt;concerns to be aware of&lt;/em&gt; when generating OpenAPI Specification &lt;em&gt;from code when designing and documenting API&lt;/em&gt;.
OK, the post’s title says “suck”, that’s a clickbait (for totally honorable reasons 😅).
Actually and as always, it’s not a matter of right or wrong, it’s a matter of choosing a solution to a given problem according to a context and living with the consequences.&lt;/p&gt;

&lt;p&gt;If in your context, people who design, code, and document are the same or are ok to work with code.
And if people working on design are sufficiently experimented to not be polluted by existing code and data.
And if you’re confident that there will be no variation during implementation.
And if you don’t need all OpenAPI subtleties for your API documentation (and frankly, for private APIs, you can live with that).
You may generate your OpenAPI documents from code.
If not, you may have to rethink your strategy or if it’s too complicated decide knowingly to live with the risks listed in this post.&lt;/p&gt;

&lt;p&gt;And regarding “generating OpenAPI” in general there are use cases where it’s incredibly interesting to do it.
But that’s another story.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">When working with OpenAPI Specification documents to design and document APIs, there are two approaches: either you write it (directly using a text editor or indirectly using an API design GUI), either you generate it from the implementation’s code (using annotations). Generating OpenAPI Specification documents from code has major drawbacks that you should be aware of in order to choose this approach knowingly.</summary></entry><entry><title type="html">401 Vs 403 Vs 404</title><link href="https://apihandyman.io/hands-off-that-resource-http-status-code-401-vs-403-vs-404/" rel="alternate" type="text/html" title="401 Vs 403 Vs 404" /><published>2021-05-05T00:00:00+00:00</published><updated>2021-05-05T00:00:00+00:00</updated><id>https://apihandyman.io/401-vs-403-vs-404</id><content type="html" xml:base="https://apihandyman.io/hands-off-that-resource-http-status-code-401-vs-403-vs-404/">&lt;p&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This second post answers the following question: given that resource with id 123 actually exists in the underlying database, what should be the response to &lt;code&gt;GET /resources/123&lt;/code&gt; when consumer is not allowed to access it? &lt;code&gt;401 Unauthorized&lt;/code&gt;, &lt;code&gt;403 Forbidden&lt;/code&gt; or &lt;code&gt;404 Not Found&lt;/code&gt;?&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Choosing HTTP status codes Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.&lt;div class=&quot;alert alert-info&quot;&gt;
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use &lt;a class=&quot;alert-link&quot; href=&quot;https://webconcepts.info/concepts/http-status-code/&quot;&gt;Erik Wilde's Web Concepts&lt;/a&gt;.
&lt;/div&gt;Very special thanks to all Twitter people participating to the &lt;a href=&quot;https://twitter.com/search?q=%23choosehttpstatuscode&amp;amp;src=typed_query&quot;&gt;#choosehttpstatuscode&lt;/a&gt; polls and discussions&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/&quot;&gt;1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/&quot;&gt;3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/empty-lists-http-status-code-200-vs-204-vs-404/&quot;&gt;4 - Empty list, HTTP status code 200 vs 204 vs 404&lt;/a&gt;&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-context&quot;&gt;The context&lt;/h1&gt;

&lt;p&gt;Let’s say you’re creating an API for a mobile application that allows people to record phone calls.
Once calls are recorded, users can list them and listen to each individual recording.
Listing a user’s recorded calls could be done with a &lt;code&gt;GET /users/{phoneNumber}/calls&lt;/code&gt;, for each phone call listed you get a random and unpredictable &lt;code&gt;id&lt;/code&gt; that can be used to retrieve the actual audio recording with a &lt;code&gt;GET /calls/{callId}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Basically it means that when a user whose phone number is &lt;code&gt;123456789&lt;/code&gt; uses the mobile application, the application sends a &lt;code&gt;GET /users/123456789/calls&lt;/code&gt; API request to list available recorded calls.
The API responds with a &lt;code&gt;200 OK&lt;/code&gt; along with the recorded calls belonging to user.
If user taps on one conversation which id is &lt;code&gt;Bnwgab&lt;/code&gt;, the application sends a &lt;code&gt;GET /calls/Bnwgab&lt;/code&gt; and the API responds with a &lt;code&gt;200 OK&lt;/code&gt; along with the audio file&lt;/p&gt;

&lt;p&gt;But what happens if some curious and maybe malicious user scan network traffic coming out of the application?
This hacker will easily understand how this “not so private” API works.
With very little effort, they will succeed to generate phone numbers that actually exist in the underlying system so send &lt;code&gt;GET /users/{phone number of another user}/calls&lt;/code&gt; requests.
And with more effort, enough patience and adapted tools they may even generate valid random some &lt;code&gt;callId&lt;/code&gt; and send &lt;code&gt;GET /calls/{callId that don't belong to their user account}&lt;/code&gt; requests.&lt;/p&gt;

&lt;p&gt;In either case, the API should prevent accessing resources that don’t belong to the caller and signify there’s a problem with caller’s request.
Note that if that sounds like a no-brainer for many people, that is actually not always the case and some APIs may return a &lt;code&gt;200 OK&lt;/code&gt; along with the requested data.
Regularly, stories such as &lt;a href=&quot;https://techcrunch.com/2021/03/09/iphone-thousands-calls-exposed/&quot;&gt;this one&lt;/a&gt; (which inspired the above use case) come out.
Never forget that when creating APIs and never refrain from double check that your colleagues are also aware of that.
And note also that using PII (Personnally Identifiable Information) or other sensitive data as ids can be very convenient but raises security concerns, especially if they appear in URLs as they can be logged almost everywhere.
I should write a post series about API security one day (&lt;code&gt;POST /writing-ideas&lt;/code&gt; done!).&lt;/p&gt;

&lt;p&gt;Let’s get back to what we are talking about today: HTTP status codes.
Obviously, when consumer make an API call on resource that actually exists but don’t belong to them, the API must respond with a &lt;code&gt;4xx Client Error Class&lt;/code&gt;, but which one could be the more accurate?&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/hands-off-that-resource-http-status-code-401-vs-403-vs-404/twitter-poll.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Twitter poll results&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;According to my &lt;a href=&quot;https://twitter.com/apihandyman/status/1382712503717728257?s=21&quot;&gt;Twitter poll&lt;/a&gt;, 54% of people would return a &lt;code&gt;403 Forbidden&lt;/code&gt;, while 24% would return a &lt;code&gt;404 Not Found&lt;/code&gt; and also 24% would return a &lt;code&gt;401 Unauthorized&lt;/code&gt;.
Let’s see who is right and who is wrong based on what RFCs say.&lt;/p&gt;

&lt;h1 id=&quot;use-404-when-resource-is-none-of-consumers-business-and-never-will&quot;&gt;Use 404 when resource is none of consumer’s business (and never will)&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.4&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Returning a &lt;code&gt;404 Not Found&lt;/code&gt; means “the requested resource does not exists”.
Actually, there’s a subtlety, it could mean “the requested resource actually exists but it’s none of your business, you’re not allowed to access it and never will; actually, it does not exist for you” or “the requested resource does not exist at all” but the consumer will never know what is the true reason behind this HTTP status code.&lt;/p&gt;

&lt;p&gt;That response is the best one for the introduction’s use case, granted that users want to use this application without sharing anything with others.
In that case, given that John and Emma use the application, if Emma “hacks” the API, we will never ever want her to know that &lt;code&gt;/users/{John's phone number}/calls&lt;/code&gt; may exists.
Because they are not supposed to know it exists and even though can’t do anything about it, so better tell her that it “doesn’t exist” (for her).&lt;/p&gt;

&lt;p&gt;But if &lt;code&gt;404 Not Found&lt;/code&gt; is usually my first idea when a consumer tries to access to a &lt;code&gt;/resources/1234&lt;/code&gt; they shouldn’t (I admit I’m a little obsess with security and prone to not show what is not needed to be shown), there are cases where it could be interesting to let them know the target resource exists.&lt;/p&gt;

&lt;h1 id=&quot;use-403-when-consumer-can-do-something-about-it&quot;&gt;Use 403 when consumer can do something about it&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it.  A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.5.3&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.3&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Returning a &lt;code&gt;403 Forbidden&lt;/code&gt; signifies “the requested resource actually MAY exists but you cannot access it. You MAY access it by requesting adequate rights to someone, maybe an administrator for instance”.&lt;/p&gt;

&lt;p&gt;Even if that is not very realistic, let’s say that the example application/API described in the introduction allows users to share recorded conversations with others. Given John has shared his conversations with Emma but not with Tara, Emma triggering a &lt;code&gt;GET /users/{John's phone number}/calls&lt;/code&gt; API call will get a &lt;code&gt;200 OK&lt;/code&gt; while Tara will get a &lt;code&gt;403 Forbidden&lt;/code&gt;. Tara may request John the rights to access his conversations to fix that.&lt;/p&gt;

&lt;p&gt;We have talk about &lt;code&gt;403 Forbidden&lt;/code&gt; and &lt;code&gt;404 Not Found&lt;/code&gt;, but what about the poll’s third option?&lt;/p&gt;

&lt;h1 id=&quot;never-ever-use-401-dont-be-fooled-by-its-reason&quot;&gt;Never ever use 401 (don’t be fooled by its reason)&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 401 (Unauthorized) status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7235#section-3.1&quot;&gt;RFC 7235 Hypertext Transfer Protocol (HTTP/1.1): Authentication, section 3.1&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;As 24% of respondents to my poll, when a consumers tries to access a resource they shouldn’t access, you may be tempted to return a &lt;code&gt;401 Unauthorized&lt;/code&gt; instead of a &lt;code&gt;403 Forbidden&lt;/code&gt;.
Why would you do that?
Maybe because its reason phrase says &lt;code&gt;Unauthorized&lt;/code&gt;.
But that would actually be an error, don’t be fooled by that reason phrase.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;https://www.karlton.org/2017/12/naming-things-hard/&quot;&gt;Phil Karlton&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;There’s a huge problem with &lt;code&gt;401 Unauthorized&lt;/code&gt;, its reason phrase let think that it is tied to “wrong authorization” while it is actually tied to “lack of authentication”.
Actually the RFC that defines it is &lt;a href=&quot;section 3.1&quot;&gt;RFC 7235 - Hypertext Transfer Protocol (HTTP/1.1): Authentication&lt;/a&gt;… “Authentication” and not “Authorization”.
Even the description states that this status is about “authentication credentials”.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;401&lt;/code&gt; signifies there’s a problem with your credentials which usually are provided in an &lt;code&gt;Authorization&lt;/code&gt; header (still wrong name, but at least it’s consistent with the reason).
This status is made to signify “you forgot to provide an Authorization header with some credentials” or “your credentials provided in the Authorization header are invalid/expired”.
In the API world, it basically says “You can’t use the API at all, come back with a valid access token”.&lt;/p&gt;

&lt;p&gt;It’s not meant to say “You can use the API but not access that resource”, that is the job of &lt;code&gt;403 Forbidden&lt;/code&gt;.
And that is clearly stated in its description in &lt;a href=&quot;section 6.5.3&quot;&gt;RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;If authentication credentials were provided in the request, the server considers them insufficient to grant access.  The client SHOULD NOT automatically repeat the request with the same credentials.  The client MAY repeat the request with new or different credentials.  However, a request might be forbidden for reasons unrelated to the credentials.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To be even more sure that &lt;code&gt;403 Forbidden&lt;/code&gt; is the right answer, let’s talk about Oauth 2 scopes.
Indeed, dealing with resource rights access is not always, let’s say “internal business rule” driven (checking in users table that the identified user has the requested phone number for example).
When consumers request an access token using the Oauth 2 framework (the token that goes into the not so well named &lt;code&gt;Authorization&lt;/code&gt; header), they may request a token restricted to given elements thanks to scopes.
For instance, when using the Github API, you may request access to public repo only or to user data only.
What should happen when a consumer requests access to a resource without adapted scopes?
&lt;a href=&quot;https://tools.ietf.org/html/rfc6750#section-3.1&quot;&gt;Section 3.1 of RFC 6750 The OAuth 2.0 Authorization Framework: Bearer Token Usage&lt;/a&gt; is quite clear:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the &quot;scope&quot; attribute with the scope necessary to access the protected resource.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;insufficient_scope error&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;h1 id=&quot;http-status-code-is-not-enough&quot;&gt;HTTP Status code is not enough&lt;/h1&gt;

&lt;p&gt;That means two things.
First &lt;code&gt;401 Unauthorized&lt;/code&gt; is definitely not an option in the case we are studying today.
Second, HTTP status code is not enough.
Indeed, &lt;code&gt;403 Forbidden&lt;/code&gt; could be returned because consumer lacks some scope to &lt;code&gt;GET /resources/{resourceId}&lt;/code&gt; in general or does not comply to some business rule and cannot &lt;code&gt;GET /resource/1234&lt;/code&gt; (a specific id).
Providing a message and maybe some structured data to explained the why of the error and how it can be solved (request access token with scope X in first case or contact some admin in second case) is mandatory.
Note that, this made me realized that &lt;code&gt;403 Forbidden&lt;/code&gt; does not actually disclose that a resource exists, it totally depends on what is said beyond the HTTP status code.&lt;/p&gt;

&lt;h1 id=&quot;dont-forget-dx-and-context&quot;&gt;Don’t forget DX and context&lt;/h1&gt;

&lt;p&gt;Respecting HTTP and other RFCs is important to avoid surprising developers with behaviors that are against common practices, but most important, whatever the HTTP status code you’ll choose to return, what matters above all is providing the response the most adapted for the context that will actually help the developer (and the consumer and even the end user) to know what is actually happening and help them solve the problem if they can.&lt;/p&gt;

&lt;p&gt;So, when consumers want to access a resource they shouldn’t, don’t return a &lt;code&gt;401 Unauthorized&lt;/code&gt;, you would go against the HTTP protocol.
Instead, return a &lt;code&gt;404 Not Found&lt;/code&gt; if consumers can’t do anything about it (so from their perspective, it does not exist) and return a &lt;code&gt;403 Forbidden&lt;/code&gt; along with a meaningful message if they can request access.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="HTTP Status Codes" /><summary type="html">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This second post answers the following question: given that resource with id 123 actually exists in the underlying database, what should be the response to GET /resources/123 when consumer is not allowed to access it? 401 Unauthorized, 403 Forbidden or 404 Not Found?</summary></entry><entry><title type="html">Adopt and not assess OpenAPI linters and other thoughts reading Thoughtworks Technology Radar 24</title><link href="https://apihandyman.io/reading-thoughtworks-technology-radar-24/" rel="alternate" type="text/html" title="Adopt and not assess OpenAPI linters and other thoughts reading Thoughtworks Technology Radar 24" /><published>2021-04-28T00:00:00+00:00</published><updated>2021-04-28T00:00:00+00:00</updated><id>https://apihandyman.io/reading-thoughtworks-technology-radar-24</id><content type="html" xml:base="https://apihandyman.io/reading-thoughtworks-technology-radar-24/">&lt;p&gt;Thoughtworks Technology Radar 24, an “opinionated guide to technology frontiers”, came out last 15th of April, 2021 and I thought it could be interesting to read it from an API perspective, hence this post sharing my thoughts on it.
As always it is really interesting and full of valuable insights, though I nearly fell off my chair while reading the Tools section which talks about OpenAPI linters (if it’s not a click bait, I don’t know what it is).
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-thoughtworks-technology-radar&quot;&gt;What is Thoughtworks Technology Radar&lt;/h1&gt;

&lt;p&gt;Thoughtworks is a quite famous software consultancy company, brilliant minds such as &lt;a href=&quot;https://martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt; are working there.
Every 6 months, they publish their Technology Radar:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Radar is a document that sets out the changes that we think are currently interesting in software development - things in motion that we think you should pay attention to and consider using in your projects. It reflects the idiosyncratic opinion of a bunch of senior technologists and is based on our day-to-day work and experiences. While we think this is interesting, it shouldn’t be taken as a deep market analysis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar/faq&quot;&gt;Radar FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar&quot;&gt;Latest Thoughtworks Technology Radar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://assets.thoughtworks.com/assets/technology-radar-vol-24-en.pdf&quot;&gt;Thoughtworks Technology Radar Volume 24 (PDF version)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While authors claim it’s not a deep market analysis, it’s still full of highly valuable insights that you, as a developer, architect, CTO or whatever is your title should have in mind for your next tech related decisions or simply to discover new tools, language, trends, …&lt;/p&gt;

&lt;p&gt;In what follows, I picked up a few topics of the 24th edition of this radar that raise my interest from an API perspective (and if you can’t wait to know why I nearly fell off my chair, you can jump to the &lt;a href=&quot;#adopt-and-not-assess-openapi-linting-and-why-i-nearly-fell-off-my-chair&quot;&gt;last section&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;reminder-there-are-no-silver-bullets-in-architecture&quot;&gt;Reminder, there are no silver bullets in architecture&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.thoughtworks.com/radar#discerning-the-context-for-architectural-coupling&quot;&gt;Discerning the Context for Architectural Coupling&lt;/a&gt; theme is a gentle reminder of what I called “design in context”.
Never choose a solution just because this is “the” solution, because depending on the context it could be totally wrong.
That works for anything in general and in the API architecture world, that works for instance for “BFF or not” and “REST ot GraphQL or gRPC”.&lt;/p&gt;

&lt;h1 id=&quot;smoothly-evolve-your-apis&quot;&gt;Smoothly evolve your APIs&lt;/h1&gt;

&lt;p&gt;The radar authors strongly think that people should be adopting the &lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/api-expand-contract&quot;&gt;1. API expand-contract&lt;/a&gt; technique (also called &lt;a href=&quot;https://www.martinfowler.com/bliki/ParallelChange.html&quot;&gt;parallel change&lt;/a&gt;).
The API expand pattern allows to introduce a breaking in 3 steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add element&lt;/li&gt;
  &lt;li&gt;Deprecate what added element replace&lt;/li&gt;
  &lt;li&gt;Remove once consumers have switched&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While it’s a totally valid technique, the last step can be tricky if there are many consumers or if there are far from you.
You should read what &lt;a href=&quot;/apidays-interface-doing-apis-right-and-doing-right-apis/#versioning-handling-changes&quot;&gt;Sam Newman said about the cost of change at API Days Interface 2020&lt;/a&gt;.
In my humble opinion, working seriously on design and thinking about how your API may evolve will help you avoid having to use this technique.&lt;/p&gt;

&lt;p&gt;I will not say more for now, writing one or more posts about API change and versioning is on my to-do list.&lt;/p&gt;

&lt;h1 id=&quot;share-between-ui-and-bff-when-owning-both&quot;&gt;Share between UI and BFF when owning both&lt;/h1&gt;

&lt;p&gt;The radar states that the use of &lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/ui-bff-shared-types&quot;&gt;16. UI/BFF shared types&lt;/a&gt; is increasing and that companies should try this technique on a project that can handle the risk (trial).
That looks like a very good idea as long as both UI and BFF belong to the same team.
So don’t ever think about using this technique between UI and regular API, you should be decoupled as much as you can from elements you don’t own.&lt;/p&gt;

&lt;h1 id=&quot;compute-encrypted-data-to-preserve-privacy&quot;&gt;Compute encrypted data to preserve privacy&lt;/h1&gt;

&lt;p&gt;The first time I heard about the &lt;a href=&quot;&quot;&gt;20. Homomorphic encryption&lt;/a&gt; (&lt;a href=&quot;&quot;&gt;technique section&lt;/a&gt;) was in 2016 at an API conference: The Česká spořitelna bank was using it experimentally to share data with third party.
The idea is that using this technique, the encrypted data are still computable.
You can send them to an untrusted third party who will do some calculation with them and return you the results that you will decrypt.
According to the radar, it became fairly easy to use it.
But while having this technique in mind since 2016 and working in the financial industry, I’m still longing to work an API that will allow me to use it.&lt;/p&gt;

&lt;h1 id=&quot;unleash-the-power-of-apis-while-its-possible&quot;&gt;Unleash the power of APIs (while it’s possible)&lt;/h1&gt;

&lt;p&gt;If you want to build an event-driven architecture, you should take a look at &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;.
While being a widely adopted distributed event streaming platform, actually managing it does not seem quite simple.
That’s why some companies launch their Kafka as a service offers, they run it, you use it.
But as stated in the radar, some companies have gone a little farther and started to offer “Kafka without Kafka”.
How is this possible?
Only thanks to APIs.&lt;/p&gt;

&lt;p&gt;APIs (whatever their nature, web, messaging or whatever) offer amazing possibilities when it comes to replace the engine behind the interface.
Thanks to these &lt;a href=&quot;https://www.thoughtworks.com/radar/platforms/kafka-api-without-kafka&quot;&gt;45. Kafka API without Kafka&lt;/a&gt; describes in the &lt;a href=&quot;https://www.thoughtworks.com/radar/platforms&quot;&gt;Platforms&lt;/a&gt; section, you use a service that looks like Kafka but that is actually not.
It allows companies to provide their technology similar to kafka to people who are used to it without any modification.
From my perspective, the main to understand point here is not about Kafka (though it is actually interesting) but how anyone can provide a service compatible with an existing solution.
What is needed is to simply offer the same interface.
And, for now, that’s still “possible but check your lawyers are ready” thanks to the recent legal decision in the &lt;a href=&quot;https://apievangelist.com/2021/04/13/My-oracle-vs-google-api-copyright-journey/&quot;&gt;Google vs Oracle API Copyright case&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Beware that &lt;a href=&quot;https://www.thoughtworks.com/radar/platforms/kafka-api-without-kafka&quot;&gt;Kafka API without Kafka&lt;/a&gt; is in “Assess”, it’s worth exploring to understand how it could affect you.
Note also that such solutions may not be fully compatible all Kafka features&lt;/p&gt;

&lt;h1 id=&quot;lets-give-a-try-to-fast-api-python-framework&quot;&gt;Let’s give a try to Fast API Python framework&lt;/h1&gt;

&lt;p&gt;I work with data scientists to help them build APIs and they obviously use Python.
So, discovering in the &lt;a href=&quot;https://www.thoughtworks.com/radar/languages-and-frameworks&quot;&gt;Languages &amp;amp; Frameworks&lt;/a&gt; section of the radar, a new Python web API framework such &lt;a href=&quot;https://fastapi.tiangolo.com/&quot;&gt;Fast API&lt;/a&gt; having Thoughtworks seal of approval (&lt;a href=&quot;https://www.thoughtworks.com/radar/languages-and-frameworks/fastapi&quot;&gt;86. FastAPI&lt;/a&gt;), made my day.
Beware, Fast API is still on “Trial” for Thoughtworks, that means “Enterprises should try this technology on a project that can handle the risk”.
As I’m starting to work with Python for a complete overhaul of the API Stylebook, a personal project that perfectly can handle such risk, I may give it a try.&lt;/p&gt;

&lt;h1 id=&quot;adopt-and-not-assess-openapi-linting-and-why-i-nearly-fell-off-my-chair&quot;&gt;Adopt and not assess OpenAPI linting (and why I nearly fell off my chair)&lt;/h1&gt;

&lt;p&gt;And last but not least, the radar mentions 2 OpenAPI linters in the &lt;a href=&quot;https://www.thoughtworks.com/radar/tools&quot;&gt;tools&lt;/a&gt; section:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar/tools/spectral&quot;&gt;77. Spectral&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar/tools/zally&quot;&gt;79. Zally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI Specification&lt;/a&gt; (fka. the Swagger Specification) is a format allowing you to describe a web API contract.
An OpenAPI linter will help you to ensure that the design of an API conforms to your guidelines (or style guide).&lt;/p&gt;

&lt;p&gt;I know both of these tools for quite a long time now.
&lt;a href=&quot;https://opensource.zalando.com/zally/&quot;&gt;Zally&lt;/a&gt; was the first industrial/high quality OpenAPI linter I encountered but I find it quite complex to use, there’s a cli, a server, you need to use Kotlin to write your rules.
And once I discovered &lt;a href=&quot;https://github.com/stoplightio/spectral&quot;&gt;Spectral&lt;/a&gt;, I totally forgot Zally.&lt;/p&gt;

&lt;p&gt;A simple &lt;code&gt;npm install -g @stoplight/spectral&lt;/code&gt; and you can start.
Writing rules is quite simple, though like any “code”, you definitely need to test them.
I use it extensively every day while doing API design reviews, check my &lt;a href=&quot;https://apihandyman.io/the-augmented-api-design-reviewer/&quot;&gt;Augmented API Design Reviewer&lt;/a&gt; talk to learn more about it.&lt;/p&gt;

&lt;p&gt;Note that I prefer Spectral in my context, I find it simpler, I could simply achieve what I wanted easily, it’s integration with Stoplight Studio is very convenient and it constantly evolves.
But remember, there are no silver bullets, so test those 2 and choose the one that suits you.&lt;/p&gt;

&lt;p&gt;While being quite happy to see those 2 OpenAPI linters in the radar, there are 2 problems regarding how this topic is presented in my humble opinion.&lt;/p&gt;

&lt;p&gt;First, they are in “assess” (worth exploring to see how it will affect you), while I can understand that classification probably based on “how many companies use them”, I definitely think they should be in “adopt” (industry should adopt these items).
Designing API is hard, ensuring consistency is hard and such linters participate in simplifying designers job and ensure a certain level of consistency in your API surface.
Note that such tools will never, ever replace a human powered API design review.&lt;/p&gt;

&lt;p&gt;The second problem in the radar is what is said about “specs” and OpenAPI in the Spectral description, and especially this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While this tool is a welcome addition to the API development workflow, it does raise the question of whether a non-executable specification should be so complex as to require an error-checking technique designed for programming languages. Perhaps developers should be writing code instead of specs?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I nearly fell off my chair.&lt;/p&gt;

&lt;p&gt;This completely misses the point.
It leaves readers totally unaware of API design questions and do not help to grasp how they can take advantage of the OpenAPI specification and such a linter to design consistent APIs.
That gives a totally wrong perspective of OpenAPI and OpenAPI linters in general, and Spectral in particular.
While I met and still meet people who actually are in such state of mind, even don’t giving a 💩 about API design and everything around, I wouldn’t have expected that from a company such as Thoughtworks.
I usually succeed to change people mind about this topic, they realize API design and everything around is a thing, but if Thoughtworks tells something different that will make my work more complicated 😅.
I would love to know how the authors came to writing this, did I missed something?&lt;/p&gt;

&lt;p&gt;Hopefully, I was glad to see the discourse about OpenAPI linters is totally different in the Zally’s description and offers the right perspective on the topic.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As the API specification ecosystem matures, we’re seeing more tools built to automate style checks. Zally is a minimalist OpenAPI linter that helps to ensure an API conforms to the team’s API style guide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe it’s due to these particular pandemic times, but it seems that there’s a lack of alignment between the 2 authors of these advices.
That second advice on OpenAPI linters is far much better, consider it applies to Spectral too.&lt;/p&gt;

&lt;p&gt;And if I can add my opinionated 2 cents about API design, OpenAPI and linters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You MUST have an API design first approach&lt;/li&gt;
  &lt;li&gt;You MUST write API design guidelines (or style guide) describe the look and feel of your APIs&lt;/li&gt;
  &lt;li&gt;You MUST use the OpenAPI (or whatever) specification to describe the result of your work on design&lt;/li&gt;
  &lt;li&gt;You MUST use an OpenAPI (or whatever) linter to ensure your APIs conform to your style guides (and Spectral is a very good tool to do that)&lt;/li&gt;
  &lt;li&gt;You MUST do an API design review with human beings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider all those items should be “Adopt” according to Thoughtworks classification.&lt;/p&gt;

&lt;p&gt;If you want to learn more about the OpenAPI Specification, API guidelines, API design reviews and Spectral, you should look at my following talks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apihandyman.io/openapi-trek-api-days-london-2016/&quot;&gt;OpenAPI Trek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apihandyman.io/api-styleguide-the-lord-of-api-designs/&quot;&gt;The Lord of API Designs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apihandyman.io/api-design-reviewers-starter-set/&quot;&gt;The API Design Reviewer’s Starter Set&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apihandyman.io/the-augmented-api-design-reviewer/&quot;&gt;The Augmented API Design Reviewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Thoughtworks Technology Radar 24, an “opinionated guide to technology frontiers”, came out last 15th of April, 2021 and I thought it could be interesting to read it from an API perspective, hence this post sharing my thoughts on it. As always it is really interesting and full of valuable insights, though I nearly fell off my chair while reading the Tools section which talks about OpenAPI linters (if it’s not a click bait, I don’t know what it is).</summary></entry><entry><title type="html">404 Vs 405 Vs 501</title><link href="https://apihandyman.io/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/" rel="alternate" type="text/html" title="404 Vs 405 Vs 501" /><published>2021-04-21T00:00:00+00:00</published><updated>2021-04-21T00:00:00+00:00</updated><id>https://apihandyman.io/404-vs-405-vs-501</id><content type="html" xml:base="https://apihandyman.io/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/">&lt;p&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.
This first post answers the following question: given that a &lt;code&gt;GET /resources/123&lt;/code&gt; request returns a &lt;code&gt;200 OK&lt;/code&gt;, what should be the response to &lt;code&gt;DELETE /resources/123&lt;/code&gt; if &lt;code&gt;DELETE&lt;/code&gt; method is not implemented? &lt;code&gt;404 Not Found&lt;/code&gt;, &lt;code&gt;405 Method Not Allowed&lt;/code&gt; or &lt;code&gt;501 Not Implemented&lt;/code&gt;?&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Choosing HTTP status codes Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context.&lt;div class=&quot;alert alert-info&quot;&gt;
I never remember in which RFCs HTTP status codes are defined.
To get a quick access to their documentation, I use &lt;a class=&quot;alert-link&quot; href=&quot;https://webconcepts.info/concepts/http-status-code/&quot;&gt;Erik Wilde's Web Concepts&lt;/a&gt;.
&lt;/div&gt;Very special thanks to all Twitter people participating to the &lt;a href=&quot;https://twitter.com/search?q=%23choosehttpstatuscode&amp;amp;src=typed_query&quot;&gt;#choosehttpstatuscode&lt;/a&gt; polls and discussions&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;1 - This is not the HTTP method you're looking for, HTTP status code 404 vs 405 vs 501&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/hands-off-that-resource-http-status-code-401-vs-403-vs-404/&quot;&gt;2 - Hands off that resource, HTTP status code 401 vs 403 vs 404&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/move-along-no-resource-to-see-here-seriously-http-status-code-204-vs-403-vs-404-vs-410/&quot;&gt;3 - Move along, no resource to see here (truly), HTTP status code 204 vs 403 vs 404 vs 410&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/empty-lists-http-status-code-200-vs-204-vs-404/&quot;&gt;4 - Empty list, HTTP status code 200 vs 204 vs 404&lt;/a&gt;&lt;/li&gt;
          
        
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-context&quot;&gt;The context&lt;/h1&gt;

&lt;p&gt;In my &lt;a class=&quot;post-link&quot; href=&quot;/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/&quot;&gt;Batch (Github) API calls with CSV and Postman runner and visualizer&lt;/a&gt; post, I used the Github REST API and discovered it was impossible to delete an issue on a repository with a &lt;code&gt;DELETE /{user}/{repository}/issues/{issueId}&lt;/code&gt; request simply because it was not implemented.
Unfortunately, the Github API warned me with a quite awkward &lt;code&gt;404 Not Found&lt;/code&gt; though a &lt;code&gt;GET&lt;/code&gt; on the very same issue returned a &lt;code&gt;200 OK&lt;/code&gt; that tells “this issue exists”.
That’s quite a contradiction.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/this-is-not-the-http-method-you-re-looking-for-http-status-code-404-vs-405-vs-501/twitter-poll.png&quot; class=&quot;figure-img img-fluid&quot; alt=&quot;Twitter poll results&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;According to a Twitter poll I made, a few voters (10%) agreed with Github REST API’s &lt;code&gt;404 Not Found&lt;/code&gt; response, most people (56%) would use a &lt;code&gt;405 Method Not Allowed&lt;/code&gt;, but a significant amount (34%) would use &lt;code&gt;501 Not Implemented&lt;/code&gt;.
Let’s see which HTTP status code(s) can be used when a resource actually exists but the method provided in the request is not available.&lt;/p&gt;

&lt;h1 id=&quot;use-405-method-not-allowed-when-method-isnt-defined-in-contract&quot;&gt;Use 405 Method Not Allowed when method isn’t defined in contract&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 405 (Method Not Allowed) status code indicates that the method received in the request-line is known by the origin server but not supported by the target resource.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.5&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.5&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;A &lt;code&gt;405&lt;/code&gt; is a &lt;code&gt;4xx&lt;/code&gt; class status code, which means it’s client’s fault.
Receiving such a response means the client sent to the origin server a request with a method that is not allowed/supported by the target resource.
Let’s rephrase that definition in the context of an API:
a consumer will get a &lt;code&gt;405 Method Not Allowed&lt;/code&gt; response when sending a request with a method which is not explicitly mentioned in in the contract or documentation on the target resource.
For instance, that means if the API’s contract or documentation states the only method supported by a resource &lt;code&gt;/resource&lt;/code&gt; is &lt;code&gt;GET&lt;/code&gt;, a consumer sending a request on this resource using any other method, like &lt;code&gt;DELETE /resource&lt;/code&gt; for instance, will get a &lt;code&gt;405 Method Not Allowed&lt;/code&gt; response.&lt;/p&gt;

&lt;p&gt;Therefore, the &lt;code&gt;405&lt;/code&gt; status code is the one I would have expected from the Github REST API when I tried to delete an issue.
Indeed, the API’s documentation describing the API’s contract of the issue resource (&lt;code&gt;/{user}/{repository}/issues/{issueId}&lt;/code&gt;) only mentions &lt;code&gt;GET&lt;/code&gt; and I sent &lt;code&gt;DELETE&lt;/code&gt;.
It’s clearly my fault, though it’s quite surprising to NOT be able to delete an issue (but that’s another story).&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;405 Method Not Allowed&lt;/code&gt; is the right choice when the method is not defined in contract, but sending a “wrong” method is not always consumer’s fault, that’s where a &lt;code&gt;501 Not Implemented&lt;/code&gt; could be interesting.&lt;/p&gt;

&lt;h1 id=&quot;use-501-not-implemented-when-partially-implementing-a-standard&quot;&gt;Use 501 Not Implemented when partially implementing a “standard”&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 501 (Not Implemented) status code indicates that the server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.6.2&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, Section 6.6.2&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;A &lt;code&gt;5xx&lt;/code&gt; class error means the server is at fault.
A &lt;code&gt;501 Not Implemented&lt;/code&gt; basically says “we’re deeply sorry but &lt;code&gt;METHOD&lt;/code&gt; has not been implemented on this resource and maybe has not been implemented at all on any resource”.&lt;/p&gt;

&lt;p&gt;Sending a &lt;code&gt;TOTALLY-UNKNOWN-METHOD /whatever-resource&lt;/code&gt; could result in getting a &lt;code&gt;501&lt;/code&gt; if the method does not match any &lt;a href=&quot;https://webconcepts.info/concepts/http-method/&quot;&gt;generally known one&lt;/a&gt;, but in that case I would prefer to return a &lt;code&gt;405 Method Not Allowed&lt;/code&gt; as it’s not the server’s fault if the consumer really sent a bullshit method in its request and must send an acceptable one.&lt;/p&gt;

&lt;p&gt;But, imagine you are implementing a “more or less standard” interface contract.
It could be because you work in a regulated industry like banking or an highly inter-connected one like travel or logistics.
It could be because you want to implement a protocol such as WebDAV, which is a extended version of HTTP adding new methods.
It could also be simply because inside your company several components have to share a common interface in order to facilitate communication.&lt;/p&gt;

&lt;p&gt;Imagine now that standard contract you need to implement says consumer can use &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; on &lt;code&gt;/resource&lt;/code&gt; but you only implement &lt;code&gt;GET&lt;/code&gt; in your version 1 for whatever reasonable reason.
In that case, returning a &lt;code&gt;501 Not Implemented&lt;/code&gt; would be the perfect answer as the “standard” contract says that &lt;code&gt;PUT /whatever-resource&lt;/code&gt; is possible but it has not been implemented by the actual provider.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;501 Not Implemented&lt;/code&gt; is a very good answer in such a context of partially implementing a “more or less standard” API, returning a &lt;code&gt;404 Not Found&lt;/code&gt; is totally out of question in any HTTP method related error.&lt;/p&gt;

&lt;h1 id=&quot;never-use-404-not-found-when-receiving-wrong-or-unknown-method&quot;&gt;Never use 404 Not Found when receiving wrong or unknown method&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#section-6.5.4&quot;&gt;RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, section 6.5.4&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;The Github REST API responded with a &lt;code&gt;404 Not Found&lt;/code&gt; to my &lt;code&gt;DELETE /issue-resource-path&lt;/code&gt; request.
According to RFC 7231, that tells the issue identified by the path doesn’t exist (A) or Github is not willing to disclose that issue actually exists (B).
Unfortunately, both options were contradicted by the &lt;code&gt;GET /issue-resource-path&lt;/code&gt; returning a &lt;code&gt;200 OK&lt;/code&gt;.
Indeed, getting this &lt;code&gt;200&lt;/code&gt; tells the issue actually exists (Not A) and Github is willing to disclose it exists (Not B).&lt;/p&gt;

&lt;p&gt;And even if for any reason I was actually not able to see this issue (we’ll talk about that in a later post) and so get a &lt;code&gt;404&lt;/code&gt; on my &lt;code&gt;GET&lt;/code&gt;, I still would prefer to get a &lt;code&gt;405&lt;/code&gt; on my &lt;code&gt;DELETE&lt;/code&gt;, that way I could have quickly know that whatever the issue I want to delete, I will never be able to delete it as it’s not possible according to the API’s contract.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><category term="HTTP Status Codes" /><summary type="html">When designing APIs, choosing HTTP status codes is not always that obvious and prone to errors, I hope this post series will help you to avoid common mistakes and choose an adapted one according to the context. This first post answers the following question: given that a GET /resources/123 request returns a 200 OK, what should be the response to DELETE /resources/123 if DELETE method is not implemented? 404 Not Found, 405 Method Not Allowed or 501 Not Implemented?</summary></entry><entry><title type="html">When unicorn poop hits the fan (or how APIs can improve how we build software)</title><link href="https://apihandyman.io/when-unicorn-poop-hits-the-fan-or-how-apis-can-improve-how-we-build-software/" rel="alternate" type="text/html" title="When unicorn poop hits the fan (or how APIs can improve how we build software)" /><published>2021-04-14T00:00:00+00:00</published><updated>2021-04-14T00:00:00+00:00</updated><id>https://apihandyman.io/unicorn-poop</id><content type="html" xml:base="https://apihandyman.io/when-unicorn-poop-hits-the-fan-or-how-apis-can-improve-how-we-build-software/">&lt;p&gt;Do you know what happens when you throw unicorn poop into a fan?
It makes everything better, everyone and everything around looks perfect, covered with joy and happiness.
Working seriously on (public or private) APIs can lead to the same kind of effect on how we build software.
Why?
Because modern web APIs raises the bar of software design and developer experience and so raises awareness and expectations regarding these topics for software in general.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Very special thanks to &lt;a href=&quot;https://twitter.com/mrlapindesign&quot;&gt;@mrlapindesign&lt;/a&gt; for the unicorn poop hits the fan post’s banner.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;from-api-design-to-software-design-and-architecture&quot;&gt;From API design to software design and architecture&lt;/h1&gt;

&lt;p&gt;I help people to design their web APIs in order to help them achieve the creation of APIs that fulfill actual needs and will be easy to understand, easy to use, reusable and evolvable.
But my true aim is actually to help them grow their API design skills so they won’t need my help anymore.
I have seen API designers improving their skills, switching their stance from design beginners (if not skeptical) just seeking a “validated API design badge”, having basic questions like “should we use a POST or a GET” or “is it /resources or /resource?”, to fully aware design experts focusing on needs, able to challenge their own designs, to evaluate pros and cons of various design options and to bring interesting solutions to new design challenges not covered by guidelines.
This is already great, but there’s more to that.
From time to time, I meet someone saying “working on API design improved the way I build software”, and that is a sign of “API unicorn poop” actually hitting the fan.&lt;/p&gt;

&lt;p&gt;Working seriously on API design not only improves the design of our APIs but it helps to better design object data models, database tables, and also messages (Kafka messages deserves to be designed too you know).
And beyond data, you can use your API design skills to write better code, better methods or functions, because API design teaches to question inputs and outputs but also needs and business rules in order to produce something that is useful and simple.
At upper scale, it also improves our vision of the domain we are working on, helping us to organize it in pieces of software that make more sense for us and the outside world, and so improving the architecture of the system.&lt;/p&gt;

&lt;p&gt;Working on API design actually improves the whole software stack behind the interface.
But modern web APIs are not only about interface contract design&lt;/p&gt;

&lt;h1 id=&quot;from-developer-experience-to-everyone-experience&quot;&gt;From developer experience to everyone experience&lt;/h1&gt;

&lt;p&gt;Modern web APIs comes with the concept of DX, Developer eXperience.
It’s basically UX, user experience, focusing on developers who choose to use APIs and write code to actually use them.
A good API design is mandatory to provide a good developer experience.
And that is important not only for public APIs, but also private ones.
Unfortunately, it’s not because an API has one of the best in class design that people will want to use it, will be happy to use it.
How many promising APIs have been totally crippled by terrible registration process, terrible documentation or loony non-standard security or simply because people were not aware those APIs actually exists.
How you find APIs, how simple is their registration process, how clear is the documentation, how standard is their security, how short is the “time to first call”, all those aspects are what will make a terrible or wonderful developer experience.&lt;/p&gt;

&lt;p&gt;Hit by the “API unicorn poop”, you’ll think about the people who will come after you to work on what you build, you’ll think about the people who may have to run and monitor what you build (not everyone as turn to “full develops, you build it, you run it”, and even so, you’ll think about your team).
You’ll start to work on documentation, automation, … you’ll do whatever is possible to ensure that anyone can start to work in a matter of minute if not seconds.
Writing documentation, you’ll work harder on its content, its design in order to ensure it is actually user-friendly and people find what they need instantly.
You may even start to wonder if it’s reasonable to use 123 different technologies in your picoservices architecture, that could be a real HR nightmare to find people actually mastering that obscure framework or language you choose to use just because.&lt;/p&gt;

&lt;p&gt;Basically, working seriously on APIs DX, you’ll start to think about user experience of everyone who will have to work one way or another with what you build, whatever it is.&lt;/p&gt;

&lt;h1 id=&quot;raising-expectations-starting-a-virtuous-circle&quot;&gt;Raising expectations, starting a virtuous circle&lt;/h1&gt;

&lt;p&gt;Obviously and hopefully, some people in the software industry did not wait the Web API train to think about design and developer experience, but there was still a lot to do in this area when Web APIs became a thing and there’s still much to do even after that.
Now working on design and developer experience became a de facto standard when providing public APIs, then it started to contaminate private APIs and I believe it will irremediably contaminate everything in software beyond interface contracts.&lt;/p&gt;

&lt;p&gt;If I was pessimistic, I would say that companies creating software for themselves or others should sense they can save or earn much money by creating software that fulfill actual needs, are easy to understand, easy to use and reuse, can evolve easily, and offer a overall descent experience.
But I prefer to see that from a more optimistic perspective, having been shown empathy and be very happy with that, people will raise their standard, change their perspective and in return build software along with an experience that are as good as the one they’ve encountered.&lt;/p&gt;

&lt;p&gt;So, please, next time you create a technology, framework, build an application/system for your company, or simply write code, throw unicorn poop in the fan, think about design and developer experience; if you don’t do it for others, do it at least for you.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p class=&quot;mb-0&quot;&gt;You'll thank me later&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;&lt;cite title=&quot;Source Title&quot;&gt;Adrian Monk&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Do you know what happens when you throw unicorn poop into a fan? It makes everything better, everyone and everything around looks perfect, covered with joy and happiness. Working seriously on (public or private) APIs can lead to the same kind of effect on how we build software. Why? Because modern web APIs raises the bar of software design and developer experience and so raises awareness and expectations regarding these topics for software in general.</summary></entry></feed>