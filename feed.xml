<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-11-03T07:12:00-05:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">Choosing between birthDate and dateOfBirth has important implications for your API</title><link href="https://apihandyman.io/choosing-between-birthdate-and-dateofbirth-has-important-implications-for-your-api/" rel="alternate" type="text/html" title="Choosing between birthDate and dateOfBirth has important implications for your API" /><published>2021-11-03T00:00:00-05:00</published><updated>2021-11-03T00:00:00-05:00</updated><id>https://apihandyman.io/choosing-between-birthdate-and-dateofbirth-has-important-implications-for-your-api</id><content type="html" xml:base="https://apihandyman.io/choosing-between-birthdate-and-dateofbirth-has-important-implications-for-your-api/">&lt;p&gt;On LinkedIn, someone asked me what to choose between &lt;code&gt;birthDate&lt;/code&gt; or &lt;code&gt;dateOfBirth&lt;/code&gt;.
That looks like a very simple question, but it’s absolutely not.
Choosing between two names is the tree that hides the forest.
Besides having impacts on understandability, choosing a name can have impacts on naming patterns, data, or privacy which are quite important topics for APIs. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Banner photography: &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Contrasting_Tree_Types_Coexist_in_a_Forest.jpg&quot;&gt;Contrasting Tree Types Coexist in a Forest&lt;/a&gt; by &lt;a href=&quot;https://commons.wikimedia.org/wiki/User:Wingchi&quot;&gt;Wingchi&lt;/a&gt;. &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/2.5/deed.en&quot;&gt;Creative Commons Attribution-Share Alike 2.5 Generic&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;is-that-us-english&quot;&gt;Is that US english?&lt;/h1&gt;

&lt;p&gt;As the &lt;code&gt;birthDate&lt;/code&gt; or &lt;code&gt;dateOfBirth&lt;/code&gt; question followed my Excuse my French API post, and as it is a debate I often have with other ESL API designers, I wanted to check what is said in US english: “birth date” (&lt;code&gt;birthDate&lt;/code&gt;), “birthdate” (&lt;code&gt;birthdate&lt;/code&gt;) or “date of birth” (&lt;code&gt;dateOfBirth&lt;/code&gt;).
While “birth date” does not seem that common (compared to “birthdate”), they are all acceptable terms to represent “the date on which a person was born” (Oxford US english dictionary).
OK, but which one is the “good” one?
Well, assuming that “date of birth” seems to be used on official documents, it could make sense to use this option.
But is it as simple as that?&lt;/p&gt;

&lt;h1 id=&quot;type-as-prefix-or-suffix&quot;&gt;Type as prefix or suffix&lt;/h1&gt;

&lt;p&gt;The initial “&lt;code&gt;birthDate&lt;/code&gt; or &lt;code&gt;dateOfBirth&lt;/code&gt;” question leads to another question: when explicitly typing a property, by adding its type to its name, should it be a prefix or a suffix?
As I’m a bit obsessed with consistency, once I’ve seen a &lt;code&gt;dateOfBirth&lt;/code&gt; property, I expect to see all other date properties using the &lt;code&gt;dateOf&lt;/code&gt; pattern, &lt;code&gt;dateOfSubcription&lt;/code&gt; for instance.
And if it’s &lt;code&gt;birthDate&lt;/code&gt;, I’ll expect to see &lt;code&gt;subscriptionDate&lt;/code&gt;.
But more than that, as I am a consistency extremist, I may expect all “typed” properties to use the same pattern, for instance &lt;code&gt;subscriptionNumber&lt;/code&gt; or &lt;code&gt;numberOfsubscription&lt;/code&gt;.
In such a case choosing one form or another can have major impacts on your API (or APIs) look and feel.
OK, but which one is the “good” one?&lt;/p&gt;

&lt;p&gt;Using a suffix, is actually the most common pattern: I’ve seen much &lt;code&gt;userId&lt;/code&gt; and not a single &lt;code&gt;idOfUser&lt;/code&gt;.
But that’s not the only reason why I would recommend to use the suffixed version.
Using a suffix put the generic part of a name at the end of it and the specific one at the beginning.
Using suffixes, I get the most important information first when reading names.
But more important, when properties are sorted by name, it’s easier to see functionally related properties because they are close to each others, while properties get sorted by type when using prefixes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prefix:
    &lt;ul&gt;
      &lt;li&gt;dateOfSubscription&lt;/li&gt;
      &lt;li&gt;idOfBankAdvisor&lt;/li&gt;
      &lt;li&gt;idOfUser&lt;/li&gt;
      &lt;li&gt;numberOfSubscription&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Suffix:
    &lt;ul&gt;
      &lt;li&gt;bankAdvisorId&lt;/li&gt;
      &lt;li&gt;subscriptionDate&lt;/li&gt;
      &lt;li&gt;subscriptionNumber&lt;/li&gt;
      &lt;li&gt;userId&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The suffix pattern also leads to shorter and less complex names: what if I want to represent a “user’s date of birth”?
With the suffix option, that’s a &lt;code&gt;userBirthDate&lt;/code&gt; (or &lt;code&gt;userBirthdate&lt;/code&gt;), with the suffix that’s a &lt;code&gt;dateOfBirthOfUser&lt;/code&gt; which is a bit pompous, or possibly a &lt;code&gt;userDateOfBirth&lt;/code&gt; which screws the prefix idea and kills the hierarchy of information in the name.&lt;/p&gt;

&lt;h1 id=&quot;data-format-andor-value&quot;&gt;Data format and/or value&lt;/h1&gt;

&lt;p&gt;As an API designer or an API design reviewer, I always double check what is the format and value of a property.
In that case, if it’s the first time a &lt;code&gt;whateverDate&lt;/code&gt; or &lt;code&gt;dateOfWhatever&lt;/code&gt; is added into an API, it’s time to choose a date format that will be applied to all other dates.
Will you use a Unix timestamp (number of seconds since 1st January of 1970) or an ISO8601 string.
And in the ISO case, will you use the time precision with timezone or not?
If that format already has been defined, you’ll obviously have to use it.&lt;/p&gt;

&lt;p&gt;And that’s not only for dates but for any data.
If we’re talking about a &lt;code&gt;userId&lt;/code&gt;, what is the actual value of a user’s id?
Is this the id column in the &lt;code&gt;USER&lt;/code&gt; table or something else?
Maybe a more well known value, shared by various systems using the API.
For a &lt;code&gt;currency&lt;/code&gt;, is this a internal currency code? a label? (in which language?) An ISO code?&lt;/p&gt;

&lt;p&gt;I will not answer all those questions here, I’ll keep that for other post, the one thing to remember here is that a property is more than just a name.
And speaking of that, thinking beyond just names, we didn’t talk about “why date of birth”?&lt;/p&gt;

&lt;h1 id=&quot;back-to-needs-what-about-privacy&quot;&gt;Back to needs: what about privacy?&lt;/h1&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;The tree hides the forest&lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;French saying&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed, all the above and especially the naming discussion is only the tree that hides the forest, it lured us away from a real and important problem.
As an API designer or API design reviewer, seeing such “personal data” (as europeans say in GDPR data privacy regulation) or “personal identifiable information” (PII in the US), I always wonder if we actually need it in the API before discussing its name.
Maybe “date of birth” can be replaced by a fuzzier “birthday” (month and day but without year) or just an “age”.
Maybe it can be removed if it is not absolutely needed.&lt;/p&gt;

&lt;h1 id=&quot;choosing-a-name-is-sometimes-more-than-what-it-seems&quot;&gt;Choosing a name is sometimes more than what it seems&lt;/h1&gt;

&lt;p&gt;So, in that case I may simply not have to choose between &lt;code&gt;birthDate&lt;/code&gt; or &lt;code&gt;dateOfBirth&lt;/code&gt; because the property would not be needed.
Designing APIs, delivering API design training sessions or doing API design reviews taught me that such seemingly simple question can have important implications for an API.
As you have seen, choosing a name is sometimes more than just choosing a name.
Always expand the discussion, never get stuck at a too narrow “just name” level, evaluate the local but also global implications of your choice to include or not a data, to define its value/format, and how to name it using a pattern and/or hierarchy.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">On LinkedIn, someone asked me what to choose between birthDate or dateOfBirth. That looks like a very simple question, but it’s absolutely not. Choosing between two names is the tree that hides the forest. Besides having impacts on understandability, choosing a name can have impacts on naming patterns, data, or privacy which are quite important topics for APIs.</summary></entry><entry><title type="html">We are not Amazon or Github, but maybe we should … or not</title><link href="https://apihandyman.io/we-are-not-amazon-or-github-but-maybe-we-should--or-not/" rel="alternate" type="text/html" title="We are not Amazon or Github, but maybe we should … or not" /><published>2021-10-27T00:00:00-05:00</published><updated>2021-10-27T00:00:00-05:00</updated><id>https://apihandyman.io/we-are-not-amazon-or-github-but-maybe-we-should--or-not</id><content type="html" xml:base="https://apihandyman.io/we-are-not-amazon-or-github-but-maybe-we-should--or-not/">&lt;p&gt;One day I can say “Amazon did that, we should do it too” and may be quite displeased to hear “but, we’re not Amazon”.
And the next one, I can be quite displeased to hear “Github did that, we should do it too” and respond  “it’s not because Github did it, that we should do it too”. 
Why such inconsistency?
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-we-should-be-like-amazon&quot;&gt;Why we should be like Amazon&lt;/h1&gt;

&lt;p&gt;Almost 20 years ago (😱), in 2002, Jeff Bezos, now former CEO of Amazon, sent a mandate to all Amazon employees.
This mandate is one of the centerpiece of my API conference bingo with Conway’s law.
In substance, it was saying 2 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All teams MUST communicate through “service interfaces” (they were not called API at that time)&lt;/li&gt;
  &lt;li&gt;All those “service interfaces” MUST be design from the ground with externalization in mind. Each one could be put in customers hands at any moment after its creation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While there’s not much debate about “APIfying all the things” in 2021, the second item is the one that usually triggers the “but we’re not Amazon” remark.
It actually means you make no difference between internal and external API.
Why should you do that and not keep creating highly specific/ugly/terrible internal APIs or use different look and feel for internal vs external APIs, and only work hard on public APIs?&lt;/p&gt;

&lt;p&gt;There are many reasons, here are a few of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sooner or later, you’ll provide APIs to “others”: some external contractors, the team next to you, another business unit, a partner, or a customer. It’s not a possibility, it’s a fact.&lt;/li&gt;
  &lt;li&gt;That’ll improve your internal API quality: Thinking that someone outside of your organization will consume your API can help people to actually focus on its design and really make it usable by anyone.&lt;/li&gt;
  &lt;li&gt;That’ll reduce the risk of public API failure: You’ll learn by working hard on private APIs, if you wait to go public to learn, you’ll regret it; nobody will want to use your terrible APIs.&lt;/li&gt;
  &lt;li&gt;That’ll reduce your time to market: It’ll take a few seconds to go public with a clean private API while it may take weeks if not months to rethink/clean/hide the mess before exposing it to the outside. And that could impact not only the design of your API but also its architecture.&lt;/li&gt;
  &lt;li&gt;That’ll ease maintenance: It’s not that easy to make a single API and its implementation evolve but imagine the same implementation exposed 2 times. That multiply problems by 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, that’s why I say “we should do like Amazon”, we should treat private APIs like public APIs and actually only create one and use it in both contexts.&lt;/p&gt;

&lt;p&gt;Note that this famous mandate ends by “those who don’t do that will be fired”, that’s level 0 of management. 
Threatening people like this is totally stupid and MUST never be done.
In this case, it’s even more stupid because this idea is just brilliant.&lt;/p&gt;

&lt;p&gt;To read more about the memo and how it went public, you should read this &lt;a href=&quot;https://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/&quot;&gt;post of my good friend Kin Lane, the API Evangelist&lt;/a&gt;.
I suggest you read also Jeff Lawson’s “Ask Your Developer” book, the first chapters do a great job in explaining this “API all the things” spirit and the origin of the mandate (and though I didn’t finished it yet, that’s a great book).&lt;/p&gt;

&lt;h1 id=&quot;why-we-shouldnt-be-like-github&quot;&gt;Why we shouldn’t be like Github&lt;/h1&gt;

&lt;p&gt;Ok, we “should do like Amazon”, but why be not be like Github and do GraphQL APIs?
In 2016, Github announced their &lt;a href=&quot;https://github.blog/2016-09-14-the-github-graphql-api/&quot;&gt;GraphQL API&lt;/a&gt;.
That obviously triggered many “Github is doing GraphQL API, let’s do it too”.&lt;/p&gt;

&lt;p&gt;In such context, I ask “what problem are you trying to solve?”.
Do you have ten of thousands consumers doing gazillions of API call combinations?
Do you have a product that people basically need to address like a database?
No?
And do you understand the implication of providing a GraphQL API regarding security, performance and scalability?
No?&lt;/p&gt;

&lt;p&gt;Then, maybe you should stick to a good old REST API.
I’m not against GraphQL, it’s there in my toolbox, but I will only use it if that’s a relevant solution to a clearly identified problem.
That’s why I say “We’re not Github”.&lt;/p&gt;

&lt;h1 id=&quot;the-42-answer-of-architects-it-depends&quot;&gt;The 42 answer of architects: it depends&lt;/h1&gt;

&lt;p&gt;As you can see, I’m not just saying we should or shouldn’t do like Amazon or Github.
We can’t just decide to do something because some company has done it.
We can’t just decide to not do something because (we think) we’re completely different from some company who has done it.
The question is not “should we do like X” but “should we use the same solution as X to solve a problem in our context”.
Behind any choice, there must be a context, a problem, a reasoning, not just blind and thoughtless hype.&lt;/p&gt;

&lt;p&gt;PS: If you wonder what’s this strange Stackoverflow keyboard on this post’s banner read &lt;a href=&quot;https://stackoverflow.blog/2021/09/28/become-a-better-coder-with-this-one-weird-click/&quot;&gt;this&lt;/a&gt;&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">One day I can say “Amazon did that, we should do it too” and may be quite displeased to hear “but, we’re not Amazon”. And the next one, I can be quite displeased to hear “Github did that, we should do it too” and respond “it’s not because Github did it, that we should do it too”. Why such inconsistency?</summary></entry><entry><title type="html">Anarchy in the resource path</title><link href="https://apihandyman.io/anarchy-in-the-resource-path/" rel="alternate" type="text/html" title="Anarchy in the resource path" /><published>2021-10-20T00:00:00-05:00</published><updated>2021-10-20T00:00:00-05:00</updated><id>https://apihandyman.io/anarchy-in-the-resource-path</id><content type="html" xml:base="https://apihandyman.io/anarchy-in-the-resource-path/">&lt;p&gt;While doing API design reviews and API design training sessions, I often see resource paths designed in an anarchic way.
By anarchic, I mean their various levels seem to have been chosen randomly or some of them seem at awkward places. 
But why should such paths should be considered wrong?
Let’s see a few examples of how to not design resource paths to talk about it.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-resource-and-a-path&quot;&gt;What is a resource and a path&lt;/h1&gt;

&lt;p&gt;In a REST API, a path like &lt;code&gt;/this/is/a/path&lt;/code&gt; identifies a unique resource and this resource will be manipulated thought standard HTTP methods.
A &lt;code&gt;GET /this/is/a/path&lt;/code&gt; means “read that resource” and &lt;code&gt;DELETE /this/is/a/path&lt;/code&gt; means delete that resource.
But beyond that HTTP-esque description, a resource is supposed to represent a business concept.&lt;/p&gt;

&lt;p&gt;A business concept could be an easily identifiable object or list of objects such as “user’s accounts”, or “an account”, or “an account’s transactions” in a banking API.
But sometimes, they’re not such obviously identifiable business objects, they could be processes like “user verification” or “loan simulation”.
Whatever their nature, these business concepts must be represented by a meaningful and easy to interpret path.
That seems an obvious platitude right?&lt;/p&gt;

&lt;h1 id=&quot;anarchic-paths&quot;&gt;Anarchic paths&lt;/h1&gt;

&lt;p&gt;Well, not quite.
Sometimes, during my API design reviews or training sessions,  I encounter paths that are not meaningful or not easy to interpret at all.
Here’s a selection of what I’ve seen.&lt;/p&gt;

&lt;h2 id=&quot;rpc-path&quot;&gt;RPC path&lt;/h2&gt;

&lt;p&gt;During my API Design 101 training session, the attendees work on a very simple but deadly use case: a product catalog.
An exercise consists in designing a path for the “catalog” and the “product” business concepts (or resources).
The only requirement is ensuring that each path allows to identify each resource in a unique way, some examples such as &lt;code&gt;/path&lt;/code&gt;, &lt;code&gt;/another/path&lt;/code&gt;, &lt;code&gt;/with/a/{variable}&lt;/code&gt; or &lt;code&gt;/{variable}/in/path&lt;/code&gt; are provided to help attendees understand the vast possibilities.&lt;/p&gt;

&lt;p&gt;And more often than not, one of the attendee designs an “RPC path” such as &lt;code&gt;/read/product/{productId}&lt;/code&gt;; I actually wait for that eagerly.
That allows me to stress and remind the fact that in a REST API, path are not there to literally represent the “functions” identified to fulfil a use case.
In a REST API, a “function” is represented by an HTTP method + a resource path, and that is not totally intuitive for beginner API designers.&lt;/p&gt;

&lt;p&gt;Fixing that is usually quite simple, just remove the “function part” of the path, but ensure that what is left is an actual business concept and the path is actually a good representation of it.&lt;/p&gt;

&lt;h2 id=&quot;stacked-path-parameters&quot;&gt;Stacked path parameters&lt;/h2&gt;

&lt;p&gt;Often but not always linked to RPC path, I often encounter path containing a stack of path parameters, &lt;code&gt;/getTransactions/{from}/{to}/{accountId}&lt;/code&gt; or &lt;code&gt;/transactions/{from}/{to}/{accountId}&lt;/code&gt; for instance.
In the first case, it is just a variation of previous case, but fixing it (hence removing the “get”) just leads to the second one.
This paths seems to represent the transactions of an account identified by its id (&lt;code&gt;accountId)&lt;/code&gt; between two dates (&lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;).
Note that I can guess that because &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; are fairly common names in such case and probably does not mean “from something to something that is not a date”.
I could be wrong, but the risk is low.
So what’s the problem?&lt;/p&gt;

&lt;p&gt;If we take for granted that filters on collections (lists) are mostly done using query parameters, this current form is the usual sign of “I don’t know there’s something called query parameters” (and maybe also a sign of “I generated my spec from code” by the way).
The most common representations used in such a case would be just &lt;code&gt;/transactions&lt;/code&gt; (the list of transactions) and would be used like this &lt;code&gt;/transactions?accountId={accountId}&amp;amp;from={from}&amp;amp;to={to}&lt;/code&gt; to filter that list on a subset of elements.&lt;/p&gt;

&lt;p&gt;If you consider that’s is totally normal to use path parameters to filter lists, you have another problem: all of them are mandatory.
That makes such a path highly specific.
What if you need to represent “all transactions” or “transactions between two dates”?
Well, you can add a &lt;code&gt;/transactions&lt;/code&gt; and a &lt;code&gt;/transactions/{from}/{to}&lt;/code&gt;.
But what if you want all transaction since the beginning of time to a given date?
What if you need to filter transactions on their type?
You’ll have to add new paths, many of them if you want to handle all possible combinations.
And all that to just represent various subsets of “transactions”.
Doing that will only make you API complex; better just say there are &lt;code&gt;/transactions&lt;/code&gt; and manage all possible filters as query params, that will help you and your consumers keep sanity.&lt;/p&gt;

&lt;p&gt;And if you want to make &lt;code&gt;accountId&lt;/code&gt; a required filter, read &lt;a href=&quot;/what-s-the-problem-with-required-query-parameters/&quot;&gt;What’s the problem with required query parameters?&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reverse-hierarchical-organization&quot;&gt;Reverse hierarchical organization&lt;/h2&gt;

&lt;p&gt;The previous example can also be a sign of “I don’t know that a path represents a hierarchy”.
You’ll see it more clearly with this example: &lt;code&gt;/transactions/accounts/{accountId}&lt;/code&gt;.
I often see this, it is supposed to represent “an account’s transactions”.
But this path literally describes “a list of transactions containing a list of accounts, each account being identified by accountId”. 
The correct path is &lt;code&gt;/accounts/{accountId}/transactions&lt;/code&gt;, a path is read from left to right (in english), the last element (&lt;code&gt;/transactions&lt;/code&gt;) describing the actual resource (a list of transactions).&lt;/p&gt;

&lt;h2 id=&quot;unclear-relationships&quot;&gt;Unclear relationships&lt;/h2&gt;

&lt;p&gt;Another example I often get during my API design 101 training session: &lt;code&gt;/catalog&lt;/code&gt; vs &lt;code&gt;/product/{productId}&lt;/code&gt;.
If we take for granted that a “catalog” is just a list of “product”, we don’t really see the connection between those two.
I would prefer a more consistent representation relying on hierarchy and represent them as &lt;code&gt;/products&lt;/code&gt; and &lt;code&gt;/products/{productId}&lt;/code&gt;.
You get the single element by just adding it’s id to the path representing its parent list.&lt;/p&gt;

&lt;h2 id=&quot;inconsistency-between-list-and-single-elements&quot;&gt;Inconsistency between list and single elements&lt;/h2&gt;

&lt;p&gt;And if you think that the solution is &lt;code&gt;/products&lt;/code&gt; vs &lt;code&gt;/product/{productId}&lt;/code&gt;, read &lt;a href=&quot;/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/&quot;&gt;/resources rules and /resource sucks … or is it the other way around?&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;my-rule-of-thumb&quot;&gt;My rule of thumb&lt;/h1&gt;

&lt;p&gt;A good path represents a business concept, such as “resource”, and not an action, such as “read resource”.&lt;/p&gt;

&lt;p&gt;A good path not only relies on semantic, choosing the right words, but also on organization.
A good path must represent a hierarchy, last elements describing the actual resource: &lt;code&gt;/resources/{resourceId}/sub-resources&lt;/code&gt; is a “sub resources” and not a “resources”.&lt;/p&gt;

&lt;p&gt;A list’s good path represents all possible subsets, taking advantage of query params to get only specif elements.
If &lt;code&gt;/resources&lt;/code&gt; represents “all resources”, it can also represent “resources of type X” with &lt;code&gt;/resources?type=X&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Good paths help together to understand how they are related and are guessable.
They must take advantage of hierarchy: &lt;code&gt;/resources&lt;/code&gt; contains &lt;code&gt;/resources/{resourceId}&lt;/code&gt; which contains &lt;code&gt;/resources/{resourceId}/sub-resources&lt;/code&gt;.
You can easily guess how to address parent from child and reverse.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">While doing API design reviews and API design training sessions, I often see resource paths designed in an anarchic way. By anarchic, I mean their various levels seem to have been chosen randomly or some of them seem at awkward places. But why should such paths should be considered wrong? Let’s see a few examples of how to not design resource paths to talk about it.</summary></entry><entry><title type="html">Excuse my French API, or being an English as a second language API designer</title><link href="https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer/" rel="alternate" type="text/html" title="Excuse my French API, or being an English as a second language API designer" /><published>2021-10-13T00:00:00-05:00</published><updated>2021-10-13T00:00:00-05:00</updated><id>https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer</id><content type="html" xml:base="https://apihandyman.io/excuse-my-french-api-or-being-an-english-as-a-second-language-api-designer/">&lt;p&gt;This post is dedicated to all English as a Second, or Foreign, Language (ESL, EFL) API designers. 
Et tout spécialement mes compatriotes français!
Designing APIs is already not that easy when you design them using your native language.
But, it’s even more difficult when using a second one.
So let’s see how to avoid design frenglish, itaglish or whateverglish APIs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-should-i-care-about-english&quot;&gt;Why should I care about english&lt;/h1&gt;

&lt;p&gt;Your API is public, well unless your a government that MUST use local language because of some law, use english.
Why?
English is the lingua franca of software.
Using it will make your API easily understandable by most people using APIs on earth.
That’s quite a huge market you don’t want to miss.&lt;/p&gt;

&lt;p&gt;Your API is private?
My very first post was about &lt;a href=&quot;https://apihandyman.io/why-you-must-design-your-private-api-in-english/&quot;&gt;why (private) APIs should be designed in English&lt;/a&gt;.
To make it short: your private API will not be private forever, so better use english just like for public APIs.&lt;/p&gt;

&lt;p&gt;Ok, APIs MUST be design in english, but why should we really care about translations?
Well, it would be a pity to ruin the success of your API just because people actually don’t understand what it is talking about.
And once your API is consumed … it will be hard to fix its awkward whateverglish design.
So you better take care about english translation.&lt;/p&gt;

&lt;h1 id=&quot;when-should-i-use-english-during-design-process&quot;&gt;When should I use english during design process&lt;/h1&gt;

&lt;p&gt;In order to avoid loosing time when designing an API, I use the following path:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Analyse needs and decompose them to identify a list of goals/jobs to be done, the function that will compose the API using natural language and native language&lt;/li&gt;
  &lt;li&gt;Identify business concepts (resource) and action that apply to them (still using natural language and native language)&lt;/li&gt;
  &lt;li&gt;Translate the business concepts and action in english&lt;/li&gt;
  &lt;li&gt;Design resource paths (in english) and choose HTTP methods corresponding to actions&lt;/li&gt;
  &lt;li&gt;Model data in native language&lt;/li&gt;
  &lt;li&gt;Translate data in English&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s the actual method I describe in my book that allows to avoid HTTP heated discussion while investigating needs, I just added extra steps for translation.
The idea is the same, keeping the translation complexity AFTER the actual need investigation and design in order to avoid being polluted during that very important steps.
It’s easier to think and discuss using a language you master than English.&lt;/p&gt;

&lt;h1 id=&quot;api-design-translation-tips--tricks&quot;&gt;API Design translation tips &amp;amp; tricks&lt;/h1&gt;

&lt;p&gt;Here are a few tips and tricks that should help you avoid terrible translation mistakes.&lt;/p&gt;

&lt;h2 id=&quot;use-us-english&quot;&gt;Use US english&lt;/h2&gt;

&lt;p&gt;The lingua franca of software is not just “English”, but US English, don’t forget that during translation.&lt;/p&gt;

&lt;h2 id=&quot;hire-professional-translators&quot;&gt;Hire professional translators&lt;/h2&gt;

&lt;p&gt;For public APIs, if you’re not sure about your english, don’t think to much: hire professional translators.
For private APIs, that could be overkill but remember that sooner or later &lt;a href=&quot;https://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/&quot;&gt;your private APIs mays become public&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;take-advantage-of-more-or-less-official-translations&quot;&gt;Take advantage of more or less official translations&lt;/h2&gt;

&lt;p&gt;If you’re lucky enough you can find official translations for your domain.
You could take advantage of glossary but also be inspired by existing APIs or standard.
For instance, if you work in banking/finance, you should take a look at the ISO20022 standard.&lt;/p&gt;

&lt;h2 id=&quot;use-online-dictionary-wisely&quot;&gt;Use online dictionary wisely&lt;/h2&gt;

&lt;p&gt;Unfortunately, you won’t always find the ready to use translation and you’ll have to use one of the many online your language to english dictionaries.
But depending on the one you use and how you use it, the result may not be as good as expected.
Here’s how I proceed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I translate full sentences giving more context about the words I want to translate, using either https://www.linguee.fr/ (beware of the translations examples coming from non-english websites shown in Linguee’s results) and https://www.deepl.com/ (from the Linguee creator, pretty good one).&lt;/li&gt;
  &lt;li&gt;I check the definition of the english word found using a US English dictionary such as https://www.lexico.com/. If you don’t do that, you may have some really bad surprises&lt;/li&gt;
  &lt;li&gt;I do a final check by looking for the word I found using Google. Reading documents using the found word can help to choose between various options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, the idea is to never, ever just rely on word for word translation.&lt;/p&gt;

&lt;h2 id=&quot;translate-or-not-acronyms&quot;&gt;Translate (or not) acronyms&lt;/h2&gt;

&lt;p&gt;There are two types of acronyms, the ones that can be translated and the ones that can’t.
For instance, in french we use TVA for “Taxe sur la Valeur Ajoutée”, which can easily be translated into “Value Added Tax”, giving the VAT acronym.
VAT is being a well know acronym, across many countries, you can actually use it in your API design instead of TVA.&lt;/p&gt;

&lt;p&gt;But what about more specific concepts that only exists in your country?
I’w working with teams creating APIs in the employee savings domain.
This domain deals with highly specific concept; the PERCO, “Plan d’Epargne pour la Retraite COllectif”, for instance.
If I translate this literally, I get “Group Retirement Savings Plan” or GRSP … which means nothing for people outside of France AND for french people.
In that case, it would be better to keep the french acronym in the design, adding a description might help non french people to understand what this means.&lt;/p&gt;

&lt;p&gt;But just think about this last option: not using this highly specific acronym?
Could it be replaced by a more generic word like “saving plan”?
This is not something that will always work, but it’s worth the try because keeping acronym that are specific to your country could be a burden for your design and annoy many users.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">This post is dedicated to all English as a Second, or Foreign, Language (ESL, EFL) API designers. Et tout spécialement mes compatriotes français! Designing APIs is already not that easy when you design them using your native language. But, it’s even more difficult when using a second one. So let’s see how to avoid design frenglish, itaglish or whateverglish APIs.</summary></entry><entry><title type="html">We Need Specialized Tools For Api Design Reviews</title><link href="https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews/" rel="alternate" type="text/html" title="We Need Specialized Tools For Api Design Reviews" /><published>2021-10-06T00:00:00-05:00</published><updated>2021-10-06T00:00:00-05:00</updated><id>https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews</id><content type="html" xml:base="https://apihandyman.io/we-need-specialized-tools-for-api-design-reviews/">&lt;p&gt;Doing an API design review is not only about that, but it will require, sooner or later, to analyze an interface contract.
Use the wrong tools to do so, and reviews will become a terrible, never-ending burden.
Use the right tools, and you’ll become a formidable machine, doing reviews at light speed, never missing the tiniest problem or question.
But, after dozens of reviews, you may realize that, despite using the “right” existing tools, the API space actually lacks API design reviews specialized tools.
&lt;!--more--&gt;
This post is a slightly write up of my “Taking advantage of OpenAPI for API design reviews” talk I gave at the 2021 API Specification Conference.&lt;/p&gt;

&lt;h1 id=&quot;reviewing-api-designs-helping-people&quot;&gt;&lt;del&gt;Reviewing API designs&lt;/del&gt; Helping people&lt;/h1&gt;

&lt;p&gt;I work with many different teams helping them create and evolve many different APIs.
I can do around 150 API design reviews per year on average.&lt;/p&gt;

&lt;p&gt;When I do an API design review, I’m not being the API police.
I’m here to help people create the best possible API in their context.
I’m here to provide guidance and help people grow their design skills so that one day I won’t be needed anymore.&lt;/p&gt;

&lt;p&gt;Though I’m not a API policeman, the closer to our API design guidelines the design is, the better.
Because having consistent APIs make them easier to use.
But that’s not the only thing to look at, an API must be reviewed beyond the guidelines.
It’s important to investigate what it is made for, what needs this API is supposed to fulfil.
And then to check if the design is actually responding to all that.
But not just “responding to all” that but doing it in the best possible fashion.
So, I also check if the design is easy to understand, easy to use and easy to evolve.&lt;/p&gt;

&lt;p&gt;And how do I do all that?
Well, by investigating business domain and IT concerns, asking stupid questions (tons of them), making people talk together, listening, showing empathy, challenging beliefs and ideas … and obviously analyzing interface contracts.&lt;/p&gt;

&lt;h1 id=&quot;analyzing-an-interface-contract&quot;&gt;Analyzing an interface contract&lt;/h1&gt;

&lt;p&gt;Depending on the size and number of APIs you review, the task of reviewing API designs will be more or less complicated.
But if analyzing a single interface contract can be quite complicated by itself, it can be even more complicated if it’s described in a non standard format such as a wiki page or a spreadsheet.
Hopefully most people I’m working with use the OpenAPI specification to describe their APIs.&lt;/p&gt;

&lt;h2 id=&quot;reading-openapi-files-is-a-terrible-idea&quot;&gt;Reading OpenAPI files is a terrible idea&lt;/h2&gt;

&lt;p&gt;I’ve seen people making API design reviews by directly reading OpenAPI files such as the one below.
That’s not something I actually do, you can give it a try, read this file and tell me what you think.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Let's read this OpenAPI file&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-design-reviews/motu-openapi.yaml&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;openapi: 3.0.0
info:
  title: MOTU
  version: 1.0.3_build156
  description: The Masters of the Universe Web Site API
paths:
  /v1/charsBySide:
    get:
      summary: charBySide
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sides'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-charById
      tags:
        - searchController
      parameters: []
      description: For &quot;all characters&quot; screen
    parameters: []
  /v1/charaters-with-name:
    get:
      summary: Search characters by name
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Char'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-characters-by-name
      description: For &quot;search by name&quot; screen
      parameters:
        - schema:
            type: string
          in: query
          name: name
          required: true
    parameters: []
  '/v1/tpyt/{year}/{type}':
    parameters:
      - schema:
          type: string
        name: year
        in: path
        required: true
      - schema:
          type: string
        name: type
        in: path
        required: true
    get:
      summary: Toys per year and type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/toysPerYearAndTypeDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-toys-per-year-year-type
      tags:
        - searchController
      description: ''
  /v1/search/flying/vehicles/with/filters:
    post:
      summary: List flying toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlyingToysResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Flying Toys Found
        '500':
          description: Internal Server Error
      operationId: post-flying-vehicles-byId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlyingFilters'
    parameters: []
  '/v1/sidekick/{name}':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
    get:
      summary: Get character's sidekick
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sidekick'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-characters-sidekick-name
  /v1/buildings/all:
    get:
      summary: Building toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingListDto'
      operationId: get-buildings
    parameters: []
  '/v2/episode/{num}/{year}/{producer}':
    parameters:
      - schema:
          type: string
        name: num
        in: path
        required: true
      - schema:
          type: string
        name: year
        in: path
        required: true
      - schema:
          type: string
        name: producer
        in: path
        required: true
    get:
      summary: get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode_Single'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-ep-num-year-producer
      tags:
        - tvShowController
      description: ''
  /v2/episodes:
    get:
      summary: List episodes
      tags:
        - tvShowController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producers'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-eps
      description: ''
    parameters: []
    post:
      summary: Insert episode in database
      operationId: post-v2-episodes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/episode-added'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-epsode'
      tags:
        - tvShowController
  /v1/search/ground/vehicles/with/filters:
    post:
      summary: Search ground vehicle toys
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroundToyResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: post-v1-ground-vehicles-with-filters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroundFilter'
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
    parameters: []
  /v1/buildings/filters:
    get:
      summary: Search buildings
      tags:
        - searchController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingListDto'
      operationId: get-v1-buildings-filters
      parameters:
        - schema:
            type: string
          in: query
          name: name
components:
  schemas:
    Char:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        toys:
          $ref: '#/components/schemas/toy'
        creation_dte:
          type: string
          format: date-time
        evil:
          type: boolean
        good:
          type: boolean
    toy:
      title: ''
      type: object
      properties:
        ToyId:
          type: string
        ToyType:
          type: number
          enum:
            - '1'
            - '2'
            - '3'
        ToyReference:
          type: string
        ToyOriginalPrice:
          type: string
        ToyManufacturer:
          type: string
        ToyName:
          type: string
    prd:
      title: ''
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        years:
          type: array
          items:
            $ref: '#/components/schemas/Years'
    Epsd:
      title: ''
      type: object
      properties:
        number:
          type: string
        title:
          type: string
        firstAir:
          type: number
    Years:
      title: ''
      type: object
      properties:
        year:
          type: string
        episodes:
          type: array
          items:
            $ref: '#/components/schemas/Epsd'
    Episode_Single:
      type: object
      properties:
        name:
          type: string
        first_air_date:
          type: string
        alternate_name_1:
          type: string
        alternate_name_2:
          type: string
    add-epsode:
      title: ''
      type: object
      properties:
        name:
          type: string
        firstArDate:
          type: string
        producerId:
          type: string
        year:
          type: integer
    SearchResponse:
      title: ''
      type: array
      items:
        $ref: '#/components/schemas/Char'
    Sides:
      title: ''
      type: object
      properties:
        good:
          type: array
          items:
            $ref: '#/components/schemas/SideChar'
        evil:
          type: array
          items:
            $ref: '#/components/schemas/SideChar'
    SideChar:
      title: ''
      type: object
      properties:
        id:
          type: string
        nom:
          type: string
        icon:
          type: string
    Sidekick:
      title: ''
      type: object
      properties:
        name:
          type: string
    FlyingFilters:
      title: Filters
      type: object
      properties:
        year:
          type: string
        brand:
          type: string
        name:
          type: string
        evil:
          type: boolean
        good:
          type: boolean
        id:
          type: string
    FlyingToysResponse:
      type: array
      items:
        $ref: '#/components/schemas/FlyingToy'
    FlyingToy:
      type: object
      properties:
        flyingToyName:
          type: string
        flyingToyBox:
          type: string
    toysPerYearAndTypeDto:
      title: toysPerYearAndTypeDto
      type: array
      items:
        $ref: '#/components/schemas/toy'
    GroundToyResponseDto:
      type: array
      items:
        $ref: '#/components/schemas/GroundToy'
    GroundToy:
      type: object
      properties:
        name:
          type: string
        boxArt:
          type: string
    GroundFilter:
      title: GroundFilter
      type: object
      properties:
        id:
          type: string
        manufacturer:
          type: string
    building:
      title: building
      type: object
      properties:
        name:
          type: string
        art:
          type: string
        width:
          type: number
        height:
          type: number
        depth:
          type: number
    BuildingListDto:
      title: BuildingListDto
      type: object
      properties:
        buildings:
          type: array
          items:
            $ref: '#/components/schemas/building'
    episode-added:
      title: episode-added
      type: string
    Producers:
      title: ''
      type: object
      properties:
        producers:
          $ref: '#/components/schemas/prd'
servers:
  - description: base path
    url: /api
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I don’t know how you feel, but reading this raw OpenAPI file do not really help me to make a complete review of the design.
Oh, I can still spot useful but disturbing pieces of information based on the &lt;code&gt;info&lt;/code&gt; section:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Because of version number &lt;code&gt;1.0.3_build156&lt;/code&gt;, I can guess this file has been generated from code, which is usually not a good sign. Maybe the team has coded everything and just want a green light to deploy their API on the API gateway (Sorry, that’s not my job, and too bad, it’s probably too late to fix something as everything has already been coded)&lt;/li&gt;
  &lt;li&gt;The “The Masters of the Universe Web Site API” &lt;code&gt;description&lt;/code&gt; let me think that this API could be been design solely to be the backend of this specific website and thus may not be reusable in other contexts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s interesting, but when I do an API design review my first move is trying to guess what the API is made for by looking at all of its operations, all GET /this and POST /that and their summaries.
And that is not easy to do just reading the raw OpenAPI file.
Using a code editor, I could close a few sections but even doing so I can’t have this overview totally.&lt;/p&gt;

&lt;p&gt;I also like to have an overview of the data models in operations’ responses, evaluate their complexity, their depth.
But reading a raw OpenAPI file all I have is a flat perspective of each model.
I have to jump from one &lt;code&gt;$ref&lt;/code&gt; to another to “see” a full schemas … 
And so ,I actually don’t see anything here.
Or worse, just like in the parable of the 3 blind men the elephant, I could see a snake or a wall instead of an elephant.&lt;/p&gt;

&lt;p&gt;So, reading a raw OpenAPI file is definitely not for me.
And I highly doubt that anyone could actually do an efficient API design review doing so.&lt;/p&gt;

&lt;h2 id=&quot;not-all-documentation-tools-are-equals&quot;&gt;Not all documentation tools are equals&lt;/h2&gt;

&lt;p&gt;As far as I remember, I always took advantage of documentation tools to do API design reviews.
I especially use the good old SwaggerUI.
I don’t use it only because it was the only one available when I started being an API design reviewer and I don’t want to change my habits.
No, I use it because it’s the one that fulfils my needs for this specific task.&lt;/p&gt;

&lt;p&gt;I actually don’t like SwaggerUI API documentation when I learn to use an API, I prefer ReDoc or Stoplight Elements renderings. But reading API documentation is different from reviewing an interface contract.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/swaggerui-overview.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;SwaggerUI allows me to easily get the overview of operations, I can see all GET /this and POST /that and their summaries in a quick glance.
That helps me to confirm the intent of the API, if it was explained to me before, or guess it if not.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/swaggerui-operation.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Using SwaggerUI I can also check that the returned schema name actually match the resource path.
In ReDoc the name of the returned schema is not shown and when doing a review, that’s quite annoying.&lt;/p&gt;

&lt;p&gt;Once I’ve made this first pass, I analyze in depth each operation.
Checking parameters, responses and their schemas.
Regarding the analysis of schemas, I would prefer ReDoc of Stoplight Elements.
Whatever the tool, I can easily spot data models where everything if optional (typical on generated interface contracts).
I can also check schema depth.&lt;/p&gt;

&lt;p&gt;When I started doing reviews I had to carefully analyze every bit of the contract in one of those documentation tools.
Especially to ensure that the design was conforming to our API design guidelines.
Checking every single property is in lowerCamelCase, path structure is valid, no HTTP status code is missing, etc, etc, etc, …&lt;/p&gt;

&lt;p&gt;Doing those repetitive (mostly dumb) checks, review after review, hundreds of times, I nearly lost sanity.
And there are not only dumb checks that need to be done.
Checking consistency between schemas for instance is extremely hard to do with regular documentation tools.&lt;/p&gt;

&lt;h2 id=&quot;beyond-linting&quot;&gt;Beyond linting&lt;/h2&gt;

&lt;p&gt;Hopefully, Stoplight Spectral just came out at that time.
I will not go in all the details here (You can watch my &lt;a href=&quot;/the-augmented-api-design-reviewer/&quot;&gt;“Augmented API Design Reviewer” talk&lt;/a&gt; for that), but to make it short, Spectral is a JSON/YAML linter.
You can define rules that Spectral will run against a document to spot if some elements are breaking them.
You can check path structure, property names case, if all expected HTTP status codes are defined on all operations, or if all 4xx and 5xx error response return a data model matching your standard error schema.&lt;/p&gt;

&lt;p&gt;For instance the following ruleset contains a single that scans all properties to detect if some of them have a name containing a number:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Spectral Demo Ruleset&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code file controls&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0&quot; aria-label=&quot;download file&quot; target=&quot;_blank&quot; href=&quot;/code/api-design-reviews/demo-ruleset.yaml&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Download&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/download.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;rules:
  property-name-no-number:
    given: $..properties
    severity: warn
    description: Property name must not contain number (maybe you can use an array)
    message: &quot;{{description}} {{path}}&quot;
    then:
      - field: &quot;@key&quot;
        function: pattern
        functionOptions:
          notMatch: &quot;/[0-9]+/i&quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can run the following command after installing Spectral to see it in action:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;Spectral lint -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using escape variable&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $ Spectral lint -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml
OpenAPI 3.x detected

https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml
 358:26  warning  property-name-no-number  Property name must not contain number (maybe you can use an array) #/components/schemas/Episode_Single/properties/alternate_name_1
 360:26  warning  property-name-no-number  Property name must not contain number (maybe you can use an array) #/components/schemas/Episode_Single/properties/alternate_name_2

✖ 2 problems (0 errors, 2 warnings, 0 infos, 0 hints)&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What’s the problem with property names containing numbers?
What’s the problem with &lt;code&gt;alternate_name_1&lt;/code&gt; and &lt;code&gt;alternate_name_2&lt;/code&gt; properties in the &lt;code&gt;Episode_Single schema&lt;/code&gt; for instance?
If there’s a 1 and 2, why not a 3? And a 4?
So better put those alternate names in a list, that way no problem, there can be 1 to 4 … or 5.
But that’s if those alternate names 1 and 2 actually are just “alternate names” and not “production name” and “some other name”. 
If so, I would rename them accordingly.&lt;/p&gt;

&lt;p&gt;As you can see linting an OpenAPI file is not only about doing dumb checks (even if only just that actually changed my life), you can use Spectral to spot possible design patterns and business domain concerns.&lt;/p&gt;

&lt;p&gt;The problem with linting an OpenAPI file is that you can end with hundreds of problems detected.
Actually, running my usual ruleset (working on open sourcing it) on this post’s demo OpenAPI file would return almost 200 problems.
A raw list of 200 problems is not really usable.
And Spectral can’t handle all of my checks, I still need to analyze the contract with my very eyes.&lt;/p&gt;

&lt;p&gt;And so I realized that I needed to render OpenAPI files and Spectral results in a new way.&lt;/p&gt;

&lt;h2 id=&quot;looking-for-new-perspectives&quot;&gt;Looking for new perspectives&lt;/h2&gt;

&lt;p&gt;This research of new perspectives actually started with a command line like this one:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  &lt;pre class=&quot;copy-hidden code-copy&quot;&gt;Spectral lint -q -f json -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml | jq .

&lt;/pre&gt;
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Using escape variable&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;[apihandyman.io] $  Spectral lint -q -f json -r https://apihandyman.io/code/api-design-reviews/demo-ruleset.yaml https://apihandyman.io/code/api-design-reviews/motu-openapi.yaml | jq .&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can tell Spectral to return its results as JSON and pipe it to &lt;a href=&quot;https://apihandyman.io/toolbox/jq/&quot;&gt;jq&lt;/a&gt; and do whatever you want with them. Just don’t forget the &lt;code&gt;-q&lt;/code&gt; flag, if not there are some non JSON data screwing everything.&lt;/p&gt;

&lt;p&gt;So I tinkered with JQ, extracting data from Spectral results and turning them into csv.
Then I did the same with OpenAPI files (see my series about &lt;a href=&quot;/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/&quot;&gt;OpenAPI + JQ&lt;/a&gt;), I extracted operations and schemas into csv.&lt;/p&gt;

&lt;p&gt;Then all these csv files are imported into … an Excel file (Google Sheet or Apple Number are no match, and don’t even dare to talk about OpenOffice/Libroffice alternatives).&lt;/p&gt;

&lt;p&gt;For the Spectral problems, I can easily filter problems by type or level, I can do text search.
And I can easily get stats using a pivot table.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/linter.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/linter-stats.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;For the operations, I can at last have “my overview” as I need it, I can see all operations in a quick glance.
I can see all parameters, response data model or used HTTP status code.
I can easily compare paths (and spot typos).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/operations.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Having the schemas put flat in Excel is a very powerful tool.
I can see all schema names easily.
By sorting the data by property names, I can easily spot inconsistencies.
I can check number/integer properties and check if they are not-easy-to-interpret codes, more easily spotted when there’s an enum (line 68 in the above capture).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/we-need-specialized-tools-for-api-design-reviews/schemas.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The possibilities are endless.
Well I exaggerate a bit, but you can do crazy stuff with just csv files and an Excel file.&lt;/p&gt;

&lt;p&gt;Obviously, though I added some shell scripts and VS Code action around that to quickly analyze an OpenAPI file and open my Excel report, this is not really industrial.
My JQ stuff works only a basic files, I would need to replace that by more robust code.
Same for Excel, I hope to replace it by something else one day…&lt;/p&gt;

&lt;h1 id=&quot;and-thats-just-for-analyzing-the-contract&quot;&gt;And that’s just for analyzing the contract&lt;/h1&gt;

&lt;p&gt;I hope that what was shown here will give you some ideas about how analyze OpenAPI files but more important, I hope you’ll understand that we, API designer reviewers, need specialized tools to do our job.
We cannot just rely on raw OpenAPI files or documentation tools.
We need tools that take advantage of this machine readable format, tools such as Spectral, but we need new way of rendering OpenAPI files and linter results.&lt;/p&gt;

&lt;p&gt;And I didn’t talked about how to formalize the result of such analysis … we need specialized tools for that too. But that’s another story I’ll tell another time.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Doing an API design review is not only about that, but it will require, sooner or later, to analyze an interface contract. Use the wrong tools to do so, and reviews will become a terrible, never-ending burden. Use the right tools, and you’ll become a formidable machine, doing reviews at light speed, never missing the tiniest problem or question. But, after dozens of reviews, you may realize that, despite using the “right” existing tools, the API space actually lacks API design reviews specialized tools.</summary></entry><entry><title type="html">Barely surviving my first live (non recorded) demo session</title><link href="https://apihandyman.io/barely-surviving-my-first-live-non-recorded-demo-session/" rel="alternate" type="text/html" title="Barely surviving my first live (non recorded) demo session" /><published>2021-09-29T00:00:00-05:00</published><updated>2021-09-29T00:00:00-05:00</updated><id>https://apihandyman.io/barely-surviving-my-first-live-non-recorded-demo-session</id><content type="html" xml:base="https://apihandyman.io/barely-surviving-my-first-live-non-recorded-demo-session/">&lt;p&gt;Yesterday, I live demoed how I take advantage of the OpenAPI Specification during an API Design review at the API Specification Conference.
This session was really live, not recorded like my previous one, and that didn’t totally went well.
Though I was quite happy to discover new tricks, I had problems preparing this session and worse I also had problems giving it.
Nothing that terrible hopefully, but still terribly annoying and stressful.
I need a cathartic post to talk about all that.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;facing-obs-browser-cache-issues&quot;&gt;Facing OBS browser cache issues&lt;/h1&gt;

&lt;p&gt;During my previous (and first) live demo session I started to use &lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS&lt;/a&gt;, you can read the whole story &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/#discovering-obs-studio&quot;&gt;here&lt;/a&gt;).
I decided to reuse what I had done, especially my &lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;pseudo-slide-deck system&lt;/a&gt; in order to have section titles and speaker notes.
To explain this shortly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s a &lt;code&gt;steps&lt;/code&gt; folder containing &lt;code&gt;step-1&lt;/code&gt; to &lt;code&gt;step-X&lt;/code&gt; folders&lt;/li&gt;
  &lt;li&gt;Each &lt;code&gt;step-X&lt;/code&gt; folder contains at least an index.html (the sections title) and todo.html (my speaker’s notes) HTML files (plus some other files if needed)&lt;/li&gt;
  &lt;li&gt;A next.sh shell script copy the content of the next &lt;code&gt;step-X&lt;/code&gt; folder to &lt;code&gt;steps&lt;/code&gt;, I run it when needed with a shortcut in VS Code&lt;/li&gt;
  &lt;li&gt;Both “current” HTML files can be loaded and live-reloaded automatically thanks to the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Live Server&lt;/a&gt; VS Code extension&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;index.html&lt;/code&gt; file is visible in OBS via a browser source&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;todo.html&lt;/code&gt; is just opened in a browser (on my iPad in sidecar mode)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/barely-surviving-my-first-live-non-recorded-demo-session/tweet.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This time the &lt;code&gt;index.html&lt;/code&gt;was not containing text but a PNG image with a transparent background (top right corner in the screenshot above).
At my first attempt, I simply gave the same name to all the different images &lt;code&gt;steps/step-X/title.png&lt;/code&gt;, the HTML containing &lt;code&gt;&amp;lt;img src=&quot;title.png&quot;&amp;gt;&lt;/code&gt;.
The problem was that the browser inside OBS was not reloading the image because it was cached.
To solve this problem I simply stored all images in &lt;code&gt;steps/images&lt;/code&gt; with different names and targeted &lt;code&gt;steps/images/specific-name.png&lt;/code&gt; in the &lt;code&gt;img&lt;/code&gt; tag.&lt;/p&gt;

&lt;h1 id=&quot;adding-scene-switching-to-my-system&quot;&gt;Adding scene switching to my system&lt;/h1&gt;

&lt;p&gt;In my previous live session, I didn’t needed to use scene switching but this time I wanted to be able to switch between a scene showing my Macbook display and another one with only my webcam when needed while still being able to use my “next slide” script.
I did that by configuring the “Title” tab of the Advanced Scene Switcher as follow:&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/barely-surviving-my-first-live-non-recorded-demo-session/scene-switch-title-regex.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The first line targets a terminal window whose title may change, so I used a regex (the &lt;code&gt;.*&lt;/code&gt; part of the title).
The second line targets my VS Code window.
That configuration means: if I click on my terminal, OBS shows the Camera scene and if click on VS Code, the VSCode scene is shown.
While having the focus on the terminal I was able to launch the &lt;code&gt;next.sh&lt;/code&gt; command to go to next step if needed.&lt;/p&gt;

&lt;p&gt;Then a few hours before the conference, I wanted to add a third scene for the introduction.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/barely-surviving-my-first-live-non-recorded-demo-session/tweet-intro-scene.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I was able to handle that by simply adding a &lt;code&gt;scene.txt&lt;/code&gt; in all of my &lt;code&gt;steps/step-X&lt;/code&gt; folders and then configure the “File” tab of the advanced scene switcher plugin to change the scene based on the content of &lt;code&gt;steps/scene.txt&lt;/code&gt;.
Depending on the scene, the file may contain “Intro” or “Camera” (the scene’s name) or be empty.
In this last case, the scene switcher fallback to “title” mode.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/barely-surviving-my-first-live-non-recorded-demo-session/scene-switch-file.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;noticing-epoccam-lag-in-obs&quot;&gt;Noticing EpocCam lag in OBS&lt;/h1&gt;

&lt;p&gt;I my previous &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/#looking-good-enough&quot;&gt;“live” series&lt;/a&gt;, I explained how an iPhone could be used as a webcam with EpocCam.
I actually did not used it that time, but I did use my iPhone as Webcam several times for video calls and podcast recordings (yes, video is recorded sometimes for podcasts).
I had absolutely no problem at all.
But this time, I don’t know yet why, I faced some lag issue: the video not sync with my audio when using OBS.
I realized that 2 hours before the conference 🤦🏻‍♂️.
So, as I had not much time to figure what the problem was and how to solve it, I decided to use my terrible Macbook webcam … and plan to buy a descent camera.&lt;/p&gt;

&lt;h1 id=&quot;chaotic-sessions-content-preparation&quot;&gt;Chaotic session’s content preparation&lt;/h1&gt;

&lt;p&gt;Maybe having 3 totally different conference talk for this year was too much, it take me an awfully long time and dedication to prepare one. 
I had too much work to do these last weeks and not enough time to prepare … and was not in the mood for it.
That happens sometimes, not being in the mood, but it was not a blog post I could postpone, people were expecting to see this session.&lt;/p&gt;

&lt;p&gt;The idea was to design an API having a few design issues that would allow me to showcase how I review a design and my tools. 
I really struggled to prepare this API and was not totally satisfied in the end.
The resulting API looked too much artificial.&lt;/p&gt;

&lt;p&gt;I hadn’t much time to prepare my speech and do the rehearsal.
Hopefully, lastly I was able to practice quite often “presenting without any notes” while doing API design training sessions.
So though I was not totally confident, I felt I could let go my “word for word” preparation and be more spontaneous.
Once the sections of my talk were defined I did a few tests and was quickly able to evaluate the time for each one, added the timing to my speakers notes and was “ready” for the show.&lt;/p&gt;

&lt;h1 id=&quot;facing-technical-issue-during-the-session&quot;&gt;Facing technical issue during the session&lt;/h1&gt;

&lt;p&gt;And the show didn’t go so well but not because of my lack of preparation…&lt;/p&gt;

&lt;p&gt;I did an audio/video test 30 minutes before my session and there was something wrong.
The person I did the test with told me there was a small random delay with my video (I was sharing my 27 inches display screen showing a fullscreen OBS projector and not using my webcam directly).
I took time to do some tests and I noticed a few things (the platform used was Hopin in Chrome):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sharing a just a window instead of the screen was terrible. Huge video lag&lt;/li&gt;
  &lt;li&gt;Reducing the resolution of my screen apparently allowed to remove the lag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here I was ready for the show and I started to talk: “Hello, everyone…” …
But some friends in the chat told me my audio was “scratching” or doing static sound.
Not knowing what to do, I switched to the MacBook audio instead of my super cool Shure SM7B then switched back to the Shure.
Problem solved … 30 seconds.
I switched back again to MacBook audio, it was working, “Don’t touch anything” someone told me 😅.
I lost 2 to 3 minutes I think, but I started the session.&lt;/p&gt;

&lt;p&gt;Everything was working well, though I noticed some lag in VS Code scrolling.
Slowly but surely my MacBook was becoming less responsive.
It seems that both OBS and Chrome were using much CPU, but I suspect there were some other process slowing my Machine (I was telling to myself “it’s a f&lt;strong&gt;**&lt;/strong&gt; gazillion cores MacBook Pro 16, how can it be so slowed down!”).
I think the mic problem was caused by high CPU usage.
Whatever, I was unable to fully demoed my final tool (in Excel, yes, Excel) but was able to explain the spirit.&lt;/p&gt;

&lt;p&gt;So, it didn’t went so well BUT, I don’t know how, I succeeded to keep my calm and people were happy with the session’s content, so I can live with that.
I’ll need to figure what was the problem in order to avoid having it again.
And I’ll need to prepare a plan B just in case, because Murphy’s law.
Oh, and I must not forget to buy a f&lt;strong&gt;**&lt;/strong&gt; camera.
But for now, I’ll take some rest.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Yesterday, I live demoed how I take advantage of the OpenAPI Specification during an API Design review at the API Specification Conference. This session was really live, not recorded like my previous one, and that didn’t totally went well. Though I was quite happy to discover new tricks, I had problems preparing this session and worse I also had problems giving it. Nothing that terrible hopefully, but still terribly annoying and stressful. I need a cathartic post to talk about all that.</summary></entry><entry><title type="html">3 common APIfication problems: complexity, security, capacity</title><link href="https://apihandyman.io/3-common-apification-problems-complexity-security-capacity/" rel="alternate" type="text/html" title="3 common APIfication problems: complexity, security, capacity" /><published>2021-09-22T00:00:00-05:00</published><updated>2021-09-22T00:00:00-05:00</updated><id>https://apihandyman.io/3-common-apification-problems-complexity-security-capacity</id><content type="html" xml:base="https://apihandyman.io/3-common-apification-problems-complexity-security-capacity/">&lt;p&gt;API all the things! 
Whatever the reason, IT optimization or digital transformation, it’s nowadays fairly common to APIfy an existing system, making it available through APIs.
What is also very common is to not totally grasp the implications of doing so and especially overlooking complexity, security and capacity concerns.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;context&quot;&gt;Context&lt;/h1&gt;

&lt;p&gt;Though (Web) APIs have been there for quite a long time, though the API economy is in the air for almost as long, there are still some companies that take the API train today.
It could be because they want to refresh their IT systems, to replace old JSP web sites by brand new JS/HTML SPAs (Single Page Applications) for instance.
They could also want to participate to the API economy, by providing their services through APIs.&lt;/p&gt;

&lt;p&gt;Unfortunately, not all companies can rebuild themselves from scratch to provides those APIs, they have to deal with existing systems that sometimes cannot be replaced easily.
And so they have to keep them.
Hopefully, that does not mean they can’t do new stuff with it, that means they will have to compose with them, maybe to build around them.
(Actually it is sometimes more interesting from an architecture perspective to work on such system than just to build brand new stuff, you can learn a lot doing so.)
But APIfying existing system must be done having 3 concerns in mind: complexity, security and capacity.&lt;/p&gt;

&lt;h1 id=&quot;complexity&quot;&gt;Complexity&lt;/h1&gt;

&lt;p&gt;Building APIs to provide access to an existing system is unfortunately prone to actually create APIs that just give access to an existing system.
That means the APIs will just be technical connectors brutally exposing underlying complexity.&lt;/p&gt;

&lt;p&gt;If the system that needs to be exposed is a good old corporate software solution, some may be tempted to give a direct access to its APIs (hoping it has some).
Unfortunately, corporate software usually provide terrible APIs that are awfully complex and require to be an expert of both the related business domain and the software solution itself to use them.
And that’s definitely not how modern APIs should be.&lt;/p&gt;

&lt;p&gt;Old systems can be the result of years if not decades of IT, business and organization evolutions, they may simply not make any sense at all for people outside of the team owning them or outside the organization.
I have seen places where 2 different software solutions would handle the same business domain because of historical and organizational constraints.
Years of evolutions in a close environments may have lead to creating a local business dialect only understood inside the organization.
That must not be shown to the outside&lt;/p&gt;

&lt;p&gt;And these are only a few examples of the complexity that could be exposed to the outside, if care is not taken.
Always try to look at what you want to expose with a fresh eye, focusing on an outside-in business perspective approach.
Then find the means to plug this new perspective to the existing system whatever the means: API redesign, adding new layers, adapting architecture or organization, …&lt;/p&gt;

&lt;h1 id=&quot;security&quot;&gt;Security&lt;/h1&gt;

&lt;p&gt;An other major problem too often neglected when exposing existing systems is security.&lt;/p&gt;

&lt;p&gt;A typical example would be to bluntly reuse existing purely internal (SOAP) web service, restify them and use them in a JS/HTMl SPA … 
Totally forgetting that the replaced good old web applications was actually handling all of the security like “is this user allowed to make a wire transfer from this bank account?” or “is this user allowed to make a 1 million euros wire transfer?”.
You can’t delegate such controls outside of your walls.
(Note that I never have actually seen this specific use case. It’s purely hypothetical. Really. Please, no questions.).&lt;/p&gt;

&lt;p&gt;Exposing an existing system requires to rethink security to ensure that the consumers won’t be able to harm it.
And by security I mean regular access controls but also business controls.&lt;/p&gt;

&lt;h1 id=&quot;capacity&quot;&gt;Capacity&lt;/h1&gt;

&lt;p&gt;And last but not least problem: capacity.
You must ensure that the existing system is actually able to handle the new solicitations coming through the new APIs.&lt;/p&gt;

&lt;p&gt;It’s not that rare to see old systems that were made to only run at office hours.
But exposing them through APIs may requires to do some modifications to make them available 24/7.
In last resort you may include those constraints in your SLA but in 2021 that may seem awkward depending on your business domain and who the consumers of your APIs are.&lt;/p&gt;

&lt;p&gt;And more tricky: the infrastructure.
Exposing an existing system requires to know its capacity and its current charge.
How many of this new solicitations through APIs can it handle?
Aren’t you putting the other usages of the system at risk by opening the new API channel?
Can you easily add more horse power?
Systems that have been creating prior the cloud era are probably still hosted on not easily extensible infrastructure or worse may have an architecture that makes them not extensible to handle more requests.&lt;/p&gt;

&lt;h1 id=&quot;only-solutions&quot;&gt;Only solutions&lt;/h1&gt;

&lt;p&gt;All that looks very pessimistic.
But you must be aware of it in order to avoid screwing your API initiative and find the solutions to solves those problems.
And don’t be afraid, based on my experience, there are always solutions.
I have worked on systems that ended mixing non extensible mainframe, not easily extensible unix servers and unlimited horse power cloud infrastructure. 
Oh, it’s a little bit more complicated than just building from scratch, but that’s how you can actually have fun as an architecture-problem-solver.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">API all the things! Whatever the reason, IT optimization or digital transformation, it’s nowadays fairly common to APIfy an existing system, making it available through APIs. What is also very common is to not totally grasp the implications of doing so and especially overlooking complexity, security and capacity concerns.</summary></entry><entry><title type="html">Toro Cloud’s Coding Over Cocktails Podcast: The Design of Web APIs</title><link href="https://apihandyman.io/toro-clouds-coding-over-cocktails-podcast-the-design-of-web-apis/" rel="alternate" type="text/html" title="Toro Cloud’s Coding Over Cocktails Podcast: The Design of Web APIs" /><published>2021-09-16T00:00:00-05:00</published><updated>2021-09-16T00:00:00-05:00</updated><id>https://apihandyman.io/toro-clouds-coding-over-cocktails-podcast-the-design-of-web-apis</id><content type="html" xml:base="https://apihandyman.io/toro-clouds-coding-over-cocktails-podcast-the-design-of-web-apis/">&lt;p&gt;I was invited by David Brown and Kevin Montalbo for Toro Cloud’s Coding Over Cocktail podcast. We discussed API consistency, how to make your APIs more discoverable, defining and setting the boundaries between an API gateway and API implementation, and choosing the right API architecture and technology for the right problem.
&lt;!--more--&gt;&lt;/p&gt;</content><author><name>David Brown &amp; Kevin Montalbo &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">I was invited by David Brown and Kevin Montalbo for Toro Cloud’s Coding Over Cocktail podcast. We discussed API consistency, how to make your APIs more discoverable, defining and setting the boundaries between an API gateway and API implementation, and choosing the right API architecture and technology for the right problem.</summary></entry><entry><title type="html">Stoplight’s API Intersection Podcast: The Ultimate Guide to Style Guides</title><link href="https://apihandyman.io/stoplights-api-intersection-podcast-the-ultimate-guide-to-style-guides/" rel="alternate" type="text/html" title="Stoplight’s API Intersection Podcast: The Ultimate Guide to Style Guides" /><published>2021-09-15T00:00:00-05:00</published><updated>2021-09-15T00:00:00-05:00</updated><id>https://apihandyman.io/stoplights-api-intersection-podcast-the-ultimate-guide-to-style-guides</id><content type="html" xml:base="https://apihandyman.io/stoplights-api-intersection-podcast-the-ultimate-guide-to-style-guides/">&lt;p&gt;I was invited to Stoplight’s API Intersection podcast hosted by my two good friends Jason Harmon and Adam Duvander.
As it was Stoplight’s “Style Guide September”, we discussed one of my favorite topics, covered quickly in my book The Design of Web APIs, and that I practice everyday helping people to create APIs: API design style guides.
&lt;!--more--&gt;&lt;/p&gt;</content><author><name>Jason Harmon &amp; Adam Duvander &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">I was invited to Stoplight’s API Intersection podcast hosted by my two good friends Jason Harmon and Adam Duvander. As it was Stoplight’s “Style Guide September”, we discussed one of my favorite topics, covered quickly in my book The Design of Web APIs, and that I practice everyday helping people to create APIs: API design style guides.</summary></entry><entry><title type="html">Analyzing a software solution from an API perspective</title><link href="https://apihandyman.io/analyzing-a-software-solution-from-an-api-perspective/" rel="alternate" type="text/html" title="Analyzing a software solution from an API perspective" /><published>2021-09-15T00:00:00-05:00</published><updated>2021-09-15T00:00:00-05:00</updated><id>https://apihandyman.io/analyzing-a-software-solution-from-an-api-perspective</id><content type="html" xml:base="https://apihandyman.io/analyzing-a-software-solution-from-an-api-perspective/">&lt;p&gt;I regularly participate to CFP (Call For Proposals) aiming to choose a software solution.
My role is to analyze solutions from an API perspective.
And I do that even if there’s no specific API concern regarding the context in which the CFP is made.
Why doing so and what to look at?
This should be of interest for people having to choose a solution but also to people proposing them.
Indeed, some (corporate) software solution vendors should take this seriously …
Unless they want to finish at the bottom of the list. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-systematically-include-the-api-perspective&quot;&gt;Why systematically include the API perspective&lt;/h1&gt;

&lt;p&gt;Before explaining what to look at when analyzing a software solution from an API perspective, maybe we should talk about why doing so even when there is no obvious and/or specific API concern.&lt;/p&gt;

&lt;p&gt;Most companies having IT systems couldn’t build those IT systems without APIs.
Indeed, most IT systems are composed or more than one brick, more than one software solution.
Some of them being built, some other being bought and deployed on premise or used as a service (SAAS).
But either built or bought, installed or used as a service, a company will have to connect all these pieces of software together.
And what can be used to connect all these pieces across a local network or the internet?
APIs.&lt;/p&gt;

&lt;p&gt;Oh, some may think that this new piece of software, especially a SAAS one which magically solves some needs, will be used totally independently from any other of the IT system’s bricks.
And that may actually be the case … in the beginning.
But in the end, for one reason or another it WILL need to be connected to other pieces of software. 
It’s not a risk, it’s a certainty.&lt;/p&gt;

&lt;p&gt;And if that solutions does not provide APIs …
That may hinder severely an important project, critical for the company.
A pity as one of the competing solutions seen during the CFP 2 years ago actually provided APIs …&lt;/p&gt;

&lt;h1 id=&quot;what-to-look-at&quot;&gt;What to look at&lt;/h1&gt;

&lt;p&gt;Note that this post is based on my “corporate solutions” evaluation experience, you may find totally unexpected elements that would be total science fiction for true API companies like Twilio or Stripe.
So, here are the various topics I look at when analyzing a software solution from an API perspective:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are there APIs?&lt;/li&gt;
  &lt;li&gt;What is the quality of documentation?&lt;/li&gt;
  &lt;li&gt;What is the quality of the design?&lt;/li&gt;
  &lt;li&gt;How the API is secured?&lt;/li&gt;
  &lt;li&gt;Do the APIs cover 100% of features?&lt;/li&gt;
  &lt;li&gt;Can the APIs fulfill hypothetical needs?&lt;/li&gt;
  &lt;li&gt;What is the overall developer experience?&lt;/li&gt;
  &lt;li&gt;What is the pricing model?&lt;/li&gt;
  &lt;li&gt;What are the terms of use?&lt;/li&gt;
  &lt;li&gt;Does the company shows an API Mindset?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;are-there-apis&quot;&gt;Are there APIs?&lt;/h2&gt;

&lt;p&gt;Very first and obvious verification: is there one or more APIs coming with the solution?
That looks like a dead simple question, but you can’t imagine how it is difficult sometimes to verify this.
Sometimes, it’s because the information is deeply hidden somewhere on the company’s website.
That’s why my first move is simple to google “company name API”.&lt;/p&gt;

&lt;p&gt;But it’s not that rare to look at (or google) the company’s website or product’s webpage and find absolutely no information about APIs.
And there are 2 reasons.
First one, there’s absolutely no API at all.
That puts the company to the bottom of the list.
Second one, there are APIs, but you can’t see them unless you ask the sales people.
That’s really annoying, and will make the company loose points in the rankings.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-quality-of-documentation&quot;&gt;What is the quality of documentation?&lt;/h2&gt;

&lt;p&gt;A good API documentation is not only a documentation that explains what you can do with the API (use case documentation), what are all the available operations (reference documentation), or how to get an access token.
A good API documentation starts by being at least visible publicly!
That sounds crazy right?
Unfortunately what we’re used too with most API companies is not yet that obvious for many companies providing corporate solutions.
Having to contact sales to get an access to documentation is really annoying (and that makes you loose points in the rankings).&lt;/p&gt;

&lt;p&gt;And beyond access and content, the form is important too.
I prefer to get a bare Swagger 2.0 (OpenAPI 2.0) JSON file sent by email than an indigestible PDF accessible on the website.
Actually, a documentation that does not comes with a standard OpenAPI (or Swagger) file is quite annoying for me because I need it to make some automatic controls on the design.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-quality-of-the-design&quot;&gt;What is the quality of the design?&lt;/h2&gt;

&lt;p&gt;Having access to the documentation I can evaluate the quality of the design.
Does it respect common practices, it is easy to use, easy to understand.
I practically do an API design review, I’m not looking for perfection but just a good looking API.&lt;/p&gt;

&lt;h2 id=&quot;how-the-api-is-secured&quot;&gt;How the API is secured?&lt;/h2&gt;

&lt;p&gt;What I want is APIs using state of the art security mechanism.
Unfortunately, some companies don’t seem to care about security, providing good old basic authentication for instance.
And that puts the company to the bottom of the list.&lt;/p&gt;

&lt;h2 id=&quot;do-the-apis-cover-100-of-features&quot;&gt;Do the APIs cover 100% of features?&lt;/h2&gt;

&lt;p&gt;Once I know what the API is capable of, I can check if it actually cover 100% of the product features.
It’s not that rare to see solutions that propose APIs only covering a subset of all of their features.
That could be a real problem unless the company shows a roadmap to achieve the 100% (but beware of promises…).&lt;/p&gt;

&lt;h2 id=&quot;can-the-apis-fulfill-hypothetical-needs&quot;&gt;Can the APIs fulfill hypothetical needs?&lt;/h2&gt;

&lt;p&gt;Once I know what the API does (thanks to the documentation), I can imagine some hypothetical but realistic needs that would require to connect the solution to others.
I speak with the business people involved in the CFP to get some ideas.
Then I evaluate if it’s possible and the complexity of such project (if the product lacks of useful APIs/operations you may have to do a lot of work for a simple project).&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-overall-developer-experience&quot;&gt;What is the overall developer experience?&lt;/h2&gt;

&lt;p&gt;Doing all that (checking documentation, analyzing design and imagining hypothetical needs), I’m able to start evaluating the developer experience.
If doing all that was simple, the experience is good, if not, the experience is terrible.
When I see a company providing a state of the art self-service developer portal, that’s a total nirvana (that doesn’t happen often unfortunately)
Being able to actually test the API at this stage is a plus (even if there’s no true dev portal).&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-pricing-model&quot;&gt;What is the pricing model?&lt;/h2&gt;

&lt;p&gt;When evaluating a solution’s API, you have to look beyond the API itself and especially how much it would cost to use them.
That’s probably the most difficult information to find when dealing with corporate software vendors: it’s almost never shown publicly.&lt;/p&gt;

&lt;p&gt;Be aware that most of the time, especially for SAAS solutions but also for on premise (totally crazy!), using the API is not included in the pricing proposal (because the request sent for the CFP usually don’t include the API perspective).
Using the hypothetical needs, you should be able to get an idea of what could cost using the solution’s API.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-terms-of-use&quot;&gt;What are the terms of use?&lt;/h2&gt;

&lt;p&gt;Another thing that is really important to check is the terms of use.
I check what is the API evolution policy (how are handled breaking changes, the delay to update).
There can be too strict limitations regarding the number of API calls, making the solution to your hypothetical needs highly complex to build because you would need to add some cache systems for instance.
But my concerns are not only technical.
For instance a software solution may grant you access to some data that you can’t resell without a huge bump on the bill.&lt;/p&gt;

&lt;h2 id=&quot;does-the-company-shows-an-api-mindset&quot;&gt;Does the company shows an API Mindset?&lt;/h2&gt;

&lt;p&gt;And finally I evaluate the company’s API mindset.
I prefer a company publicly showing it’s work-in-progress-well-designed API than a company hiding its mess hoping customers will not notice it before it’s too late (and that actually exist, I put them to the bottom of the list).
I love when a company actually communicates about its API strategy or its roadmap, it’s not mandatory to actually talk about APIs you just need to show that you want to be part of an ecosystem, that your products can easily be connected to others.&lt;/p&gt;

&lt;h1 id=&quot;analyze-this&quot;&gt;Analyze this&lt;/h1&gt;

&lt;p&gt;For those who have to choose solutions, I hope you found that interesting and that it will help you to choose the right solutions from an API perspective.
For solution vendors, now you know what puts you to the bottom of the list when you see me on a CFP (and so, how to avoid that).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">I regularly participate to CFP (Call For Proposals) aiming to choose a software solution. My role is to analyze solutions from an API perspective. And I do that even if there’s no specific API concern regarding the context in which the CFP is made. Why doing so and what to look at? This should be of interest for people having to choose a solution but also to people proposing them. Indeed, some (corporate) software solution vendors should take this seriously … Unless they want to finish at the bottom of the list.</summary></entry></feed>