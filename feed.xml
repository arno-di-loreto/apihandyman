<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-08-25T07:10:56-05:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">Surviving My First Recorded Live Coding Session Part 4</title><link href="https://apihandyman.io/live-coding-at-light-speed-with-vs-code/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 4" /><published>2021-08-25T00:00:00-05:00</published><updated>2021-08-25T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-4</id><content type="html" xml:base="https://apihandyman.io/live-coding-at-light-speed-with-vs-code/">&lt;p&gt;This is the fourth post about my first ever (recorded) live coding session given at the Manning API conference.
In this series &lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;second post&lt;/a&gt;, I listed some problems I encountered and started to solve them in &lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;previous post&lt;/a&gt;.
But there are other problems to solve, one of them was that I was not coding and using VS Code fast enough.
In this post, I’ll show you how I solved that using a few VS Code tricks, the most important one being: the absolutely &lt;a href=&quot;https://aarongilbreath.medium.com/a-brief-history-of-the-word-rad-972a989617c8&quot;&gt;rad&lt;/a&gt; custom code snippet feature.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API confernce.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Note that I’ll soon start an OpenAPI Tips &amp;amp; Trick series including this session contents and a few other things I couldn’t show during this session.&lt;/p&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;4 - Live coding at light speed with VS Code&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
          &lt;li class=&quot;list-group-item disabled&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code (coming soon)&lt;/li&gt;
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;mastering-the-command-palette&quot;&gt;Mastering the command palette&lt;/h1&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/palette.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If there is one thing you need to master with VS Code, it’s the command palette.
This is what allows to access all VS Code and its extensions functions quickly.
Use &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on Windows to open it.
Then type what you want to do, the palette will show you relevant actions.&lt;/p&gt;

&lt;p&gt;Once you have used some actions, the palette will show them first, so you just have to use the arrow keys to move down to the one you want.
That allowed me to quickly show the Redoc or SwaggerUI renderings coming with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&quot;&gt;42 Crunch OpenAPI Editor extension&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;copypaste-and-indent&quot;&gt;Copy/Paste and indent&lt;/h1&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/copy-paste-indent.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;At some moment, I had to copy/paste sections of code but that requires fixing indentation, and I was not good at that.
In the beginning I was relying to the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&quot;&gt;Indent Rainbow extension&lt;/a&gt; to give me indications on how to indent after pasting (that extension can really save your life when working with indent-based formats), but it was taking too much time.
Hopefully, I found a faster way to fix indentation on copy/paste:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the lines, but carefully include the full first list. It’s easier to start by the end of selection of go up (do not start selecting at the first word of first line)&lt;/li&gt;
  &lt;li&gt;Put cursor at the beginning of the line where you need to paste&lt;/li&gt;
  &lt;li&gt;Paste&lt;/li&gt;
  &lt;li&gt;Format whole file using &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt; (MacOS) or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt; (Windows). This will fix indentation based on the line above the one where you pasted. But that only works if the whole pasted block is already correctly indenting (relatively).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While writing this post, I realized that I could probably have defined keybindings (as I did to run my custom tasks) to show Redoc or SwaggerUI and gain a few milliseconds.&lt;/p&gt;

&lt;h1 id=&quot;the-tip-you-need-when-openingclosing-terminal&quot;&gt;The tip you need when opening/closing terminal&lt;/h1&gt;

&lt;p&gt;Showing and hiding the terminal can be done with the &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt; shortcut.
That seems quite simple but strangely I had hard time showing and hiding the terminal.
Sometimes it was working, and sometimes not; and that was making me loosing precious seconds.
I was starting to get mad until I figured out what the problem was.
The problem is if the terminal is shown, but has not the focus, the &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt; shortcut will just give it focus. 
Once I started to take care about that and NOT clicking elsewhere than in the terminal when using it, I no more had this problem.&lt;/p&gt;

&lt;h1 id=&quot;the-magic-of-code-snippets&quot;&gt;The magic of code snippets&lt;/h1&gt;

&lt;p&gt;The trick that made me gain much time while coding is &lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets&quot;&gt;user defined snippets&lt;/a&gt;.
That’s a totally rad feature.
Thanks to some configuration, just type “some magic keyword” and boom a complex regex or 20 lines of code appears magically.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/rad.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You can define global or local snippets.
I used local ones defined in &lt;code&gt;.vscode/supercharged-openapi.code-snippets&lt;/code&gt; which is a json file.
A snippet can be a static text but you can also use variables and even choices list (probably among other awesome things I didn’t used yet, check the &lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets&quot;&gt;documentation&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/snippets.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The following example allows to add a “Read an element” operation in the form of the &lt;code&gt;GET /somethings/{somethingId}&lt;/code&gt;.
It is triggered when typing “Read” (&lt;code&gt;prefix&lt;/code&gt;) then hitting the tab key.
There are two variables &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; to provide, note how &lt;code&gt;$1&lt;/code&gt; appears multiple times.
Once you hit tab, you type the first variable value which is filled wherever there’s a &lt;code&gt;$1&lt;/code&gt; in the body.
Hit tab to set &lt;code&gt;$2&lt;/code&gt;.
And don’t forget to hit tab another time to finish.
If you don’t do that last tab, you’ll be unable to use another snippet, it took me a moment to figure that.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;A snippet with variables&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
	&amp;quot;Read an element&amp;quot;: {
		&amp;quot;scope&amp;quot;: &amp;quot;yaml&amp;quot;,
		&amp;quot;prefix&amp;quot;: &amp;quot;Read&amp;quot;,
		&amp;quot;body&amp;quot;: [
			&amp;quot;/$1s/{$1Id}:&amp;quot;,
			&amp;quot;\tget:&amp;quot;,
			&amp;quot;\t\tsummary: Read a $1&amp;quot;,
			&amp;quot;\t\tparameters:&amp;quot;,
			&amp;quot;\t\t\t- name: $1Id&amp;quot;,
			&amp;quot;\t\t\t  in: path&amp;quot;,
			&amp;quot;\t\t\t  required: true&amp;quot;,
			&amp;quot;\t\t\t  schema:&amp;quot;,
			&amp;quot;\t\t\t  \ttype: $2&amp;quot;,
			&amp;quot;\t\tresponses:&amp;quot;,
			&amp;quot;\t\t\t&amp;#39;200&amp;#39;:&amp;quot;,
			&amp;quot;\t\t\t\tdescription: OK&amp;quot;,
			&amp;quot;\t\t\t\tcontent:&amp;quot;,
			&amp;quot;\t\t\t\t\tapplication/json:&amp;quot;,
			&amp;quot;\t\t\t\t\t\tschema:&amp;quot;,
			&amp;quot;\t\t\t\t\t\t\ttype: object&amp;quot;
		]
	},
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Beware of tabs count, the snippet will be magically indented correctly based on where you put it, so there’s no need to add extra tabs.
The example above is supposed to go into &lt;code&gt;paths:&lt;/code&gt; which is at the root level of the document.
So I thought the first line would need a tab (and all the the other ones below too), but no.
The whole body is indented based on first line having no indentation.&lt;/p&gt;

&lt;p&gt;Note also that multiple snippets can match a keyword/key sentence, there will be a drop list to let you choose the one you want (with a full view of the body).
Just don’t forget to look at the one that is chosen to add the right snippet to your code.&lt;/p&gt;

&lt;p&gt;Using snippets generator such as &lt;a href=&quot;https://snippet-generator.app/?description=&amp;amp;tabtrigger=&amp;amp;snippet=&amp;amp;mode=vscode&quot;&gt;this one&lt;/a&gt; can be useful to turn your code template into a snippet.&lt;/p&gt;

&lt;h1 id=&quot;heading-to-last-problem&quot;&gt;Heading to last problem!&lt;/h1&gt;

&lt;p&gt;VS Code never stops to amaze.
I remember that I was totally skeptical at the beginning but as I was using Atom which was not totally meeting my expectations and had huge problem when VS Code showed up (it was 5 years ago I think), I decided to gave it a try and never left it since. 
With all of the extensions, tasks, snippets that’s not only a coding tool but a huge problem solver as you can see in this post series.
And VS Code actually helped me to solve my last problem: rehearsing and fine tuning the presentation before recording.
But that’s a story you’ll see in next and final post of this Surviving my first (recorded) live session series.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">This is the fourth post about my first ever (recorded) live coding session given at the Manning API conference. In this series second post, I listed some problems I encountered and started to solve them in previous post. But there are other problems to solve, one of them was that I was not coding and using VS Code fast enough. In this post, I’ll show you how I solved that using a few VS Code tricks, the most important one being: the absolutely rad custom code snippet feature.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 3</title><link href="https://apihandyman.io/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 3" /><published>2021-08-18T00:00:00-05:00</published><updated>2021-08-18T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-3</id><content type="html" xml:base="https://apihandyman.io/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/">&lt;p&gt;Third post about my first ever (recorded) live coding session given at the Manning API conference.
In &lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;previous post&lt;/a&gt;, I encountered various problems.
Two of them were related to not delivering the session like one of my regular slide deck presentation.
I wanted to add titles and have speaker’s notes.
In this post, I’ll show you how I solved those two problems with OBS, VS Code and a little bit of magic.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API confernce.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Note that I’ll soon start an OpenAPI Tips &amp;amp; Trick series including this session contents and a few other things I couldn’t show during this session.&lt;/p&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
          &lt;li class=&quot;list-group-item disabled&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code (coming soon)&lt;/li&gt;
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;adding-titles-to-avoid-loosing-attendees&quot;&gt;Adding titles to avoid loosing attendees&lt;/h1&gt;

&lt;p&gt;OK, that was not the most important problem, but I care a lot about how my presentations look like: how they can be beautiful but also readable. 
So though this was a no slides session, I wanted to provide some indications about what was happening.
I needed to show some title, like “Describe once (EXPERT): Read/Write with same schema”, as I have on my regular slide.
But this time, I was not showing pre-made slides using Google Slides but coding in VS Code.
How to add good looking titles in that context?
By taking advantage of both OBS and VS Code features.&lt;/p&gt;

&lt;h2 id=&quot;showing-titles-above-vs-code&quot;&gt;Showing titles above VS Code&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/magic.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In OBS, you can add various sources in a scene, I already had 3 in my Macbook scene:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An &lt;em&gt;Image&lt;/em&gt; source: the foreground Manning provided to me&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;Video Capture Device&lt;/em&gt; source: my webcam (or my IPhone)&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;Display Capture&lt;/em&gt; source: my MacBook display cropped on VS Code window titled “Supercharged OpenAPI” (By the way, regarding capturing VS Code, during my tests I also tried the &lt;em&gt;Window Capture&lt;/em&gt; source and was not really satisfied with it. There was a huge lag, especially when I was scrolling.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But there are other types of sources, as you can see in the screen capture above, the one that caught my eye when trying to find a solution for my idea was the &lt;em&gt;Browser&lt;/em&gt; source.
I created a simple &lt;code&gt;index.html&lt;/code&gt; file containing a “WTF it works!” level 1 header in the body (yes, I tend to curse in my code when testing) then started a &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;simple web server&lt;/a&gt; in the folder containing that file. 
In OBS, I added a &lt;em&gt;Browser&lt;/em&gt; source to my Macbook scene.
In the configuration window, I set up the URL to target &lt;code&gt;http://localhost:8080/index.html&lt;/code&gt;, and set width to 1980 (pixels) and height to 100.
There’s some custom CSS that comes by default, I didn’t modify it and hit OK.
Once added, I moved the new source in the scene on top of the zone for my screen and resized it to fit in the reserved space.
Finally in the “Sources” panel, I renamed the new source to “Title” (by right clicking on it and choosing rename).
And I reordered the sources to put “Title” in the “Template” folder, putting above the Display Capture Source (the new source hiding the VS Code window title) but below the Image source.&lt;/p&gt;

&lt;p&gt;So I had my title, but it was a static one.&lt;/p&gt;

&lt;h2 id=&quot;updating-titles-poc&quot;&gt;Updating titles POC&lt;/h2&gt;

&lt;p&gt;I thought I could find a configuration to trigger a refresh at regular interval in OBS, but there’s actually no such configuration.
Hopefully, I remembered that while I was reading some post about useful VS Code extensions, the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Live Server&lt;/a&gt; extension caught my eye.
This extension allows to start a web server in your workspace and it includes a live refresh out of the box.
That means a webpage loaded through this web server will be updated automatically in the browser when something change in the workspace.
So once the extension installed and started, I modified the Browser source configuration in OBS to target this web server, and I was still able to see the “WTF it works!” title.
Then I modified the HTML file by replacing the title with “WTF it has been updated!”, hit save …
And the title has been updated in OBS seamlessly!&lt;/p&gt;

&lt;p&gt;Now that my proof of concept (POC) worked, I needed to show the real titles and switch to the next one when needed but without the attendees noticing anything.&lt;/p&gt;

&lt;h2 id=&quot;updating-titles-magically-during-the-session&quot;&gt;Updating titles magically during the session&lt;/h2&gt;

&lt;p&gt;What I did is quite ugly, it’s a very first solution that would deserve to be improved (it will be improved!).
But it works.
The solution is based on static files, an ugly shell script, VS Code custom tasks and custom key bindings.&lt;/p&gt;

&lt;h3 id=&quot;first-write-some-ugly-shell&quot;&gt;First, write some ugly shell&lt;/h3&gt;

&lt;p&gt;In a &lt;code&gt;steps&lt;/code&gt; folder, I created sub-folders named &lt;code&gt;step-1&lt;/code&gt; to &lt;code&gt;step-19&lt;/code&gt; (because there were 19 steps in my TOC … at that time) and then put an &lt;code&gt;index.html&lt;/code&gt; file in each one.
Obviously, each file contained the title to be shown at each step (title coming from my TOC).&lt;/p&gt;

&lt;p&gt;Then I wrote the ugliest possible bash script named &lt;code&gt;next.sh&lt;/code&gt; (in &lt;code&gt;steps&lt;/code&gt;).
In its most basic version, this script did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checking if a &lt;code&gt;current.txt&lt;/code&gt; file exists, if not creating it and putting &lt;code&gt;0&lt;/code&gt; in it&lt;/li&gt;
  &lt;li&gt;Reading the &lt;code&gt;current.txt&lt;/code&gt; file, adding &lt;code&gt;1&lt;/code&gt; to its value and updating it&lt;/li&gt;
  &lt;li&gt;Copying the content of &lt;code&gt;step-{new value}&lt;/code&gt; to workspace root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Afterward, I added some controls to do nothing and output some warning when the next step actually doesn’t exist in the &lt;code&gt;steps&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;The ugly next.sh script&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# That&amp;#39;s a trick I use in all my shell script
# To get the script actual folder
SCRIPT_DIR=&amp;quot;$( cd &amp;quot;$( dirname &amp;quot;${BASH_SOURCE[0]}&amp;quot; )&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; pwd )&amp;quot;

# Setting root dir and current.txt variables
ROOT_DIR=$SCRIPT_DIR/..
CURRENT_FILE=$SCRIPT_DIR/current.txt

# If current.txt doesn&amp;#39;t exist, creating it
if [[ -f $CURRENT_FILE ]]
then
    echo &amp;quot;not first step&amp;quot;
else
    echo &amp;quot;first step&amp;quot;
    echo &amp;quot;0&amp;quot; &amp;gt; $CURRENT_FILE
fi

# Adding 1 to current.txt value
CURRENT_STEP=`cat $CURRENT_FILE`
CURRENT_STEP=$((CURRENT_STEP+1))
CURRENT_DIR=&amp;quot;$SCRIPT_DIR/step-$CURRENT_STEP&amp;quot;
echo $CURRENT_STEP &amp;gt; $CURRENT_FILE
echo &amp;quot;step $CURRENT_STEP, DIR $CURRENT_DIR&amp;quot;

# Checking the next step actually exists
if [[ -d &amp;quot;$CURRENT_DIR&amp;quot; ]]
then
    # Copying everything in step-X folder to root folder
    echo &amp;quot;step exists&amp;quot;
    cp &amp;quot;$CURRENT_DIR&amp;quot;/* &amp;quot;$ROOT_DIR&amp;quot;
else
    echo &amp;quot;no more steps&amp;quot;
fi&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So, running the &lt;code&gt;steps/next.sh&lt;/code&gt; script (don’t forget to &lt;code&gt;chmod u+x&lt;/code&gt; it, like I always do) I could change title from step X to step X+1.&lt;br /&gt;
But how to run this script while doing the session?
I couldn’t open a terminal and run it when needed, that wouldn’t be very convenient.&lt;/p&gt;

&lt;h3 id=&quot;second-automate-with-vs-code-task&quot;&gt;Second, automate with VS Code task&lt;/h3&gt;

&lt;p&gt;Hopefully, I already partially knew how to solve that because in order to optimize my Jekyll workspace for the apihandyman.io blog I use &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks#_custom-tasks&quot;&gt;VS Code Custom tasks&lt;/a&gt; to run bach scripts.
So I created a &lt;code&gt;.vscode&lt;/code&gt; folder (its the standard folder holding VS Code stuff) and added the following &lt;code&gt;tasks.json&lt;/code&gt; file. 
This file define the custom tasks that will be available when this workspace/folder is opened in VS Code.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;.vscode/tasks.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;2.0.0&amp;quot;,
  &amp;quot;tasks&amp;quot;: [
    {
      &amp;quot;label&amp;quot;: &amp;quot;Next step&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;steps/next.sh&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
        &amp;quot;reveal&amp;quot;: &amp;quot;never&amp;quot;,
        &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;
      },
      &amp;quot;problemMatcher&amp;quot;: []
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now instead of opening a terminal and typing a command line to run the script, I could open VS Code command palette (&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on Windows) and choose &lt;code&gt;Tasks: Run task&lt;/code&gt;, then choose the “Next step” one.
That actually runs the shell command &lt;code&gt;steps/next.sh&lt;/code&gt; and that is done silently thanks to the &lt;code&gt;presentation.reveal: never&lt;/code&gt;.
In the beginning, I actually set &lt;code&gt;presentation.reveal: always&lt;/code&gt; to be sure that something was actually happening.
That’s better but still cumbersome, I didn’t want people watching me do that even if that’s really quick.&lt;/p&gt;

&lt;h3 id=&quot;third-add-a-little-bit-of-shortcut-magic&quot;&gt;Third, add a little bit of shortcut magic&lt;/h3&gt;

&lt;p&gt;VS Code allows to customize keyboard shortcuts and even define ones to trigger tasks (check &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks#_binding-keyboard-shortcuts-to-tasks&quot;&gt;documentation here&lt;/a&gt;).
Note that unlike tasks that can be configured locally inside a workspace/folder, key bindings are only defined globally.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/shortcuts.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To show shortcuts configuration use &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt; on Windows.
Then click on the file icon on top right corner to see the json content of your custom configuration (&lt;code&gt;keybindings.json&lt;/code&gt; file).&lt;/p&gt;

&lt;p&gt;In order to trigger my “Next step” task when typing &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, I modified my configuration as follow:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;keybindings.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;// Place your key bindings in this file to override the defaults
[
    {
        &amp;quot;key&amp;quot;: &amp;quot;ctrl+m&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.action.tasks.runTask&amp;quot;,
        &amp;quot;args&amp;quot;: &amp;quot;Next step&amp;quot;
    }
]&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that before choosing &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, I actually tested a few other shortcuts before finding one that was not already used.
To check if a key binding already exists, type it in the text field above the lists as shown in the screenshot above.&lt;/p&gt;

&lt;p&gt;That way, I could be like “blah blah blah, and now &lt;em&gt;next topic&lt;/em&gt;” … while magically changing the title with &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;styling-titles&quot;&gt;Styling titles&lt;/h2&gt;

&lt;p&gt;I could change my title but it was simple black text on white background, I wanted something with more style and if possible matching VS Code Style.
Hopefully, while configuring VS Code to use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=webrender.synthwave-x-fluoromachine&quot;&gt;Synthwave x Fluoromachine theme&lt;/a&gt;, I discovered that VS Code theming relies on good old CSS and that this theme CSS was located in &lt;code&gt;$HOME/.vscode/extensions/webrender.synthwave-x-fluoromachine-0.0.12/synthwave-x-fluoromachine.css&lt;/code&gt;.
I copy/pasted the file’s content into a &lt;code&gt;index.css&lt;/code&gt; file in my workspace and added it to my index.html files then used some css classes defined for this theme: &lt;code&gt;monaco-editor&lt;/code&gt; on body then &lt;code&gt;mtk6&lt;/code&gt;, &lt;code&gt;mtk7&lt;/code&gt; and &lt;code&gt;mtk8&lt;/code&gt; on the various elements in my title, et voilà!
I now had shiny neon styled titles.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Styling index.html&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-html line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;index.css&amp;quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class=&amp;quot;monaco-editor&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;
            &amp;lt;span class=&amp;quot;mtk7&amp;quot;&amp;gt;@apihandyman&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;mtk6&amp;quot;&amp;gt; Supercharged OpenAPI&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;quot;section&amp;quot; class=&amp;quot;mtk8&amp;quot;&amp;gt;A basic OpenAPI File&amp;lt;/span&amp;gt;
        &amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I was quite satisfied until I realized that the blue text (&lt;code&gt;mtk6&lt;/code&gt;) had not the neon effect (attention to details is both my super power and my curse).
I’m definitely not a CSS expert, but I’m damn good at copy/pasting.
So, I compared its definition with the two other &lt;code&gt;mtk&lt;/code&gt;, and notice a difference: the &lt;code&gt;text-shadow&lt;/code&gt; of the blue class had less parameters.
The neon effect is actually achieved by adding shadows of different colors. 
So I added the missing values, struggle a bit to choose the various colors but I ended with the following &lt;code&gt;text-shadow&lt;/code&gt; that looked great!&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Styling index.html&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-html line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;text-shadow: 0 0 2px #100c0f, 0 0 3px #61e2ff, 0 0 5px #61e2ff, 0 0 10px #03edf933;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;adding-speakers-note-to-avoid-forgetting-something&quot;&gt;Adding speaker’s note to avoid forgetting something&lt;/h1&gt;

&lt;p&gt;When I do a “regular” presentation, you may not notice it when seeing me on stage or watching me on a video, but I heavily rely on my speaker’s notes.
There’s my full speech there on each slide with some other information such as timing or “CLICK” when there is an animation or a transition to trigger at a specific moment in a sentence.
The more I practice a talk, the less I need them but I’m relieved to just know they are there if needed.&lt;/p&gt;

&lt;p&gt;Unfortunately, there are no “speaker’s notes” in VS Code and I was struggling to not forget something to say or to do.&lt;/p&gt;

&lt;h2 id=&quot;the-todo-attempt&quot;&gt;The Todo+ attempt&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/todo-v1.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;My first attempt in order to avoid forgetting something was to use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-todo-plus&quot;&gt;Todo+&lt;/a&gt; extension.
I created a steps.todo file basically containing my TOC.
The idea was to have the Todo+ panel opened while coding the OpenAPI file.
But that was not really convenient because it was visible to attendees and occupying space that I desperately needed.
I though to hide it by cropping the VS Code window in OBS but that would have possible hidden a space where I could have wanted to show something.
It was also not really convenient as, in order to keep the todo list usable for me, I had to open/close tasks folders.&lt;/p&gt;

&lt;h2 id=&quot;the-todohtml--ipad-solution&quot;&gt;The todo.html + iPad solution&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/todo-v2.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;My second idea was to use almost the same trick as for the titles.
I added a &lt;code&gt;todo.html&lt;/code&gt; file in each &lt;code&gt;steps/step-x&lt;/code&gt; folder.
That way when I was using the “Next step” task, not only it was copying the &lt;code&gt;index.html&lt;/code&gt; file of the step to the root folder, it was also copying the &lt;code&gt;todo.html&lt;/code&gt; file too.
Having a browser showing &lt;code&gt;http://localhost:5500/todo.html&lt;/code&gt; allowed to me have speaker’s notes updated at each step just like titles.&lt;/p&gt;

&lt;p&gt;In order to keep those notes out of the way but still allowing me to look at them without loosing eye contact with my main screen and its web cam, I used the “sidecar” feature of my iPad.
All that is needed is to plug the iPad to the Macbook with a USB cable then go to display preferences, choose the iPad as an Airplay display.
Don’t forget to position it relatively to other screens as it is in reality in order to keep moving mouse to it simple.
And you’re done you have a third (or second) display screen.
Note that sidecar can be used over wifi but I never had satisfying result with it (maybe my wifi is not fast enough).&lt;/p&gt;

&lt;p&gt;Note that as OBS is able to crop on a specific window, I probably could had both VS Code and todo on my MacBook display.
But I wanted to test the side car, and it was working, so I moved on to next problem to solve.&lt;/p&gt;

&lt;p&gt;I choose to use the same style as for the titles though is was only visible to my eyes.
I also used various emojis to “type” the actions to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✏️ (pen) to write code&lt;/li&gt;
  &lt;li&gt;⌨️ (keyboard) to use the terminal&lt;/li&gt;
  &lt;li&gt;📺 (old TV) to show a rendering og the file (with Redoc or SwaggerUI)&lt;/li&gt;
  &lt;li&gt;💬 (Speech bubble) to say something&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-to-next-problem&quot;&gt;Heading to next problem&lt;/h1&gt;

&lt;p&gt;With all that I was totally satisfied with the style of the session and I was as comfortable as delivering a regular slide deck session thanks to my speaker’s note.
In next post, I’ll show you how I was able to code at light speed.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Third post about my first ever (recorded) live coding session given at the Manning API conference. In previous post, I encountered various problems. Two of them were related to not delivering the session like one of my regular slide deck presentation. I wanted to add titles and have speaker’s notes. In this post, I’ll show you how I solved those two problems with OBS, VS Code and a little bit of magic.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 2</title><link href="https://apihandyman.io/preparing-session-content-and-realizing-its-not-working-well/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 2" /><published>2021-08-11T00:00:00-05:00</published><updated>2021-08-11T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-2</id><content type="html" xml:base="https://apihandyman.io/preparing-session-content-and-realizing-its-not-working-well/">&lt;p&gt;Second post about my first ever (recorded) live coding session.
So, here I was in my &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;previous post&lt;/a&gt;: ready to record myself coding and talking without any slides…
But I didn’t told the whole story, I actually struggled a lot before actually being able to record myself coding and talking.
In the beginning, I had planned to do far more stuff and differently than what people had seen.
In this post, I’ll talk about how I prepared content and realized that it was not working well.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API confernce.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Note that I’ll soon start an OpenAPI Tips &amp;amp; Trick series including this session contents and a few other things I couldn’t show during this session.&lt;/p&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
          &lt;li class=&quot;list-group-item disabled&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code (coming soon)&lt;/li&gt;
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;preparing-content-almost-as-usual&quot;&gt;Preparing content almost as usual&lt;/h1&gt;

&lt;p&gt;I actually worked on the content before tinkering with OBS, VS Code and all other stuff.
I treated this session’s content almost like I usually do for my regular slides-based talks.&lt;/p&gt;

&lt;p&gt;Usually, I list the topics I want to talk about and then sort them in order to tell a story with a beginning and an end.
I go deeper into the story by writing a detailed table of content.
Then I write my full speech exactly as I will say it.
It need to be precise because (Fr)English is a second language for me and I want to avoid stumble on words.
After that, I do the slides using a (pop culture) theme that usually had popped in my mind while working on topics, toc or speech.&lt;/p&gt;

&lt;p&gt;Here, the topics were the OpenAPI Specification features and tools I wanted to show.
Building the story was made first by organizing the features in two categories: interface contract features and documentation features.
Then in each category, I sorted the features from simple/beginner to complex/advanced.
I added some extra entries in both categories to showcase various tools. 
With that, I had my table of content.&lt;/p&gt;

&lt;p&gt;Then instead of writing my speech, I wrote an OpenAPI file adding each feature one by one.
I had to think about an example. 
I wanted to keep things simple in order to have a simple CRUD API, but as always I added some pop culture reference … and ended with the Masters of the Universe API, an API providing information about characters and toys from the franchise.&lt;/p&gt;

&lt;p&gt;The OpenAPI file did not came right at first try, I had to rework it several times.
I improved it while working the “how to show that”, but it was more complicated than expected.
Indeed, my original plan for “how to show that” had not worked well.&lt;/p&gt;

&lt;h1 id=&quot;too-much-too-complicated-a-bit-off-topic&quot;&gt;Too much, too complicated, a bit off topic&lt;/h1&gt;

&lt;p&gt;The plan was to write the OpenAPI document using &lt;a href=&quot;https://stoplight.io/studio/&quot;&gt;Stoplight Studio&lt;/a&gt;, not for its GUI feature that allows to NOT write OpenAPI code (and that I use everyday).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/preparing-session-content-and-realizing-its-not-working-well/stoplight-studio.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;But because it provides a cool renderer that updates itself smartly as you write code.
Indeed when using renderers such as &lt;a href=&quot;https://github.com/Redocly/redoc&quot;&gt;Redoc&lt;/a&gt; or &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot;&gt;Swagger UI&lt;/a&gt;, even embedded in VS Code (using the really good &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&quot;&gt;42 Crunch OpenAPI Editor extension&lt;/a&gt;), the experience is not so good.
For instance in Swagger UI, if you had opened an operation and selected the schema panel, modify something and the page is reloaded, still on the operation but you’ll have to re-switch to schema panel yourself.
There’s no such problem in Studio.&lt;/p&gt;

&lt;p&gt;I also wanted to show how the API I was designing would work.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/preparing-session-content-and-realizing-its-not-working-well/postman.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Studio comes with an embedded mock server powered by &lt;a href=&quot;https://stoplight.io/open-source/prism/&quot;&gt;Stoplight Prism&lt;/a&gt;.
Prism is quite cool, feed it an OpenAPI file and it will magically generate a (basic) API mock server simulating the API described in the OpenAPI file.
The idea was to call this mocked API in &lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman&lt;/a&gt; one of the best API GUI playground out there.&lt;/p&gt;

&lt;p&gt;I made a few test, writing code in Studio, importing the created OpenAPI file in Postman so it generated a ready to use collection targeting the Prism mock.
Mostly to showcase various ways of using an OpenAPI document.&lt;/p&gt;

&lt;p&gt;While all those tools are great and all this actually worked … it was too long, too complicated to switch between tools.
And on top of that, my research for the best zoom level to use in order to keep code readable ended with being unable to have both code and rendering visible in Studio.
All that actually helped me realized that I was probably also going a bit off topic in the way of presenting things.&lt;/p&gt;

&lt;h1 id=&quot;focusing-on-the-real-topic&quot;&gt;Focusing on the real topic&lt;/h1&gt;

&lt;p&gt;What I wanted to show was more the OpenAPI Specification itself and its inner possibilities rather than showing tools using it just to show them using it.
I needed to focus on the real topic of the session and do that efficiently using tools only to showcase the features I was using.&lt;/p&gt;

&lt;p&gt;So, that’s why I chose to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use only &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;, showing only OpenAPI code most of the time without anything else&lt;/li&gt;
  &lt;li&gt;Show rendering with &lt;a href=&quot;https://github.com/Redocly/redoc&quot;&gt;Redoc&lt;/a&gt; or &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot;&gt;Swagger UI&lt;/a&gt; only when actually needed (using &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&quot;&gt;42 Crunch OpenAPI Editor extension&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://stoplight.io/open-source/prism/&quot;&gt;Stoplight Prism&lt;/a&gt; and &lt;a href=&quot;https://httpie.io/&quot;&gt;httpie&lt;/a&gt; in VS Code embedded terminal only to illustrate OpenAPI features I was actually using with dummy API calls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That way I was able to do everything inside VS Code with a clean (but stylish, see &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;previous post&lt;/a&gt;) interface focusing on code.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/preparing-session-content-and-realizing-its-not-working-well/code-only.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Being able to open two terminals side by side revealed to be convenient when comparing API calls result to talk about inconsistencies.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/preparing-session-content-and-realizing-its-not-working-well/two-terminals.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;still-not-working-well-and-terrible-new-idea&quot;&gt;Still not working well and terrible new idea&lt;/h1&gt;

&lt;p&gt;But even taking those decisions, it was still hard to deliver the session smoothly and in the given time frame.
There was still probably too much content.
Also, it was taking me an awfully long time to type everything or do copy/paste and fix indentation.
I was struggling to switch between writing code and going to the terminal.&lt;/p&gt;

&lt;p&gt;I realized that I was often forgetting things to do or not doing them the right way.
During a rehearsal that was starting very well, I lost all my means because I forget to do a modification and so was totally puzzled, not understanding at all why it was not working suddenly.&lt;/p&gt;

&lt;p&gt;It was not going well and as it was difficult to work on specific sections of the sessions to train myself or improve the content, I was starting to loose my temper and my confidence.&lt;/p&gt;

&lt;p&gt;And as if I didn’t have enough problems, I had a terrible new idea.
I was really missing having titles like on my slides.
I feared attendees would be lost without visual indication about what was happening.
I decided to do something about that.&lt;/p&gt;

&lt;p&gt;In the next posts, I’ll explain how I solved all those problems.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Second post about my first ever (recorded) live coding session. So, here I was in my previous post: ready to record myself coding and talking without any slides… But I didn’t told the whole story, I actually struggled a lot before actually being able to record myself coding and talking. In the beginning, I had planned to do far more stuff and differently than what people had seen. In this post, I’ll talk about how I prepared content and realized that it was not working well.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 1</title><link href="https://apihandyman.io/setting-up-everything-to-record-myself-coding-and-talking/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 1" /><published>2021-08-04T00:00:00-05:00</published><updated>2021-08-04T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-1</id><content type="html" xml:base="https://apihandyman.io/setting-up-everything-to-record-myself-coding-and-talking/">&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference.
During 30 minutes I talked and coded … without any slides; that was totally new to me.
While it started well, preparing and recording this session turned out to be quite complicated.
At some moment, I was totally desperate and I thought I wasn’t going to make it.
But I did it and learned a lot of stuff that deserves to be shared.
In this first post, I’ll talk about how “it started well”: setting up OBS, mic, cam and VS Code to record myself speaking and coding.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API confernce.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Note that I’ll soon start an OpenAPI Tips &amp;amp; Trick series including this session contents and a few other things I couldn’t show during this session.&lt;/p&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
          &lt;li class=&quot;list-group-item disabled&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code (coming soon)&lt;/li&gt;
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;discovering-obs-studio&quot;&gt;Discovering OBS Studio&lt;/h1&gt;

&lt;p&gt;Manning recommended using &lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS Studio&lt;/a&gt; to record the session.
It is a &lt;em&gt;free and open source software for video recording and live streaming&lt;/em&gt;.
It comes out of the box with many features that will be enough to start but it can be easily extended with &lt;a href=&quot;OBS can be extended with [plugins](https://obsproject.com/forum/resources/categories/obs-studio-plugins.6/)&quot;&gt;plugins&lt;/a&gt; for powerusers.
Besides being used to stream or record a video, OBS can also be used as a virtual camera in tools such as Zoom ou Teams for instance.
Note that a company called Streamlabs does a fork of OBS, called &lt;a href=&quot;https://streamlabs.com/streamlabs-obs-live-streaming-software&quot;&gt;Streamlabs OBS&lt;/a&gt;, adding some features but apparently also adding some CPU usage (I did not verify it myself though).&lt;/p&gt;

&lt;p&gt;I already tinkered with OBS briefly a few month ago but did not do much with it.
With this session to record, I could put my hands on it more seriously and I was quite impressed.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/obs.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;scenes-and-sources&quot;&gt;Scenes and sources&lt;/h2&gt;

&lt;p&gt;You can create various scenes, each one showing different sources such as your webcam (or any other camera plugged to your computer), static text or images, browser window and display capture. 
You can place and size each item as you wish.
In a matter of seconds I was able to create a few scenes mixing display capture cropped on specific windows, image, text and my webcam.&lt;/p&gt;

&lt;p&gt;For this session, Manning provided me a PNG image with 3 black (transparent) zones, my cam going on the top right zone and what I want to show on the big left one as you can see in the capture above.
The image, “Manning front” in sources, is above the “Camera” (MBP webcam) and “MacbookDisplay” sources, that way nothing overflows outside of the reserved spaces.&lt;/p&gt;

&lt;h2 id=&quot;automatic-advanced-scene-switching&quot;&gt;&lt;del&gt;Automatic&lt;/del&gt; Advanced scene switching&lt;/h2&gt;

&lt;p&gt;Though I didn’t keep that in the final version of my session, I tested using multiple scenes.
When handling multiple scenes, you can switch from one to another using keyboard shortcuts, but you can also use automatic switching (in menu bar choose Tools → Automatic Scene Switcher).
It allows to switch to a scene based on active window title.
It’s really impressive, you feel like a TV show director AND a magician doing so!&lt;/p&gt;

&lt;p&gt;While testing the standard Automatic Scene Switcher, I was a little bit annoyed by some limitations especially one regarding its activation.
Indeed, you have to not forget to start it before starting a recording.
Hopefully, everything was solved once I found the &lt;a href=&quot;https://obsproject.com/forum/resources/advanced-scene-switcher.395/&quot;&gt;Advanced Scene Switcher&lt;/a&gt; plugin.
This one propose more powerful features but also a simple one: “start advanced scene switch when recording/streaming starts”.&lt;/p&gt;

&lt;h2 id=&quot;reusable-group-of-sources&quot;&gt;Reusable group of sources&lt;/h2&gt;

&lt;p&gt;Also because I tested using multiple scenes reusing the same sources (foreground image and webcam), I created a folder containing both of them.
That way I could reuse them across various scene being sure they were always placed and sized in the same way.&lt;/p&gt;

&lt;h2 id=&quot;audio-mixer&quot;&gt;Audio mixer&lt;/h2&gt;

&lt;p&gt;Last but not least, the audio mixer allows to capture audio from different sources and set volume for each one (like any mixer).
Icing on the cake, OBS allow to add some audio filters on any audio source, just hit the ⚙️ icon on the audio source to open the filters configuration.
And for those who regularly use some &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_audio_workstation&quot;&gt;DAWs&lt;/a&gt;, know you can even use &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_Studio_Technology&quot;&gt;VST plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;sounding-better&quot;&gt;Sounding better&lt;/h1&gt;

&lt;p&gt;Speaking of audio, I did a few recording test While tinkering with OBS and realized that my sound was just terrible.&lt;/p&gt;

&lt;h2 id=&quot;trying-obs-noise-suppression&quot;&gt;Trying OBS noise suppression&lt;/h2&gt;

&lt;p&gt;I’m using a 16” MacBook Pro (MBP) and when using a second screen and some CPU consuming apps its fans start to make some noise.
This background noise was clearly audible on the recording.
I gave a try to the OBS noise suppression audio filter, it actually suppressed the fan noise but I had some strange sound variation and distortion when it was activated.
To make it short: my audio sucked.&lt;/p&gt;

&lt;h2 id=&quot;choosing-a-new-mic&quot;&gt;Choosing a new mic&lt;/h2&gt;

&lt;p&gt;As I wanted to buy a decent mic for a long time for future audio/video projects, it didn’t took me long to decide to buy one.
Manning recommended the very reasonably priced &lt;a href=&quot;https://www.audio-technica.com/en-us/at2005usb&quot;&gt;Audio Technica AT2005USB&lt;/a&gt; and I also asked my Twitter friends and had the following recommendations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluemic.com/en-us/products/yeti/&quot;&gt;Blue Yeti&lt;/a&gt;: A reference for Podcasters&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tulamics.com&quot;&gt;Tula Mic&lt;/a&gt;: A mic and autonomous audio recorder with an incredible look (though my wife took it for a cheese rasp)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.shure.com/en-US/products/microphones/mv7&quot;&gt;Shure MV7&lt;/a&gt;: Recommended by someone who was not happy with the Yeti picking too much background noise&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.shure.com/en-MEA/products/microphones/sm7b&quot;&gt;Shure SM7B&lt;/a&gt;: A studio &lt;a href=&quot;https://www.shure.com/pt-BR/shows-e-producoes/louder/twenty-thousand-hertz-podcast-what-makes-the-sm7b-so-special&quot;&gt;legend&lt;/a&gt; which is also used by many podcasters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After making some research, I was hesitating between both Shure, and the winner was … the Shure SM7B.
This &lt;a href=&quot;https://internetfolks.com/shure-sm7b-review/&quot;&gt;review&lt;/a&gt; helped me make my mind, it’s full of very interesting information.
I choose the pricier SM7B because of its quality and because I already had all that was need to use it.
Indeed this mic requires a 60db amplifier and my &lt;a href=&quot;https://line6.com/helix/helix-floor-rack.html&quot;&gt;Line 6 Helix Floor&lt;/a&gt; guitar effect and amp simulator has a mic input that can handle that.
For a lower budget, the MV7 seems very good (and is more plug and play).&lt;/p&gt;

&lt;p&gt;To hold it, I bought the &lt;a href=&quot;https://www.rode.com/accessories/stands/psa1&quot;&gt;Rode PSA1&lt;/a&gt; boom arm based on a good friend recommendation and hundreds of good reviews.
Be careful when manipulating this boom, its spring are strong and the arm can cause some damage when you remove the mic from it without holding the arm firmly.
I almost destroyed my guitar which is hanging on the wall doing so 😱, hopefully the arm hit the wall a few centimeters away.
Also, if you consider buying this boom, double check if your mic weights enough, if it’s not the case, it will be complicated to adjust its position (because of the strong springs).
There’s no such problem with the Shure SM7B which weights enough.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/mic.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Once I recovered from my emotions and finished fixing, plugin and configuring the mic (the 60db gain),
I realized that I could use all of the Helix effects, such as input gate (to filter background noises below a given level), compressor (dyn, to keep audio level in a given db range by boosting or reducing volume) or preamp (pre, to add/remove bass or medium for instance).
In order to avoid hurting my back by bending in two under the desk, I use the HX Edit application (shown below) to configure the Helix.
My audio can still probably be improved as I didn’t took much time to tweak it but it definitely rocked (compared to MBP mic) even without any effect activated but the input gate.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/hxedit.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;looking-good-enough&quot;&gt;Looking good enough&lt;/h1&gt;

&lt;p&gt;That’s not a secret, the MBP webcam is not the best one to say the least.
It’s probably the same hardware on all Macbooks since more than 10 years&lt;/p&gt;

&lt;h2 id=&quot;iphone-as-webcam--or-not&quot;&gt;IPhone as webcam … or not&lt;/h2&gt;

&lt;p&gt;I did a few tests using my iPhone as a webcam using the &lt;a href=&quot;https://apps.apple.com/us/app/epoccam-webcam-for-mac-and-pc/id449133483&quot;&gt;EpocCam application&lt;/a&gt;.
It was not working well over wifi, there we some random deconnections.
But when plugged on my MBP with a lightning to USB cable it worked perfectly.
The image was far better than with the webcam BUT positioning the iPhone on my desk was complicated.
I put it on top of a stack of books behind my MBP but I was not satisfied.&lt;/p&gt;

&lt;p&gt;I thought buying a stand for it but realized that as the zone for the camera on the Manning template was small, the difference between the “not so good but well placed webcam” and “the better but complicated to position iPhone” was not so noticeable so I used the webcam (I also gave up because I was in rush to do the recording, but that’s a story for next post).&lt;/p&gt;

&lt;h2 id=&quot;virtual-green-screen--or-not&quot;&gt;(Virtual) Green screen … or not&lt;/h2&gt;

&lt;p&gt;I finally did not used it but EpocCam provides a virtual green screen that do the trick.
You can take advantage of it in OBS using the chroma key effect filter on your video source.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/chroma.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To do what you see above:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Activate virtual green screen on your camera (or put a real one behind you)&lt;/li&gt;
  &lt;li&gt;Open the (Effect) filters configuration screen by selecting your camera source and clicking on “Filters” above the source panel (or right-click on camera source and select filters)&lt;/li&gt;
  &lt;li&gt;Click on + in “Effect Filters” and select “Chroma Key”&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;coding-with-style&quot;&gt;Coding with style&lt;/h1&gt;

&lt;p&gt;I always try to do beautiful and readable slides for my sessions … but this time I was going to use VS Code.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/style.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;zooming-enough&quot;&gt;Zooming enough&lt;/h2&gt;

&lt;p&gt;What worried me the most at that stage was the font size.
Indeed if you capture your 36K hyper-ultra-mage-wide screen with regular font size, nobody will be able to read what you type on a 1920x1080 video which may not be viewed in full screen.
In my case, I also had to be careful because the actual place reserved for my screen capture was smaller than the video size, only 1340x750.&lt;/p&gt;

&lt;p&gt;In VS Code (like in many Electron apps), you can use &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;+&lt;/kbd&gt; (Mac) or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;+&lt;/kbd&gt; (Windows) to zoom in (make things bigger) and  &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt; (Mac) or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt; (Windows) to zoom out (make things smaller).&lt;/p&gt;

&lt;p&gt;In order to set an adapted zoom level, I made some test recording and compared them with someone writing code at a previous Manning conference available on YouTube.
I tried to keep thing readable even the video is not in full screen (regular YouTube embedded video size).&lt;/p&gt;

&lt;p&gt;I also tinkered with the Accessibility zoom feature of MacOS, you can make appear or zooming lens zone (the size you want) using a keyboard shortcut.
I finally didn’t needed it but I keep that in mind for another time.&lt;/p&gt;

&lt;h2 id=&quot;styling-vs-code&quot;&gt;Styling VS Code&lt;/h2&gt;

&lt;p&gt;I wanted something that look different from my good old VS Code standard theme and discovered many 80s theme in the marketplace.
I finally choose &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=webrender.synthwave-x-fluoromachine&quot;&gt;Synthwave x Fluoromachine&lt;/a&gt; which comes with a nice background image for the editor.
To make it fully work you’ll need &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=be5invis.vscode-custom-css&quot;&gt;Custom CSS and JS Loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I have done many tests, I don’t remember if that theme was the actual cause but as I had some standard VS code CSS customized, “Unsupported” appeared in the window’s title.
To get rid of it, I used &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=lehni.vscode-fix-checksums&quot;&gt;Fix VSCodeCheckums&lt;/a&gt;, it fixes VS code files checksum and make the “Unsupported” disappear.&lt;/p&gt;

&lt;p&gt;And I also use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&quot;&gt;Indent Rainbow&lt;/a&gt; extension that obviously colors indentations. Besides being pretty that’s very useful.&lt;/p&gt;

&lt;h2 id=&quot;drawing-on-screen&quot;&gt;Drawing on screen&lt;/h2&gt;

&lt;p&gt;And last but not least, the mouse cursor is not always that visible when you want to show something.
So I looked for a tool allowing to draw on screen.
I found &lt;a href=&quot;https://apps.apple.com/us/app/screenbrush/id1233965871?mt=12&quot;&gt;ScreenBrush&lt;/a&gt; which is totally amazing and was a perfect match with the Synthwave x Fluoromachine theme.
I didn’t used it extensively during the session, I only drew a few rectangles, but it has some many cool features that I will probably use in th future.
If you’re on MacOs and looking for a tool to draw on screen, this is the one.&lt;/p&gt;

&lt;h2 id=&quot;setting-vs-code-window-title-useful-for-obs&quot;&gt;Setting VS Code window title (useful for OBS)&lt;/h2&gt;

&lt;p&gt;You can’t see it in the recording but I have customized the VS Code window title to make it static and show the session’s title.
This is done by adding a &lt;code&gt;.vscode/settings.json&lt;/code&gt; file in your workspace containing the following configuration:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;.vscode/settings.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;window.title&amp;quot;: &amp;quot;Supercharged OpenAPI&amp;quot;,
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Check VS code &lt;a href=&quot;https://code.visualstudio.com/docs/getstarted/settings&quot;&gt;documentation&lt;/a&gt; to see all what you can do with &lt;code&gt;window.title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the beginning I did that to have my session’s title there but that was actually useful for OBS configuration.
Indeed, you can crop screen capture to a window by using its name.
But if the window’s name changes … problem starts.
So making it static solves the problem.&lt;/p&gt;

&lt;h1 id=&quot;to-be-continued&quot;&gt;To be continued&lt;/h1&gt;

&lt;p&gt;Besides the mic and cam “problems”, which were not a real problems, it was starting well.
I was ready to record myself coding and talking.
So I started to actually work on the content for the recording and realized it was more than just coding and talking.
But it’s a story that will be told in &lt;a href=&quot;/it-was-more-complicated-than-just-coding-and-talking/&quot;&gt;next post&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">I did my first ever (recorded) live coding session at the Manning API conference. During 30 minutes I talked and coded … without any slides; that was totally new to me. While it started well, preparing and recording this session turned out to be quite complicated. At some moment, I was totally desperate and I thought I wasn’t going to make it. But I did it and learned a lot of stuff that deserves to be shared. In this first post, I’ll talk about how “it started well”: setting up OBS, mic, cam and VS Code to record myself speaking and coding.</summary></entry><entry><title type="html">An API gateway must be a dumb pipe</title><link href="https://apihandyman.io/an-api-gateway-must-be-a-dumb-pipe/" rel="alternate" type="text/html" title="An API gateway must be a dumb pipe" /><published>2021-07-28T00:00:00-05:00</published><updated>2021-07-28T00:00:00-05:00</updated><id>https://apihandyman.io/an-api-gateway-must-be-a-dumb-pipe</id><content type="html" xml:base="https://apihandyman.io/an-api-gateway-must-be-a-dumb-pipe/">&lt;p&gt;An API gateway is a proxy that sits between API providers and their consumers.
Its main role is to ensure that only authorized consumers consume some APIs.
But API gateways usually come also with features such as request/response transformation and some of them even allow to code complex orchestration.
Such transformation features can be very useful if used wisely.
But they also can give terrible ideas with terrible consequences.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;good-transformation-and-orchestration&quot;&gt;Good transformation and orchestration&lt;/h1&gt;

&lt;p&gt;The most basic API gateway will allow to expose an API on &lt;code&gt;https://api.motu.com/v1&lt;/code&gt; while it’s implementation is exposed on &lt;code&gt;https/under.lying.server.prod/whatever/path&lt;/code&gt;.
Before transmitting the request to the underlying server &lt;code&gt;https/under.lying.server.prod&lt;/code&gt;, it will modify the path, replacing &lt;code&gt;v1&lt;/code&gt; by &lt;code&gt;/whatever/path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As security is probably not handled the same way before and after the gateway, it may remove the original Authorization header containing a meaningless access token and replace by another one containing a JWT token holding information such as which consumer app made this call and in the name of who.&lt;/p&gt;

&lt;p&gt;If it takes advantage of an API description format such as the OpenAPI Specification, it may strip the a &lt;code&gt;GET https://api.motu.com/v1/characters?unknownFilter=skeletor&lt;/code&gt; request from the &lt;code&gt;unknownFilter&lt;/code&gt; query parameter which is not declared in the interface contract.
It may does the same on the response and strip any undeclared headers.&lt;/p&gt;

&lt;p&gt;Possibly, it may seamlessly handle a &lt;code&gt;POST /whatever&lt;/code&gt; request coming with a &lt;code&gt;X-HTTP-Method-Override: PUT&lt;/code&gt; header and turn it into a &lt;code&gt;PUT /whatever&lt;/code&gt;. (See &lt;a class=&quot;post-link&quot; href=&quot;/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete/&quot;&gt;API Design Tips And Tricks - What if consumers can’t do PATCH, PUT or DELETE?&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Beyond simple transformation, an API gateway may do some orchestration like sending request and response logs somewhere for instance.&lt;/p&gt;

&lt;h1 id=&quot;bad-transformation-and-orchestration&quot;&gt;Bad transformation and orchestration&lt;/h1&gt;

&lt;p&gt;All that basically means an API gateway allows to “write code”, real code using JavaScript, Java, Groovy or whatever language and/or pseudo-code using box and arrow based GUIs.
And seeing that, some may have terrible ideas.&lt;/p&gt;

&lt;p&gt;When returning the response of &lt;code&gt;GET /characters/he-man&lt;/code&gt; why not transforming &lt;code&gt;&quot;type&quot;: &quot;H&quot;&lt;/code&gt; to &lt;code&gt;&quot;side&quot;: &quot;hero&quot;&lt;/code&gt;?
Why not taking the USD &lt;code&gt;price&lt;/code&gt; in &lt;code&gt;GET /toys/he-man&lt;/code&gt; response and convert it into EUR calling a third party API?
Why not returning a subset of &lt;code&gt;GET /characters/he-man&lt;/code&gt; and &lt;code&gt;GET /toys/he-man&lt;/code&gt; when responding to &lt;code&gt;GET /action-figures/he-man&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Why not indeed?&lt;/p&gt;

&lt;p&gt;If you do that, you put business logic outside of its original domain, its original implementation.
It’s not uncommon to have business logic split across various components but putting it in an API gateway can be a problem.&lt;/p&gt;

&lt;p&gt;It may simply introduce complexity in the development workflow.
Coding on this component may be easy … but coding with all the CI/CD, quality checks, … stuff may not be that simple.&lt;/p&gt;

&lt;p&gt;Also, coding in that component may require special skills that the team owning the business logic, the team actually implementing the original underlying APIs may not have.
So this team may have to delegate that code to someone else.
And that may lead to organizational issue and a lack of ownership.
The original team may think they don’t own that code and not really care about it.
The other team coding on the gateway may not care as much as the original team, and even if it’s not the case, as they may not know the underlying business rules that can cause some bugs.&lt;/p&gt;

&lt;h1 id=&quot;an-api-gateway-is-a-smart-dumb-pipe&quot;&gt;An API gateway is a smart-dumb pipe&lt;/h1&gt;

&lt;p&gt;Introducing business logic in an API gateway basically transforms it into a good (or very bad I should say) old ESB.
Remember them?
Those bloated too smart pipes that ruined many information systems because they were so complicated to manage.
So don’t do that, keep API gateways dumb.
Well, not so dumb; as long as an API gateway do smart “API exposition related stuff” and stays dumb from a business perspective, that’s totally ok.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">An API gateway is a proxy that sits between API providers and their consumers. Its main role is to ensure that only authorized consumers consume some APIs. But API gateways usually come also with features such as request/response transformation and some of them even allow to code complex orchestration. Such transformation features can be very useful if used wisely. But they also can give terrible ideas with terrible consequences.</summary></entry><entry><title type="html">An API Gateway alone will not secure your API</title><link href="https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api/" rel="alternate" type="text/html" title="An API Gateway alone will not secure your API" /><published>2021-07-21T00:00:00-05:00</published><updated>2021-07-21T00:00:00-05:00</updated><id>https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api</id><content type="html" xml:base="https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api/">&lt;p&gt;How many times people realized that an API was not so secured despite being exposed on an API gateway?
Too many times.
While being a must have to securely expose APIs, an API gateway will not do all the security work for you.
Security in general, and API security in particular, is a matter for everyone.
Let’s see what is the job of an API gateway and what you still have to do to actually securely expose APIs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;whats-an-api-gateways-job&quot;&gt;What’s an API gateway’s job?&lt;/h1&gt;

&lt;p&gt;In its most usual form, an API gateway is a proxy that sits between server applications exposing APIs and their consumer applications (they could be other server applications, mobile applications, web applications or whatever).
An API gateway may bring features such as logging, monitoring, rate limiting, simple connection to API catalogue or API developer portal (sometimes bundled with it), request/response transformations (we’ll talk more about that terrible idea in a later post) and more.
But these are only &lt;em&gt;additional&lt;/em&gt; features, an API gateway’s core job is security.&lt;/p&gt;

&lt;h2 id=&quot;a-guard-at-the-gate&quot;&gt;A guard at the gate&lt;/h2&gt;

&lt;p&gt;An API gateway’s fundamental role is to ensure that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only registered consumer applications can consume the exposed APIs&lt;/li&gt;
  &lt;li&gt;Each registered consumer application only consumes the API(s) it is allowed to&lt;/li&gt;
  &lt;li&gt;And each registered consumer application only use an API’s operations it is allowed to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, if an API gateway exposes a CRM (Customer Relationship Management) and a Contract APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unregistered consumers won’t be able to consume any of those APIs&lt;/li&gt;
  &lt;li&gt;A registered consumer may be allowed to consume only the CRM API and not the Contract one.&lt;/li&gt;
  &lt;li&gt;This registered consumer allowed to consume the CRM API may be allowed to only call “Search customers” and “Read customer” operations but not the “Create customer” one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-security-languages-interpret&quot;&gt;A “security languages” interpret&lt;/h2&gt;

&lt;p&gt;In order to make API calls, a consumer must provide a valid access token along with its requests.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;You must return here with a shrubbery... or else you will never pass through this wood... &lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;Knight of Ni, Monty Python's and The Holy Grail&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;A registered consumer request an access token using its credentials, if end users are involved the API gateway will talk to an identity provider to authenticate them.
The obtained access token is a proof that this consumer is allowed to consume some APIs exposed on the gateway in the name of someone.
On every call, the consumer sends this access token along with its request.
A call will only be transmitted to the implementation if the token is still valid (it may have expired) and linked to a consumer being allowed to use the API’s operation mentioned in the request.&lt;/p&gt;

&lt;p&gt;To achieve that, an API gateway may have to speak “Oauth 1.0”, “Oauth 2.0”, “Oauth 2.1”, “SAML”, “OpenID Connect”, etc… with consumer applications and/or identity providers.
It handles that complexity on the behalf of the server application exposing the API.
This server application, the API’s implementation, will receive only authorized calls without having to care about which “security languages” are involved.&lt;/p&gt;

&lt;h1 id=&quot;whats-your-job&quot;&gt;What’s your job?&lt;/h1&gt;

&lt;p&gt;An API gateway simplifies heavily the work for teams building the server applications exposing APIs as they don’t have to code to manage complex security protocols or frameworks.
But it does not mean at all that an API gateway handles ALL security aspects.
Yes, I’m deeply sorry, but even when using an API gateway, you still have to work on security.&lt;/p&gt;

&lt;h2 id=&quot;configure-and-administrate-consumers&quot;&gt;Configure and administrate consumers&lt;/h2&gt;

&lt;p&gt;It’s still up to you to actually configure and administrate consumers.
Indeed, you must ensure that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adapted granularity is used when declaring consumers. For a “customer mobile application” will you declare a single consumer (terrible idea), or one for each mobile OS (less terrible but still terrible) or one for each OS and application version (better) or …&lt;/li&gt;
  &lt;li&gt;Only the API owners can actually let consumers use their APIs. It’s not unusual to forget that when building more or less centralized API gateway platform.&lt;/li&gt;
  &lt;li&gt;Consumers access rights are revoked when they should. When an old version of a mobile application becomes unsupported for instance.&lt;/li&gt;
  &lt;li&gt;Adapted security mode are used. Letting people use the Oauth 2.0 Customer Credentials flow in a mobile application or single page web application is a terrible idea that is too often seen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But even doing that is not enough, there is still work to do beyond the API gateway.&lt;/p&gt;

&lt;h2 id=&quot;build-secured-implementations&quot;&gt;Build secured implementations&lt;/h2&gt;

&lt;p&gt;When the API’s implementation receives a call from the API gateway that means the API gateway considers it’s a valid one.
But that does not means it’s actually valid from the implementation’s perspective.
Basically, at implementation level you have to check every single piece of data to ensure that it is coherent with what you know about the consumer and end user.&lt;/p&gt;

&lt;p&gt;If a consumer sends a &lt;code&gt;GET /crm/customers/12345&lt;/code&gt;, the gateway checks the access token is linked to a consumer that is allowed to call the CRM API and more precisely the “Read customer” operation, hence &lt;code&gt;GET /crm/customers/{customerId}&lt;/code&gt;.
But the API gateway will not check that the consumer or the end user (if any) are actually allowed to get information about that specific &lt;code&gt;12345&lt;/code&gt; customer.
It’s up to the implementation to check that.
This can be done as long as the API gateway provides information about the consumer and end user along the transmitted request.
And just in case: no, replacing &lt;code&gt;12345&lt;/code&gt; by a more complex id such as &lt;code&gt;7a31bfa6-463e-47e0-bf20-193086d5a29d&lt;/code&gt;, does not allow to not do this check.&lt;/p&gt;

&lt;p&gt;And the same goes for a &lt;code&gt;POST /contract/contracts&lt;/code&gt; request which is supposed to create a 1 billion Euros life insurance contract.
It’s up to the implementation to check that consumer or end user are allowed to create a contract with such amount and not the API gateway.&lt;/p&gt;

&lt;p&gt;By the way, do we actually need to expose those two features?&lt;/p&gt;

&lt;h2 id=&quot;design-secured-apis&quot;&gt;Design secured APIs&lt;/h2&gt;

&lt;p&gt;Before API implementation and API gateway, security must be dealt with during the design of APIs.&lt;/p&gt;

&lt;p&gt;It’s up to you to choose if you’ll create an API or not and which feature you’ll put in it or not.
You’re under no obligation to create APIs for everything and expose every feature of any system.&lt;/p&gt;

&lt;p&gt;And once you’re sure about what you want to expose, be sure sure to choose secured design and representation.
For instance avoid putting sensitive data such as personal data in path or query parameters, indeed a &lt;code&gt;GET /customers/{socialSecurityNumber}&lt;/code&gt; will be logged by any equipment between consumer and provider.&lt;/p&gt;

&lt;p&gt;And last but not least, it is also up to you to choose how the access to the API will be partitioned.
You have to design the scopes that grants access to all of or a subset of the API’s operations.
These scopes will be used by the gateway to decide if a consumer is allowed to use an operation or not.
For instance, you can put all of the read operations of the CRM API under the “crm:read_only” scope, the “Create customer” operation under the “crm:partner” and the “Create customer”, “Update customer” and “Delete customer” under the “crm:admin” scope.
A consumer which has been granted the “crm:partner” scope can only do “Create customer” and not do “Search customers” or “Delete customer”.&lt;/p&gt;

&lt;h1 id=&quot;an-api-gateway-is-not-the-api-security-panacea&quot;&gt;An API gateway is not the API security panacea&lt;/h1&gt;

&lt;p&gt;So, putting an API gateway in front of your API’s implementation may makes your life easier but don’t be fooled, you’ll still have to actively work on security yourself.
API security concerns the API gateway configuration (consumers, security mode, lifecycle), the implementation (application/fine grained security) and the design (what you expose and how you expose it).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">How many times people realized that an API was not so secured despite being exposed on an API gateway? Too many times. While being a must have to securely expose APIs, an API gateway will not do all the security work for you. Security in general, and API security in particular, is a matter for everyone. Let’s see what is the job of an API gateway and what you still have to do to actually securely expose APIs.</summary></entry><entry><title type="html">What’s the problem with required query parameters?</title><link href="https://apihandyman.io/what-s-the-problem-with-required-query-parameters/" rel="alternate" type="text/html" title="What’s the problem with required query parameters?" /><published>2021-07-14T00:00:00-05:00</published><updated>2021-07-14T00:00:00-05:00</updated><id>https://apihandyman.io/avoid-required-query-parameters-when-designing-apis</id><content type="html" xml:base="https://apihandyman.io/what-s-the-problem-with-required-query-parameters/">&lt;p&gt;When reviewing API designs, I often encounter operations such as &lt;code&gt;GET /resources?queryParameter=value&lt;/code&gt; where the query parameter is required.
Consumers won’t be able to make that request without providing this parameter and a correct value; that’s usually a problem.
Indeed, at best it will ruin developer experience and at worst it is a sign of design smell.
Let’s see why.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-are-query-parameters-and-how-they-are-usually-used&quot;&gt;What are query parameters and how they are usually used&lt;/h1&gt;

&lt;p&gt;According to &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-3.4&quot;&gt;RFC3986 Uniform Resource Identifier (URI): Generic Syntax&lt;/a&gt;, the “query component” of a URI is everything that goes after a question mark (&lt;code&gt;?&lt;/code&gt;).
The elements coming after that question mark are often in the form of a &lt;code&gt;key=value&lt;/code&gt; pair. 
That means in &lt;code&gt;https://api.eternia.com/characters?hasMagicalPowers=true&lt;/code&gt;, &lt;code&gt;hasMagicalPowers&lt;/code&gt; is a query parameter and its value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Query parameters can be used in any type of HTTP requests but in most REST/RESTful/RESTish APIs, such query parameters are added on operations such as &lt;code&gt;GET /characters&lt;/code&gt;, that represents something like “list characters” or “search for characters”, in order to allow consumers to filter the results.
While a &lt;code&gt;GET /characters&lt;/code&gt; is supposed to return all characters, a &lt;code&gt;GET /characters?hasMagicalPowers=true&lt;/code&gt; will only return the ones having magical powers.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt;
    If you wonder why &lt;code&gt;/characters&lt;/code&gt; and not &lt;code&gt;/character&lt;/code&gt;
, read &lt;a class=&quot;post-link&quot; href=&quot;/resources-rules-and-resource-sucks-or-is-it-the-other-way-around/&quot;&gt;/resources rules and /resource sucks ... or is it the other way around?&lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&quot;required-query-parameters-ruin-dx&quot;&gt;Required query parameters ruin DX&lt;/h1&gt;

&lt;p&gt;I have a rule of thumb when designing APIs: whatever the type of inputs, the less you request, the better because that help people do their first request and later ones without having to think too much.
That is key when you want to build the best possible DX (developer experience).
And query parameters are no exception.&lt;/p&gt;

&lt;p&gt;In the example above, turning &lt;code&gt;hasMagicalPowers&lt;/code&gt; into a required query parameters will first lead to people failing their very first request because they expect that a &lt;code&gt;GET /characters&lt;/code&gt; can be done without any query parameters.
Why would they expect that?
Because it’s the most encountered behavior.
That does not seem much, that’s not exactly “ruining” the developer experience but that’s quite annoying.
This could be the straw that breaks the camel’s back, people may go elsewhere especially if there are other APIs offering the same services without such silly behavior.&lt;/p&gt;

&lt;p&gt;And second problem, that leads to consumers having to make at least 2 requests in order to get all characters (pagination set aside), one to get those having magical powers and another one to those who haven’t.
That is not really good for developer experience, it may actually ruin it.
Obviously, in such situation, most of designers would never do that as beyond crippling developer experience, such design does not make any sense at all from this domain (Masters of the Universe franchise’s characters) perspective.&lt;/p&gt;

&lt;p&gt;But there are other use cases that are less obvious.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Masters_of_the_Universe&quot;&gt;Masters of the Universe&lt;/a&gt; franchise had multiple TV cartoon installments (and no, the live action movie does not exist).
Let’s take for granted that the original one made at the beginning of the 80s is the most known and loved one.
Let’s take also for granted one that people looking for information about that franchise’s characters want to be able to get information about the characters of that specific version.&lt;/p&gt;

&lt;p&gt;That means when calling &lt;code&gt;GET /characters&lt;/code&gt;, it could make sense to filter the results based on the TV show and so add a &lt;code&gt;tvShow&lt;/code&gt; query parameter that could take values such as &lt;code&gt;80s_original_that_rules&lt;/code&gt;, &lt;code&gt;90s_version_that_sucks&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;.
Some designer could be tempted to make this query parameter a required one, letting consumers choose which characters list they want.
But the rule of thumb is to request the less possible information to consumers.
So let’s avoid this by keeping the &lt;code&gt;tvShow&lt;/code&gt; parameter optional and using the most expected default value, obviously &lt;code&gt;80s_original_that_rules&lt;/code&gt;.
That way, consumers could do a successful &lt;code&gt;GET /characters&lt;/code&gt; without thinking much, the implementation filling the gap returning the results that would please most consumers (characters from the 80s version).
After that, having read the documentation further, consumers may use the other possible values of &lt;code&gt;tvShow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In a more real use case, the problem could come from a date filter on time series data.
Let’s say that for performance reasons for instance, the implementation absolutely needs a date to returns a subset of all available data.
In such a case, keep the parameter optional but choose the “best” default date to use if it is not provided by consumers.
It could be today, first day of the month, last whatever processing date or whatever date will make sense from a business rule perspective and that will please most consumers.&lt;/p&gt;

&lt;p&gt;Whatever the query parameter, there is most of the time a way to keep it optional… if that parameter is not the sign of something more nasty.&lt;/p&gt;

&lt;h1 id=&quot;required-query-parameters-can-be-signs-of-design-smells&quot;&gt;Required query parameters can be signs of design smells&lt;/h1&gt;

&lt;p&gt;Indeed besides possibly “ruining” the developer experience, a required parameter can be a sign of design smell.&lt;/p&gt;

&lt;p&gt;Let’s analyse the &lt;code&gt;GET /enemies?of=characterId&lt;/code&gt; request which has an &lt;code&gt;of&lt;/code&gt; required query parameter.
It is supposed to return the enemies of someone, for example Skeletor and Beast Man are enemies of He-Man (&lt;code&gt;GET /enemies?of=he-man&lt;/code&gt;) while He-Man and Teela are enemies of Beast Man (&lt;code&gt;GET /enemies?of=beast-man&lt;/code&gt;).
The &lt;code&gt;of&lt;/code&gt; parameter being required, my API design reviewer senses tell me there’s something wrong without even thinking about the purpose of this operation.&lt;/p&gt;

&lt;p&gt;My first attempt is usually to check if the required parameter can be turned into an optional one.
Here, returning the enemies of “no one” doesn’t make sense.
Returning the enemies of a default character also makes no sense at all.
So that does not smell good.&lt;/p&gt;

&lt;p&gt;Indeed, if any character can be seen as an enemy by any other character, the resource that should be manipulated when representing “listing the enemies of someone”, is not just “enemies” but the “enemies of someone”.
That means the resource path should be something like &lt;code&gt;/characters/{characterId}/enemies&lt;/code&gt; instead of just &lt;code&gt;/enemies&lt;/code&gt; (the character).&lt;/p&gt;

&lt;p&gt;Based on my experience, when the query parameter cannot be removed that is most of the time the sign of a “wrong resource identified” and the fix is usually adding a level in the resource’s path hierarchy.&lt;/p&gt;

&lt;h1 id=&quot;think-twice-before-adding-a-required-query-parameter&quot;&gt;Think twice before adding a required query parameter&lt;/h1&gt;

&lt;p&gt;So the next time you’re tempted to make a query parameter required, double check that you’re using the right resource and especially not missing a level in your resources hierarchy.
If the parameter actually makes sense, think about what could be the more useful value for most consumers and use it as default when that parameter is not provided.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">When reviewing API designs, I often encounter operations such as GET /resources?queryParameter=value where the query parameter is required. Consumers won’t be able to make that request without providing this parameter and a correct value; that’s usually a problem. Indeed, at best it will ruin developer experience and at worst it is a sign of design smell. Let’s see why.</summary></entry><entry><title type="html">API Designer Experience, the other DX</title><link href="https://apihandyman.io/api-designer-experience-the-other-dx/" rel="alternate" type="text/html" title="API Designer Experience, the other DX" /><published>2021-07-07T00:00:00-05:00</published><updated>2021-07-07T00:00:00-05:00</updated><id>https://apihandyman.io/designer-experience--the-other-dx</id><content type="html" xml:base="https://apihandyman.io/api-designer-experience-the-other-dx/">&lt;p&gt;Nobody expects the API inquisition!
Literally.
When creating public or private APIs, an organization must work hard on creating the best possible developer experience or DX.
That requires to ensure that API designers “do their job well”: creating APIs that fulfill actual needs and are easy to understand and use.
This is the aim of governance which may help creating the best APIs or may slowly killing the organization, depending on the designer experience, the other DX, it provides.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-usually-is-dx&quot;&gt;What usually is DX&lt;/h1&gt;

&lt;p&gt;In the API world, DX stands for Developer eXperience.
It consists in providing APIs that fullfil their needs but that also are easy to understand and easy to use in a matter of minutes if not seconds.
Developers should be able to understand the purpose of an API in 3 seconds, identify the operation in 30 seconds and be able to make their first API call within 3 minutes.
That latter time including creating an account, getting credentials and then calling the API.&lt;/p&gt;

&lt;p&gt;Achieving such a great DX does not only rely on the API itself, its purpose and its design.
It relies also on everything that comes around:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The way people will find it&lt;/li&gt;
  &lt;li&gt;Its various documentations from high level description (that allows to understand what the API does) to instruction manual (ready to use recipes) and reference documentation (describing all operations and how the API works)&lt;/li&gt;
  &lt;li&gt;And the tools provided (in a broad sense: account creation and management, credentials, billing, …)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Working on DX is basically aiming at making developers life simpler.
That’s the usual DX, but there’s another one, that an organization creating public but also private APIs, should care about.&lt;/p&gt;

&lt;h1 id=&quot;the-other-dx-designer-experience&quot;&gt;The other DX: Designer eXperience&lt;/h1&gt;

&lt;p&gt;Those APIs are actually designed in order to make them easy to understand and easy to use.
Succeeding in consistently and in the long run creating such APIs at scale requires governance.
Governance implies defining rules, controls and processes that will ensure that all APIs will share a common look and feel, be consistent and have the same level of quality.&lt;/p&gt;

&lt;p&gt;The problem with governance is that sometimes it is so focused on rules, controls and processes that people, and especially API designers, actually dealing with it are totally forgotten resulting in the most terrible Design eXperience, the other DX.&lt;/p&gt;

&lt;h1 id=&quot;create-user-friendly-design-guidelines&quot;&gt;Create user friendly design guidelines&lt;/h1&gt;

&lt;p&gt;API design guidelines are the set of rules that will define the look and feel of an organization’s APIs.
They can be compared to an organization’s graphic charter and also to &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_system&quot;&gt;design system&lt;/a&gt;, but instead of defining its visual identity that will be used when creating websites or mobile apps for instance, it defines its APIs identity.
These guidelines are mandatory to build a good developer experience because consistent APIs are easier to understand and use.&lt;/p&gt;

&lt;p&gt;But they also matter for people who will design APIs. Defining a common design base allows each designer to avoid wasting time and trying to find a solution to a design problem that has already been solved. But that will only work if those guidelines apply the same principles used to create APIs: guidelines must be simple to understand, simple to use and fulfill actual designers needs.&lt;/p&gt;

&lt;p&gt;So do not reinvent the wheel, do not reuse your possibly outdated and highly specific practices, follow outside world standards and common practices. Define rules only when that is actually necessary, if you’re unable to explain a rule, don’t put it in your guidelines. Design rules must exist only to help people not unnecessarily constrain them.&lt;/p&gt;

&lt;p&gt;Do not write your guidelines in an “incomprehensible super expert that loves to hear themselves” style. Make them simple to use, just like you would do when creating API documentation. Once you have defined rules, create use case oriented design patterns describing in one place all rules that actually apply to a specific use case.&lt;/p&gt;

&lt;p&gt;And listen to people. Accept changes, evolutions. Rules are not set in stone, you must never hesitate to make them evolve by adjusting or completing them based on API designers and implementers feedback.&lt;/p&gt;

&lt;h1 id=&quot;conduct-user-friendly-design-reviews-workshops&quot;&gt;Conduct user friendly design &lt;del&gt;reviews&lt;/del&gt; workshops&lt;/h1&gt;

&lt;p&gt;But even with the user friendly-est guidelines are not enough, designers may make mistakes and most important a consistent style is only a fraction of what makes an API a good one.
Consistency goes beyond style, inside an API one must ensure that all data models are consistent for example, as we say in french, a cat must always be called a cat for instance.
And worse, one can create an API complying a 100% to guidelines that will be a terrible one.
Indeed, guidelines do not guarantee that an API will meet the right need in an efficient way. 
Do we have the right vision of the need? Is the resulting API really user friendly? Easy to understand, easy to use for someone outside the organization (another team or a partner or a customer)?&lt;/p&gt;

&lt;p&gt;So, irremediably coming along with guidelines, there are the mandatory API design reviews.
It is important that several people can look at and challenge a design.
An API must be analyzed from different perspectives: business, technical, developer experience to guarantee its success.
And it is important that at least one “external” person, or one who can act as if, participates in this analysis, because we can quickly fall into the creation of specialist APIs like Kitchen Radar if we are not careful.&lt;/p&gt;

&lt;p&gt;But beware, this exercise can quickly turn into a counterproductive trial if you are not careful.
A design review is not about policing and beating up on people because their design is “breaking the law”,  “non-compliant” or worse “sucks” from the reviewer’s perspective.
An API design reviewer is not the inquisition of API design.
Actually, nobody expects the API inquisition, literally.&lt;/p&gt;

&lt;p&gt;An API design review must be seen more as a design workshop.
Being an API design reviewer is more about being a consultant, helping people identify their needs, choosing the best possible representation, helping them make decisions adapted to their context, explaining the consequences of going in one direction or another.
Once everything is analyzed and explained, API designer reviewers must let designers choose because they are the owners of their APIs.&lt;/p&gt;

&lt;p&gt;API design reviewers must help designers and respect API ownership.&lt;/p&gt;

&lt;h1 id=&quot;build-user-friendly-organization-processes-and-tools&quot;&gt;Build user friendly organization, processes and tools&lt;/h1&gt;

&lt;p&gt;Just like a terrible registration process can ruin the best API’s developer experience, there are other aspects of API governance to take care of to ensure creating the best possible developer experience.
Indeed, if guidelines and reviews are the most obvious aspects of API governance participating in building the better or the worst designer experience, wrong human organization, processes and tools can cripple all efforts.&lt;/p&gt;

&lt;p&gt;When possible, prefer decentralized organization, aim on training all designers in order to make them the most autonomous possible.
It’s far better for the organization that people add to their expertise than having a small set of not always available experts.
That can be done gradually by identifying local experts that will be trained and then help and train other themselves.&lt;/p&gt;

&lt;p&gt;When defining processes, never lose sight that governance is there to enable designers to the right thing simply.
If it takes weeks if not month to do an API design review, it’s a terrible designer experience.
If processes lead to designers losing ownership, it’s an even more terrible design experience.&lt;/p&gt;

&lt;p&gt;When creating tools, ensure they are user friendly.
Take advantage of standard/common practices, using the OpenAPI specification instead of wiki pages or spreadsheet to describe an API for instance.
Ensure also they are the most open possible, providing APIs for instance, so designers can use them in a wide range of context because not all teams build APIs in the same way.&lt;/p&gt;

&lt;h1 id=&quot;fear-the-consequences-of-terrible-designer-experience&quot;&gt;Fear the consequences of terrible Designer eXperience&lt;/h1&gt;

&lt;p&gt;Just in case you think that’s not something you should care about because you think governance should be strong and only care about ensuring nobody breaks the law, let’s briefly talk about the consequences of not caring about this other DX.&lt;/p&gt;

&lt;p&gt;A terrible designer experience will irremediably lead to designers not learning how to actually create good APIs, they may even loose interest in designing APIs and delegate that to the governance zealot henchmen.
It will irremediably lead to terrible APIs created by outsider experts only caring about not breaking the law and totally not caring about creating actually good APIs.
Terrible private APIs mean higher costs, increase of technical debt, less flexible IT, longer time to market.
Terrible public APIs mean not used APIs…
And in the end, people who actually care will just leave the organization that may just collapse in the end.&lt;/p&gt;

&lt;p&gt;So, don’t underestimate the importance of the other DX, Designer eXperience.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Nobody expects the API inquisition! Literally. When creating public or private APIs, an organization must work hard on creating the best possible developer experience or DX. That requires to ensure that API designers “do their job well”: creating APIs that fulfill actual needs and are easy to understand and use. This is the aim of governance which may help creating the best APIs or may slowly killing the organization, depending on the designer experience, the other DX, it provides.</summary></entry><entry><title type="html">Automate all the things (like Cloudflare cache purge) with Github actions, Postman and APIs</title><link href="https://apihandyman.io/automate-all-the-things-with-github-actions-postman-and-apis/" rel="alternate" type="text/html" title="Automate all the things (like Cloudflare cache purge) with Github actions, Postman and APIs" /><published>2021-06-30T00:00:00-05:00</published><updated>2021-06-30T00:00:00-05:00</updated><id>https://apihandyman.io/automate-all-the-things-with-github-actions-postman-and-apis</id><content type="html" xml:base="https://apihandyman.io/automate-all-the-things-with-github-actions-postman-and-apis/">&lt;p&gt;What if I tell you can run Postman collection inside Github Actions and so easily automate all the things as long as they provide APIs? Sounds interesting right? So let me show you how I migrated my Jekyll blog publication workflow to Github Actions and how I used Postman collection to clear my Cloudflare cache. Bonus: You may also learn a few things about DX and API design.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;migrating-to-github-actions-and-solving-an-old-problem&quot;&gt;Migrating to Github Actions and solving an old problem&lt;/h1&gt;

&lt;p&gt;Since 2016, the API Handyman blog is powered by Jekyll, built by travis-ci.org, hosted on Github Pages and cached with Cloudflare CDN.
On May 31, 2021, &lt;a href=&quot;https://blog.travis-ci.com/2021-05-07-orgshutdown&quot;&gt;travis-ci.org has been shot down&lt;/a&gt;.
This has been announced for quite a long time… but I managed to totally forgot to do something about it; I actually realized it simply because my 1st of June’s post has not been published. I was going to migrate to travis-ci.com but because (or thanks) to an obscure bug I wasn’t able to do it … and as I wanted to test &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt;, I took the few necessary minutes to switch my build on it, and that was a blast. Ready to use actions that you can build upon, clear and simple format, good documentation, I was totally delighted.&lt;/p&gt;

&lt;p&gt;As changing the build system was faster than expected, I decided to tinker a bit more and solve a problem I had with my system: to ensure publication, I had to go to Cloudflare dashboard and manually clear the cache. If by chance Cloudflare propose an API, I thought I could include clearing cache after the build with a curl command, but as always I did a little bit more than that.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-a-jekyll-github-action-worflow&quot;&gt;Setting up a Jekyll Github &lt;del&gt;Action&lt;/del&gt; Worflow&lt;/h1&gt;

&lt;p&gt;Migrating from travis-ci.org to Github actions was done at the speed of light.
I will not go through all details, Github Actions, format, UI and &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;documentation&lt;/a&gt; are quite clear, but I will show you a few tips I discovered while setting up my first Github Workflow (yes, naming is hard, it’s called Github Actions but you create … Workflows, actually “actions” seems to be the reusable components that you can use in workflows).&lt;/p&gt;

&lt;h2 id=&quot;default-jekyll-workflow&quot;&gt;Default Jekyll workflow&lt;/h2&gt;

&lt;p&gt;Starting with Github Actions as a total beginner is dead simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to your repository&lt;/li&gt;
  &lt;li&gt;Click on the &lt;em&gt;Actions&lt;/em&gt; tab, you should see a “Get started with Github Actions” page&lt;/li&gt;
  &lt;li&gt;Scroll down to “Continuous integration workflows” and look for “Jekyll”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That should create the following workflow in &lt;code&gt;.github/workflows/jekyll.yml&lt;/code&gt;in your repository:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Default Jekyll workflow&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;name: Jekyll site CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build the site in the jekyll/builder container
      run: |
        docker run \
        -v $:/srv/jekyll -v $/_site:/srv/jekyll/_site \
        jekyll/builder:latest /bin/bash -c &amp;quot;chmod -R 777 /srv/jekyll &amp;amp;&amp;amp; jekyll build --future&amp;quot;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;According to the &lt;code&gt;on&lt;/code&gt; property, This workflow will be triggered by pushes and pull requests on main branch.
It contains a single job (in &lt;code&gt;jobs&lt;/code&gt;) named &lt;code&gt;build&lt;/code&gt; which is composed of 2 &lt;code&gt;steps&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first one checkouts the repo taking advantage of the &lt;code&gt;actions/checkout@v2&lt;/code&gt; action (that means you can call actions inside &lt;del&gt;actions&lt;/del&gt; workflows! Check the &lt;a href=&quot;https://github.com/marketplace?type=actions&quot;&gt;Market Place&lt;/a&gt;, there are dozens of them already)&lt;/li&gt;
  &lt;li&gt;The second step &lt;code&gt;run&lt;/code&gt;s a jekyll build using Docker (that will prove to be useful) but does not publish anything (you can basically run any Linux commands with &lt;code&gt;run&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;customizing-jekyll-workflow&quot;&gt;Customizing Jekyll workflow&lt;/h2&gt;

&lt;p&gt;My publication &lt;a href=&quot;https://github.com/arno-di-loreto/apihandyman.io/blob/master/.github/workflows/publish.yml&quot;&gt;workflow&lt;/a&gt; is quite simple, each Wednesday à noon (UTC) or on demand, I want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checkout repository on default branch&lt;/li&gt;
  &lt;li&gt;Run Jekyll build&lt;/li&gt;
  &lt;li&gt;Commit build’s result on gh-pages branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I started by customizing the &lt;code&gt;on&lt;/code&gt; section:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To &lt;code&gt;schedule&lt;/code&gt; build every Wednesday at noon using cron syntax (&lt;a href=&quot;https://docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events&quot;&gt;Schedule Events documentation&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;And I also activated “on demand” execution with the empty &lt;code&gt;workflow_dispath&lt;/code&gt; (&lt;a href=&quot;https://docs.github.com/en/actions/reference/events-that-trigger-workflows#manual-events&quot;&gt;Manual Events documentation&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Customized Jekyll workflow&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;name: Publish

on:
  schedule:
    - cron: &amp;quot;0 12 * * WED&amp;quot;
  workflow_dispatch:&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then I customized (and renamed) the &lt;code&gt;build&lt;/code&gt; job as &lt;code&gt;build_and_publish&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I added &lt;code&gt;PUBLISH_BRANCH_FOLDER&lt;/code&gt; (target folder for build) and &lt;code&gt;PUBLISH_BRANCH&lt;/code&gt; (publication branch) environment variables (&lt;a href=&quot;https://docs.github.com/en/actions/reference/environment-variables&quot;&gt;documentation&lt;/a&gt;) in &lt;code&gt;env&lt;/code&gt;. They are later used with the &lt;code&gt;${{env.VARIABLE_NAME}}&lt;/code&gt; syntax.&lt;/li&gt;
  &lt;li&gt;I tweaked the checkout step to make it faster by only downloading the last version of the code (&lt;code&gt;fetch-depth: 1&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;I removed the &lt;code&gt;--future&lt;/code&gt; flag on Jekyll build step to avoid having future date being published (actually I did that after realizing that future post had been published)&lt;/li&gt;
  &lt;li&gt;I modified build target directory (the second &lt;code&gt;-v&lt;/code&gt; in the Docker command) and set it to &lt;code&gt;${{ github.workspace }}/${{env.PUBLISH_BRANCH_FOLDER}}&lt;/code&gt;. The &lt;code&gt;github.workspace&lt;/code&gt; is a variable of &lt;a href=&quot;https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context&quot;&gt;github context&lt;/a&gt;, this context provides information about the workflow and the event that triggered it.&lt;/li&gt;
  &lt;li&gt;And finally, I added the publication step which consists in pushing build on &lt;code&gt;gh-pages&lt;/code&gt;. This is done using the wonderful &lt;a href=&quot;https://github.com/JamesIves/github-pages-deploy-action&quot;&gt;JamesIves/github-pages-deploy-action&lt;/a&gt; which can take the content of any folder and push it on any repository’s branch (the &lt;code&gt;clean: true&lt;/code&gt; is a very convenient option that removes what should be removed from the target branch based on source folder)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Customized Jekyll workflow&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;jobs:
  build_and_publish:
    env:
      PUBLISH_BRANCH: gh-pages
      PUBLISH_BRANCH_FOLDER: _site
    runs-on: ubuntu-latest
    steps:
    - name: ⬇️ Checkout current branch
      uses: actions/checkout@v2
      with:
          fetch-depth: 1
    - name: 👷🏻‍♂️ Build with jekyll/builder container
      run: |
        docker run \
        -v ${{ github.workspace }}:/srv/jekyll \
        -v ${{ github.workspace }}/${{env.PUBLISH_BRANCH_FOLDER}}:/srv/jekyll/_site \
        jekyll/builder:latest /bin/bash -c &amp;quot;chmod -R 777 /srv/jekyll &amp;amp;&amp;amp; jekyll build&amp;quot;
    - name: 🚀 Push on ${{env.PUBLISH_BRANCH}}
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
        branch: ${{env.PUBLISH_BRANCH}} # The branch the action should deploy to.
        folder: ${{ github.workspace }}/${{env.PUBLISH_BRANCH_FOLDER}} # The folder the action should deploy.        
        clean: true
        commit-message: Publish&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;clearing-cloudflare-cache-by-api-with-postman&quot;&gt;Clearing Cloudflare cache by API with Postman&lt;/h1&gt;

&lt;p&gt;Now that the blog is published, let’s see how to clear Cloudflare cache.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Spoiler: Do Cloudflare offers a good DX (Developer eXperience)?
Yes, definitely, I was able to do what I wanted in a matter of minutes.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;finding-the-api-documentation&quot;&gt;Finding the API documentation&lt;/h2&gt;

&lt;p&gt;I opened &lt;a href=&quot;https://cloudflare.com&quot;&gt;cloudflare.com&lt;/a&gt; website to locate their API documentation but was quite disappointed, no mention of any Cloudflare API at all.
That was not starting well; don’t do that at home, if you have API(s) advertize them on your homepage.
Hopefully, I found the link to &lt;a href=&quot;https://api.cloudflare.com/&quot;&gt;Cloudflare API documentation&lt;/a&gt; once I logged in my account and … scrolled all the way down to the page footer.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-hidden-api-link.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Log in your Cloudflare account and scroll all the way down&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To be honest, I could simply have googled Clouflare API and I would have arrived directly on the documentation, searching “company name api” is the best way to find a company’s API documentation.&lt;/p&gt;

&lt;p&gt;Though, Cloudflare doesn’t advertize them on their homepage, they did a great job on their APIs.
Crystal clear documentation going straight to the point; it took me a few seconds to arrive to the &lt;a href=&quot;https://api.cloudflare.com/#getting-started-requests&quot;&gt;“Getting start -&amp;gt; Requests”&lt;/a&gt; section explaining how to make API calls using an API token.
Icing on the cake: the direct link to your user profile for &lt;a href=&quot;https://dash.cloudflare.com/profile/api-tokens&quot;&gt;token configuration&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-documentation.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;How to do a Cloudflare API request&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-an-access-token&quot;&gt;Configuring an access token&lt;/h2&gt;

&lt;p&gt;Once arrived on the &lt;em&gt;API Tokens&lt;/em&gt; tab of your profile, click on the &lt;em&gt;Create Token&lt;/em&gt; blue button, the following page will appear:&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-create-token.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Create Cloudflare API Token&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Cloudflare allows to create tailor made tokens with only the permissions you actually need which is great for security.
The create token page propose pre-configured token templates which is good, but there was no template matching my need, so I created a custom token.&lt;/p&gt;

&lt;h3 id=&quot;configuring-a-custom-token&quot;&gt;Configuring a custom token&lt;/h3&gt;

&lt;p&gt;Configuring an access token is dead simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Give it a name (useful when wanting to delete a token)&lt;/li&gt;
  &lt;li&gt;Select permissions Zone -&amp;gt; Cache Purge -&amp;gt; Purge&lt;/li&gt;
  &lt;li&gt;Select resources to purge, I chose to include only the apihandyman.io domain&lt;/li&gt;
  &lt;li&gt;Click on continue to summary&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-token-configuration.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Configure Cloudflare API Token&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Cloudflare allows to generate tokens with really fine grain permissions and the way they are organized and what you can do with them is crystal clear.
Github should get inspired by this, their &lt;a href=&quot;/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/#getting-a-github-personal-access-token&quot;&gt;token configuration&lt;/a&gt; is light years behind this.&lt;/p&gt;

&lt;h3 id=&quot;checking-configuration&quot;&gt;Checking configuration&lt;/h3&gt;

&lt;p&gt;Once configuration is done, you’ll get a summary of permissions granted by this token.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-token-summary.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Cloudflare API Token Summary&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;token-created&quot;&gt;Token created&lt;/h3&gt;

&lt;p&gt;And when token is created, you can copy it to use it, but quite convenient, you get a ready to use curl command to check it actually works (I wouldn’t have designed the endpoint like this though, but that’s not the point here).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-token-created.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Cloudflare API Token Created&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;no-interactive-documentation-is-not-a-problem-here&quot;&gt;No interactive documentation is not a problem here&lt;/h2&gt;

&lt;p&gt;Ok, Cloudflare could propose an interactive documentation using pre-generated tokens.
But in that context and as the API is quite simple I was not annoyed at all by the static documentation.
I even wonder if that would be a good idea to have such dynamic documentation based on the terrible actions you can trigger with their API.&lt;/p&gt;

&lt;h2 id=&quot;verifying-the-token&quot;&gt;Verifying the Token&lt;/h2&gt;

&lt;p&gt;Instead of using curl to verify token, I used &lt;a href=&quot;/toolbox/postman&quot;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re not familiar with Postman, follow the detailed steps described in my &lt;a href=&quot;/batch-github-api-call-with-csv-and-postman-runner-and-visualizer/#configuring-authorization-in-postman-and-make-a-successful-first-api-call&quot;&gt;Batch (Github) API calls with CSV and Postman&lt;/a&gt; to setup workspace, collection and environment variables&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I created a &lt;em&gt;Cloudflare&lt;/em&gt; workspace and a &lt;em&gt;Cloudflare Clear Cache&lt;/em&gt; collection in Postman to tinker with the Cloudflare API.
I added a collection variable called &lt;code&gt;root&lt;/code&gt; containing the url (https://api.cloudflare.com/client/v4) of Cloudflare API 
And I added a &lt;em&gt;Cloudflare&lt;/em&gt; environment containing my newly created &lt;code&gt;token&lt;/code&gt; (and saved and selected it in the upper right environment drop list!).&lt;/p&gt;

&lt;p&gt;In the collection, I set up Authorization type to Bearer Token (as stated by Cloudflare API documentation) and set the Token value to &lt;code&gt;{{token}}&lt;/code&gt;.
And the I created a Verify Token request as a &lt;code&gt;GET {{root}}/user/tokens/verify&lt;/code&gt;.
Before hitting the &lt;em&gt;Send&lt;/em&gt; button, I added a Test snippet to check that the response is a &lt;code&gt;200 OK&lt;/code&gt; by going to the request’s &lt;em&gt;Tests&lt;/em&gt; tab then click on the “Status code: Code is 200” snippet as shown below.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/postman-verify-token.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Verifying Cloudflare Token in Postman&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reading-purge-cache-documentation&quot;&gt;Reading purge cache documentation&lt;/h2&gt;

&lt;p&gt;Now that we’re all set to make Cloudflare API calls, let’s see how to purge cache.
Finding out how to do that is again dead simple, go to Cloudflare API documentation, type “purge” in the top left search box, and click on “Purge All Files”.
Note that depending on your Cloudflare subscriptions, you can get access to more sophisticated purge cache features.
As I have a small github hosted website, I can afford to do a brutal total cache purge, I may use the purge files by URL to make this more efficient.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/cloudflare-documentation-purge.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Verifying Cloudflare Token in Postman&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So purging cache requires to send a &lt;code&gt;POST {{root}}/zones/{zone identifier}/purge_cache&lt;/code&gt; request, according to the curl example, that will be the technical identifier of my apihandyman.io zone.
I think I could get that identifier from the dashboard but I’m too lazy to do that.&lt;/p&gt;

&lt;h2 id=&quot;guessing-how-cloudflare-api-works-thanks-to-its-design&quot;&gt;Guessing how Cloudflare API works thanks to its design&lt;/h2&gt;

&lt;p&gt;Though I wouldn’t have design the Cloudflare API that way, it is still a little bit predictable.
I can get what I want (my apihandyman.io zone identifier) without reading the documentation.
First, based on the &lt;code&gt;{{root}}/zones/{zone identifier}/purge_cache&lt;/code&gt;, I can guess that doing a &lt;code&gt;GET {{root}}/zones&lt;/code&gt; will let me list all my zones, and the guess is correct!
I get a list of zone and the &lt;code&gt;name&lt;/code&gt; property contains the domain name, so let’s try a &lt;code&gt;GET {{root}}/zones?name=apihandyman.io&lt;/code&gt; to get only the zone I need, that works too!&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/postman-get-zone.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Getting apihandyman.io zone and storing in zone_id environment variable&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In order to make all this reusable, I set the website name as an environment variable.
And in the Tests tab, I add some code based on Postman’s snippets to check that I get a successful response with a non empty list and then I store the zone identifier in a environment variable.&lt;/p&gt;

&lt;p&gt;Now that I have my zone identifier, I can easily purge cache using the &lt;code&gt;zone_id&lt;/code&gt; variable:&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/postman-purge-cache.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Purging apihandyman.io cache&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I just add a new &lt;code&gt;{{root}}/zones/{{zone_id_}}/purge_cache&lt;/code&gt; request with a body containing the &lt;code&gt;purge_everything&lt;/code&gt; set to true and I’m done.
Well, almost done, I also added a test to check that the request is successful using the snippet “code is 200”.&lt;/p&gt;

&lt;h2 id=&quot;purge-cache-collection&quot;&gt;Purge cache collection&lt;/h2&gt;

&lt;p&gt;Now I have collection that contains 3 requests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Verify token&lt;/li&gt;
  &lt;li&gt;Get zone identifier for website name&lt;/li&gt;
  &lt;li&gt;Purge cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those requests relies on the following variables&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Variable&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;root&lt;/td&gt;
      &lt;td&gt;collection&lt;/td&gt;
      &lt;td&gt;The root URL of Cloudflare API (collection hard coded)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;token&lt;/td&gt;
      &lt;td&gt;environment&lt;/td&gt;
      &lt;td&gt;The Cloudflare API bearer token (set by user)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;website&lt;/td&gt;
      &lt;td&gt;environment&lt;/td&gt;
      &lt;td&gt;The website name to purge (set by user)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zone_id&lt;/td&gt;
      &lt;td&gt;environment&lt;/td&gt;
      &lt;td&gt;The zone identifier of the website (set by Get zone identifier request)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now we know how to purge Cloudflare cache, let’s see how to do it with a Github action.&lt;/p&gt;

&lt;h1 id=&quot;running-a-postman-collection-within-a-github-action&quot;&gt;Running a Postman collection within a Github action&lt;/h1&gt;

&lt;p&gt;In the beginning my idea was to simply do a curl command to call cloudflare API and possibly use &lt;a href=&quot;/toolbox/jq/&quot;&gt;jq&lt;/a&gt; if needed between calls but once I have seen that you can use Docker withing Github Actions and so run almost anything you want, I came to the idea of using &lt;a href=&quot;/toolbox/newman/&quot;&gt;Newman&lt;/a&gt;, Postman’s CLI, to run a Postman collection.
I exported my &lt;em&gt;Cloudflare Clear Cache&lt;/em&gt; Postman collection as &lt;code&gt;cloudflare-clearcache.postman_collection.json&lt;/code&gt; in the &lt;code&gt;scripts&lt;/code&gt; folder of my &lt;code&gt;apihandyman.io&lt;/code&gt; Github repository.&lt;/p&gt;

&lt;h2 id=&quot;passing-variables-to-newman&quot;&gt;Passing variables to Newman&lt;/h2&gt;

&lt;p&gt;Running “Clearing Cloudflare cache” collection on the command line is as simple as running &lt;code&gt;newman run scripts/cloudflare-clearcache.postman_collection.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Failed run&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;Cloudflare Clear Cache

→ Verify Token
  GET https://api.cloudflare.com/client/v4/user/tokens/verify [400 Bad Request, 1.08KB, 1034ms]
  1. Status code is 200&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Oops, got a 400 instead of 200 when verifying token because there simply was no token provided.
Newman is unaware of Postman’s environment variables.
This is simply fixed as follow using &lt;code&gt;--env-var name=value&lt;/code&gt; for each user defined variable of my &lt;em&gt;Cloudflare Clear Cache&lt;/em&gt; Postman collection:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Setting environment variables&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;newman run \
    --env-var token=REDACTED_CLOUDFLARE_TOKEN \
    --env-var website=apihandyman.io \
    scripts/cloudflare-clearcache.postman_collection.json&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;running-newman-with-docker&quot;&gt;Running Newman with Docker&lt;/h2&gt;

&lt;p&gt;Running Newman with Docker is almost as simple using the &lt;a href=&quot;https://hub.docker.com/r/postman/newman/&quot;&gt;postman/newman&lt;/a&gt; image.
The thing you need to know is that when running a local collection file, the &lt;code&gt;newman&lt;/code&gt; CLI inside  Docker expects to find it in &lt;code&gt;/etc/newman&lt;/code&gt;.
That’s why there’s a &lt;code&gt;-v&lt;/code&gt; parameter in the following command, which mounts the folder containing the &lt;code&gt;cloudflare-clearcache.postman_collection.json&lt;/code&gt; on &lt;code&gt;/etc/newman&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Newman, Docker and Variables&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;docker run \
    -v /path/to/scripts:/etc/newman \
    -t postman/newman:alpine run \
    --env-var token=REDACTED_CLOUDFLARE_TOKEN \
    --env-var website=apihandyman.io \
    cloudflare-clearcache.postman_collection.json&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;running-newman-in-github-action-workflow&quot;&gt;Running Newman in Github Action Workflow&lt;/h2&gt;

&lt;p&gt;Now that we know how to run the &lt;code&gt;cloudflare-clearcache.postman_collection.json&lt;/code&gt; with Newman and Docker, let’s add a job doing so to the Github workflow:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Newman in Github Actions&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-yaml line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;jobs:
  build_and_publish:
    [...]
  clear_cdn_cache:
    needs: [ build_and_publish ]
    env:
      POSTMAN_COLLECTION_BRANCH: main
      POSTMAN_COLLECTION_FOLDER: scripts
      CLOUDFLARE_WEBSITE: apihandyman.io
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Download Cloudflare Clear Cache Postman collection
        uses: actions/checkout@v2
        with:
          ref: ${{env.POSTMAN_COLLECTION_BRANCH}}
          fetch-depth: 1
      - name: 💥 Clear Cloudflare cache
        run: |
          docker run \
          -v ${{ github.workspace }}/${{env.POSTMAN_COLLECTION_FOLDER}}:/etc/newman \
          -t postman/newman:alpine run \
          --env-var token=${{secrets.CLOUDFLARE_TOKEN}} \
          --env-var website=${{env.CLOUDFLARE_WEBSITE}} \
          cloudflare-clearcache.postman_collection.json&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I added &lt;code&gt;clear_cdn_cache&lt;/code&gt; job after the &lt;code&gt;build_and_publish&lt;/code&gt; one:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;needs&lt;/code&gt; property says this job will only start AFTER &lt;code&gt;build_and_publish&lt;/code&gt; success (without that both jobs start in parallel)&lt;/li&gt;
  &lt;li&gt;In &lt;code&gt;env&lt;/code&gt; I declare a few variables and especially the &lt;code&gt;CLOUDFLARE_WEBSITE&lt;/code&gt; needed by the Postman collection&lt;/li&gt;
  &lt;li&gt;The first step downloads the collection, it’s in current repo, but it could be elsewhere&lt;/li&gt;
  &lt;li&gt;The second step runs the collection with newman, note that I obviously didn’t put my Cloudflare token there, instead I’m using a secret &lt;code&gt;${{secrets.CLOUDFLARE_TOKEN}}&lt;/code&gt;. To configure a secret, go to the repository’s &lt;em&gt;Settings&lt;/em&gt; tab, then &lt;em&gt;Secrets&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And 🎉:&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/automate-all-the-things-with-github-actions-postman-and-apis/github-clear-cdn-cache.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;Purging apihandyman.io cache done!&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Note that, on line 5, the token value (&lt;code&gt;${{secrets.CLOUDFLARE_TOKEN}}&lt;/code&gt;) is (hopefully) not printed as it is as secret.&lt;/p&gt;

&lt;h1 id=&quot;automate-all-the-things&quot;&gt;Automate all the things!&lt;/h1&gt;

&lt;p&gt;Being able to run Postman collection within Github actions opens endless possibilities but more important, all what I’ve done here can be done because people actually worked hard to bring the best possible user experience at every level:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Regarding APIs DX, the Cloudflare API and its documentation can be taken as a good example (even though I would tweak a thing or 2 in their design), it’s a shame they don’t advertize their wonderful API on their homepage.&lt;/li&gt;
  &lt;li&gt;Postman and Newman easily help me to avoid writing painful bash/curl scripting.&lt;/li&gt;
  &lt;li&gt;Github actions being so well documented and simple are a pleasure to use, being able to use others’ actions and the Docker capability are killer features&lt;/li&gt;
  &lt;li&gt;And so Docker participates greatly in this awesome user experience, making it easy to run absolutely everything wherever you want&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">What if I tell you can run Postman collection inside Github Actions and so easily automate all the things as long as they provide APIs? Sounds interesting right? So let me show you how I migrated my Jekyll blog publication workflow to Github Actions and how I used Postman collection to clear my Cloudflare cache. Bonus: You may also learn a few things about DX and API design.</summary></entry><entry><title type="html">4 Good Reasons To Do Api Design Reviews</title><link href="https://apihandyman.io/3-good-reasons-to-do-api-design-reviews/" rel="alternate" type="text/html" title="4 Good Reasons To Do Api Design Reviews" /><published>2021-06-23T00:00:00-05:00</published><updated>2021-06-23T00:00:00-05:00</updated><id>https://apihandyman.io/4-good-reasons-to-do-api-design-reviews</id><content type="html" xml:base="https://apihandyman.io/3-good-reasons-to-do-api-design-reviews/">&lt;p&gt;More often than not when people hear “let’s do an API design review”, they hear “let’s check that an API design conforms to API design guidelines”.
That’s only partially true and reducing API design reviews to that is a terrible mistake.
Actually, doing API design reviews only to do that may even not make any sense at all.
Let’s see 3 really good reasons to do API design reviews.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h1 id=&quot;im-gonna-need-a-bigger-boat&quot;&gt;I’m gonna need a bigger boat&lt;/h1&gt;

&lt;p&gt;People following me on Twitter might have expect another post this week.
Indeed, I tweeted something like “lately, I slightly changed the way I summarize my API design reviews, that looks promising and I’m going to write about this next week”.
But, that would be putting the cart before the horse and I have so many things to say about API design reviews that I think this topic deserves a (probably long) series.
So before diving into how I summarize API Design Reviews, we’ll talk about the reviews themselves and especially why you should (even must) do them.&lt;/p&gt;

&lt;p&gt;And we start with what most people think an API design review is …&lt;/p&gt;

&lt;h1 id=&quot;check-guidelines-conformance-ensure-consistency&quot;&gt;&lt;del&gt;Check guidelines conformance&lt;/del&gt; Ensure consistency&lt;/h1&gt;

&lt;p&gt;So, more often than not when people hear “API design review”, they hear “checking that an API design conforms to API design guidelines”.
That’s only partially true, the aim of an API design review is actually less about checking guidelines conformance (which is the “how doing a review”) and more about ensuring an overall consistency (which is the “why doing a review”).&lt;/p&gt;

&lt;p&gt;Consistency in API design is important because if all of your APIs and more important all operations, behaviors and data models (and whatever forms an API design) share the same look and feel, that will make your APIs easier to understand and to use.
Once people have learned to use one of your APIs, they feel at home when switching to the next one because it looks and behaves like the previous one.&lt;/p&gt;

&lt;p&gt;That’s why guidelines are important; they are many good (and wrong) ways to design (REST or other) APIs but you need to choose one (preferably a good one). 
Guidelines define an API design look and feel, and by the way if they are well made, those guidelines are consistent with outside world common practices and so that makes your APIs even more easy to use.&lt;/p&gt;

&lt;p&gt;But while guidelines may help to achieve a certain level of consistency at high level, there is still much place to introduce inconsistency.
Indeed, your guidelines will probably not cover every single and more local design concerns.
For instance, it’s up to the API owners (the team, not a single person) to ensure that “a cat is always called a cat” (as we say in french).
If it’s randomly called a &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;felisCatus&lt;/code&gt; or &lt;code&gt;felidae&lt;/code&gt; across same domain APIs or worse inside an API, that will puzzle more than one consumer (and owner by the way). 
So API designers must take care to use the same vocabulary throughout a single API and across their domain APIs (who said &lt;a href=&quot;https://martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;ubiquitous language&lt;/a&gt;?).&lt;/p&gt;

&lt;p&gt;So, ensuring consistency not only requires to observes API design guidelines but also the rest of the API and other related APIs.
But reducing API design review to “ensuring API design consistency” is a terrible mistake.&lt;/p&gt;

&lt;h1 id=&quot;help-people-shape-the-right-apis&quot;&gt;Help people shape the right APIs&lt;/h1&gt;

&lt;p&gt;If an API is 100% consistent with itself, with outside world common practices, with design guidelines and existing APIs, it unfortunately still can be a terrible API.
Indeed, it can be as simple as choosing the wrong vocabulary (&lt;code&gt;cat&lt;/code&gt; vs &lt;code&gt;felisCatus&lt;/code&gt;), making the API hard to understand for non experts.
But it can be also less obvious, like exposing purely internal concerns that shouldn’t be exposed to the outside, making the API complex to use (if not dangerous).
It can be even worse: choosing a totally wrong purpose, making the API a total failure.
And everything in between (and beyond).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/3-good-reasons-to-do-api-design-reviews/kitchenradar.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;figcaption class=&quot;figure-caption&quot;&gt;&lt;a href=&quot;https://livebook.manning.com/book/the-design-of-everyday-apis/chapter-2/16&quot;&gt;The Kitchen Radar 3000 (from my book The Design of Web APIs)&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Hopefully, it’s not a fatality, a well conducted API design review allows to avoid such dark fates.
Put around a table people having functional knowledge, people knowing how the software work (existing) or should work (new), and people knowing nothing about the topic (usually the reviewer, or Jon Snow) and you should be able to decipher what the API should actually do (to solve someone’s problems) and how it should actually looks like.
With all these people discussing during the API design review, the resulting API will be the right API, or at least it shouldn’t be that far (do a final check with potential consumers to confirm).&lt;/p&gt;

&lt;h1 id=&quot;improve-api-design-skills&quot;&gt;Improve &lt;del&gt;API&lt;/del&gt; design skills&lt;/h1&gt;

&lt;p&gt;The more you do API design reviews, the more people involved improve their API design skills.
I have witnessed it myself, after a few months, all people involved (including myself as a reviewer) have improved their API design skills.
At the beginning, there can be a lot of basic mistakes (HTTP, guidelines, consistency), but review after review people understand how API design works, how the guidelines works.
In the process, reviewers learn also a lot by confronting their views to others, discovering new patterns, new use cases.
And in the end, reviews can focus more on doing the right APIs than doing the APIs right.&lt;/p&gt;

&lt;p&gt;Icing on the cake, API design reviews may have interesting side effects on other areas.
One day someone told me that doing API design improved their software design skills, they changed the way they designed class, methods, databases, … and even software architecture.
That’s also true on the functional perspective, building APIs that are easy to understand, easy to use, easy to evolve, can trigger new ways of thinking that can be applied when designing business processes too.&lt;/p&gt;

&lt;h1 id=&quot;api-design-review-is-a-must-do&quot;&gt;API design review is a MUST do&lt;/h1&gt;

&lt;p&gt;So, API design review is a MUST do.
It will irremediably lead to consistency across APIs.
More important, it will lead to building the right APIs.
And even more important, it will help people grow API design skills that, icing on the cake, can be applied to other areas.&lt;/p&gt;

&lt;p&gt;But, there’s always a but, that will only work if the API designer review is conducted the right way, especially with the right mindset.
But that’s another story (if not stories) I’ll keep for one or more later post(s).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">More often than not when people hear “let’s do an API design review”, they hear “let’s check that an API design conforms to API design guidelines”. That’s only partially true and reducing API design reviews to that is a terrible mistake. Actually, doing API design reviews only to do that may even not make any sense at all. Let’s see 3 really good reasons to do API design reviews.</summary></entry></feed>