<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2022-05-18T07:18:12-05:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">Why monetizing and crowdfunding internal/private APIs?</title><link href="https://apihandyman.io/why-monetizing-and-crowdfunding-internal-private-apis/" rel="alternate" type="text/html" title="Why monetizing and crowdfunding internal/private APIs?" /><published>2022-05-11T00:00:00-05:00</published><updated>2022-05-11T00:00:00-05:00</updated><id>https://apihandyman.io/what-about-monetizing-and-crowdfunding-internal-private-apis</id><content type="html" xml:base="https://apihandyman.io/why-monetizing-and-crowdfunding-internal-private-apis/"><![CDATA[<p>Jumping into the API-first train, even only focusing on private/internal APIs, will have an impact on budgets. Organizations need to find ways to redistribute budgets in order to enable any team that needs to provide APIs to do it in the best possible conditions. Is monetizing private/internal API the solution? Would crowdfunding private make sense?
<!--more--></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">Internal/private APIs and money Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">
<p>An internal API-first strategy focusing on private APIs will inevitably raise budget questions.
Who will pay for the brand new mutualized API platform?
Who will pay for the new infrastructure needed to host API implementations?
Who will pay for the developments?
Neglecting those questions or choosing the wrong answers will negatively impact the API-first strategy, possibly leading it to its doom.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list border-left">
      
      <ul class="list-group list-group-flush">
        
          
          
          <li class="list-group-item"><a href="/when-internal-api-platform-billing-model-collides-with-apifirst-strategy/">1 - When internal API platform billing model collides with API-First strategy</a></li>
          
        
          
          
          <li class="list-group-item"><a href="/when-internal-api-development-and-hosting-costs-collide-with-apifirst-strategy/">2 - When internal API development and hosting costs collide with API-First strategy</a></li>
          
        
          
          
          <li class="list-group-item active">3 - Why monetizing and crowdfunding internal/private APIs?</li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<h1 id="what-a-privateinternal-api-is">What a private/internal API is</h1>

<p>In the API world, there are 2 types of APIs. The ones an organization provides to the outside world and the ones that are only used by the organization itself.</p>

<p>When providing APIs to the outside world, APIs are “public APIs” if anyone can use them in a self-service fashion and “partner APIs” if their access is restricted to selected partners or customers.</p>

<p>All other APIs that are only used by the organization which has created them are called “private APIs” or “internal APIs”. While it’s obvious an API exposed and consumed inside the organization’s infrastructure is private, know that an API such as a mobile backend for frontend API exposed on the internet is also private … as long as it is consumed only by the organization itself.</p>

<p>Note that according to Jeff Bezos’ mandate, a private API should be able to become a partner or a public one instantly.</p>

<h1 id="private-apis-may-affect-the-budget-balance">Private APIs may affect the budget balance</h1>

<p>Jumping into the API-first train, even only focusing on private APIs, has many benefits like a better architecture and faster time to market. But it has also more concerning consequences, especially on the budget balance. Indeed as we have seen in the two previous posts of this series, an organization may need to build an API platform, and some teams without much IT may raise their investments in that domain. In the end, the global balance of investing in private APIs will be positive, but money may have to move from one pocket to another.</p>

<p>While budgeting a central API platform may more or less easily pass in the “business as usual shared by all business lines/teams” budget, the teams without much IT desperately need to see their budget increased, especially if they are support teams that do not generate value directly. If they don’t get more money, they won’t be able to build and provide APIs. The same goes for teams with a more comfortable budget, having their APIs used more means they will need more infrastructure-horse-power and so more money.</p>

<p>As we are talking about API and the need for money: why not explore the monetization solution?</p>

<h1 id="what-monetizing-an-api-means">What monetizing an API means</h1>

<p>Monetizing an API means generating value from its consumption. It often means charging for its use. The most common business model is charging consumers based on the number of API calls they do.</p>

<p>But a monetized API can generate indirect revenue. For instance, a bank will provide access to its “Loan subscription API” to anyone because it will bring new customers and so generate revenue. Consumers make money in the process, they are usually paid for the new customer they bring.</p>

<p>While public or partner API monetization is a no-brainer, monetizing private APIs is quite uncommon. To be precise, we’re not talking about taking a private API and making it public, but keeping it private and making other teams inside the organization pay to use it.</p>

<h1 id="monetizing-private-apis">Monetizing private APIs</h1>

<p>From the private API provider’s perspective, making other teams pay to use their APIs could be interesting to pay for API enhancements, infrastructure maintenance, and scalable infrastructure for instance.</p>

<p>From the consumers’ perspective, that’s another story. They must understand the value they get from paying to use other teams’ APIs. But it’s not that complicated to find arguments. For instance, getting real-time data over HTTP is far more interesting than retrieving files over FTP daily (which means data storage and rebuilding an API on top of that; imagine 10 teams doing the same thing). It could also mean no more need to do some error-prone data processing on their side, which means safer business processes and probably less money spent fixing the faulty ones. All that being usually synonym of a faster time-to-market (time-to-delivery).</p>

<p>But if providers have no money in the first place, they won’t be able to build APIs at all.</p>

<h1 id="crowdfunding-to-kickstart-private-apis">Crowdfunding to kickstart private APIs</h1>

<p>Indeed, API monetization brings money only once the APIs are consumed. Teams with not much IT budgets will need an initial investment to get started. As their API will probably benefit many inside the organization, why not ask them to participate in that initial investment. Joining budgets (and forces) will definitely help less-IT teams jump into the API-first train.</p>

<p>So, as a future API product owner, you should analyze how others interact with your team to detect the use cases where putting API in place will benefit you and other teams. More often than not, you already know them as they are probably already listed in some “pain points” list. Then contact the other teams to start the API conversation, you may be surprised by the results.</p>

<h1 id="invest-for-the-greater-good">Invest for the greater good</h1>

<p>Will internal/private API monetization and crowdfunding succeed? That depends on the practice and relationships in your organization, but these are options that should be investigated. What is sure is that the organization as a whole will have to invest wisely to ensure the success of its private/internal API-first strategy. The return on investment will be huge, so don’t be afraid, at any level, to invest for the greater good in private/internal APIs.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Jumping into the API-first train, even only focusing on private/internal APIs, will have an impact on budgets. Organizations need to find ways to redistribute budgets in order to enable any team that needs to provide APIs to do it in the best possible conditions. Is monetizing private/internal API the solution? Would crowdfunding private make sense?]]></summary></entry><entry><title type="html">When internal API development and hosting costs collide with API-First strategy</title><link href="https://apihandyman.io/when-internal-api-development-and-hosting-costs-collide-with-apifirst-strategy/" rel="alternate" type="text/html" title="When internal API development and hosting costs collide with API-First strategy" /><published>2022-04-27T00:00:00-05:00</published><updated>2022-04-27T00:00:00-05:00</updated><id>https://apihandyman.io/when-internal-api-development-and-hosting-costs-collide-with-apifirst-strategy</id><content type="html" xml:base="https://apihandyman.io/when-internal-api-development-and-hosting-costs-collide-with-apifirst-strategy/"><![CDATA[<p>An often unintended consequence of an internal API-first strategy is having teams with not much IT jumping, willingly or not, in the API train. That inevitably will raise budget questions which answers will determine the success of the API-first strategy.</p>

<!--more-->

<h1 id="jumping-into-the-api-train">Jumping into the API train</h1>

<p>When engaging on the API-first journey, they are often parts (business lines, departments, teams, …) of the organizations that are left behind. The focus is often put on the parts that directly create value. The ones that could take advantage of APIs to provide new services to direct customers or the ones that will possibly provide APIs to the outside world. But (big) organizations often rely on more or less hidden support teams to operate. Those support functions could be HR, the risk department (if you’re a bank), or some teams managing central data repositories.</p>

<p>Depending on their nature and relationships with other parts of the organization, they will more or less willingly jump into the API train. The HR department may need to choose better software solutions that provide APIs and hide them behind API façades though they never do developments. The risk department which was providing data through database extractions could be overwhelmed with “please create an API providing risk processing services” requests. The central data repositories department which was also relying on data extraction may want to create many APIs rapidly to enhance their services by providing real-time data.</p>

<h1 id="less-it-harder-api">Less IT, harder API</h1>

<p>Jumping into the API train means new developments and new infrastructures to host the APIs. Depending on the size of your IT, it may be more or less complicated. That may not be a big problem for the ultra-hyper-visible-making-much-money departments, but for those support departments, APIs have a huge impact on how they operate their small IT. The API train ticket may be too high for them.</p>

<p>The capacity to deliver new developments depends on many factors but one important one is how many people you can allocate to work on something. And often those support departments don’t have many people working on IT. So they may have to rob Peter to pay Paul and choose between some existing initiative and the new API one.</p>

<p>More than the number of people, there are also skills to take care of. Indeed sometimes such departments never have built APIs or even web applications. Train them will take time, and so money. In the beginning, delivering APIs will take a longer time, and so much money. Hiring new developers even temporarily will cost money.</p>

<p>And even if development capacities and skills are there, the support departments often have a limited budget for their infrastructure. Why? Because they didn’t need much infrastructure before APIs came to change everything. Hosting a simple new application (an API in that case) may be a huge problem.</p>

<h1 id="how-to-help-them">How to help them?</h1>

<p>Engaging in becoming API-first, even at an internal level, may lead to a huge transformation. Some departments which were not “very IT”, will more or less forcibly need to invest more in IT. That requires the whole organization to help them. Here are a few ideas:</p>

<ul>
  <li>If the public-facing API-first initiative generates new revenue it may be used to increase the budget of the hidden support departments.</li>
  <li>Providing a ready-to-use API platform for free or very low cost (see <a href="https://apihandyman.io/when-internal-api-platform-billing-model-collides-with-apifirst-strategy/">When internal API platform billing model collides with API-First strategy</a>) will help them not raise too much their infrastructure costs.</li>
  <li>Providing temporary development support (provided by the “central API team”) for free could help deliver the awaited APIs faster. It could also them grow their API skills in the making. But that should only be done if the department keeps control of what is built and if what is built is done like they’re used to.</li>
</ul>

<p>There is another option that could be used, but I keep it for another post.</p>

<h1 id="no-money-no-api">No money, no API</h1>

<p>What is sure is that if those small-budget departments are not helped with their development and infrastructure, they will probably continue operating like before without APIs or take an awfully long time to deliver much-awaited APIs. Some other departments with more budget may decide to build APIs they are not supposed to build because of that (that’s a terrible idea, read <a href="https://apihandyman.io/dont-organize-apis-against-ownership/">Don’t organize APIs against ownership</a>). All that may hinder the success of the organization’s API-first initiative.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[An often unintended consequence of an internal API-first strategy is having teams with not much IT jumping, willingly or not, in the API train. That inevitably will raise budget questions which answers will determine the success of the API-first strategy.]]></summary></entry><entry><title type="html">Rendering simple text tweets with their authors</title><link href="https://apihandyman.io/rendering-simple-text-tweets-with-their-authors/" rel="alternate" type="text/html" title="Rendering simple text tweets with their authors" /><published>2022-04-25T00:00:00-05:00</published><updated>2022-04-25T00:00:00-05:00</updated><id>https://apihandyman.io/rendering-simple-text-tweets-with-their-authors</id><content type="html" xml:base="https://apihandyman.io/rendering-simple-text-tweets-with-their-authors/"><![CDATA[<p>Let’s learn to use Twitter v2 API tweets lookup operations to render simple text tweets and their author just like Twitter does. We’ll learn a few things about API design and API documentation in general and Postman based API documentation in particular in the making. I hope this will give you some ideas for the design and documentation of your API.</p>

<!--more-->

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">Twitter API v2 Tips and Tricks Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">
<p>This post is a “Twitter v2 API Tips And Tricks Post” in which I share with Postman collections the tips and tricks I learn while using Twitter v2 API.
You can either:</p>

<ul>
  <li>Read this post</li>
  <li>Read the collection documentation on <a href="https://www.postman.com/apihandyman/workspace/twitter-api-v2-tips-and-tricks/documentation/143378-6459d6b0-46fb-44fd-ace4-7f5e587a1d95">Postman network</a></li>
  <li>Use this <a href="https://god.gw.postman.com/run-collection/143378-6459d6b0-46fb-44fd-ace4-7f5e587a1d95?action=collection%2Ffork&amp;collection-url=entityId%3D143378-6459d6b0-46fb-44fd-ace4-7f5e587a1d95%26entityType%3Dcollection"><img src="/images/commons/run-in-postman.svg" alt="Run in Postman" /></a> button to fork the collection directly in Postman</li>
  <li>Get the collection from <a href="https://github.com/apihandyman/twitter-api-v2-tips-and-tricks/tree/main/rendering-simple-text-tweets-with-their-authors">Github</a> to import it in Postman. (Click on the “View complete collection documentation” link in lower right corner to see documentation in full screen after fork)</li>
</ul>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list border-left">
      
      <ul class="list-group list-group-flush">
        
          
          
          <li class="list-group-item"><a href="/what-can-we-learn-from-tweets-lookup-error-responses-of-twitter-v2-api/">What can we learn from tweets lookup error responses of Twitter v2 API?</a></li>
          
        
          
          
          <li class="list-group-item active">Rendering simple text tweets with their authors</li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<p>We will concentrate on making the appropriate API calls and processing the data. We will not dive into the HandlebarJS + Bootstrap rendering, feel free to read this “<a href="https://apihandyman.io/how-to-use-bootstrap-in-postman-visualizer/">How to use Bootstrap in Postman Visualizer</a>” collection/post and look the tests scripts of the requests. You can also read more about how the collection works by looking at the Appendices section.</p>

<p>If you’re more interested in the learnings on API design and API documentation, you can jump directly to the API design and documentation take aways section.</p>

<h1 id="twitter-v2-api-tweets-lookup">Twitter v2 API tweets lookup</h1>

<p>With Twitter v2 API, you can get tweets using <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/introduction">the lookup operations</a> <code>GET /2/tweets/:tweetid</code> (single tweet) and <code>GET /2/tweets?ids=:tweetId1,tweetId2,...tweetId100</code> (multiple tweets). By requesting additional fields and the expansions of some of them, you can get the exact same data that are shown on Twitter website or mobile application. We’ll learn to use those operations to get the data needed and process them to render simple text tweets (without hastags, mentions, urls, medias, polls, …) and their author just like Twitter does.</p>

<h1 id="prerequisites">Prerequisites</h1>

<p>The collection requires an environment containing the variables defined in the table below. You can fork the following environments:</p>

<ul>
  <li><a href="https://www.postman.com/apihandyman/workspace/twitter-v2-api-tips-and-tricks/environment/143378-4f632c31-7cc7-43bb-a0b0-1dcce3edbec9">Rendering simple text tweets with their authors Mock</a> environment: Use a mock. It’s ready to use, there’s nothing to modify. You’ll be limited to the data the mock returns and won’t be able to modify the requests but all visualizations will work.</li>
  <li><a href="https://www.postman.com/apihandyman/workspace/twitter-v2-api-tips-and-tricks/environment/143378-5d07ba2d-7410-4670-b808-03657cb2ff04">Rendering simple text tweets with their authors Production</a> environment: Use the real Twitter v2 API. It requires you to set a Twitter API bearer token (see below) but you’ll be able to choose the tweets used in the requests and modify the requests.</li>
</ul>

<div class="alert alert-danger">
  <div class="row">
    <div class="col col-auto">
      <h4 class="alert-heading" style="font-size:3rem;">⛔</h4>
    </div>
    <div class="col"><p>️Never store API tokens in initial value, use the current value. Read <a href="https://blog.postman.com/how-to-use-api-keys/">How to use API Keys</a> to learn more.</p>
</div>
  </div>
</div>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>api_server_basepath</td>
      <td>The server and base path of the API. For the production Twitter it’s https://api.twitter.com/2 and for the mock it’s https://46c813b3-7bd4-4bf7-9eac-1f56f2ccc813.mock.pstmn.io</td>
    </tr>
    <tr>
      <td>twitter_token</td>
      <td>(Only for production environment) A Twitter API bearer token (Read <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">Twitter API documentation</a> to get one) used in Authorization tab of the collection. Without this value <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">you’ll get a surprise error message</a> when sending a request.</td>
    </tr>
  </tbody>
</table>

<h1 id="getting-the-same-data-as-twitter">Getting the same data as Twitter</h1>

<p>To achieve the following result, we’ll start by constructing a request to retrieve the data we need to render a simple text tweet and its author.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/rendering-simple-text-tweets-with-their-authors/01-rendered-tweet.png" class="figure-img img-fluid" /></figure>
</div>

<p>The pieces of data we need are:</p>

<ul>
  <li>The tweet’s text</li>
  <li>Its creation date</li>
  <li>The name of the application that created it</li>
  <li>The author’s username</li>
  <li>Their name</li>
  <li>Their image profile URL</li>
</ul>

<h2 id="getting-a-tweet-with-default-data">Getting a tweet with default data</h2>

<p>By default, <code>GET /tweets/:tweetId</code> only returns the <code>id</code> and the <code>text</code> of a tweet.</p>

<div class="card card-code text-white bg-dark border-dark">
   
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  
  <div class="card-body">
    <div class="row m-0 pt-2 align-items-start" style="background-color: #2a2139;">
      <div class="col col-auto pl-3 pr-0 pb-1"><span class="badge http-get mr-2" style="font-size:1em;">GET</span><code class="language-http" style="background: transparent !important; overflow-wrap:break-word">https://api.twitter.com/2/tweets/:tweetId</code></div>
    </div>
     
    <div class="col col-auto pl-0 pr-0">
      <pre class="code-copy line-numbers language-"><code class="code-block"></code></pre>
    </div>
    
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;id&quot;: &quot;1511761169727565829&quot;,
        &quot;text&quot;: &quot;This is a single line tweet&quot;
    }
}</code></pre>
  </div>
</div>

<div class="alert alert-warning">
  <div class="row">
    <div class="col col-auto">
      <h4 class="alert-heading" style="font-size:3rem;">💡</h4>
    </div>
    <div class="col"><p>In any response of Twitter v2 API, the returned data are encapsulated in a <code>data</code> property. This approach allows adding additional data and metadata without mixing them with the “real” business/subject matter data. The Twitter API design is similar to the <a href="https://jsonapi.org/">JSON:API</a> format.</p>
</div>
  </div>
</div>

<h2 id="adding-tweets-creation-date-and-source-fields">Adding tweet’s creation date and source fields</h2>

<p>We can add the <code>tweet.fields</code> query parameter to request the other tweet’s data we need, hence <code>created_at</code> (creation date) and <code>source</code> (name of the application that sent the tweet).</p>

<div class="alert alert-primary">
  <div class="row">
    <div class="col col-auto">
      <h4 class="alert-heading" style="font-size:3rem;">🔗</h4>
    </div>
    <div class="col"><p>Check the <a href="https://www.postman.com/apihandyman/workspace/twitter-v2-api-tips-and-tricks/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229">Guess how Tweets lookup parameters work</a> collection to discover how to guess the other possible values (and other parameters).</p>
</div>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
   
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  
  <div class="card-body">
    <div class="row m-0 pt-2 align-items-start" style="background-color: #2a2139;">
      <div class="col col-auto pl-3 pr-0 pb-1"><span class="badge http-get mr-2" style="font-size:1em;">GET</span><code class="language-http" style="background: transparent !important; overflow-wrap:break-word">https://api.twitter.com/2/tweets/:tweetId?tweet.fields=created_at,source</code></div>
    </div>
     
    <div class="col col-auto pl-0 pr-0">
      <pre class="code-copy line-numbers language-"><code class="code-block"></code></pre>
    </div>
    
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-line="5-6" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;id&quot;: &quot;1511761169727565829&quot;,
        &quot;text&quot;: &quot;This is a single line tweet&quot;,
        &quot;created_at&quot;: &quot;2022-04-06T17:42:04.000Z&quot;,
        &quot;source&quot;: &quot;Twitter Web App&quot;
    }
}</code></pre>
  </div>
</div>

<div class="alert alert-warning">
  <div class="row">
    <div class="col col-auto">
      <h4 class="alert-heading" style="font-size:3rem;">💡</h4>
    </div>
    <div class="col"><p>Providing the possibility of selecting the field returned allows for reducing data volume and possibly the load on the server-side if the fields come from different subsystems. This is an approach that is quite useful but not often seen. It is similar to what JSON:API proposes with its <a href="https://jsonapi.org/format/#fetching-sparse-fieldsets">sparse fields</a> features.</p>
</div>
  </div>
</div>

<h2 id="expanding-author-data">Expanding author data</h2>

<p>The only author’s piece of data that is directly available in a tweet is their id (<code>author_id</code>). Hopefully, we don’t need a separate call to the <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference">User lookup</a> <code>GET /users/:userId</code> operation. Indeed, we can request to expand resources linked to a tweet by using the <code>expansions</code> query parameter.</p>

<div class="alert alert-warning">
  <div class="row">
    <div class="col col-auto">
      <h4 class="alert-heading" style="font-size:3rem;">💡</h4>
    </div>
    <div class="col"><p>It’s pretty neat; it allows to get related data only when needed easily. Like with <code>tweet.fields</code>, it reduces data volume and possibly reduces response time and load on the server-side if the expanded elements come from other components.</p>
</div>
  </div>
</div>

<p>So to expand the author’s data, we put <code>author_id</code> in the <code>expansions</code> query parameter. It’s a comma-separated list; you can provide multiple values like with <code>tweet.fields</code>. Doing that will magically add the <code>author_id</code> field to the tweet. If you wish to get the <code>author_id</code> without expanding the author data, add it to the <code>tweet.fields</code> query parameter as we did in the previous request.</p>

<div class="card card-code text-white bg-dark border-dark">
   
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  
  <div class="card-body">
    <div class="row m-0 pt-2 align-items-start" style="background-color: #2a2139;">
      <div class="col col-auto pl-3 pr-0 pb-1"><span class="badge http-get mr-2" style="font-size:1em;">GET</span><code class="language-http" style="background: transparent !important; overflow-wrap:break-word">https://api.twitter.com/2/tweets/:tweetId?tweet.fields=created_at,source&amp;expansions=author_id</code></div>
    </div>
     
    <div class="col col-auto pl-0 pr-0">
      <pre class="code-copy line-numbers language-"><code class="code-block"></code></pre>
    </div>
    
  </div>
</div>

<p>The expanded elements will be returned in the <code>includes</code> property. In the case of user expanded data, they will be located in the <code>includes.users</code> list. We’ll see in a later request how to process them.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-line="7,9-17" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;id&quot;: &quot;1511761169727565829&quot;,
        &quot;text&quot;: &quot;This is a single line tweet&quot;,
        &quot;source&quot;: &quot;Twitter Web App&quot;,
        &quot;created_at&quot;: &quot;2022-04-06T17:42:04.000Z&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;
    },
    &quot;includes&quot;: {
        &quot;users&quot;: [
            {
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;username&quot;: &quot;apihandyman&quot;
            }
        ]
    }
}</code></pre>
  </div>
</div>

<h2 id="adding-users-profile-image-url-field">Adding user’s profile image URL field</h2>

<p>We only got a user’s default data when expanding the author’s data, hence their <code>id</code>, <code>username</code>, and <code>name</code>. But we need the author’s profile image URL. We can request it by using the <code>user.fields</code> query parameter. It works like the <code>tweet.fields</code> query parameter but for user resources (the author in our case).</p>

<p>We set its value to <code>profile_image_url</code> to get the last piece of data we need. This additional field will go into the element representing the author in <code>includes.users</code> list.</p>

<div class="card card-code text-white bg-dark border-dark">
   
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  
  <div class="card-body">
    <div class="row m-0 pt-2 align-items-start" style="background-color: #2a2139;">
      <div class="col col-auto pl-3 pr-0 pb-1"><span class="badge http-get mr-2" style="font-size:1em;">GET</span><code class="language-http" style="background: transparent !important; overflow-wrap:break-word">https://api.twitter.com/2/tweets/:tweetId?tweet.fields=created_at,source&amp;expansions=author_id&amp;user.fields=profile_image_url</code></div>
    </div>
     
    <div class="col col-auto pl-0 pr-0">
      <pre class="code-copy line-numbers language-"><code class="code-block"></code></pre>
    </div>
    
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-line="15" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;id&quot;: &quot;1511761169727565829&quot;,
        &quot;text&quot;: &quot;This is a single line tweet&quot;,
        &quot;source&quot;: &quot;Twitter Web App&quot;,
        &quot;created_at&quot;: &quot;2022-04-06T17:42:04.000Z&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;
    },
    &quot;includes&quot;: {
        &quot;users&quot;: [
            {
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;
            }
        ]
    }
}</code></pre>
  </div>
</div>

<h1 id="processing-and-rendering-the-data">Processing and rendering the data</h1>

<p>Now we have all the data we need, let’s see how to process them to render simple text tweets and their authors à la Twitter.</p>

<h2 id="rendering-a-one-line-tweet">Rendering a one line tweet</h2>

<p>The directly related tweet data are pretty simple to get. The text (<code>text</code>), creation date (<code>created_at</code>), and name of the application that sent the tweet (<code>source</code>) are located in the <code>data</code> property that holds the requested tweet.</p>

<p>The only transformation done on these pieces of data is formating the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601</a> <code>created_at</code> date from <code>2022-04-06T17:42:04.000Z</code> to a local format.</p>

<div class="alert alert-warning">
  <div class="row">
    <div class="col col-auto">
      <h4 class="alert-heading" style="font-size:3rem;">💡</h4>
    </div>
    <div class="col"><p>It is recommended to return dates with time precision (<code>2022-04-06T17:42:04.000Z</code>) only when needed (which is the case here) because dealing with timezones is not always simple. You’ll notice the Z timezone is used which is also recommended. Dates with time precision should always be returned using this UTC offset (<a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time">Coordinated universal time</a>).</p>
</div>
  </div>
</div>

<p>For the author’s data, you’ll need to get them from the <code>includes.users</code> list. Though there’s only one user, for now, it is recommended to select the user by looking for the one having an <code>id</code> equal to the tweet’s <code>author_id</code>.</p>

<p>After sending the request, click on the Visualizer button in the response to see this rendering.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/rendering-simple-text-tweets-with-their-authors/02-rendering-a-one-line-tweet.png" class="figure-img img-fluid" /></figure>
</div>

<div class="card card-code text-white bg-dark border-dark">
   
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  
  <div class="card-body">
    <div class="row m-0 pt-2 align-items-start" style="background-color: #2a2139;">
      <div class="col col-auto pl-3 pr-0 pb-1"><span class="badge http-get mr-2" style="font-size:1em;">GET</span><code class="language-http" style="background: transparent !important; overflow-wrap:break-word">https://api.twitter.com/2/tweets/:tweetId?tweet.fields=created_at,source&amp;expansions=author_id&amp;user.fields=profile_image_url</code></div>
    </div>
     
    <div class="col col-auto pl-0 pr-0">
      <pre class="code-copy line-numbers language-"><code class="code-block"></code></pre>
    </div>
    
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;created_at&quot;: &quot;2022-04-06T17:42:04.000Z&quot;,
        &quot;id&quot;: &quot;1511761169727565829&quot;,
        &quot;text&quot;: &quot;This is a single line tweet&quot;,
        &quot;source&quot;: &quot;Twitter Web App&quot;
    },
    &quot;includes&quot;: {
        &quot;users&quot;: [
            {
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;id&quot;: &quot;2943613557&quot;
            }
        ]
    }
}</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-collapsed code-copy" data-line="14-24,37" data-start="1"><code class="code-block">// Note: the HTTP status test is located in collection&#39;s Tests script


const response = pm.response.json();
if(response.data !== undefined){

    /*-----------------------------------------------*/
    /* Getting needed data from Twitter API response */
    /*-----------------------------------------------*/


    // The tweet author&#39;s data are returned only if expansions contains author_id
    // The expanded data are located in include.users list
    const author = response.includes.users.find(user =&gt; user.id === response.data.author_id);
    const tweet = {
        text: response.data.text, // Always returned
        created_at: response.data.created_at, // Returned if requested in user.fields
        source: response.data.source, // Returned if requested in user.fields 
        author: {
            name: author.name, // Always returned
            username: author.username, //Always returned
            profile_image_url: author.profile_image_url // Returned if requested in user.fields
        }
    }

    /*------------*/
    /* Visualizer */
    /*------------*/

    // Preparing data for HandlebarJS template
    //----------------------------------------

    // The tweet data (shown in upper left card)
    const handlebarTweet =  {
        text: tweet.text,
        author: tweet.author,
        created_at: new Date(tweet.created_at).toLocaleString(), // Formatting ISO8601 date returned by the API
        source: tweet.source   
    }

    // The source of each tweet piece of data (shown in upper right card)
    const handlebarTweetDataSource = {
        text: &quot;data.text&quot;,
        created_at: &quot;new Date(data.created_at).toLocaleString()&quot;,
        source: &quot;data.source&quot;,
        author: {
            name: &quot;includes.users.find(user =&gt; user.id === data.author_id).name&quot;,
            username: &quot;includes.users.find(user =&gt; user.id === data.author_id).username&quot;,
            profile_image_url: `includes.users.find(
    user =&gt; user.id === data.author_id)
    .profile_image_url`
        }

    }

    // The raw json data returned by Twitter API
    const handlebarTweetJson = JSON.stringify(response, null, 2);

    // Bootstrap and prismsjs css and js
    const handlebarCssjs = {
        bootstrap: pm.collectionVariables.get(&quot;template_cssjs_bootstrap&quot;),
        prismsjs: pm.collectionVariables.get(&quot;template_cssjs_prismjs&quot;)
    }

    // Putting everything in a single object
    // that will be passed to HandlebarJS template
    const handlebarData = {
        tweet: handlebarTweet,
        tweetDataSource: handlebarTweetDataSource,
        tweetJson: handlebarTweetJson,
        cssjs: handlebarCssjs
    };

    // Handlebar HTML template
    const handlebarTemplate = `
        &lt;!-- CSS and JS --&gt;
        {{{cssjs.bootstrap}}}
        {{{cssjs.prismsjs}}}
        &lt;!-- Content --&gt;
        &lt;!-- Flex Container Start --&gt;
        &lt;div class=&quot;d-flex flex-column&quot; style=&quot;font-size: larger;&quot;&gt;
            &lt;!-- First Row Start --&gt;
            &lt;div class=&quot;d-flex flex-row mb-2&quot;&gt;
                &lt;!-- Rendered Data Card Start --&gt;
                &lt;div class=&quot;card me-2&quot;&gt;
                    &lt;h5 class=&quot;card-header&quot;&gt;Rendered Data&lt;/h5&gt;
                    &lt;div class=&quot;card-body&quot;&gt;
                        &lt;div class=&quot;d-flex flex-row align-items-stretch&quot;&gt;
                            &lt;div class=&quot;me-3&quot;&gt;
                                &lt;img src=&quot;{{tweet.author.profile_image_url}}&quot; class=&quot;rounded-circle&quot;&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;&quot;&gt;
                                &lt;h5 class=&quot;card-title&quot;&gt;{{tweet.author.name}}&lt;/h5&gt;
                                &lt;h6 class=&quot;card-subtitle mb-2 text-muted&quot;&gt;@{{tweet.author.username}}&lt;/h6&gt;
                                &lt;p class=&quot;card-text&quot;&gt;{{tweet.text}}&lt;/p&gt;
                                &lt;p class=&quot;card-text text-muted&quot;&gt;{{tweet.created_at}} - {{tweet.source}}&lt;/p&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;!-- Rendered Data Card End --&gt;
                &lt;!-- Data Source Card Start --&gt;
                &lt;div class=&quot;card me-2 flex-grow-1&quot; &gt;
                    &lt;h5 class=&quot;card-header&quot;&gt;Data Source (JavaScript)&lt;/h5&gt;
                    &lt;div class=&quot;card-body&quot; style=&quot;background-image:linear-gradient(to bottom,#2a2139 75%,#34294f)&quot;&gt;
                        &lt;div class=&quot;d-flex flex-row align-items-stretch&quot;&gt;
                            &lt;div class=&quot;me-3&quot;&gt;
                                &lt;pre class=&quot;language-js p-0&quot; style=&quot;background: transparent !important&quot;&gt;&lt;code class=&quot;border-0 p-0&quot;&gt;{{tweetDataSource.author.profile_image_url}}&lt;/code&gt;&lt;/pre&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;&quot; &gt;
                                &lt;h5 class=&quot;card-title&quot;&gt;&lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{tweetDataSource.author.name}}&lt;/code&gt;&lt;/h5&gt;
                                &lt;h6 class=&quot;card-subtitle mb-2 text-muted&quot;&gt;@&lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{tweetDataSource.author.username}}&lt;/code&gt;&lt;/h6&gt;
                                &lt;p class=&quot;card-text&quot;&gt;&lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{tweetDataSource.text}}&lt;/code&gt;&lt;/p&gt;
                                &lt;p class=&quot;card-text text-muted&quot;&gt;&lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{tweetDataSource.created_at}}&lt;/code&gt; - &lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{data.source}}&lt;/code&gt;&lt;/p&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;!-- Data Source Card End --&gt;
            &lt;/div&gt;
            &lt;!-- First Row End --&gt;
            &lt;!-- Second Row Start --&gt;
            &lt;div class=&quot;d-flex flex-row&quot;&gt;
                &lt;!-- Response JSON Data Card Start --&gt;
                &lt;div class=&quot;card me-2 mb-2 flex-grow-1&quot;&gt;
                    &lt;h5 class=&quot;card-header&quot;&gt;Response Data (JSON)&lt;/h5&gt;
                    &lt;div class=&quot;card-body p-0&quot;&gt;
                        &lt;pre class=&quot;m-0 p-0&quot;&gt;&lt;code class=&quot;language-json border-0&quot;&gt;{{{tweetJson}}}&lt;/code&gt;&lt;/pre&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;!-- Response JSON Data Card End --&gt;
            &lt;/div&gt;
            &lt;!-- Second Row End --&gt;
        &lt;/div&gt;
        &lt;!-- Flex Container End --&gt;
    `;

    // Set visualizer template and data
    pm.visualizer.set(handlebarTemplate, handlebarData);
}</code></pre>
  </div>
</div>

<h2 id="rendering-a-multiline-tweet">Rendering a multiline tweet</h2>

<p>If you replace the tweet id with one corresponding to a multiline tweet the rendering may not work very well, as all the text is shown on one line. In order to keep the newlines <code>\n</code> that may be present in the text field, you can add the style <code>white-space: pre-wrap</code> to the HTML tag holding that piece of data (in a true application you would do that using a separate CSS and not using an inline style).</p>

<div class="card card-code text-white bg-dark border-dark">
   
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  
  <div class="card-body">
    <div class="row m-0 pt-2 align-items-start" style="background-color: #2a2139;">
      <div class="col col-auto pl-3 pr-0 pb-1"><span class="badge http-get mr-2" style="font-size:1em;">GET</span><code class="language-http" style="background: transparent !important; overflow-wrap:break-word">https://api.twitter.com/2/tweets/:tweetId?tweet.fields=author_id,created_at,geo,id,source,text&amp;expansions=author_id&amp;user.fields=profile_image_url</code></div>
    </div>
     
    <div class="col col-auto pl-0 pr-0">
      <pre class="code-copy line-numbers language-"><code class="code-block"></code></pre>
    </div>
    
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-line="3" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;text&quot;: &quot;This is a tweet\n- with\n- multiple\n- lines&quot;,
        &quot;created_at&quot;: &quot;2022-04-06T17:43:08.000Z&quot;,
        &quot;id&quot;: &quot;1511761439261925384&quot;,
        &quot;source&quot;: &quot;Twitter Web App&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;
    },
    &quot;includes&quot;: {
        &quot;users&quot;: [
            {
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;
            }
        ]
    }
}</code></pre>
  </div>
</div>

<p>After sending the request, click on the Visualizer button in the response to see this rendering.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/rendering-simple-text-tweets-with-their-authors/03-rendering-a-multiline-tweet.png" class="figure-img img-fluid" /></figure>
</div>

<h2 id="rendering-multiple-tweets-from-multiple-authors">Rendering multiple tweets from multiple authors</h2>

<p>When retrieving multiple tweets from different authors, it works the same. The only difference is that when using <code>GET /tweets</code> the data field becomes a list to hold more than one tweet. We just have to go through that list and process each element just like we did with a single tweet.</p>

<div class="card card-code text-white bg-dark border-dark">
   
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  
  <div class="card-body">
    <div class="row m-0 pt-2 align-items-start" style="background-color: #2a2139;">
      <div class="col col-auto pl-3 pr-0 pb-1"><span class="badge http-get mr-2" style="font-size:1em;">GET</span><code class="language-http" style="background: transparent !important; overflow-wrap:break-word">https://api.twitter.com/2/tweets?ids={{tweet_id_text}},{{tweet_id_text_multiline}},{{tweet_id_other_author}}&amp;tweet.fields=author_id,created_at,geo,id,source,text&amp;expansions=author_id&amp;user.fields=profile_image_url</code></div>
    </div>
     
    <div class="col col-auto pl-0 pr-0">
      <pre class="code-copy line-numbers language-"><code class="code-block"></code></pre>
    </div>
    
  </div>
</div>

<p>In the provided example, there are 3 tweets from 2 different authors in the list. That means the <code>includes.users</code> list now contains the data for 2 authors, but it does not affect the way we look for their data. Looking for the user whose <code>id</code> matches some <code>author_id</code> works the same.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: [
        {
            &quot;text&quot;: &quot;This is a single line tweet&quot;,
            &quot;source&quot;: &quot;Twitter Web App&quot;,
            &quot;id&quot;: &quot;1511761169727565829&quot;,
            &quot;created_at&quot;: &quot;2022-04-06T17:42:04.000Z&quot;,
            &quot;author_id&quot;: &quot;2943613557&quot;
        },
        {
            &quot;text&quot;: &quot;This is a tweet\n- with\n- multiple\n- lines&quot;,
            &quot;source&quot;: &quot;Twitter Web App&quot;,
            &quot;id&quot;: &quot;1511761439261925384&quot;,
            &quot;created_at&quot;: &quot;2022-04-06T17:43:08.000Z&quot;,
            &quot;author_id&quot;: &quot;2943613557&quot;
        },
        {
            &quot;text&quot;: &quot;I’m on the verge of starting a new blog about non API stuff such as my Reaper/Midi/Helix tinkering (that would at help me not to forget obscure configuration stuff that is not easily found)&quot;,
            &quot;source&quot;: &quot;Twitter for iPhone&quot;,
            &quot;id&quot;: &quot;1291806136774074368&quot;,
            &quot;created_at&quot;: &quot;2020-08-07T18:39:18.000Z&quot;,
            &quot;author_id&quot;: &quot;1327524403&quot;
        }
    ],
    &quot;includes&quot;: {
        &quot;users&quot;: [
            {
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;id&quot;: &quot;2943613557&quot;
            },
            {
                &quot;username&quot;: &quot;arno_di_loreto&quot;,
                &quot;name&quot;: &quot;Arnaud Lauret&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/1342523325969477632/AuqZ5guV_normal.jpg&quot;,
                &quot;id&quot;: &quot;1327524403&quot;
            }
        ]
    }
}</code></pre>
  </div>
</div>

<div class="alert alert-warning">
  <div class="row">
    <div class="col col-auto">
      <h4 class="alert-heading" style="font-size:3rem;">💡</h4>
    </div>
    <div class="col"><p>Having put the expanded author on the tweet is a very good design approach. It can greatly reduce the data volume in Twitter’s use case. Imagine retrieving a hundred tweets sent by a single person. Without that design, the data volume would be augmented by 99 x the author’s data volume. The downside is that some work is needed on the consumer side to put everything together, but it’s not that complicated to do. There’s a balance to find between providing ready-to-use data and data volume/server load, in this case, it’s pretty good.</p>
</div>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-collapsed code-copy" data-line="10-28" data-start="1"><code class="code-block">// Note: the HTTP status test is located in collection&#39;s Tests script

const response = pm.response.json();
if(response.data !== undefined){

    /*-----------------------------------------------*/
    /* Getting needed data from Twitter API response */
    /*-----------------------------------------------*/

    const tweets = [];
    // When using GET /tweets, response.data is a list
    response.data.forEach(dataItem =&gt; {
        // The tweet author&#39;s data are returned only if expansions contains author_id
        // The expanded data are located in include.users list at root level
        // (that means includes are not at each tweet level)
        const author = response.includes.users.find(user =&gt; user.id === dataItem.author_id);
        const tweet = {
            text: dataItem.text, // Always returned
            created_at: dataItem.created_at, // Returned if requested in user.fields
            source: dataItem.source, // Returned if requested in user.fields 
            author: {
                name: author.name, // Always returned
                username: author.username, //Always returned
                profile_image_url: author.profile_image_url // Returned if requested in user.fields
            }
        }
        tweets.push(tweet);
    });

    /*------------*/
    /* Visualizer */
    /*------------*/

    // Preparing data for HandlebarJS template
    //----------------------------------------

    const handlebarTweetsAndDataSources = [];
    tweets.forEach(function callback(tweet,index){
        // The tweets data (shown in first column cards)
        const handlebarTweet = {
            text: tweet.text,
            author: tweet.author,
            created_at: new Date(tweet.created_at).toLocaleString(), // Formatting ISO8601 date returned by the API
            source: tweet.source   
        };
        // The source of each tweet piece of data (shown in upper right card)
        const handlebarTweetDataSource = {
            text: `data[${index}].text`,
            created_at: `new Date(data[${index}].created_at).toLocaleString()`,
            source: `data[${index}].source`,
            author: {
                name: `includes.users.find(user =&gt; user.id === data[${index}].author_id).name`,
                username: `includes.users.find(user =&gt; user.id === data[${index}].author_id).username`,
                profile_image_url: `includes.users.find(
    user =&gt; user.id === data[${index}].author_id)
    .profile_image_url`
            }
        };
        handlebarTweetsAndDataSources.push({
            tweet: handlebarTweet,
            tweetDataSource: handlebarTweetDataSource
        })
    });
    
    // The raw json data returned by Twitter API
    const handlebarTweetsJson = JSON.stringify(response, null, 2);

    // Bootstrap and prismsjs css and js
    const handlebarCssjs = {
        bootstrap: pm.collectionVariables.get(&quot;template_cssjs_bootstrap&quot;),
        prismsjs: pm.collectionVariables.get(&quot;template_cssjs_prismjs&quot;)
    }

    // Putting everything in a single object
    // that will be passed to HandlebarJS template
    const handlebarData = {
        tweetsAndDataSources: handlebarTweetsAndDataSources,
        tweetsJson: handlebarTweetsJson,
        cssjs: handlebarCssjs
    };
console.log(handlebarData)
    // Handlebar HTML template
    const handlebarTemplate = `
        &lt;!-- CSS and JS --&gt;
        {{{cssjs.bootstrap}}}
        {{{cssjs.prismsjs}}}
        &lt;!-- Content --&gt;
        &lt;!-- Flex Container Start --&gt;
        &lt;div class=&quot;d-flex flex-column&quot; style=&quot;font-size: larger;&quot;&gt;
            {{#each tweetsAndDataSources}}
            &lt;!-- First Row Start --&gt;
            &lt;div class=&quot;d-flex flex-row mb-2&quot;&gt;
                &lt;!-- Rendered Data Card Start --&gt;
                &lt;div class=&quot;card me-2&quot; style=&quot;width:40rem;&quot;&gt;
                    &lt;h5 class=&quot;card-header&quot;&gt;Rendered Data&lt;/h5&gt;
                    &lt;div class=&quot;card-body&quot;&gt;
                        &lt;div class=&quot;d-flex flex-row align-items-stretch&quot;&gt;
                            &lt;div class=&quot;me-3&quot;&gt;
                                &lt;img src=&quot;{{tweet.author.profile_image_url}}&quot; class=&quot;rounded-circle&quot;&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;&quot;&gt;
                                &lt;h5 class=&quot;card-title&quot;&gt;{{tweet.author.name}}&lt;/h5&gt;
                                &lt;h6 class=&quot;card-subtitle mb-2 text-muted&quot;&gt;@{{tweet.author.username}}&lt;/h6&gt;
                                &lt;p class=&quot;card-text&quot; style=&quot;white-space: pre-wrap&quot;&gt;{{tweet.text}}&lt;/p&gt;
                                &lt;p class=&quot;card-text text-muted&quot;&gt;{{tweet.created_at}} - {{tweet.source}}&lt;/p&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;!-- Rendered Data Card End --&gt;
                &lt;!-- Data Source Card Start --&gt;
                &lt;div class=&quot;card me-2 flex-grow-1&quot; &gt;
                    &lt;h5 class=&quot;card-header&quot;&gt;Data Source (JavaScript)&lt;/h5&gt;
                    &lt;div class=&quot;card-body&quot; style=&quot;background-image:linear-gradient(to bottom,#2a2139 75%,#34294f)&quot;&gt;
                        &lt;div class=&quot;d-flex flex-row align-items-stretch&quot;&gt;
                            &lt;div class=&quot;me-3&quot;&gt;
                                &lt;pre class=&quot;language-js p-0&quot; style=&quot;background: transparent !important&quot;&gt;&lt;code class=&quot;border-0 p-0&quot;&gt;{{tweetDataSource.author.profile_image_url}}&lt;/code&gt;&lt;/pre&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;&quot; &gt;
                                &lt;h5 class=&quot;card-title&quot;&gt;&lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{tweetDataSource.author.name}}&lt;/code&gt;&lt;/h5&gt;
                                &lt;h6 class=&quot;card-subtitle mb-2 text-muted&quot;&gt;@&lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{tweetDataSource.author.username}}&lt;/code&gt;&lt;/h6&gt;
                                &lt;p class=&quot;card-text&quot;&gt;&lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{tweetDataSource.text}}&lt;/code&gt;&lt;/p&gt;
                                &lt;p class=&quot;card-text text-muted&quot;&gt;&lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{tweetDataSource.created_at}}&lt;/code&gt; - &lt;code class=&quot;language-js border-0&quot; style=&quot;background: transparent !important&quot;&gt;{{data.source}}&lt;/code&gt;&lt;/p&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;!-- Data Source Card End --&gt;
            &lt;/div&gt;
            &lt;!-- First Row End --&gt;
            {{/each}}
            &lt;!-- Second Row Start --&gt;
            &lt;div class=&quot;d-flex flex-row&quot;&gt;
                &lt;!-- Response JSON Data Card Start --&gt;
                &lt;div class=&quot;card me-2 mb-2 flex-grow-1&quot;&gt;
                    &lt;h5 class=&quot;card-header&quot;&gt;Response Data (JSON)&lt;/h5&gt;
                    &lt;div class=&quot;card-body p-0&quot;&gt;
                        &lt;pre class=&quot;m-0 p-0&quot;&gt;&lt;code class=&quot;language-json border-0&quot; style=&quot;overflow:scroll&quot;&gt;{{{tweetsJson}}}&lt;/code&gt;&lt;/pre&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;!-- Response JSON Data Card End --&gt;
            &lt;/div&gt;
            &lt;!-- Second Row End --&gt;
        &lt;/div&gt;
        &lt;!-- Flex Container End --&gt;
    `;

    // Set visualizer template and data
    pm.visualizer.set(handlebarTemplate, handlebarData);
}</code></pre>
  </div>
</div>

<p>After sending the request, click on the Visualizer button in the response to see this rendering.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/rendering-simple-text-tweets-with-their-authors/04-rendering-multiple-tweets.png" class="figure-img img-fluid" /></figure>
</div>

<h1 id="api-design-and-documentation-take-aways">API design and documentation take aways</h1>

<p>Retrieving, processing, and rendering simple text tweets should be quite simple now that you have read this tutorial. Let’s recap some interesting API design and documentation takeaways.</p>

<h2 id="api-design">API Design</h2>

<p>Here’s what we can learn from Twitter v2 API design:</p>

<ul>
  <li>Encapsulating data in a <code>data</code> (or other named) field allows adding additional data and metadata without mixing them with the “real” business/subject matter data. The Twitter API design is similar to the <a href="https://jsonapi.org/">JSON:API</a> format.</li>
  <li>Providing the possibility of selecting the field returned and the sub-ressources expanded allows to reduce data volume and also possibly reduce the response time and the load on the server-side if those data come from different subsystems. This is an approach that is quite useful but not often seen. It is similar to what the <a href="https://jsonapi.org/">JSON:API</a> format proposes.</li>
  <li>Putting the expanded sub-resources at the root level and not directly in each element allows for reducing data volumes.</li>
  <li>Always keep a balance between solving problems (data volume, response time, server loads) and bothering consumers. In the Twitter case, that balance is very good when it comes to making the link between the tweets and the expanded users.</li>
  <li>Using <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601</a> date format with <a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time">UTC</a> timezone is a good practice (I recommend reading this post by Jason Harmon on the topic: <a href="https://apiux.com/2013/03/20/5-laws-api-dates-and-times/">The 5 laws of API dates and times</a>)</li>
</ul>

<h2 id="api-documentation">API Documentation</h2>

<p>API documentation is often split in 2 separate types (though there are actually more, but that’s another story): reference documentation and use case documentation. We can compare the reference documentation to ingredients if the use case documentation is a recipe. With this tutorial, I tried to create the ideal use case documentation I look for when using APIs. It’s far from perfect, but it’s a good start.</p>

<p>Here are my takeaways on the topic:</p>

<ul>
  <li>Even a single operation can benefit from use-case-oriented documentation. In this case, I think it’s useful to understand how the Twitter API works globally (and avoid needless API calls, to get the tweet author for instance).</li>
  <li>Use-case-oriented documentation should not only cover how to make API calls but also how to process the returned data. That’s especially true in that case because data need to be processed to be put together (though it’s not that complicated work).</li>
  <li>When creating Postman collection-based documentation, providing several requests to show step by step how to build a complex one seems interesting. It allows explaining several features separately.</li>
  <li>Providing annotated examples of code in test scripts showing how to manipulate the returned data is also interesting.</li>
  <li>Providing a mock server returning the data needed by the request of the collection allows avoiding requiring creating an account to use the API (Twitter in this case). It has some limitations (not really possible to modify the requests) but all requests and their visualizations work.</li>
  <li>And last but not least, taking advantage of the visualizer to show in a more visual way how to manipulate the returned data looks definitely promising.</li>
</ul>

<p>I will definitely push more in those directions for my next API tutorials.</p>

<h1 id="appendices">Appendices</h1>

<h2 id="notes-about-the-collection">Notes about the collection</h2>

<p>The collection takes advantage of</p>

<ul>
  <li>Environment and collection variables</li>
  <li>Collection level Pre-Request and Test scripts</li>
  <li>Request level test scripts</li>
  <li>Response visualizers</li>
  <li>Third-party CSS and JS in the response visualizers</li>
</ul>

<h3 id="environment-variables">Environment variables</h3>

<p>The collection requires an environment containing the variables defined in the table below. You can fork the following environments:</p>

<ul>
  <li><a href="https://www.postman.com/apihandyman/workspace/twitter-v2-api-tips-and-tricks/environment/143378-4f632c31-7cc7-43bb-a0b0-1dcce3edbec9">Rendering simple text tweets with their authors Mock</a> environment: Use a mock. It’s ready to use, there’s nothing to modify. You’ll be limited to the data the mock returns and won’t be able to modify the requests but all visualizations will work.</li>
  <li><a href="https://www.postman.com/apihandyman/workspace/twitter-v2-api-tips-and-tricks/environment/143378-5d07ba2d-7410-4670-b808-03657cb2ff04">Rendering simple text tweets with their authors Production</a> environment: Use the real Twitter v2 API. It requires you to set a Twitter API bearer token (see below) but you’ll be able to choose the tweets used in the requests and modify the requests.</li>
</ul>

<div class="alert alert-danger">
  <div class="row">
    <div class="col col-auto">
      <h4 class="alert-heading" style="font-size:3rem;">⛔</h4>
    </div>
    <div class="col"><p>️Never store API tokens in initial value, use the current value. Read <a href="https://blog.postman.com/how-to-use-api-keys/">How to use API Keys</a> to learn more.</p>
</div>
  </div>
</div>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>api_server_basepath</td>
      <td>The server and base path of the API. For the production Twitter it’s <a href="https://api.twitter.com/2">https://api.twitter.com/2</a> and for the mock it’s <a href="https://46c813b3-7bd4-4bf7-9eac-1f56f2ccc813.mock.pstmn.io">https://46c813b3-7bd4-4bf7-9eac-1f56f2ccc813.mock.pstmn.io</a></td>
    </tr>
    <tr>
      <td>twitter_token</td>
      <td>(Only for production environment) A Twitter API bearer token (Read <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">Twitter API documentation</a> to get one) used in Authorization tab of the collection. Without this value <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">you’ll get a surprise error message</a> when sending a request.</td>
    </tr>
  </tbody>
</table>

<h3 id="collection-variables">Collection variables</h3>

<p>The collection uses the following collection variables in the requests:</p>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>tweet_id_text</td>
      <td>A real working tweet id. Feel free to update with one of your likings. To get this id, go to the Twitter website and open a tweet by clicking on it. You’ll see a URL like this one <a href="https://twitter.com/apihandyman/status/1387820661742112771">https://twitter.com/apihandyman/status/1387820661742112771</a> , the id is number number after status. Used in all requests except “Rendering a multiline tweet”.</td>
    </tr>
    <tr>
      <td>tweet_id_text_multiline</td>
      <td>The id of a multiline tweet. Feel free to update with one of your likings. To get this id, go to the Twitter website and open a tweet by clicking on it. You’ll see a URL like this one <a href="https://twitter.com/apihandyman/status/1387820661742112771">https://twitter.com/apihandyman/status/1387820661742112771</a> , the id is number number after status. Used only in the “Rendering a multiline tweet” and “Rendering multiple tweets from multiple authors” requests.</td>
    </tr>
    <tr>
      <td>tweet_id_other_author</td>
      <td>The id of a tweet of a different author than the previous ones. Feel free to update with one of your likings. To get this id, go to the Twitter website and open a tweet by clicking on it. You’ll see a URL like this one <a href="https://twitter.com/apihandyman/status/1387820661742112771">https://twitter.com/apihandyman/status/1387820661742112771</a> , the id is number number after status. Used only in the “Rendering multiple tweets from multiple authors” requests.</td>
    </tr>
  </tbody>
</table>

<p>There are other collection variables used by Pre-request and Test scripts that shouldn’t be modified (unless you want to break things):</p>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>expected_environment_variables</td>
      <td>The list of environment variable needed to make the collection work. Used by the collection level Pre-request script to avoid sending requests without the Twitter API bearer token. Look at <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">this collection/post</a> to learn more about that Postman trick (though the version here is slightly modified).</td>
    </tr>
    <tr>
      <td>expected_environment_variables_defaults</td>
      <td>Contains the default values of expected_environment_variables. If you forked the environment that comes with that collection without updating the Twitter API bearer token value, the collection Pre-request script will tell you.</td>
    </tr>
    <tr>
      <td>template_cssjs_bootstrap</td>
      <td>Bootstrap CSS and JS used in the Visualizer to simply bring a beautiful style to HTML Handlebar templates. Look at <a href="https://apihandyman.io/how-to-use-bootstrap-in-postman-visualizer/">this collection/post</a> to learn more about that Postman trick.</td>
    </tr>
    <tr>
      <td>template_cssjs_prismjs</td>
      <td>PrismJS CSS and JS used to style the code samples in the HTML Handlebar templates used in the visualizer. It’s the same Postman trick as the bootstrap one (importing third party CSS and JS in Visualizer).</td>
    </tr>
  </tbody>
</table>

<h3 id="collection-level-pre-request-script">Collection level pre-request script</h3>

<p>The collection level pre-request script contains some code that runs before sending any of the collection’s requests. Here, it checks an environment containing appropriate variables has been selected. It takes advantage of the <code>expected_environment_variables</code> and <code>expected_environment_variables_defaults</code> collection variables for its configuration.</p>

<h3 id="collection-level-tests-script">Collection level tests script</h3>

<p>The collection level tests script contains some code that runs after any of the collection’s requests has returned. Here it checks there’s no error. Note, at the moment of writing, there’s a bug in Twitter v2 API, a <code>GET /tweets/:tweeitId</code> with a non-existing tweet id returns a <code>200 OK</code> (with an errors property) instead of a <code>404 Not Found</code>.</p>

<h3 id="request-level-tests-script">Request level tests script</h3>

<p>The request level tests script contains code that runs after the request has returned. Here, in the requests of the “Processing and rendering the data” folder, if some data is returned by the Twitter API (data field is not undefined), the data are processed and then passed to a HandlebarJS template for the visualizer.</p>

<h3 id="response-visualizer">Response visualizer</h3>

<p>The visualizer code (in request level tests scripts) takes advantage of the standard HandlebarJS templates but adds some styling with:</p>

<ul>
  <li><a href="https://getbootstrap.com/">Bootstrap</a> for general HTML styling</li>
  <li><a href="https://prismjs.com/">PrismJS</a> to highlight code snippets</li>
</ul>

<p>Check the “<a href="https://apihandyman.io/how-to-use-bootstrap-in-postman-visualizer/">How to use Bootstrap in Postman visualizer</a>” collection/post to learn more about how to use third-party CSS and JS in visualizer templates.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Let’s learn to use Twitter v2 API tweets lookup operations to render simple text tweets and their author just like Twitter does. We’ll learn a few things about API design and API documentation in general and Postman based API documentation in particular in the making. I hope this will give you some ideas for the design and documentation of your API.]]></summary></entry><entry><title type="html">When internal API platform billing model collides with API-First strategy</title><link href="https://apihandyman.io/when-internal-api-platform-billing-model-collides-with-apifirst-strategy/" rel="alternate" type="text/html" title="When internal API platform billing model collides with API-First strategy" /><published>2022-04-20T00:00:00-05:00</published><updated>2022-04-20T00:00:00-05:00</updated><id>https://apihandyman.io/when-internal-api-platform-billing-model-collides-with-apifirst-strategy</id><content type="html" xml:base="https://apihandyman.io/when-internal-api-platform-billing-model-collides-with-apifirst-strategy/"><![CDATA[<p>An internal API-first strategy will inevitably raise budgets questions; you must be aware of that. One of them is who will pay for the brand new API platform and how? The success of an internal API-first strategy may depend on the billing model of the API platform.</p>

<!--more-->

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em></p>

<h1 id="from-api-first-to-api-platform">From API-first to API platform</h1>

<p>When an organization (a company, a subsidiary, a government agency, …) has understood the importance of APIs, at least from an internal perspective, it will engage in its internal API-first journey. So, among other things, everything has been done to build a (minimum viable) API platform that exposes internal APIs (also called private APIs). It could be a centralized or semi-centralized infrastructure.</p>

<p>For instance, the API platform could be composed of a completely centralized API gateway, API portal/catalog, and CI/CD tools used by everyone to publish their APIs. Another way would be to have a central team preparing and packaging the API gateway, its security policies (pieces of code running on the gateway), and CI/CD plugins. It’s up to sub-organizations to spin up this package that will magically push all APIs to a centralized API portal.</p>

<p>But, whatever the model used, an API platform means paying for people and infrastructure to maintain and host it. Who will pay for all that, and how?</p>

<h1 id="who-will-pay-for-the-platform">Who will pay for the platform?</h1>

<p>Just like they probably already pay for some other mutualized infrastructure, it seems obvious to make the sub-organizations that will expose their APIs on the platform pay.</p>

<p>But in the beginning, it may be a bit too much for the one or two first users to support the whole cost. Everyone could be reluctant to actually use the platform facing its cost, and so reluctant to start their API-first journey. If the organization itself or the “central API team” can put some dedicated budget to reduce the (visible) cost for first-timers and ease the platform adoption, that’s for the best (even if we all know that in the end it will probably be billed to sub-organizations one way or another because central support team usually do not generate revenue directly).</p>

<p>If it’s a significant investment at the whole company level, sub-organizations not (yet) working on APIs may give a hand. That may be a hard pill to swallow, but that may motivate some sub-organizations to actually start their API-first journey.</p>

<p>Deciding who will pay is not that easy, but deciding how they will pay is even trickier.</p>

<h1 id="whats-the-platforms-billing-model">What’s the platform’s billing model?</h1>

<p>A terrible idea would be to charge based on the number of APIs exposed on the platform. What will happen in that case?</p>

<p>Providers may merge small and well-defined APIs into big ball of mud APIs. Making them harder to understand and harder to use for consumers, and so it may slow their adoption and augment the cost to integrate them. It also has impact on API providers, they will lose time providing support (instead of creating new APIs or adding new features). Bigger APIs are also harder to manage for their providers (Who will own that big API? How harder will it be to make it evolve).</p>

<p>If the platform’s pricing model has an impact on the design of APIs, that’s the wrong model. It will inevitably cripple the API-First initiative.</p>

<p>Also, such behavior may be an indicator of “we don’t completely get what means being API-First” for both people defining such billing model and people taking the decision to merge APIs to reduce costs.</p>

<p>And last but not least, this model is totally irrelevant because the number of APIs does not define the actual usage of an API platform and may lead to totally unfair bills. A small sub-organization may have to expose many APIs that won’t be used much, a bigger one may expose a single API heavily used. That leads to charging more for the one using the platform the less and probably having the less budget.</p>

<p>Instead, the number of APIs calls (that can relate to CPU/RAM/infrastructure usage) could be a fairer way of charging for platform use. But again, some may be tempted to aggregate smaller operations into bigger ones. Also it’s not adapted to all types of API (GraphQL for instance). And some small, usually support function related, sub-organization without much budget may expose some heavily used APIs. So the organization will have to find a way to help them maybe providing dedicated budget (more about that in a later post).</p>

<p>A fair API platform billing model could set aside API metrics and use a ratio based on actual IT budgets or generated revenue to divide the costs. That way every sub-organization can contribute according to their means. And most important, anyone can have access to the platform and so contribute to the success of the API-First initiative.</p>

<h1 id="finding-a-balance">Finding a balance</h1>

<p>The actual answers to who pays the bill and how will vary depending on the organization. What is sure is that the API platform billing model has a direct impact on an internal API-First strategy. Whoever pays, whatever the pricing model, the platform will have to bring valuable features to help sub-organization in their API-first journey. And it must do that using an adapted billing model that keeps the platform accessible for anyone and that does not impact API design (and so their quality). Without that in mind, the billing model may kill or cripple the organization’s internal API-First initiative</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[An internal API-first strategy will inevitably raise budgets questions; you must be aware of that. One of them is who will pay for the brand new API platform and how? The success of an internal API-first strategy may depend on the billing model of the API platform.]]></summary></entry><entry><title type="html">What is an API platform and what skills are needed to build it</title><link href="https://apihandyman.io/what-is-an-api-platform-and-what-skills-are-needed-to-build-it/" rel="alternate" type="text/html" title="What is an API platform and what skills are needed to build it" /><published>2022-04-13T00:00:00-05:00</published><updated>2022-04-13T00:00:00-05:00</updated><id>https://apihandyman.io/what-is-an-api-platform-and-what-skills-are-needed-to-build-it</id><content type="html" xml:base="https://apihandyman.io/what-is-an-api-platform-and-what-skills-are-needed-to-build-it/"><![CDATA[<p>LEGO is looking for an <a href="https://www.lego.com/en-us/careers/job/60676511">associate API Engineer</a> for their API platform. LEGO+APIs! That looks awesome! But what is an API platform and what skills do you need to build it? Does the LEGO job offer list them all? Do you have them all? This post answers those questions and may help you apply to such offers or post the appropriate job offers to build your own API platform.
<!--more--></p>

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em></p>

<h1 id="what-is-an-api-platform">What is an API platform</h1>

<p>An API Platform represents all of the infrastructures and tools a company will put in place in order to allow everyone inside the company to provide APIs easily and securely. It will allow also anyone inside the company and possibly (almost) anyone outside of the company to consume APIs also easily and securely.</p>

<p>The interest of such a platform (like any other platform) is to avoid reinventing the (API) wheel in every line of business or team. It’s an accelerator of API exposition and consumption.</p>

<p>Note that an “API platform” is not a single tool, it is usually composed of many tools that could be in-house ones, open-source ones, commercial ones (SAAS or on-premise).</p>

<p>Let’s see a few domains where an API platform can help to understand what it is.</p>

<h2 id="api-exposition">API Exposition</h2>

<p>An API platform will allow API providers to easily expose their APIs (usually on API gateways) in a place easily accessible by anyone inside the organization (intranet) and possibly anyone outside of it (internet). That means providers have access to tools they can plug into their CI/CD and they must have access to the administration interfaces if needed (if that can be avoided, that would be great).</p>

<h2 id="api-security">API Security</h2>

<p>An API platform ensures a certain level of safety and consistency regarding API security. Indeed, if the platform is well done, API providers won’t have to work on Oauth, OpenId Connect, or any other high-level security framework. It could be handled by the API gateway(s) and Identity providers and the team managing them. The platform could also provide a virus scan system for file upload (because sometimes you’ll need to get files through your APIs). But whatever the high-level security measures the platform can provide, <a href="https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api/">this does not absolve API providers to care about security</a>.</p>

<h2 id="api-consumption">API Consumption</h2>

<p>An API platform should make consumers’ life easier. Requesting access to an API and obtaining credentials must be simple.  From the providers’ perspective, they must be sure to stay in control of who consumers their API and how.</p>

<h2 id="api-monitoring">API Monitoring</h2>

<p>An API platform must enable API providers to monitor their APIs. Know what are the request done, by who, the responses times, … It’s critical for both software and business perspectives. Providers needs to now how their implementation behave to prevent problems but also study how consumers use their APIs to enhance their business proposal, adding new features, fixing problems.</p>

<h2 id="api-discovery-and-documentation">API discovery and documentation</h2>

<p>But before consuming an API, people must be able to find it (easily again). Thanks to a central API catalog, such a  platform can also allow having an exhaustive vision of the API surface of the company, making APIs easier to find and consume. Beyond the catalog, the platform may provide more or less advanced API documentation systems. API documentation can take advantage of API specifications such as OpenAPI, and AsyncAPI which both take advantage of JSON Schema. The documentation could be more interactive and provide a “try it” feature, Postman collections, and “Run in Postman” buttons. But not all the documentation can be generated, the platform must allow providers human contributions.</p>

<h2 id="api-design-and-governance">API design and governance</h2>

<p>An API platform can also help to enhance your API surface and ensure a certain level of quality and consistency. Indeed either for existing or new APIs, an API platform may provide tools helping to ensure a certain consistency and avoid a few mistakes in their design. Linter such as Stoplight Spectral could be used in CI/CD pipelines. The platform may integrate with API design tools (taking advantage of such linters). It may also provide tools or plug into tools helping with governance processes.</p>

<h2 id="api-first">API-First</h2>

<p>Obviously, all tools used by the platform MUST propose APIs (look at my <a href="https://apihandyman.io/analyzing-a-software-solution-from-an-api-perspective/">recommendations regarding the choice of software solutions</a>). Without APIs, it will be complicated to integrate them together.</p>

<p>But more than that, an API platform MUST offer most (if not all) of its features through APIs. For instance providing a tool that lint an API description (OpenAPI or AsyncAPI) solely in the form of a web application, the UI code holding the lining logic, is a critical mistake to avoid at all costs. It makes it totally un-reusable in CI/CD or other tools used by API providers.</p>

<p>Being 100% API first will bring flexibility to the platform itself and also flexibility in how people will use it and help adoption.</p>

<h2 id="people-first-and-product-first">People-first and product-first</h2>

<p>A good API platform must never be a burden for its users and go against them, limit them. That seems obvious to say, but unfortunately, just like with API governance, terrible things can be done with API platforms. Being API-first can help avoid that, but that’s not enough. People building the platform must understand the needs of API providers and consumers. The platform must be a product (or set of products) that pleases and helps its users. The people owning the platform may have some other objectives, but they MUST never go against their users ones.</p>

<h1 id="the-lego-job-offer">The LEGO job offer</h1>

<p>Now that we have a better vision of what is an API platform, let’s look at the  <a href="https://www.lego.com/en-us/careers/job/60676511">LEGO associate API engineer job offer</a> (<em>you can find the job description at the end of this post if the link is dead</em>).</p>

<p>Small digression beyond API platforms, this offer shows this company takes API very seriously from an IT perspective and seems possibly engaged in becoming API-First. The job offer talks about an “API journey” and “Digital Platforms department”, which could be a sign of an API-first strategy, but I wasn’t able to confirm it by looking at other API job offers, because this is the only one. But it’s sure that APIs are important from an IT perspective.</p>

<p>The offer doesn’t go into too much detail about what an API platform for LEGO is, but in broad strokes, it looks pretty good. They are building an API platform “that must be the preferred platform […] when exposing APIs and events”. They must “create and maintain tools and infrastructure that can be reused and shared across all our product domains.”</p>

<p>It’s really interesting to see they put APIs and events at the same level, I really think that is the future of API-in-a-broad-sense platforms.</p>

<p>The LEGO API management team has a product vision, they want to build something that brings value to their users. That’s the right mindset!</p>

<p>Regarding the expected skills, people are expected to have knowledge of API development, infrastructure, and security. They must know how to code, have created and hosted APIs, and have experience with CI/CD (Continuous Integration/Continuous Development) and IaC (infrastructure as code). Having some experience with API gateways, event brokers, Kubernetes, Oauth, and identity providers is welcomed.</p>

<p>This skill list could gain adding some precisions and a few items:</p>

<ul>
  <li>The “Experience in creating and hosting an API” could be enhanced like this “Experience in creating (design, implementation), hosting and consuming APIs (DX)”.</li>
  <li>The list of “must-have” skills could be completed by “Experience with API specifications such as OpenAPI, AsyncAPI, JSON Schema”</li>
  <li>The list of nice-to-have skill could be completed by experience with
    <ul>
      <li>API governance practices and process</li>
      <li>API tools such as Stoplight Studio, Spectral, Postman, curl, …</li>
    </ul>
  </li>
</ul>

<h1 id="not-so-obvious-skills">Not-so-obvious skills</h1>

<p>Beyond knowing how to code and build infrastructure, building an outstanding API platform for API builders requires knowledge of what API providers and API consumers use and their practices.</p>

<h2 id="api-specifications">API Specifications</h2>

<p>Building an efficient API platform requires taking advantage of API specifications such as OpenAPI, AsyncAPI, or JSON Schema. Knowing them will give you some ideas about how to make your platform more efficient, more integrable, and interoperable without reinventing the wheel. Usually, if you have built APIs seriously, you should have used those specifications.</p>

<h2 id="api-tools">API Tools</h2>

<p>Building an efficient API platform required knowing what tools people building API are using. Why they use them and how. Those tools could take advantage of API specifications or not. But building an API platform without such knowledge will lead to reinventing the wheel and loose time. It will also cripple flexibility because without knowing the existence of tools used by API builders, the platform team may not think to provide integration for those tools. Without knowledge of the possibility offered by those tools, you may miss some huge opportunities to bring value to the users of the platform.</p>

<p>Having built or consumed APIs is usually a good way to acquire this knowldege.</p>

<h2 id="api-design">API Design</h2>

<p>Knowing the importance and the challenges of designing APIs can be of great help to build an outstanding platform. For instance, how many times, I have seen platform people ruin API designers’ efforts by doing too much control at the API gateway level, bypassing smart error handling the original API contract was supposed to provide. Or the terrible “you can’t return 4xx errors, that will make or monitors bug”. Having created API yourself may have helped you acquire such knowledge. Knowing how to design APIs, will also help you create great APIs for the platform (and will help you eat your own dog food as your APIs will be exposed … on the platform you build!).</p>

<p>Creating APIs is the obvious way of getting such knowledge. But consuming APIs will also teach you a few things: you’ll quickly learn to make the difference between good and bad APIs.</p>

<h2 id="api-governance">API Governance</h2>

<p>Having some knowledge of what is API governance, the processes, and the tools that it requires can really help build outstanding API platforms. With such knowledge, you’ll have tons of ideas to facilitate API providers’ life and also avoid stepping on the API governance team’s toes and even help them (if they are a separate team from yours).</p>

<p>That knowledge is not that common in my opinion. It requires to have work in organizations that takes API really seriously. A candidate with such knowledge is highly valuable.</p>

<h2 id="all-users-experience">All users experience</h2>

<p>Being kind and helpful to people will help you to build the best user experiences.</p>

<p>When talking about API and user experience almost everyone thinks about developer experience or DX. It is the experience the API consumers have when using APIs. It concerns design but also security, how to subscribe to an API, getting credentials, revoking them, accessing documentation, playing with a sandbox, getting the right to use API in production, … It’s essential to know what API consumers expect to provide them the best platform.</p>

<p>Beyond that, API’s DX has raised the bar of software quality in general.  And in the case of an API platform, the consumers are not the only users. The providers are users too. Their experience must not be neglected.</p>

<p>For that aspect, the LEGO proposal which emphasizes the product vision is interesting. People having worked in product mode are keener to have that vision. Put IT API creators having only worked on their own APIs may not have that vision.</p>

<h1 id="apux--api-platform-user-experience">APUX ( API Platform User Experience)</h1>

<p>What is important regarding an API platform is that when building it you must take care of ALL users’ experience and so have experience on both provider and consumer sides.</p>

<p>So I would have made a few additions to this job offer. To keep it short, the only items that really miss are the “API Specifications” and “consuming API”, all the rest can be guessed from the updated proposition. Especially now that you have read this post.</p>

<p>I’m sure a candidate bringing the not-so-obvious skills and knowledge I’ve described will be in a good position to get the job. And if you are building a platform yourself and looking for people to help you, you know what to look for.</p>

<h1 id="appendices-the-original-lego-job-description">Appendices: The original LEGO job description</h1>

<p>Excerpt of LEGO’s <a href="https://www.lego.com/en-us/careers/job/60676511">associate API Engineer</a> job offer.</p>

<p><strong>Do you want to be a part of our building and maintaining the new API platform to be used across the LEGO group?</strong></p>

<p>Bring your energy and a willingness to learn into the APIs journey and help us build the platforms for all the software engineering teams across the business.</p>

<p><strong>Core Responsibilities</strong></p>

<p>• Be part of a team where we build our future API platform and the tooling around it. It is to be the preferred platform for our colleagues when exposing APIs and events.
• With our skilled engineers team you will ensure that we deliver an API platform for the rest of the LEGO group.
• Be a part of the full lifecycle in software development; understanding feature requests, development, testing and ensuring that our products are operating as expected in our live production environment.
• See the value in automating operational tasks and are an aspiring site reliability engineer (SRE).</p>

<p><strong>Play your part in our team succeeding</strong></p>

<p>The API Management team is one of the pillars of our newly established Digital Platforms department. The goal is to create and maintain tools and infrastructure that can be reused and share across all our product domains.</p>

<p>We apply platform engineering and product management practices to ensure we build what brings the most value to our customers (the other software engineers) and ensure a close feedback loop.</p>

<p>We are eager to collaborate and love to share and receive feedback from both our colleagues and customers.</p>

<p><strong>Do you have what it takes?</strong></p>

<p>• Experience in creating and hosting an API
• Proficient with one or more general purpose programming language like TypeScript, C#, Java…
• Experience with CI/CD in a tool like GitHub actions, Jenkins, Team City…
• Experience with IaC, could be CDK, Pulumi, Terraform…</p>

<p>Nice to have experience with:</p>

<p>• An event broker like Pulsar, RabbitMQ or Kafka
• An API Gateway like Kong, AWS API Gateway, …
• OAuth and Identity providers
• Kubernetes</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[LEGO is looking for an associate API Engineer for their API platform. LEGO+APIs! That looks awesome! But what is an API platform and what skills do you need to build it? Does the LEGO job offer list them all? Do you have them all? This post answers those questions and may help you apply to such offers or post the appropriate job offers to build your own API platform.]]></summary></entry><entry><title type="html">How to use Bootstrap in Postman Visualizer</title><link href="https://apihandyman.io/how-to-use-bootstrap-in-postman-visualizer/" rel="alternate" type="text/html" title="How to use Bootstrap in Postman Visualizer" /><published>2022-04-11T00:00:00-05:00</published><updated>2022-04-11T00:00:00-05:00</updated><id>https://apihandyman.io/how-to-use-bootstrap-in-postman-visualizer</id><content type="html" xml:base="https://apihandyman.io/how-to-use-bootstrap-in-postman-visualizer/"><![CDATA[<p>Postman Visualizer is perfect to tinker with data returned by an API and learn how it works. I found using <a href="https://handlebarsjs.com/">HandlebarJS</a> HTML templates quite convenient. But I was mindblown when I realized I could take advantage of <a href="https://getbootstrap.com/">Bootstrap</a> to generate outstanding visualization without much effort. Let’s see that with <a href="https://www.dnd5eapi.co/">The 5th Edition Dungeons and Dragons API</a> in its <a href="https://www.dnd5eapi.co/docs/#overview--graphql">GraphQL</a> version.
<!--more--></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">Postman Tips and Tricks Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">
<p>This post is a “Postman Tips And Tricks Post” in which I share the tips and tricks I learn while using Postman.
You can either:</p>

<ul>
  <li>Read this post</li>
  <li>Read the collection documentation on <a href="https://www.postman.com/apihandyman/workspace/postman-tips-and-tricks/documentation/143378-0c503013-a7a9-4374-bdc2-7307ae777740">Postman network</a></li>
  <li>Use this <a href="https://god.gw.postman.com/run-collection/143378-0c503013-a7a9-4374-bdc2-7307ae777740?action=collection%2Ffork&amp;collection-url=entityId%3D143378-0c503013-a7a9-4374-bdc2-7307ae777740%26entityType%3Dcollection"><img src="/images/commons/run-in-postman.svg" alt="Run in Postman" /></a> button to fork the collection directly in Postman</li>
  <li>Get the collection from <a href="https://github.com/apihandyman/postman-tips-and-tricks/tree/main/use-bootstrap-in-visualizer">Github</a> to import it in Postman.</li>
</ul>

<p><em>(Click on the “View complete collection documentation” link in lower right corner to see documentation in full screen after import or fork)</em></p>

<p>You can also see all of the collections of this series in my <a href="https://www.postman.com/apihandyman/workspace/postman-tips-and-tricks/overview">Postman Tips and Tricks</a> Postman Workspace.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list border-left">
      
      <ul class="list-group list-group-flush">
        
          
          
          <li class="list-group-item"><a href="/we-always-forget-to-select-a-postman-environment/">We always forget to select a Postman environment</a></li>
          
        
          
          
          <li class="list-group-item active">How to use Bootstrap in Postman Visualizer</li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<h1 id="use-vizualiser">Use vizualiser</h1>

<p>With this first request, we’ll discover the Dnd GraphQL API by retrieving a list of magic items and how to set up a “standard” visualizer to show them in a simple HTML table.</p>

<h2 id="use-visualizer-with-pure-html">Use visualizer with pure HTML</h2>

<p>The request body contains a GraphQL query requesting “the name, desc(ription) and rarity name of all magic items”. We’ll use the exact same query for all requests. Note that I do not recommend using abbreviations in property names (or whatever names) when designing APIs. Abbreviations make APIs harder to use. In that case, it looks really awkward because it seems there are no other abbreviations used in the entire API, all names are cristal clear full names. And yes, spotting the only “mistake” in an otherwise well-designed API is my super-power (or my curse 😅). Hopefully, as Postman loads the GraphQL schema, it proposed me “desc” when I started to type “des(cription)” in my query. (But that’s not a reason to underestimate the importance of design for GraphQL APIs.)</p>

<div class="card card-code text-white bg-dark border-dark">
   
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  
  <div class="card-body">
    <div class="row m-0 pt-2 align-items-start" style="background-color: #2a2139;">
      <div class="col col-auto pl-3 pr-0 pb-1"><span class="badge http-post mr-2" style="font-size:1em;">POST</span><code class="language-http" style="background: transparent !important; overflow-wrap:break-word">https://www.dnd5eapi.co/graphql</code></div>
    </div>
     
    <div class="col col-auto pl-0 pr-0">
      <pre class="code-copy line-numbers language-graphql"><code class="code-block">{
    magicItems {
        name
        desc
        rarity {
            name
        }
    }
}</code></pre>
    </div>
    
  </div>
</div>

<p>Ok, this digression on design aside, according to how GraphQL works and to the <a href="https://www.dnd5eapi.co/docs/#get-/api/magic-items/-index-">documentation</a>, that means we’ll get a list of objects <code>data.magicItems</code> containing a string <code>name</code>, an array of string <code>desc</code>, and an object <code>rarity</code> containing a string <code>name</code>.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;magicItems&quot;: [
            {
                &quot;name&quot;: &quot;Ammunition, +1, +2, or +3&quot;,
                &quot;desc&quot;: [
                    &quot;Weapon (any ammunition), uncommon (+1), rare (+2), or very rare (+3)&quot;,
                    &quot;You have a bonus to attack and damage rolls made with this piece of magic ammunition. The bonus is determined by the rarity of the ammunition. Once it hits a target, the ammunition is no longer magical.&quot;
                ],
                &quot;rarity&quot;: {
                    &quot;name&quot;: &quot;Varies&quot;
                }
            },
            {
                &quot;name&quot;: &quot;Adamantine Armor&quot;,
                &quot;desc&quot;: [
                    &quot;Armor (medium or heavy, but not hide), uncommon&quot;,
                    &quot;This suit of armor is reinforced with adamantine, one of the hardest substances in existence. While you&#39;re wearing it, any critical hit against you becomes a normal hit.&quot;
                ],
                &quot;rarity&quot;: {
                    &quot;name&quot;: &quot;Uncommon&quot;
                }
            }
        ]
    }
}</code></pre>
  </div>
</div>

<p>The visualization magic stands in the Test script. It defines a basic <a href="https://handlebarsjs.com/">HandlebarJS</a> template and then passes it to the Postman visualizer along with the data to use (the list of magic items). The template contains an HTML table with an <code>{{#each}}</code> loop on its rows. On each row, we have the name, rarity name, and the first line of description of each magic item.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-collapsed code-copy" data-line="1,3,14,26" data-start="1"><code class="code-block">const handlebarData = pm.response.json().data.magicItems;

const handlebarTemplate = `
    &lt;h1&gt;DnD Magic Items&lt;/h1&gt;
    &lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th scope=&quot;col&quot;&gt;Name&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;Rarity&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        {{#each .}}
        &lt;tr&gt;
            &lt;th scope=&quot;row&quot;&gt;{{name}}&lt;/th&gt;
            &lt;td&gt;{{rarity.name}}&lt;/td&gt;
            &lt;td&gt;{{desc.[0]}}&lt;/td&gt;
        &lt;/tr&gt;
        {{/each}}
    &lt;/tbody&gt;
    &lt;/table&gt;
`;

// Set visualizer
pm.visualizer.set(handlebarTemplate, handlebarData);</code></pre>
  </div>
</div>

<p>After sending the request, the HTML result is visible by clicking on the “Visualize” button in the response’s “Body” tab.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/how-to-use-bootstrap-in-postman-visualizer/use-bootstrap-in-visualizer-1.png" class="figure-img img-fluid" /></figure>
</div>

<h1 id="add-bootstratp-to-template">Add Bootstratp to template</h1>

<p>By default, the visualization is already easier to read than the JSON data. But let’s add Bootstrap JS and CSS to have better styling.</p>

<h2 id="add-bootstrap-js-and-css">Add Bootstrap JS and CSS</h2>

<p>Adding Bootstrap to the template only requires adding the link to CSS and JS (found in <a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/#quick-start">Boostrap Quick Start</a>) at the beginning of our template in the Test script of our request.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-collapsed code-copy" data-line="4-6" data-start="1"><code class="code-block">const handlebarData = pm.response.json().data.magicItems;

const handlebarTemplate = `
    &lt;!-- Bootstrap --&gt;
    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@latest/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot; crossorigin=&quot;anonymous&quot;&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@latest/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
    &lt;!-- Content --&gt;
    &lt;h1&gt;DnD Magic Items&lt;/h1&gt;
    &lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th scope=&quot;col&quot;&gt;Name&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;Rarity&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        {{#each .}}
        &lt;tr&gt;
            &lt;th scope=&quot;row&quot;&gt;{{name}}&lt;/th&gt;
            &lt;td&gt;{{rarity.name}}&lt;/td&gt;
            &lt;td&gt;{{desc.[0]}}&lt;/td&gt;
        &lt;/tr&gt;
        {{/each}}
    &lt;/tbody&gt;
    &lt;/table&gt;
`;

// Set visualizer
pm.visualizer.set(handlebarTemplate, handlebarData);</code></pre>
  </div>
</div>

<div class="image ">
    <figure class="figure">
        <img src="/images/how-to-use-bootstrap-in-postman-visualizer/use-bootstrap-in-visualizer-2.png" class="figure-img img-fluid" /></figure>
</div>

<h2 id="style-table-and-fix-font-size">Style table and fix font size</h2>

<p>Unfortunately, the table is not totally styled the Boostrap way and the font is rather small. Let’s fix that by:</p>

<ul>
  <li>Adding a <code>div</code> with a <code>font-style: larger</code> style around the header and table</li>
  <li>Adding the <code>table</code> class to the table</li>
</ul>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-collapsed code-copy" data-line="8,10" data-start="1"><code class="code-block">const handlebarData = pm.response.json().data.magicItems;

const handlebarTemplate = `
    &lt;!-- Bootstrap --&gt;
    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@latest/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot; crossorigin=&quot;anonymous&quot;&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@latest/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
    &lt;!-- Content --&gt;
    &lt;div style=&quot;font-size: larger;&quot;&gt; &lt;!-- adding style to increase font size --&gt;
        &lt;h1&gt;DnD Magic Items&lt;/h1&gt;
        &lt;table class=&quot;table&quot;&gt; &lt;!-- Adding table css class to get Bootstrap styling --&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;col&quot;&gt;Name&lt;/th&gt;
                &lt;th scope=&quot;col&quot;&gt;Rarity&lt;/th&gt;
                &lt;th scope=&quot;col&quot;&gt;Description&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            {{#each .}}
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;{{name}}&lt;/th&gt;
                &lt;td&gt;{{rarity.name}}&lt;/td&gt;
                &lt;td&gt;{{desc.[0]}}&lt;/td&gt;
            &lt;/tr&gt;
            {{/each}}
        &lt;/tbody&gt;
        &lt;/table&gt;
`;

// Set visualizer
pm.visualizer.set(handlebarTemplate, handlebarData);</code></pre>
  </div>
</div>

<div class="image ">
    <figure class="figure">
        <img src="/images/how-to-use-bootstrap-in-postman-visualizer/use-bootstrap-in-visualizer-3.png" class="figure-img img-fluid" /></figure>
</div>

<h2 id="use-more-boostrap-features-and-beyond">Use more Boostrap features (and beyond)</h2>

<p>And once Boostrap is in place the only limit is your imagination. And if you added Bootstrap CSS and JS imagine what other things you could include.</p>

<p>The template has been modified as follows:</p>

<ul>
  <li>The <a href="https://getbootstrap.com/docs/5.1/content/tables/#variants">table header is dark</a> and sticky (thanks to some custom CSS)</li>
  <li>The <a href="https://getbootstrap.com/docs/5.1/content/tables/#striped-rows">table has striped rows</a></li>
  <li>Rarity is a <a href="https://getbootstrap.com/docs/5.1/components/badge/">badge</a> whose color depends on rarity value (thanks to HandlebarJS <code>{{lookup}}</code> helper)</li>
</ul>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-collapsed code-copy" data-line="1-10,21-25,30,31" data-start="1"><code class="code-block">// Defining which Bootstrap color apply on rarity badge
const rarityColors = {
    Varies: &quot;bg-light text-danger&quot;,
    Common: &quot;bg-secondary&quot;,
    Uncommon: &quot;bg-primary&quot;,
    Rare: &quot;bg-success&quot;,
    &quot;Very Rare&quot;: &quot;bg-info&quot;,
    Legendary: &quot;bg-warning&quot;,
    Artifact: &quot;bg-danger&quot;, 
}
// Handlebar data now holds the list of magic items and rarity colors
const handlebarData = {
    data: pm.response.json().data.magicItems,
    rarityColors: rarityColors
}
const handlebarTemplate = `
    &lt;!-- Bootstrap --&gt;
    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@latest/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot; crossorigin=&quot;anonymous&quot;&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@latest/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
    &lt;!-- Why not using some custom css? --&gt;
    &lt;style&gt;
        .sticky{
            position:sticky;
            top: 0 ;
        }
    &lt;/style&gt;
    &lt;!-- Content --&gt;
    &lt;div style=&quot;font-size: larger;&quot;&gt;
        &lt;h1&gt;DnD Magic Items&lt;/h1&gt;
        &lt;table class=&quot;table table-striped table-hover&quot;&gt; &lt;!-- Striped table --&gt;
        &lt;thead class=&quot;table-dark sticky&quot;&gt; &lt;!-- Sticky (custom css) Dark header (Bootstrap) --&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;col&quot;&gt;Magic Item Name&lt;/th&gt;
                &lt;th scope=&quot;col&quot;&gt;Rarity&lt;/th&gt;
                &lt;th scope=&quot;col&quot;&gt;Description&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            {{#each data}}
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;{{name}}&lt;/th&gt;
                &lt;!-- Rarity badge color changes depending on its value --&gt;
                &lt;td&gt;&lt;span class=&quot;badge rounded-pill {{lookup ../rarityColors rarity.name}}&quot;&gt;{{rarity.name}}&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;{{desc.[0]}}&lt;/td&gt;
            &lt;/tr&gt;
            {{/each}}
        &lt;/tbody&gt;
        &lt;/table&gt;
`;

// Set visualizer
pm.visualizer.set(handlebarTemplate, handlebarData);</code></pre>
  </div>
</div>

<div class="image ">
    <figure class="figure">
        <img src="/images/how-to-use-bootstrap-in-postman-visualizer/use-bootstrap-in-visualizer-4.png" class="figure-img img-fluid" /></figure>
</div>

<h1 id="take-advantage-of-variables">Take advantage of variables</h1>

<p>In order to avoid redefining custom, Bootstrap, or other CSS and JS for each template, you can take advantage of a collection variable to store them.</p>

<h2 id="add-bootstrap-js-and-css-using-a-variable">Add Bootstrap JS and CSS using a variable</h2>

<p>Here, the Bootstrap CSS and JS, and custom style tag have been put in the <code>cssjs</code> collection variable.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Collection variable <code>cssjs</code> value</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-html line-numbers code-copy" data-start="1"><code class="code-block">&lt;!-- Bootstrap --&gt;
    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@latest/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot; crossorigin=&quot;anonymous&quot;&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@latest/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
    &lt;!-- Why not using some custom css? --&gt;
    &lt;style&gt;
        .sticky{
            position:sticky;
            top: 0 ;
        }
    &lt;/style&gt;</code></pre>
  </div>
</div>

<p>It is then loaded by <code>pm.collectionVariable("cssjs")</code> in the Test script and passed to the HandlebarJS template and used like any other data.</p>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-js line-numbers code-collapsed code-copy" data-line="17,20" data-start="1"><code class="code-block">// Defining which Bootstrap color apply on rarity badge
const rarityColors = {
    Varies: &quot;bg-light text-danger&quot;,
    Common: &quot;bg-secondary&quot;,
    Uncommon: &quot;bg-primary&quot;,
    Rare: &quot;bg-success&quot;,
    &quot;Very Rare&quot;: &quot;bg-info&quot;,
    Legendary: &quot;bg-warning&quot;,
    Artifact: &quot;bg-danger&quot;, 
}
// Handlebar data now holds the list of magic items and rarity colors
const handlebarData = {
    data: pm.response.json().data.magicItems,
    rarityColors: rarityColors,
    // Now bootstrap and custom css are store in a variable
    // That way, they can easilty reused
    cssjs: pm.collectionVariables.get(&quot;cssjs&quot;), 
}
const handlebarTemplate = `
    {{{cssjs}}}
    &lt;!-- Content --&gt;
    &lt;div style=&quot;font-size: larger;&quot;&gt;
        &lt;h1&gt;DnD Magic Items&lt;/h1&gt;
        &lt;table class=&quot;table table-striped table-hover&quot;&gt;
        &lt;thead class=&quot;table-dark sticky&quot;&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;col&quot;&gt;Magic Item Name&lt;/th&gt;
                &lt;th scope=&quot;col&quot;&gt;Rarity&lt;/th&gt;
                &lt;th scope=&quot;col&quot;&gt;Description&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            {{#each data}}
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;{{name}}&lt;/th&gt;
                &lt;td&gt;&lt;span class=&quot;badge rounded-pill {{lookup ../rarityColors rarity.name}}&quot;&gt;{{rarity.name}}&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;{{desc.[0]}}&lt;/td&gt;
            &lt;/tr&gt;
            {{/each}}
        &lt;/tbody&gt;
        &lt;/table&gt;
`;

// Set visualizer
pm.visualizer.set(handlebarTemplate, handlebarData);</code></pre>
  </div>
</div>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[Postman Visualizer is perfect to tinker with data returned by an API and learn how it works. I found using HandlebarJS HTML templates quite convenient. But I was mindblown when I realized I could take advantage of Bootstrap to generate outstanding visualization without much effort. Let’s see that with The 5th Edition Dungeons and Dragons API in its GraphQL version.]]></summary></entry><entry><title type="html">Choosing a public API style when a private API style already exists</title><link href="https://apihandyman.io/choosing-a-public-api-style-when-a-private-api-style-already-exists/" rel="alternate" type="text/html" title="Choosing a public API style when a private API style already exists" /><published>2022-04-06T00:00:00-05:00</published><updated>2022-04-06T00:00:00-05:00</updated><id>https://apihandyman.io/choosing-a-public-api-style-when-a-private-api-style-already-exists</id><content type="html" xml:base="https://apihandyman.io/choosing-a-public-api-style-when-a-private-api-style-already-exists/"><![CDATA[<p>“What will be the style of our public/partner APIs? Should we reuse our existing private APIs style? Should we restart from scratch and use a totally different style?” This discussion happens quite often in organizations starting their public API journey (and if it did not happen, it must happen.) This discussion can have important consequences that must be carefully evaluated.
<!--more--></p>

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em>
<em>In case you don’t get the reference: The API Handyman is represented with a 80s mullet haircut, “business up front, party in the back”.</em></p>

<h1 id="from-look-and-feel-to-life-and-death">From look and feel to life and death</h1>

<p>After taking private APIs more or less seriously, your organization is ready for the next step on its API journey: providing APIs to the outside world. It could be partner APIs, provided to a few selected partners or customers who have been through a good old “let’s meet and sign some papers” process. It could also be public APIs that will be consumed in a self-service fashion by almost anyone.</p>

<p>In either case: the DX (developer experience) offered by those APIs will be critical to their success. An API’s DX is determined by multiple factors from its purpose to how it’s simple to make API calls and everything in between (and beyond). Among all those factors, the design of an API plays a critical role in DX. A well-designed API will be easy to understand and easy to use. Such APIs will have a higher adoption rate and requires less support. On the opposite, terribly-designed public/partner APIs will not be used, and if they are used they will require a high level of support.</p>

<p>A good way to avoid miserably failing your public/partner API initiative is to ensure that your APIs share a common style, a common “look and feel”. But that’s not enough, this common style must participate in the creation of “easy-to-understand-easy-to-use” APIs. Indeed you can create terrible APIs that all look the same. And last but not least, if that style ease designers’ job that is more than welcomed. A complicated style will only lead to terrible APIs because only a few experts will be capable of applying it.</p>

<p>Hence the importance of the question, of which “style” to use for public/partner APIs. The style, the “look and feel” of your APIs have a major impact on their life and death.</p>

<p>Choosing the API Style of public/partner APIs is a choice that must not be done by default (without choosing) but knowingly. Because once APIs start to be consumed by third parties, it’s extremely difficult to modify anything.</p>

<h1 id="usual-scenarios">Usual scenarios</h1>

<p>When that question arises (and remember it MUST arise) in a context where private APIs already exist, I often present the possibilities with the 3 following scenarios.</p>

<ul>
  <li>Keeping existing style as it is</li>
  <li>Simplify existing style to target common practices</li>
  <li>Redefined from scratch a totally new style targeting common practices or a standard</li>
</ul>

<p>The first option is to simply stick to the existing style. That’s a totally valid option if the existing style leads to easy-to-understand and easy-to-use APIs hence is free of bizarre local specificities and close to outside world common practices. If that’s not the case, I recommend studying the second scenario. Indeed, APIs that are uniform between themselves but go against common practices will be hard-to-understand and hard-to-use.</p>

<p>The second scenario consists in taking the existing style and trying to simplify it in a backward-compatible fashion if that’s possible. The idea is to limit the breaking changes to what is absolutely necessary, or at least keep a certain spirit of the original style. It could simply consist in removing certain edge cases from the guidelines. But if there are too many changes to do, maybe it would be better to restart from scratch with the third option.</p>

<p>The third option consists in redefining the public/partner API style from scratch without taking care of the existing API style. It could even be interesting to see if there are no standards to take advantage of (I’ll write a dedicated post on that topic).</p>

<p>The problem is that if we stop here, we only envision that question from the public/partner API perspective: “Let’s choose the style that will work the best with the outside world”. The choice cannot be made without evaluating the impacts on the whole organization and all of its APIs.</p>

<h1 id="different-styles-or-same-style">Different styles or same style</h1>

<p>Behind the “which style will we use for our public/partner APIs?” question lies an even more critical one: “will we have the same or a different style for public/partner vs private APIs?”.</p>

<p>In my opinion, the question is definitely no in the long run. While it’s totally understandable to have a transitional period where existing private APIs may not be updated until needed. It could cost a lot of money to update all existing private APIs to the new style. I highly recommend applying the new public/partner style to private APIs as soon as possible, starting at least with any new API.</p>

<p>Indeed, using different styles for private and public/partner APIs forbid applying the Jeff Bezos mandate, you can’t turn a private API into a public/partner one easily. You’ll need a bit of work to transform the private style into the public/partner one.</p>

<p>That also prevents eating your own dog food at two levels. First, if your public/partner APIs are not private, you won’t use them, you won’t discover their flaws, and you won’t improve them. Second level: the style itself. It will be less used and so less improved. Only a few experts will learn to design APIs the public/partner way, they won’t have many opportunities to grow their skill and propose style improvements as there are usually that less public/partner APIs created than private ones.</p>

<p>That may to an extent promote a counter-productive organizational repartition between the team creating public/partner APIs and the other creating private APIs. That would severely cripple the API-First initiative at the organization level. Indeed, why should we care about our private APIs if the public/partner team will clean the mess when necessary?</p>

<p>And even if you take the strict “2 styles” path, the public/partner style will win in the long run. People of your organization will use the public/partner APIs and be fed up with how they are different (and better) than private APIs. People will be fed up with spending time and money adapting API for public-facing consumers. People building private APIs will be fed up with being considered second-class citizens (vs people building public/partner APIs). People will question the legitimacy of that “2 styles” decision.</p>

<h1 id="choose-knowingly">Choose knowingly</h1>

<p>So don’t take the public/partner API style question lightly. This question is critical for the success of your public/partner API initiative but it will also have a huge impact on your whole organization’s API-first initiative.</p>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[“What will be the style of our public/partner APIs? Should we reuse our existing private APIs style? Should we restart from scratch and use a totally different style?” This discussion happens quite often in organizations starting their public API journey (and if it did not happen, it must happen.) This discussion can have important consequences that must be carefully evaluated.]]></summary></entry><entry><title type="html">What can we learn from tweets lookup error responses of Twitter v2 API?</title><link href="https://apihandyman.io/what-can-we-learn-from-tweets-lookup-error-responses-of-twitter-v2-api/" rel="alternate" type="text/html" title="What can we learn from tweets lookup error responses of Twitter v2 API?" /><published>2022-04-05T00:00:00-05:00</published><updated>2022-04-05T00:00:00-05:00</updated><id>https://apihandyman.io/what-can-we-learn-from-tweets-lookup-error-responses-of-twitter-v2-api</id><content type="html" xml:base="https://apihandyman.io/what-can-we-learn-from-tweets-lookup-error-responses-of-twitter-v2-api/"><![CDATA[<p>What can we learn from tweets lookup error responses of Twitter v2 API?
We can learn how to use the tweets lookup operations parameters without reading much of the documentation.
We may also learn a few API design, implementation, and documentation principles in the making.
And icing on the cake, the technique shown in this post can be applied on any API.
<!--more--></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">Twitter API v2 Tips and Tricks Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">
<p>This post is a “Twitter v2 API Tips And Tricks Post” in which I share with Postman collections the tips and tricks I learn while using Twitter v2 API.
You can either:</p>

<ul>
  <li>Read this post</li>
  <li>Read the collection documentation on <a href="https://www.postman.com/apihandyman/workspace/16b83fae-c500-4387-b79c-0c72565d1d0f/collection/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?action=share&amp;creator=143378">Postman network</a></li>
  <li>Use this <a href="https://god.gw.postman.com/run-collection/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?action=collection%2Ffork&amp;collection-url=entityId%3D143378-8f12c1ed-f930-4e0d-8baf-c8a949910229%26entityType%3Dcollection%26workspaceId%3D16b83fae-c500-4387-b79c-0c72565d1d0f#?env%5BGuess%20how%20Tweets%20lookup%20parameters%20work%5D=W3sia2V5IjoidHdpdHRlcl90b2tlbiIsInZhbHVlIjoiUFVUIFlPVVIgVE9LRU4gSU4gQ1VSUkVOVCBWQUxVRSBPRiBUV0lUVEVSIFRPS0VOIEVOVklST05NRU5UIFZBUklBQkxFIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InNlY3JldCIsInNlc3Npb25WYWx1ZSI6IkFBQUFBQUFBQUFBQUFBQUFBQUFBQVAlMkZFWXdFQUFBQUFkMjRIOURVeTZpNk5wbkpjTks4UzhjUnE2U1klM0ROT0pmZ3BvN1NDTDJiS2wxR2dXRjZERjd2RmQ3MnJPNEdKeWExSkRSM1RPTlZBdmFvZCIsInNlc3Npb25JbmRleCI6MH1d"><img src="/images/commons/run-in-postman.svg" alt="Run in Postman" /></a> button to fork the collection directly in Postman</li>
  <li>Get the collection from <a href="https://github.com/apihandyman/twitter-api-v2-tips-and-tricks/tree/main/guess-how-tweets-lookup-parameters-work">Github</a> to import it in Postman. (Click on the “View complete collection documentation” link in lower right corner to see documentation in full screen after fork)</li>
</ul>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list border-left">
      
      <ul class="list-group list-group-flush">
        
          
          
          <li class="list-group-item active">What can we learn from tweets lookup error responses of Twitter v2 API?</li>
          
        
          
          
          <li class="list-group-item"><a href="/rendering-simple-text-tweets-with-their-authors/">Rendering simple text tweets with their authors</a></li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<h1 id="twitter-v2-api-tweets-lookup">Twitter v2 API Tweets Lookup</h1>

<p>With Twitter v2 API, you can get tweets using <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/introduction">the lookup operations</a> <code>GET /2/tweets/:tweetid</code> (single tweet) and <code>GET /2/tweets?ids=:tweetId1,tweetId2,...tweetId100</code> (multiple tweets). By not providing or providing parameters with wrong values, we’ll be able to understand how these operations work.</p>

<h2 id="notes-about-the-collection">Notes about the collection</h2>

<p>The <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229">collection</a> takes advantage of collection and environment variables.</p>

<h3 id="environment-variables">Environment variables</h3>

<p>The collection requires the creation of an environment containing the following variables. (Try to send a request without an environment or the following variables and <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">you’ll get a surprise error message</a>).</p>

<div class="alert alert-danger"><p>Never store API tokens in initial value. Read <a href="https://blog.postman.com/how-to-use-api-keys/">How to use API Keys</a> to learn more.</p>

</div>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>twitter_token</td>
      <td>A Twitter API bearer token (Read <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">Twitter API documentation</a> to get one) used in Authorization tab of the collection</td>
    </tr>
  </tbody>
</table>

<h3 id="collection-variables">Collection variables</h3>

<p>The collection uses the following collection variables:</p>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>tweet_id</td>
      <td>A real working tweet id. Feel free to update with one of your likings. To get this id, go to the Twitter website and open a tweet by clicking on it. You’ll see a URL like this one <a href="https://twitter.com/apihandyman/status/1387820661742112771">https://twitter.com/apihandyman/status/1387820661742112771</a> , the id is number number after status. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-a06061d4-092c-4a71-87b6-a04c925154d1">Retrieve a single tweet</a>, <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-87eabafa-a6bc-4de0-864d-02cdbe819719">Retrieve multiple tweets</a>, and Wrap up folders.</td>
    </tr>
    <tr>
      <td>unknown_tweet_id</td>
      <td>The id of a tweet that doesn’t exists anymore. No need to modify this value. Used by requests of <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-4bdae358-e117-4352-804e-be51496100a8">What happens when a tweet is not found</a> folder.</td>
    </tr>
    <tr>
      <td>expansions_default_value</td>
      <td>A variable holding all possible values of <code>expansions</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>tweet_fields_default_value</td>
      <td>A variable holding all possible values of <code>tweet.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>media_fields_default_value</td>
      <td>A variable holding all possible values of <code>media.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>poll_fields_default_value</td>
      <td>A variable holding all possible values of <code>poll.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>place_fields_default_value</td>
      <td>A variable holding all possible values of <code>place.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>user_fields_default_value</td>
      <td>A variable holding all possible values of <code>user.fields</code> parameter. Used in <a href="https://apihandyman.postman.co/workspace/Twitter-v2-API-Tips-and-Tricks~16b83fae-c500-4387-b79c-0c72565d1d0f/documentation/143378-8f12c1ed-f930-4e0d-8baf-c8a949910229?entity=folder-c5fde22c-0ee1-4e2b-955d-b33ecd5aedb1">Get always dame data folder</a>.</td>
    </tr>
    <tr>
      <td>token_variable_name</td>
      <td>Used by some <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">pre-script magic that checks an environment is selected</a>. No need to modify this value.</td>
    </tr>
    <tr>
      <td>token_variable_default_value</td>
      <td>Used by some <a href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/">pre-script magic that checks an environment is selected</a>. No need to modify this value.</td>
    </tr>
  </tbody>
</table>

<h1 id="retrieve-a-single-tweet">Retrieve a single tweet</h1>
<p>Let’s start by retrieving a single tweet, it is done with the <code>GET /2/tweets/:tweetId request</code>.</p>

<p>All the following requests use the <code>tweet_id</code> collection variable value for the <code>:tweetId</code> path parameter. Feel free to replace its value with another one. To get this id, go to the Twitter website and open a tweet by clicking on it. You’ll see a URL like this one <a href="https://twitter.com/apihandyman/status/1387820661742112771">https://twitter.com/apihandyman/status/1387820661742112771</a> , the id is the number <code>1387820661742112771</code> after <code>status/</code>.</p>

<p>What Twitter <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id">Reference documentation</a> says about this operation:</p>

<blockquote>
  <p>Returns a variety of information about a single Tweet specified by the requested ID.</p>
</blockquote>

<p>By providing only the tweet id (as a path parameter), we’ll only get the tweet’s default fields <code>id</code> and <code>text</code> but we will discover there are more information to get.</p>
<h2 id="get-a-tweet-with-default-data">Get a tweet with default data</h2>

<p>When providing only the id path parameter without any other parameters, we get the default data.</p>
<h3 id="request-and-response">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;
    }
}`</code></pre>
  </div>
</div>

<h2 id="guess-which-query-parameters-can-be-used">Guess which query parameters can be used</h2>

<p>More data can be retrieved using some query parameters. You can either read the <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id">documentation</a>, or be lazy and try to guess them by providing a wrong <code>dummy</code> query parameter. The error response returned will tell us that parameter is wrong and list the accepted parameters.</p>
<h3 id="request-and-response-1">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/?dummy=value</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;dummy&quot;: [
                    &quot;value&quot;
                ]
            },
            &quot;message&quot;: &quot;The query parameter [dummy] is not one of [id,expansions,tweet.fields,media.fields,poll.fields,place.fields,user.fields]&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="guess-query-parameters-possible-values">Guess query parameters possible values</h2>

<p>Thanks to previous error, we know the possible query parameters. We can add them all to the request, each of them set with a dummy value. That will generate a new error response telling the possible values for each parameter.</p>

<h3 id="request-and-response-2">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/?id=dummy
&amp;expansions=dummy
&amp;tweet.fields=dummy
&amp;media.fields=dummy
&amp;poll.fields=dummy
&amp;place.fields=dummy
&amp;user.fields=dummy</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;id&quot;: [
                    &quot;1387820661742112771&quot;,
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `id` query parameter value [dummy] is not valid&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;id&quot;: [
                    &quot;1387820661742112771&quot;,
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;Duplicate parameters are not allowed: the `id` query parameter&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;tweet.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `tweet.fields` query parameter value [dummy] is not one of [attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;media.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `media.fields` query parameter value [dummy] is not one of [alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;poll.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `poll.fields` query parameter value [dummy] is not one of [duration_minutes,end_datetime,id,options,voting_status]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;place.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `place.fields` query parameter value [dummy] is not one of [contained_within,country,country_code,full_name,geo,id,name,place_type]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;user.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `user.fields` query parameter value [dummy] is not one of [created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;expansions&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `expansions` query parameter value [dummy] is not one of [author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id]&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="try-to-get-a-tweet-with-all-data">Try to get a tweet with all data</h2>

<p>Thanks to the previous error, we know that <code>id</code> is not an actual query parameter, so we will deactivate it. That means <code>id</code> shouldn’t have been returned in the error response when we provided the <code>dummy</code> query parameter. It sounds like an implementation bug, some code may blindly take the list of “parameters” without excluding path parameters.</p>

<p>This little problem sets aside, we had very valuable information for the other parameters, we can set them with values listing all their possible values.</p>

<h3 id="request-and-response-3">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.impression_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.url_link_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.user_profile_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.impression_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.like_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.like_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.reply_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.reply_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.retweet_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.retweet_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.url_link_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.user_profile_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.impression_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.like_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.like_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.reply_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.reply_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.retweet_count&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.retweet_count&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.url_link_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.user_profile_clicks&#39; on the Tweet with id : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h2 id="get-a-tweet-with-only-allowed-data">Get a tweet with only allowed data</h2>

<p>Again, the previous request shows a little problem in the implementation. Some fields we can’t access were returned. IMHO, we should get only data relevant for our context, or there should be information about scopes of type of account needed to access those fields.</p>

<p>The Twitter v2 API documentation could be improved by providing such information. An array “field vs scope or account level” would be welcomed. And even better: dynamic documentation showing what you can actually get based on different profiles would be great.</p>

<p>At least, the error message is quite clear, we request fields that we’re not allowed to get. So let’s remove them to get all the data we can get.</p>

<h3 id="request-and-response-4">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;possibly_sensitive&quot;: false,
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;entities&quot;: {
            &quot;hashtags&quot;: [
                {
                    &quot;start&quot;: 236,
                    &quot;end&quot;: 246,
                    &quot;tag&quot;: &quot;apidesign&quot;
                },
                {
                    &quot;start&quot;: 247,
                    &quot;end&quot;: 251,
                    &quot;tag&quot;: &quot;api&quot;
                }
            ],
            &quot;urls&quot;: [
                {
                    &quot;start&quot;: 89,
                    &quot;end&quot;: 112,
                    &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                    &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                    &quot;images&quot;: [
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                            &quot;width&quot;: 360,
                            &quot;height&quot;: 451
                        },
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                            &quot;width&quot;: 150,
                            &quot;height&quot;: 150
                        }
                    ],
                    &quot;status&quot;: 200,
                    &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                    &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                    &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                },
                {
                    &quot;start&quot;: 126,
                    &quot;end&quot;: 149,
                    &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                    &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                },
                {
                    &quot;start&quot;: 162,
                    &quot;end&quot;: 185,
                    &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                    &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                    &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                },
                {
                    &quot;start&quot;: 211,
                    &quot;end&quot;: 234,
                    &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                    &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                    &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                }
            ]
        },
        &quot;lang&quot;: &quot;ja&quot;,
        &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
        &quot;reply_settings&quot;: &quot;everyone&quot;,
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
        &quot;context_annotations&quot;: [
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;30&quot;,
                    &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                    &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848920371311001600&quot;,
                    &quot;name&quot;: &quot;Technology&quot;,
                    &quot;description&quot;: &quot;Technology and computing&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848921413196984320&quot;,
                    &quot;name&quot;: &quot;Computer programming&quot;,
                    &quot;description&quot;: &quot;Computer programming&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;849075668352499712&quot;,
                    &quot;name&quot;: &quot;Web design&quot;,
                    &quot;description&quot;: &quot;Web design&quot;
                }
            }
        ],
        &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
        &quot;source&quot;: &quot;Twitter for Mac&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;public_metrics&quot;: {
            &quot;retweet_count&quot;: 7,
            &quot;reply_count&quot;: 2,
            &quot;like_count&quot;: 29,
            &quot;quote_count&quot;: 4
        },
        &quot;attachments&quot;: {
            &quot;media_keys&quot;: [
                &quot;3_1387820658030170113&quot;,
                &quot;3_1387820658030170124&quot;,
                &quot;3_1387820658097336320&quot;,
                &quot;3_1387820658076303365&quot;
            ]
        }
    },
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 264,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 240,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 563,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 270,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369
            }
        ],
        &quot;users&quot;: [
            {
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;protected&quot;: false,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;verified&quot;: false,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h1 id="retrieve-multiple-tweets">Retrieve multiple tweets</h1>
<p>Now we could directly send a <code>GET /tweets?ids=xxx</code> with the parameters we have discovered when retrieving a single tweet and it would work. But just for the sake of science, let’s try the same method again and check there are not more parameters than we have discovered.</p>

<p>What Twitter <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets">Reference Documentation</a> says:</p>

<blockquote>
  <p>Returns a variety of information about the Tweet specified by the requested ID or list of IDs.</p>
</blockquote>

<p>When I see <code>GET /tweets</code>, I immediately think “I can search in tweets”, and that, for instance, I could get tweets between 2 dates or using a given hashtag, but it’s absolutely not the case here. The documentation could be slightly improved by clearly stating this operation is not made to search tweets but just to retrieve up to 100 tweets at once (and avoid calling <code>GET /2/tweets/:id</code> 100 times). To search tweets, read “<a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/introduction">Search Tweets</a>”.</p>
<h2 id="trying-to-get-tweets-without-any-parameters">Trying to get tweets without any parameters</h2>

<p>For our first call, we will provide no parameters. If it was a search, I would expect to get the first page of all tweets I’m supposed to get. But this is not a search, this operation allows to read up to 100 tweets based on their ids, I expect to get an error.</p>
<h3 id="request-and-response-5">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;ids&quot;: []
            },
            &quot;message&quot;: &quot;The `ids` query parameter can not be empty&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="discover-possible-query-parameters">Discover possible query parameters</h2>

<p>So when providing no parameters, we got an error telling us the operation needs an <code>ids</code> parameter but not what are all other optional parameters, that’s the usual behavior of most if not all APIs. So, let’s use the <code>dummy</code> parameter trick again. We should get the same parameters as to when retrieving a single tweet (minus the ids variation).</p>
<h3 id="request-and-response-6">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets?dummy=value</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;ids&quot;: []
            },
            &quot;message&quot;: &quot;The `ids` query parameter can not be empty&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;dummy&quot;: [
                    &quot;value&quot;
                ]
            },
            &quot;message&quot;: &quot;The query parameter [dummy] is not one of [ids,expansions,tweet.fields,media.fields,poll.fields,place.fields,user.fields]&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="discover-query-parameters-possible-values">Discover query parameters possible values</h2>

<p>Now let’s use the <code>existing_parameter=dummy</code> value trick to guess possible values (note that we expected to see the same values as when retrieving a single tweet).</p>

<h3 id="request-and-response-7">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets?ids=dummy
&amp;expansions=dummy
&amp;tweet.fields=dummy
&amp;media.fields=dummy
&amp;poll.fields=dummy
&amp;place.fields=dummy
&amp;user.fields=dummy</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;parameters&quot;: {
                &quot;ids&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `ids` query parameter value [dummy] is not valid&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;tweet.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `tweet.fields` query parameter value [dummy] is not one of [attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;media.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `media.fields` query parameter value [dummy] is not one of [alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;poll.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `poll.fields` query parameter value [dummy] is not one of [duration_minutes,end_datetime,id,options,voting_status]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;place.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `place.fields` query parameter value [dummy] is not one of [contained_within,country,country_code,full_name,geo,id,name,place_type]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;user.fields&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `user.fields` query parameter value [dummy] is not one of [created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld]&quot;
        },
        {
            &quot;parameters&quot;: {
                &quot;expansions&quot;: [
                    &quot;dummy&quot;
                ]
            },
            &quot;message&quot;: &quot;The `expansions` query parameter value [dummy] is not one of [author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id]&quot;
        }
    ],
    &quot;title&quot;: &quot;Invalid Request&quot;,
    &quot;detail&quot;: &quot;One or more parameters to your request was invalid.&quot;,
    &quot;type&quot;: &quot;https://api.twitter.com/2/problems/invalid-request&quot;
}`</code></pre>
  </div>
</div>

<h2 id="try-to-get-tweets-with-all-data">Try to get tweets with all data</h2>

<p>Providing all possible values we should get the same error as when retrieving a single tweet.</p>

<h3 id="request-and-response-8">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets?ids=
&amp;expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.impression_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.url_link_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;non_public_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;non_public_metrics.user_profile_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.impression_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.like_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.like_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.reply_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.reply_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.retweet_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.retweet_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.url_link_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;organic_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;organic_metrics.user_profile_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.impression_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.impression_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.like_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.like_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.reply_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.reply_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.retweet_count&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.retweet_count&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.url_link_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.url_link_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        },
        {
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;field&quot;: &quot;promoted_metrics.user_profile_clicks&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1387820661742112771&quot;,
            &quot;title&quot;: &quot;Field Authorization Error&quot;,
            &quot;section&quot;: &quot;data&quot;,
            &quot;detail&quot;: &quot;Sorry, you are not authorized to access &#39;promoted_metrics.user_profile_clicks&#39; on the Tweet with ids : [1387820661742112771].&quot;,
            &quot;value&quot;: &quot;1387820661742112771&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/not-authorized-for-field&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h2 id="get-tweets-with-only-allowed-data">Get tweets with only allowed data</h2>

<p>So both operations share the same parameters with the same value and the same behavior. That means we can trust the Twitter API and apply patterns seen on an operation on others related ones. A behavior to reproduce on all your APIs.</p>

<h3 id="request-and-response-9">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets?ids=
&amp;expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: [
        {
            &quot;attachments&quot;: {
                &quot;media_keys&quot;: [
                    &quot;3_1387820658030170113&quot;,
                    &quot;3_1387820658030170124&quot;,
                    &quot;3_1387820658097336320&quot;,
                    &quot;3_1387820658076303365&quot;
                ]
            },
            &quot;reply_settings&quot;: &quot;everyone&quot;,
            &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
            &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
            &quot;source&quot;: &quot;Twitter for Mac&quot;,
            &quot;public_metrics&quot;: {
                &quot;retweet_count&quot;: 7,
                &quot;reply_count&quot;: 2,
                &quot;like_count&quot;: 29,
                &quot;quote_count&quot;: 4
            },
            &quot;id&quot;: &quot;1387820661742112771&quot;,
            &quot;author_id&quot;: &quot;2943613557&quot;,
            &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
            &quot;lang&quot;: &quot;ja&quot;,
            &quot;entities&quot;: {
                &quot;hashtags&quot;: [
                    {
                        &quot;start&quot;: 236,
                        &quot;end&quot;: 246,
                        &quot;tag&quot;: &quot;apidesign&quot;
                    },
                    {
                        &quot;start&quot;: 247,
                        &quot;end&quot;: 251,
                        &quot;tag&quot;: &quot;api&quot;
                    }
                ],
                &quot;urls&quot;: [
                    {
                        &quot;start&quot;: 89,
                        &quot;end&quot;: 112,
                        &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                        &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                        &quot;images&quot;: [
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                                &quot;width&quot;: 360,
                                &quot;height&quot;: 451
                            },
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                                &quot;width&quot;: 150,
                                &quot;height&quot;: 150
                            }
                        ],
                        &quot;status&quot;: 200,
                        &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                        &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                        &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                    },
                    {
                        &quot;start&quot;: 126,
                        &quot;end&quot;: 149,
                        &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                        &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                    },
                    {
                        &quot;start&quot;: 162,
                        &quot;end&quot;: 185,
                        &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                        &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                        &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                    },
                    {
                        &quot;start&quot;: 211,
                        &quot;end&quot;: 234,
                        &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                        &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                        &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    }
                ]
            },
            &quot;possibly_sensitive&quot;: false,
            &quot;context_annotations&quot;: [
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;30&quot;,
                        &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                        &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848920371311001600&quot;,
                        &quot;name&quot;: &quot;Technology&quot;,
                        &quot;description&quot;: &quot;Technology and computing&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848921413196984320&quot;,
                        &quot;name&quot;: &quot;Computer programming&quot;,
                        &quot;description&quot;: &quot;Computer programming&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;849075668352499712&quot;,
                        &quot;name&quot;: &quot;Web design&quot;,
                        &quot;description&quot;: &quot;Web design&quot;
                    }
                }
            ]
        }
    ],
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;width&quot;: 264,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;
            },
            {
                &quot;width&quot;: 240,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;
            },
            {
                &quot;width&quot;: 563,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;
            },
            {
                &quot;width&quot;: 270,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;
            }
        ],
        &quot;users&quot;: [
            {
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;protected&quot;: false,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;verified&quot;: false,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h1 id="what-happens-when-a-tweet-is-not-found">What happens when a tweet is not found</h1>
<p>Providing non-existing ids is also a good way to understand how an API works (and detect bugs). When reading one or multiple non-existing elements, I would expect to get the following responses</p>

<ul>
  <li><code>GET /tweets/:id</code> should return a <code>404 Not Found</code> when reading a non-existing id</li>
  <li><code>GET /tweets</code>should return a <code>200 OK</code> with an empty data list when providing an ids list containing only non-existing ids</li>
  <li><code>GET /tweets</code>should return a <code>200 OK</code> with a non-empty data list when providing an ids list containing existing and non-existing ids</li>
</ul>

<p>I didn’t get all what I expect, I both add less and more.</p>
<h2 id="try-to-get-tweetsid-with-a-non-existing-tweet">Try to get /tweets/:id with a non-existing tweet</h2>

<p>The behavior of this operation goes against Twitter API documentation and more important, against HTTP: don’t do that at home, return <code>404 Not Found</code> and not <code>200 OK</code> with an error. It sounds more like a bug than actual intended behavior. At least the body contains an <code>error</code> explaining the problem, but if consumers concentrate on HTTP status code, such error may stay invisible.</p>
<h3 id="request-and-response-10">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;value&quot;: &quot;1508806917874978822&quot;,
            &quot;detail&quot;: &quot;Could not find tweet with id: [1508806917874978822].&quot;,
            &quot;title&quot;: &quot;Not Found Error&quot;,
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;parameter&quot;: &quot;id&quot;,
            &quot;resource_id&quot;: &quot;1508806917874978822&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/resource-not-found&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h2 id="try-to-get-tweetsids-with-a-non-existing-tweet">Try to get /tweets?ids= with a non-existing tweet</h2>

<p>The behavior is the expected one, we have an empty <code>data</code> list. But we also get more, there’s an <code>errors</code> list indicating the non-found tweets. That’s not something I’ve seen often, but that’s a nice behavior. Though they could guess which ids were not found, clearly indicating the ids that have not been found can simplify the life of consumers.</p>

<h3 id="request-and-response-11">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets?ids=
&amp;expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-copy" data-start="1"><code class="code-block">{
    &quot;errors&quot;: [
        {
            &quot;value&quot;: &quot;1508806917874978822&quot;,
            &quot;detail&quot;: &quot;Could not find tweet with ids: [1508806917874978822].&quot;,
            &quot;title&quot;: &quot;Not Found Error&quot;,
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1508806917874978822&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/resource-not-found&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h2 id="try-to-get-existing-and-non-existing-tweets">Try to get existing and non-existing tweets</h2>

<p>We have here the same behavior as in previous request. This really demonstrate how you can return a “partial” success and provide explicit information about what has been wrong. I wonder if it happens on errors regarding other query parameters.</p>

<h3 id="request-and-response-12">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets?ids=,
&amp;expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: [
        {
            &quot;public_metrics&quot;: {
                &quot;retweet_count&quot;: 7,
                &quot;reply_count&quot;: 2,
                &quot;like_count&quot;: 29,
                &quot;quote_count&quot;: 4
            },
            &quot;entities&quot;: {
                &quot;hashtags&quot;: [
                    {
                        &quot;start&quot;: 236,
                        &quot;end&quot;: 246,
                        &quot;tag&quot;: &quot;apidesign&quot;
                    },
                    {
                        &quot;start&quot;: 247,
                        &quot;end&quot;: 251,
                        &quot;tag&quot;: &quot;api&quot;
                    }
                ],
                &quot;urls&quot;: [
                    {
                        &quot;start&quot;: 89,
                        &quot;end&quot;: 112,
                        &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                        &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                        &quot;images&quot;: [
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                                &quot;width&quot;: 360,
                                &quot;height&quot;: 451
                            },
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                                &quot;width&quot;: 150,
                                &quot;height&quot;: 150
                            }
                        ],
                        &quot;status&quot;: 200,
                        &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                        &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                        &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                    },
                    {
                        &quot;start&quot;: 126,
                        &quot;end&quot;: 149,
                        &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                        &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                    },
                    {
                        &quot;start&quot;: 162,
                        &quot;end&quot;: 185,
                        &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                        &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                        &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                    },
                    {
                        &quot;start&quot;: 211,
                        &quot;end&quot;: 234,
                        &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                        &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                        &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    }
                ]
            },
            &quot;id&quot;: &quot;1387820661742112771&quot;,
            &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
            &quot;lang&quot;: &quot;ja&quot;,
            &quot;context_annotations&quot;: [
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;30&quot;,
                        &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                        &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848920371311001600&quot;,
                        &quot;name&quot;: &quot;Technology&quot;,
                        &quot;description&quot;: &quot;Technology and computing&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848921413196984320&quot;,
                        &quot;name&quot;: &quot;Computer programming&quot;,
                        &quot;description&quot;: &quot;Computer programming&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;849075668352499712&quot;,
                        &quot;name&quot;: &quot;Web design&quot;,
                        &quot;description&quot;: &quot;Web design&quot;
                    }
                }
            ],
            &quot;source&quot;: &quot;Twitter for Mac&quot;,
            &quot;possibly_sensitive&quot;: false,
            &quot;author_id&quot;: &quot;2943613557&quot;,
            &quot;attachments&quot;: {
                &quot;media_keys&quot;: [
                    &quot;3_1387820658030170113&quot;,
                    &quot;3_1387820658030170124&quot;,
                    &quot;3_1387820658097336320&quot;,
                    &quot;3_1387820658076303365&quot;
                ]
            },
            &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
            &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
            &quot;reply_settings&quot;: &quot;everyone&quot;
        }
    ],
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;height&quot;: 331,
                &quot;width&quot;: 264
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;height&quot;: 303,
                &quot;width&quot;: 240
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;height&quot;: 704,
                &quot;width&quot;: 563
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;height&quot;: 369,
                &quot;width&quot;: 270
            }
        ],
        &quot;users&quot;: [
            {
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;verified&quot;: false,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;protected&quot;: false
            }
        ]
    },
    &quot;errors&quot;: [
        {
            &quot;value&quot;: &quot;1508806917874978822&quot;,
            &quot;detail&quot;: &quot;Could not find tweet with ids: [1508806917874978822].&quot;,
            &quot;title&quot;: &quot;Not Found Error&quot;,
            &quot;resource_type&quot;: &quot;tweet&quot;,
            &quot;parameter&quot;: &quot;ids&quot;,
            &quot;resource_id&quot;: &quot;1508806917874978822&quot;,
            &quot;type&quot;: &quot;https://api.twitter.com/2/problems/resource-not-found&quot;
        }
    ]
}`</code></pre>
  </div>
</div>

<h1 id="expansions-and-xxxfields-silent-relationship">Expansions and xxx.fields silent relationship</h1>
<p>Let’s see what happens when providing incoherent query parameters. For instance, let’s request some <code>xxx.fields</code> without requiring <code>expansions</code>. In an ideal world, I would love to get the <code>data,</code> and some <code>errors</code> telling me for instance that requested <code>user.fields</code> are not shown because expansion of user data has not been requested.</p>
<h2 id="get-a-tweet-with-all-fields-but-without-expansions">Get a tweet with all fields but without expansions</h2>

<p>When deactivating <code>expansions</code> query parameter, we get some data but not all data and not a single error. Hopefully, the documentation is quite clear on the relation between <code>expansions</code> and <code>xxx.fields</code>. But this behavior is different from what we have seen when providing wrong values in <code>ids</code> query parameter, it’s a little bit deceptive. It also puzzled me for a few minutes when I was randomly playing with <code>user.fields</code> parameter and not understanding why I had no actual user data (I didn’t requested the expansion of user data).</p>

<h3 id="request-and-response-13">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;possibly_sensitive&quot;: false,
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;entities&quot;: {
            &quot;hashtags&quot;: [
                {
                    &quot;start&quot;: 236,
                    &quot;end&quot;: 246,
                    &quot;tag&quot;: &quot;apidesign&quot;
                },
                {
                    &quot;start&quot;: 247,
                    &quot;end&quot;: 251,
                    &quot;tag&quot;: &quot;api&quot;
                }
            ],
            &quot;urls&quot;: [
                {
                    &quot;start&quot;: 89,
                    &quot;end&quot;: 112,
                    &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                    &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                    &quot;images&quot;: [
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                            &quot;width&quot;: 360,
                            &quot;height&quot;: 451
                        },
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                            &quot;width&quot;: 150,
                            &quot;height&quot;: 150
                        }
                    ],
                    &quot;status&quot;: 200,
                    &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                    &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                    &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                },
                {
                    &quot;start&quot;: 126,
                    &quot;end&quot;: 149,
                    &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                    &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                },
                {
                    &quot;start&quot;: 162,
                    &quot;end&quot;: 185,
                    &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                    &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                    &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                },
                {
                    &quot;start&quot;: 211,
                    &quot;end&quot;: 234,
                    &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                    &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                    &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                }
            ]
        },
        &quot;lang&quot;: &quot;ja&quot;,
        &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
        &quot;reply_settings&quot;: &quot;everyone&quot;,
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
        &quot;context_annotations&quot;: [
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;30&quot;,
                    &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                    &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848920371311001600&quot;,
                    &quot;name&quot;: &quot;Technology&quot;,
                    &quot;description&quot;: &quot;Technology and computing&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848921413196984320&quot;,
                    &quot;name&quot;: &quot;Computer programming&quot;,
                    &quot;description&quot;: &quot;Computer programming&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;849075668352499712&quot;,
                    &quot;name&quot;: &quot;Web design&quot;,
                    &quot;description&quot;: &quot;Web design&quot;
                }
            }
        ],
        &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
        &quot;source&quot;: &quot;Twitter for Mac&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;public_metrics&quot;: {
            &quot;retweet_count&quot;: 7,
            &quot;reply_count&quot;: 2,
            &quot;like_count&quot;: 29,
            &quot;quote_count&quot;: 4
        },
        &quot;attachments&quot;: {
            &quot;media_keys&quot;: [
                &quot;3_1387820658030170113&quot;,
                &quot;3_1387820658030170124&quot;,
                &quot;3_1387820658097336320&quot;,
                &quot;3_1387820658076303365&quot;
            ]
        }
    },
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 264,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 240,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 563,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 270,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369
            }
        ],
        &quot;users&quot;: [
            {
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;protected&quot;: false,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;verified&quot;: false,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h2 id="fix-get-a-tweet-with-all-fields-but-without-expansions">Fix get a tweet with all fields but without expansions</h2>

<p>By adding some magic in the Pre-request Script tab, we can ensure the consistency between <code>expansions</code> and <code>xxx.fields</code>.</p>

<h3 id="pre-request-script">Pre-request Script</h3>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Pre-request Script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">// Typically the kind of code you can put in collection Pre-request Script
// Checks the consistency between expansions value and the presence of xxx.fields query parameters
// That sort of control should be done at implementation level and, in the case of Twitter API,
// some errors (warnings) should be returned along with the data 

// What expansions must contain depending on xxx.fields
const fieldsVsExpansions = {
    &quot;user.fields&quot; : [&quot;author_id&quot;, &quot;entities.mentions&quot;, &quot;in_reply_to_user_id&quot;, &quot;referenced_tweets.id.author_id&quot;],
    &quot;tweet.fields&quot;: [&quot;referenced_tweets.id&quot;],
    &quot;poll.fields&quot; : [&quot;attachments.poll_ids&quot;],
    &quot;place.fields&quot;: [&quot;geo.place_id&quot;],
    &quot;media.fields&quot;: [&quot;attachments.media_keys&quot;]
};

// Looking for an enabled expansions query parameter
const expansions = pm.request.url.query.all().find(param =&gt; param.key===&quot;expansions&quot; &amp;&amp; !param.disabled);
// Checking xxx.fields presence
pm.request.url.query.all().forEach((param) =&gt; {
    // Works only with parameter listed in fieldsVsExpansions    
    const fieldVsExpansions = fieldsVsExpansions[param.key];
    if(fieldVsExpansions !== undefined) {
        // No expansions query parameter defined or enabled
        if(expansions === undefined) {
            const message = `${param.key} parameter provided but no expansions parameter containing one of the following values ${fieldVsExpansions} provided`;
            throw new Error(message);
        }
        else {
            const expansionsValues = expansions.value.split(&quot;,&quot;);
            const expansionValueFound = expansionsValues.some(value =&gt; fieldVsExpansions.indexOf(value) &gt;= 0);
            // Expansions query parameter present but does not contains one of the expected values
            if(!expansionValueFound) {
                const message = `${param.key} provided but expansions parameter does not contain one of the following values: ${fieldVsExpansions}`;
                throw new Error(message);
            }
        }
    }
});</code></pre>
  </div>
</div>

<h3 id="request-and-response-14">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,attachments.poll_ids,attachments.media_keys,in_reply_to_user_id,geo.place_id
&amp;tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld
&amp;media.fields=alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,width
&amp;poll.fields=duration_minutes,end_datetime,id,options,voting_status
&amp;place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type
&amp;user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;possibly_sensitive&quot;: false,
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;entities&quot;: {
            &quot;hashtags&quot;: [
                {
                    &quot;start&quot;: 236,
                    &quot;end&quot;: 246,
                    &quot;tag&quot;: &quot;apidesign&quot;
                },
                {
                    &quot;start&quot;: 247,
                    &quot;end&quot;: 251,
                    &quot;tag&quot;: &quot;api&quot;
                }
            ],
            &quot;urls&quot;: [
                {
                    &quot;start&quot;: 89,
                    &quot;end&quot;: 112,
                    &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                    &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                    &quot;images&quot;: [
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                            &quot;width&quot;: 360,
                            &quot;height&quot;: 451
                        },
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                            &quot;width&quot;: 150,
                            &quot;height&quot;: 150
                        }
                    ],
                    &quot;status&quot;: 200,
                    &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                    &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                    &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                },
                {
                    &quot;start&quot;: 126,
                    &quot;end&quot;: 149,
                    &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                    &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                },
                {
                    &quot;start&quot;: 162,
                    &quot;end&quot;: 185,
                    &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                    &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                    &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                },
                {
                    &quot;start&quot;: 211,
                    &quot;end&quot;: 234,
                    &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                    &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                    &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                }
            ]
        },
        &quot;lang&quot;: &quot;ja&quot;,
        &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
        &quot;reply_settings&quot;: &quot;everyone&quot;,
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
        &quot;context_annotations&quot;: [
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;30&quot;,
                    &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                    &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848920371311001600&quot;,
                    &quot;name&quot;: &quot;Technology&quot;,
                    &quot;description&quot;: &quot;Technology and computing&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848921413196984320&quot;,
                    &quot;name&quot;: &quot;Computer programming&quot;,
                    &quot;description&quot;: &quot;Computer programming&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;849075668352499712&quot;,
                    &quot;name&quot;: &quot;Web design&quot;,
                    &quot;description&quot;: &quot;Web design&quot;
                }
            }
        ],
        &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
        &quot;source&quot;: &quot;Twitter for Mac&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;public_metrics&quot;: {
            &quot;retweet_count&quot;: 7,
            &quot;reply_count&quot;: 2,
            &quot;like_count&quot;: 29,
            &quot;quote_count&quot;: 4
        },
        &quot;attachments&quot;: {
            &quot;media_keys&quot;: [
                &quot;3_1387820658030170113&quot;,
                &quot;3_1387820658030170124&quot;,
                &quot;3_1387820658097336320&quot;,
                &quot;3_1387820658076303365&quot;
            ]
        }
    },
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 264,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 240,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 563,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704
            },
            {
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 270,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369
            }
        ],
        &quot;users&quot;: [
            {
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5131,
                    &quot;following_count&quot;: 943,
                    &quot;tweet_count&quot;: 9634,
                    &quot;listed_count&quot;: 224
                },
                &quot;protected&quot;: false,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;verified&quot;: false,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h1 id="get-always-same-data">Get always same data</h1>
<p>And it’s not finished yet! You get a final Postman bonus. Why not put the list of Twitter API query parameters values you’ll always use in collection variables to ensure consistency between your requests? It will allow you to modify all requests from a single place. You’ll find the “default allowed values” for all query parameters in the collection variables. The following requests take advantage of them. Warning, I didn’t put again the Pre-request scripts checking the consistency between <code>expansions</code> and <code>xxx.fields</code>. But I think it could be worth have it at collection level.</p>
<h2 id="get-a-tweet-always-with-same-data">Get a tweet always with same data</h2>

<p>So both operations share the same parameters with the same value and the same behavior. That means we can trust the Twitter API and apply patterns seen on an operation on others related ones. A behavior to reproduce on all your APIs.</p>

<h3 id="request-and-response-15">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets/?expansions=
&amp;tweet.fields=
&amp;media.fields=
&amp;poll.fields=
&amp;place.fields=
&amp;user.fields=</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: {
        &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
        &quot;lang&quot;: &quot;ja&quot;,
        &quot;context_annotations&quot;: [
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;30&quot;,
                    &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                    &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848920371311001600&quot;,
                    &quot;name&quot;: &quot;Technology&quot;,
                    &quot;description&quot;: &quot;Technology and computing&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;848921413196984320&quot;,
                    &quot;name&quot;: &quot;Computer programming&quot;,
                    &quot;description&quot;: &quot;Computer programming&quot;
                }
            },
            {
                &quot;domain&quot;: {
                    &quot;id&quot;: &quot;66&quot;,
                    &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                    &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                },
                &quot;entity&quot;: {
                    &quot;id&quot;: &quot;849075668352499712&quot;,
                    &quot;name&quot;: &quot;Web design&quot;,
                    &quot;description&quot;: &quot;Web design&quot;
                }
            }
        ],
        &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
        &quot;reply_settings&quot;: &quot;everyone&quot;,
        &quot;author_id&quot;: &quot;2943613557&quot;,
        &quot;id&quot;: &quot;1387820661742112771&quot;,
        &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
        &quot;source&quot;: &quot;Twitter for Mac&quot;,
        &quot;attachments&quot;: {
            &quot;media_keys&quot;: [
                &quot;3_1387820658030170113&quot;,
                &quot;3_1387820658030170124&quot;,
                &quot;3_1387820658097336320&quot;,
                &quot;3_1387820658076303365&quot;
            ]
        },
        &quot;public_metrics&quot;: {
            &quot;retweet_count&quot;: 7,
            &quot;reply_count&quot;: 2,
            &quot;like_count&quot;: 30,
            &quot;quote_count&quot;: 4
        },
        &quot;entities&quot;: {
            &quot;urls&quot;: [
                {
                    &quot;start&quot;: 89,
                    &quot;end&quot;: 112,
                    &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                    &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                    &quot;images&quot;: [
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                            &quot;width&quot;: 360,
                            &quot;height&quot;: 451
                        },
                        {
                            &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                            &quot;width&quot;: 150,
                            &quot;height&quot;: 150
                        }
                    ],
                    &quot;status&quot;: 200,
                    &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                    &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                    &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                },
                {
                    &quot;start&quot;: 126,
                    &quot;end&quot;: 149,
                    &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                    &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                    &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                },
                {
                    &quot;start&quot;: 162,
                    &quot;end&quot;: 185,
                    &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                    &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                    &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                },
                {
                    &quot;start&quot;: 211,
                    &quot;end&quot;: 234,
                    &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                    &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                    &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                    &quot;status&quot;: 200,
                    &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                },
                {
                    &quot;start&quot;: 252,
                    &quot;end&quot;: 275,
                    &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                    &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                    &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                }
            ],
            &quot;hashtags&quot;: [
                {
                    &quot;start&quot;: 236,
                    &quot;end&quot;: 246,
                    &quot;tag&quot;: &quot;apidesign&quot;
                },
                {
                    &quot;start&quot;: 247,
                    &quot;end&quot;: 251,
                    &quot;tag&quot;: &quot;api&quot;
                }
            ]
        },
        &quot;possibly_sensitive&quot;: false
    },
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 264,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;height&quot;: 331
            },
            {
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 240,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;height&quot;: 303
            },
            {
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 563,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;height&quot;: 704
            },
            {
                &quot;type&quot;: &quot;photo&quot;,
                &quot;width&quot;: 270,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;height&quot;: 369
            }
        ],
        &quot;users&quot;: [
            {
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;verified&quot;: false,
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;,
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;protected&quot;: false,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;,
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5140,
                    &quot;following_count&quot;: 946,
                    &quot;tweet_count&quot;: 9726,
                    &quot;listed_count&quot;: 224
                },
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h2 id="get-tweets-always-with-same-data">Get tweets always with same data</h2>

<p>So both operations share the same parameters with the same value and the same behavior. That means we can trust the Twitter API and apply patterns seen on an operation on others related ones. A behavior to reproduce on all your APIs.</p>

<h3 id="request-and-response-16">Request and response</h3>
<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Request</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-http line-numbers code-copy" data-start="1"><code class="code-block">https://api.twitter.com/2/tweets?ids=
&amp;expansions=
&amp;tweet.fields=
&amp;media.fields=
&amp;poll.fields=
&amp;place.fields=
&amp;user.fields=</code></pre>
  </div>
</div>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Response</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-json line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">{
    &quot;data&quot;: [
        {
            &quot;public_metrics&quot;: {
                &quot;retweet_count&quot;: 7,
                &quot;reply_count&quot;: 2,
                &quot;like_count&quot;: 30,
                &quot;quote_count&quot;: 4
            },
            &quot;id&quot;: &quot;1387820661742112771&quot;,
            &quot;source&quot;: &quot;Twitter for Mac&quot;,
            &quot;lang&quot;: &quot;ja&quot;,
            &quot;entities&quot;: {
                &quot;hashtags&quot;: [
                    {
                        &quot;start&quot;: 236,
                        &quot;end&quot;: 246,
                        &quot;tag&quot;: &quot;apidesign&quot;
                    },
                    {
                        &quot;start&quot;: 247,
                        &quot;end&quot;: 251,
                        &quot;tag&quot;: &quot;api&quot;
                    }
                ],
                &quot;urls&quot;: [
                    {
                        &quot;start&quot;: 89,
                        &quot;end&quot;: 112,
                        &quot;url&quot;: &quot;https://t.co/jocUbds6ki&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;,
                        &quot;display_url&quot;: &quot;manning.com/books/the-desi…&quot;,
                        &quot;images&quot;: [
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=orig&quot;,
                                &quot;width&quot;: 360,
                                &quot;height&quot;: 451
                            },
                            {
                                &quot;url&quot;: &quot;https://pbs.twimg.com/news_img/1507656545223512065/9kT4sodO?format=jpg&amp;name=150x150&quot;,
                                &quot;width&quot;: 150,
                                &quot;height&quot;: 150
                            }
                        ],
                        &quot;status&quot;: 200,
                        &quot;title&quot;: &quot;The Design of Web APIs&quot;,
                        &quot;description&quot;: &quot;The Design of Web APIs is a practical, example-packed guide to crafting extraordinary web APIs. Author Arnaud Lauret demonstrates fantastic design principles and techniques you can apply to both public and private web APIs.&quot;,
                        &quot;unwound_url&quot;: &quot;https://www.manning.com/books/the-design-of-web-apis?a_aid=everyday_apis&amp;a_bid=ad5a0fe0&quot;
                    },
                    {
                        &quot;start&quot;: 126,
                        &quot;end&quot;: 149,
                        &quot;url&quot;: &quot;https://t.co/2Qlkqtjd5c&quot;,
                        &quot;expanded_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;,
                        &quot;display_url&quot;: &quot;shoeisha.co.jp/book/detail/97…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://www.shoeisha.co.jp/book/detail/9784798167015&quot;
                    },
                    {
                        &quot;start&quot;: 162,
                        &quot;end&quot;: 185,
                        &quot;url&quot;: &quot;https://t.co/ZQP0pYSzOm&quot;,
                        &quot;expanded_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;,
                        &quot;display_url&quot;: &quot;kyobobook.co.kr/product/detail…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788931463224&amp;orderClick=LEa&amp;Kc=&quot;
                    },
                    {
                        &quot;start&quot;: 211,
                        &quot;end&quot;: 234,
                        &quot;url&quot;: &quot;https://t.co/oH0OXxB62D&quot;,
                        &quot;expanded_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;,
                        &quot;display_url&quot;: &quot;dmkpress.com/catalog/comput…&quot;,
                        &quot;status&quot;: 200,
                        &quot;unwound_url&quot;: &quot;https://dmkpress.com/catalog/computer/web/978-5-97060-861-6/&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    },
                    {
                        &quot;start&quot;: 252,
                        &quot;end&quot;: 275,
                        &quot;url&quot;: &quot;https://t.co/qWNBAfzaLp&quot;,
                        &quot;expanded_url&quot;: &quot;https://twitter.com/apihandyman/status/1387820661742112771/photo/1&quot;,
                        &quot;display_url&quot;: &quot;pic.twitter.com/qWNBAfzaLp&quot;
                    }
                ]
            },
            &quot;created_at&quot;: &quot;2021-04-29T17:26:44.000Z&quot;,
            &quot;text&quot;: &quot;Want to learn how to design Web APIs? You should read my book:\n\n- The Design of Web APIs https://t.co/jocUbds6ki\n- Web APIの設計 https://t.co/2Qlkqtjd5c\n- 웹 API 디자인 https://t.co/ZQP0pYSzOm\n- ПРОЕКТИРОВАНИЕ ВЕБ-API https://t.co/oH0OXxB62D\n\n#apidesign #api https://t.co/qWNBAfzaLp&quot;,
            &quot;context_annotations&quot;: [
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;30&quot;,
                        &quot;name&quot;: &quot;Entities [Entity Service]&quot;,
                        &quot;description&quot;: &quot;Entity Service top level domain, every item that is in Entity Service should be in this domain&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848920371311001600&quot;,
                        &quot;name&quot;: &quot;Technology&quot;,
                        &quot;description&quot;: &quot;Technology and computing&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;848921413196984320&quot;,
                        &quot;name&quot;: &quot;Computer programming&quot;,
                        &quot;description&quot;: &quot;Computer programming&quot;
                    }
                },
                {
                    &quot;domain&quot;: {
                        &quot;id&quot;: &quot;66&quot;,
                        &quot;name&quot;: &quot;Interests and Hobbies Category&quot;,
                        &quot;description&quot;: &quot;A grouping of interests and hobbies entities, like Novelty Food or Destinations&quot;
                    },
                    &quot;entity&quot;: {
                        &quot;id&quot;: &quot;849075668352499712&quot;,
                        &quot;name&quot;: &quot;Web design&quot;,
                        &quot;description&quot;: &quot;Web design&quot;
                    }
                }
            ],
            &quot;author_id&quot;: &quot;2943613557&quot;,
            &quot;attachments&quot;: {
                &quot;media_keys&quot;: [
                    &quot;3_1387820658030170113&quot;,
                    &quot;3_1387820658030170124&quot;,
                    &quot;3_1387820658097336320&quot;,
                    &quot;3_1387820658076303365&quot;
                ]
            },
            &quot;conversation_id&quot;: &quot;1387820661742112771&quot;,
            &quot;possibly_sensitive&quot;: false,
            &quot;reply_settings&quot;: &quot;everyone&quot;
        }
    ],
    &quot;includes&quot;: {
        &quot;media&quot;: [
            {
                &quot;width&quot;: 264,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAE6ua-.jpg&quot;,
                &quot;height&quot;: 331,
                &quot;media_key&quot;: &quot;3_1387820658030170113&quot;,
                &quot;type&quot;: &quot;photo&quot;
            },
            {
                &quot;width&quot;: 240,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRXWUAw6fjs.jpg&quot;,
                &quot;height&quot;: 303,
                &quot;media_key&quot;: &quot;3_1387820658030170124&quot;,
                &quot;type&quot;: &quot;photo&quot;
            },
            {
                &quot;width&quot;: 563,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRnXMAAVKwT.jpg&quot;,
                &quot;height&quot;: 704,
                &quot;media_key&quot;: &quot;3_1387820658097336320&quot;,
                &quot;type&quot;: &quot;photo&quot;
            },
            {
                &quot;width&quot;: 270,
                &quot;url&quot;: &quot;https://pbs.twimg.com/media/E0KHiRiWQAU0kLd.jpg&quot;,
                &quot;height&quot;: 369,
                &quot;media_key&quot;: &quot;3_1387820658076303365&quot;,
                &quot;type&quot;: &quot;photo&quot;
            }
        ],
        &quot;users&quot;: [
            {
                &quot;entities&quot;: {
                    &quot;url&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 0,
                                &quot;end&quot;: 23,
                                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                                &quot;expanded_url&quot;: &quot;https://apihandyman.io/&quot;,
                                &quot;display_url&quot;: &quot;apihandyman.io&quot;
                            }
                        ]
                    },
                    &quot;description&quot;: {
                        &quot;urls&quot;: [
                            {
                                &quot;start&quot;: 80,
                                &quot;end&quot;: 103,
                                &quot;url&quot;: &quot;https://t.co/MARf81Unhv&quot;,
                                &quot;expanded_url&quot;: &quot;http://bit.ly/designwebapis&quot;,
                                &quot;display_url&quot;: &quot;bit.ly/designwebapis&quot;
                            }
                        ],
                        &quot;mentions&quot;: [
                            {
                                &quot;start&quot;: 34,
                                &quot;end&quot;: 45,
                                &quot;username&quot;: &quot;getpostman&quot;
                            },
                            {
                                &quot;start&quot;: 116,
                                &quot;end&quot;: 129,
                                &quot;username&quot;: &quot;apistylebook&quot;
                            }
                        ]
                    }
                },
                &quot;description&quot;: &quot;Arnaud Lauret, doing API stuff at @getpostman, Author of The Design of Web APIs https://t.co/MARf81Unhv. Creator of @apistylebook. Not a very good plumber.&quot;,
                &quot;profile_image_url&quot;: &quot;https://pbs.twimg.com/profile_images/966654273097490432/WPqaXZkf_normal.jpg&quot;,
                &quot;id&quot;: &quot;2943613557&quot;,
                &quot;name&quot;: &quot;API Handyman&quot;,
                &quot;public_metrics&quot;: {
                    &quot;followers_count&quot;: 5140,
                    &quot;following_count&quot;: 946,
                    &quot;tweet_count&quot;: 9726,
                    &quot;listed_count&quot;: 224
                },
                &quot;verified&quot;: false,
                &quot;username&quot;: &quot;apihandyman&quot;,
                &quot;created_at&quot;: &quot;2014-12-27T11:25:37.000Z&quot;,
                &quot;protected&quot;: false,
                &quot;location&quot;: &quot;Paris, France&quot;,
                &quot;url&quot;: &quot;https://t.co/iwBBREWUJM&quot;,
                &quot;pinned_tweet_id&quot;: &quot;1387820661742112771&quot;
            }
        ]
    }
}`</code></pre>
  </div>
</div>

<h1 id="lessons-learned">Lessons learned</h1>
<p>You should now master the Twitter v2 API Tweets lookup parameters and be able to reuse the method shown on any other API operations. And on top of that, you may have discovered the following principles regarding the design, implementation, and documentation of APIs:</p>

<ul>
  <li>Returning detailed error information is a must-have. It helps to learn how to use an API and quickly fix problems. Remember how it was simple to discover how to use the API when providing a dummy parameter or an existing parameter with a dummy value.</li>
  <li>Don’t return too much detailed error information that can’t be used or warned they can’t be used without an action. It can help to avoid unnecessary errors and ease understanding. We could have avoided an error when putting all values of <code>xxx.fields</code> including the not allowed ones.</li>
  <li>Try to create APIs with consistent behavior. Here the query parameter <code>ids</code> gets a special treatment allowing to get <code>errors</code> info in case of success that <code>expansions</code> and <code>xxx.fields</code> don’t have causing some headaches. If I had to choose, I would prefer more info on the second case.</li>
  <li>Document the relationships between parameters. Here, it’s not shown in error feedback but at least the relationship <code>expansions</code> and <code>xxx.fields</code> is well documented.</li>
  <li>Don’t deviate from HTTP. Getting a <code>200 OK</code> when a path is not found is surprising and source of errors in consumers’ code. Note that it’s probably a bug.</li>
  <li>When a function does not behave as people would expect, never refrain to explain it in the documentation and put the link(s) to the other function(s) covering other expected needs. Here the Tweets Lookup documentation could be improved by adding some info about the search function.</li>
</ul>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[What can we learn from tweets lookup error responses of Twitter v2 API? We can learn how to use the tweets lookup operations parameters without reading much of the documentation. We may also learn a few API design, implementation, and documentation principles in the making. And icing on the cake, the technique shown in this post can be applied on any API.]]></summary></entry><entry><title type="html">Don’t organize APIs against ownership</title><link href="https://apihandyman.io/dont-organize-apis-against-ownership/" rel="alternate" type="text/html" title="Don’t organize APIs against ownership" /><published>2022-03-30T00:00:00-05:00</published><updated>2022-03-30T00:00:00-05:00</updated><id>https://apihandyman.io/dont-organize-apis-against-ownership</id><content type="html" xml:base="https://apihandyman.io/dont-organize-apis-against-ownership/"><![CDATA[<p>It doesn’t matter how APIs are organized, in layers, by business domain or any other dimension if you don’t take care of the most important one. The one dimension that rules them all: ownership. This post is the third and last of the “3 dimensions to consider for a successful API-First strategy” series.
<!--more--></p>

<p><em>Banner by my partner in crime <a href="https://linktr.ee/mrlapindesign">Mister Lapin</a>.</em></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">3 dimensions to consider for a successful API-First strategy Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text"><p>When talking about “organizing”, “classifying” or “categorizing” APIs, the private/partner/public classification is the one that comes first very often. But that’s not the only way of labeling APIs and this classification alone is far from sufficient to understand the implications of making APIs a first-class citizen in your organization.</p>

<p>In the past years, when I was advocating APIs to business and IT people in a company engaged in an API-First journey (though it has decades-old legacy systems), I very often described APIs being organized in 3 dimensions in order to help them discover and grasp some important API-first challenges and benefits: API Layers, Business domains (or capabilities), and Ownership.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list border-left">
      
      <ul class="list-group list-group-flush">
        
          
          
          <li class="list-group-item"><a href="/organizing-apis-in-layers-system-business-and-experience-apis/">1 - Organizing APIs in System, Business, and Experience Layers</a></li>
          
        
          
          
          <li class="list-group-item"><a href="/organize-apis-around-business-domains-and-capabilities-not-tools/">2 - Organize APIs around business domains and capabilities, not tools</a></li>
          
        
          
          
          <li class="list-group-item active">3 - Don't organize APIs against ownership</li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<p>In this post, we’ll talk about the importance of ownership in the organization of APIs.</p>

<h1 id="disaster-waiting-to-happen">Disaster waiting to happen</h1>

<p>I did quite a lot of API design reviews. It went pretty well, but some were more chaotic than others. There were different reasons for that, one of them being ownership issues. Every time I encountered such problems, it ended pretty badly.</p>

<h2 id="an-api-project">An API project</h2>

<p>The ownership issue example I use the most probably because it made me realize that an API  cannot be handled through projects (actually, it was a SOAP Web Service).</p>

<p>The API in question was the one allowing access to contracts, and there was a “read contract” operation (something that would look like GET /contracts/{contractId}). It had been created for Project A by Project Team A (that was disbanded after the project). As Project A only needed a few properties of a contract, like its number and name, Project Team A decided that this operation would only return those data.</p>

<p>Project B came a few weeks after Project A had been released. Project B also needed to read a contract, but they needed the contract’s product category. However, being an essential piece of information, whatever the context, it was not returned. Project B had to modify the operation to add that information but only those one; that way, Project C would have some work, another project cycle would start.</p>

<p>Some may think that’s not a big deal, but each project took a little longer and so cost more money because “read a contract” had to be modified repeatedly. Also, the resulting APIs after a few projects are usually not the best in class.</p>

<h2 id="no-business-decisions-possibles">No business decisions possibles</h2>

<p>Another one that I have seen often in the past years is when there are silos that feel like there are 3 meters thick reinforced concrete walls between business and IT.</p>

<p>When I do an API design review, I ask many business/subject matter questions, and I often challenge the needs that led to the API’s creation or modification. Not that I know everything about all subject matters, it’s even the contrary. But I’m must ensure that people in charge have identified the proper needs. And if I can’t understand what the API does and why, how are its future users expecting a “something for dummies” API will? Sometimes these discussions lead the team to actually question the needs. But if the “business” won’t change their mind and consider the team building the API just executors, that only leads to terrible APIs.</p>

<h2 id="no-development-capacities">No development capacities</h2>

<p>Another example that I met only once but marked my mind. I remember a review that went very well. The conversation with the designer was smooth. The first version of the design was not as good as it could have been regarding needs that needed to be represented and guidelines conformity, but everything was easily and quickly fixed. The designer understood all feedback and learned in the making. That was a great review, but problems started after.</p>

<p>Working in Team A, the designer was also supposed to be the API owner. Because of some security and architecture constraints, it had been decided the API would be developed using different technology and infrastructure that team A was used to. The development was delegated to Team B, with which they happen to work with sometimes. Team B frequently built UI on top of the system managed by team A (mainly directly using their database). Also, Team B was supposed to be the first consumer of the API.</p>

<p>What happened? Team B started to build the API precisely like they wanted, absolutely not taking care of the design made by the API owner. They did not care about the API design guidelines and common practices, but worst: usability and reusability were not a concern.</p>

<p>Hopefully, it didn’t last long; the API owner stopped everything and made the necessary to be able to expose the API they wanted to create on their side.</p>

<h1 id="no-good-apis-can-exist-without-true-ownership">No good APIs can exist without true ownership</h1>

<p>So based on my experience, I can say that no good APIs can exist without true ownership. But what does it means?</p>

<h2 id="defining-api-ownership">Defining API ownership</h2>

<p>An API must be a product, not a project. It is something that fulfills greater needs than projects ones. It is thought on long-term.</p>

<p>Corollary to the API being a product, an API must belong to a single team.  A single team owning the API ensures a long term vision that will fulfill all the needs of all current and future consumers and ensure consistent evolutions</p>

<p>This team can make business decisions. Some business owners/stakeholders must be integrated into the team or they must listen to the team in order to build the best possible product.</p>

<p>And last but not least, this team has full control over API developments. Either because the team has the full capacity to develop them or because it has full control other the hired contractors/third party (who will do exactly what is expected).</p>

<p>The combination of all these elements defines API ownership.</p>

<h2 id="conways-law">Conway’s Law</h2>

<p>Such organization around ownership will irremediably be driven by <a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway’s law</a>. An adage that states our systems organizations mirror their own communication structure. It applies at 2 levels: human organization and technology organization.</p>

<div class="image ">
    <figure class="figure">
        <img src="/images/dont-organize-apis-against-ownership/ownership.png" class="figure-img img-fluid" /></figure>
</div>

<p>A company will be divided into various sub-organizations, it affects people and tools.</p>

<p>Inside those sub-organizations, in some ideal contexts, a single team may be able to handle a whole business domain (see Business Domain 1 or 4 in the figure), including all of its APIs, even the most hidden one. But that’s not always the case.</p>

<p>If a business domain is too big (see Business Domain 2 in the figure), its APIs will have to be distributed among several teams. But that will require some synchronization between the teams in order to keep a certain level of consistency between the various APIs of the domain, especially the ones that are exposed outside of the domain.</p>

<p>It is not that rare to have various technology used inside a domain (see Business Domain 3). Imagine having a good old commercial off the shelf vendor solution, requiring very specific knowledge), it would be wise to let it be in the hand of experts that will just concentrate on making it run and expose system APIs and have another team dedicated to the creation of business APIs using a more common technology (like NodeJS, .Net or Java for instance).</p>

<h1 id="3-dimensions">3 dimensions</h1>

<p>That concludes this series describing 3 dimensions of API organization:</p>

<ul>
  <li>API Layers: 3 different types of APIs with different purposes (system, business experience). Only the business layer is required.</li>
  <li>Business domains and capabilities: Organize around business domains and not tools to create independent and reusable APIs fulfilling business needs without exposing all domain features (and so its complexity). An API is a domain or a sub-domain for dummies.</li>
  <li>Ownership: Each API must have a single owner with full power from decisions to implementation. Take Conway’s law into account when defining the teams managing the APIs.</li>
</ul>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[It doesn’t matter how APIs are organized, in layers, by business domain or any other dimension if you don’t take care of the most important one. The one dimension that rules them all: ownership. This post is the third and last of the “3 dimensions to consider for a successful API-First strategy” series.]]></summary></entry><entry><title type="html">We always forget to select a Postman environment</title><link href="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/" rel="alternate" type="text/html" title="We always forget to select a Postman environment" /><published>2022-03-26T00:00:00-05:00</published><updated>2022-03-26T00:00:00-05:00</updated><id>https://apihandyman.io/we-always-forget-to-select-a-postman-environment</id><content type="html" xml:base="https://apihandyman.io/we-always-forget-to-select-a-postman-environment/"><![CDATA[<p>When using Postman, it’s a best practice to store API token values in environment secret variables.
Environment variables can also be used to store other variables uses in scripts.
But when opening a collection, we often forget to select an environment and spend a few seconds if not minutes or more trying to figure out what the problem is with a request. Just to realize in the end that we just forgot to select an environment.
How can this be avoided?
<!--more--></p>

<div class="card series-toc">
  <div class="card-header series-toc-title">
    <h5 id="series">Postman Tips and Tricks Series</h5>
  </div>
  <div class="row series-toc_content">
    <div class="col-md-7 series-toc-summary">
      <div class="card-body">
        <p class="card-text">
<p>This post is a “Postman Tips And Tricks Post” in which I share the tips and tricks I learn while using Postman.
You can either:</p>

<ul>
  <li>Read this post</li>
  <li>Read the collection documentation on <a href="https://www.postman.com/apihandyman/workspace/postman-tips-and-tricks/documentation/143378-215afe9b-9b7d-459d-b020-361dbf1c5bf4">Postman network</a></li>
  <li>Use this <a href="https://www.postman.com/apihandyman/workspace/postman-tips-and-tricks/documentation/143378-215afe9b-9b7d-459d-b020-361dbf1c5bf4"><img src="/images/commons/run-in-postman.svg" alt="Run in Postman" /></a> button to fork the collection directly in Postman</li>
  <li>Get the collection from <a href="https://github.com/apihandyman/postman-tips-and-tricks/tree/main/dont-forget-to-select-an-environment">Github</a> to import it in Postman.</li>
</ul>

<p><em>(Click on the “View complete collection documentation” link in lower right corner to see documentation in full screen after import or fork)</em></p>

<p>You can also see all of the collections of this series in my <a href="https://www.postman.com/apihandyman/workspace/postman-tips-and-tricks/overview">Postman Tips and Tricks</a> Postman Workspace.</p>
</p>
      </div>
    </div>
    <div class="col-md-5 series-toc-list border-left">
      
      <ul class="list-group list-group-flush">
        
          
          
          <li class="list-group-item active">We always forget to select a Postman environment</li>
          
        
          
          
          <li class="list-group-item"><a href="/how-to-use-bootstrap-in-postman-visualizer/">How to use Bootstrap in Postman Visualizer</a></li>
          
        
        
      </ul>
    </div>
  </div>
</div>

<p>This post demonstrates how to take advantage of <code>pm.environment.name</code> in Pre-Scripts to prevent sending a request and have a clear error message when an environment is not selected. The use case that will be used to demonstrate all that is retrieving a tweet with Twitter v2 API. The aim of this collection being error handling, you’ll need to have an actual access to Twitter v2 API only if you want to make the request succeed.</p>

<h1 id="how-it-works">How it works</h1>

<p>The magic is mostly handled in the Pre-request script regarding checking an environment is selected. But what happens there allows to have more precise error message on 401 errors in Test script.</p>

<h2 id="collection-pre-request-script">Collection Pre-request Script</h2>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Pre-request Script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          <a role="button" class="btn border-0 rounded-0 code-expandcollapse-btn" aria-label="expand or shrink" onclick="expandCollapseCode(this)" data-toggle="tooltip" data-placement="top" title="Expand/Shrink"><img class="btn-icon" src="/images/commons/icons/maximize.svg" /></a>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-javascript line-numbers code-collapsed code-copy" data-start="1"><code class="code-block">/*******************************************/
/*  Checks a valid environment containing  */
/*  a specific variable used as bearer     */
/*  token is selected                      */
/*******************************************/

/* The name and default value of the variable used in Authorization
   and checked here is defined at collection level.
   That way, this code snippet can be easily copied to other
   collections */
const tokenVariableName = pm.collectionVariables.get(&quot;token_variable_name&quot;);
const tokenVariableDefaultValue = pm.collectionVariables.get(&quot;token_variable_default_value&quot;);
// The message indicating how to solve the problem
let message;
// Get selected environment name (undefined if none is selected)
const selectedEnvironment = pm.environment.name;
// Get token environment variable value (undefined if none exists or if current value is empty) 
const tokenVariableValue = pm.environment.get(tokenVariableName);

if(selectedEnvironment === undefined) {
    message = `No environment containing a ${tokenVariableName} variable has been selected`;
}
else if(tokenVariableValue === undefined) {
    message = `Selected environment (${selectedEnvironment}) does not contain a ${tokenVariableName} variable`;
}
else if(tokenVariableValue.length === 0) {
    message = `Selected environment (${selectedEnvironment}) contains a ${tokenVariableName} variable but its current value is empty`;
}
else if(tokenVariableValue === tokenVariableDefaultValue) {
    message = `Selected environment (${selectedEnvironment}) contains a ${tokenVariableName} variable but its current value is the default one (${tokenVariableDefaultValue})`;
}

if(message) {
    throw new Error(message);
}</code></pre>
  </div>
</div>

<p>The collection level Pre-Request script checks that an environment is selected by verifying the value of <code>pm.environment.name</code> .</p>

<p>It also checks a specific variable is defined and has a correct value. The name of that variable is defined in the <code>token_variable_name</code> collection variable. The script also verifies the the variable has a value and that value is not the default one.</p>

<p>If there’s anything wrong with one of the checks, the request is not sent and a red message explaining exactly what the problem is appears on screen thanks to <code>throw new Error(message)</code>.</p>

<h2 id="collection-tests">Collection Tests</h2>

<div class="card card-code text-white bg-dark border-dark">
  
  <div class="card-header">
    <div class="row m-0">
      <div class="col align-self-center">
        <p class="m-0 title">Test Script</p>
      </div>
      <div class="col col-auto pr-0">
        <div class="btn-group" role="group" aria-label="code snippet control">
          <a role="button" class="btn code-copy-btn border-0 rounded-0" aria-label="copy" data-toggle="tooltip" data-placement="top" title="Copy"><img class="btn-icon" src="/images/commons/icons/copy.svg" /></a>
          
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <pre class="language-javascript line-numbers code-copy" data-start="1"><code class="code-block">if(pm.response.code === 401) {
    const selectedEnvironment = pm.environment.name;
    const tokenVariableName = pm.collectionVariables.get(&quot;token_variable_name&quot;);
    const tokenVariableValue = pm.environment.get(tokenVariableName);
    const message = `Selected environment (${selectedEnvironment}) contains` +
                    `a ${tokenVariableName} variable but its value is` +
                    `probably not valid`;
    pm.test(&quot;Unauthorized request (401)&quot;, function() {
        pm.expect.fail(message);
    });
}</code></pre>
  </div>
</div>

<p>The collection level Tests script take for granted that the Pre-Request script has done its job. As there was an environment selected and it contains the expected variable which is not empty or does not have a default value, the test script can guess the token sent is invalid when receiving a 401 Unauthorized response.</p>

<h2 id="collection-variables">Collection variables</h2>

<p>In order to make the code easily reusable across various collection, some collection variable are used:</p>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>VALUE</strong></th>
      <th><strong>DESCRIPTION</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>token_variable_name</td>
      <td>twitter_token</td>
      <td>The name of variable used in the token field in collection Authorization configuration.</td>
    </tr>
    <tr>
      <td>token_variable_default_value</td>
      <td>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</td>
      <td>The default value of the variable (hence, the one in INITIAL VALUE)</td>
    </tr>
  </tbody>
</table>

<h2 id="environment-variables">Environment variables</h2>

<p>This collection requires the creation of an environment containing the following variables. This workspace comes with ready-to-use environment to test the various behaviors of the scripts (see Test cases below).</p>

<div class="alert alert-danger">
<p>Never store API tokens in initial value. Read <a href="https://blog.postman.com/how-to-use-api-keys/">How to use API Keys</a> to learn more.</p>

</div>

<table>
  <thead>
    <tr>
      <th><strong>VARIABLE</strong></th>
      <th><strong>TYPE</strong></th>
      <th><strong>INITIAL VALUE</strong></th>
      <th><strong>CURRENT VALUE</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>twitter_token</td>
      <td>secret</td>
      <td>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</td>
      <td>A Twitter API bearer token (Read <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">Twitter API documentation</a> to get one)</td>
    </tr>
  </tbody>
</table>

<h1 id="test-cases">Test cases</h1>

<p>Use one of the following test cases to see the collection level Pre-Script and Tests scripts in action.</p>

<div class="alert alert-info">
<p>Note that you can make the environment drop list larger to see full environment names.</p>

</div>

<h2 id="no-environment-selected">No environment selected</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-0.png" alt="" /></p>

<ol>
  <li>Set environment drop list on “No Environment” (It’s the default value when opening the collection)</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="empty-environment">Empty environment</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-1.png" alt="" /></p>

<ol>
  <li>Create an environment (don’t create any variable)</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="wrong-name">Wrong name</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-2.png" alt="" /></p>

<ol>
  <li>Create an environment</li>
  <li>Add a <code>twitter_tokenn</code> variable to your environment (yes, 2 n’s, it does not match the <code>token_variable_name</code> collection variable value)</li>
  <li>Set INITIAL VALUE to <code>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</code> (it matches <code>token_variable_default_value</code> collection variable value)</li>
  <li>Save the environment</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="default-value">Default value</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-3.png" alt="" /></p>

<ol>
  <li>Create an environment</li>
  <li>Add a <code>twitter_token</code> variable to your environment (it matches the <code>token_variable_name</code> collection variable value)</li>
  <li>Set INITIAL VALUE to <code>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</code> (it matches <code>token_variable_default_value</code> collection variable value)</li>
  <li>Save the environment</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="invalid-token">Invalid token</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-4.png" alt="" /></p>

<ol>
  <li>Create an environment</li>
  <li>Add a <code>twitter_token</code> variable to your environment (it matches the <code>token_variable_name</code> collection variable value)</li>
  <li>Set INITIAL VALUE to <code>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</code> (it matches <code>token_variable_default_value</code> collection variable value)</li>
  <li>Set CURRENT VALUE to <code>INVALID_TOKEN</code></li>
  <li>Save the environment</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>

<h2 id="valid-token">Valid token</h2>

<p><img src="https://apihandyman.io/postman-images/postman-tips-and-tricks/dont-forget-to-select-an-environment/use-case-5.png" alt="" /></p>

<ol>
  <li>Read <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">Twitter API documentation</a> to get a bearer token</li>
  <li>Create an environment</li>
  <li>Add a <code>twitter_token</code> variable to your environment (it matches the <code>token_variable_name</code> collection variable value)</li>
  <li>Set INITIAL VALUE to <code>PUT_YOUR_TOKEN_IN_CURRENT_VALUE</code> (it matches <code>token_variable_default_value</code> collection variable value)</li>
  <li>Put the bearer token value in <code>twitter_token</code> variable current value (NOT the initial value!)</li>
  <li>Save the environment</li>
  <li>Select the environment</li>
  <li>Send the <code>Get a tweet</code> request</li>
</ol>]]></content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html"><![CDATA[When using Postman, it’s a best practice to store API token values in environment secret variables. Environment variables can also be used to store other variables uses in scripts. But when opening a collection, we often forget to select an environment and spend a few seconds if not minutes or more trying to figure out what the problem is with a request. Just to realize in the end that we just forgot to select an environment. How can this be avoided?]]></summary></entry></feed>