<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://apihandyman.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apihandyman.io/" rel="alternate" type="text/html" /><updated>2021-09-11T12:20:42-05:00</updated><id>https://apihandyman.io/feed.xml</id><title type="html">API Handyman</title><subtitle>Hi! I'm Arnaud Lauret, the API Handyman and author of The Design of Web APIs. I like to share what I do, struggle with, learn, and teach while working in the API space.</subtitle><author><name>Arnaud Lauret</name></author><entry><title type="html">An Api Design Review Is Based On Facts Not Opinions</title><link href="https://apihandyman.io/an-api-design-review-is-based-on-facts-not-opinions/" rel="alternate" type="text/html" title="An Api Design Review Is Based On Facts Not Opinions" /><published>2021-09-08T00:00:00-05:00</published><updated>2021-09-08T00:00:00-05:00</updated><id>https://apihandyman.io/an-api-design-review-is-based-on-facts-not-opinions</id><content type="html" xml:base="https://apihandyman.io/an-api-design-review-is-based-on-facts-not-opinions/">&lt;p&gt;If you’re an API design reviewer and, like the Who, you got a feeling inside that you can’t explain during an API design review, maybe you’re falling in love with the API designer… or more probably: you’re on the verge of giving an opinion.
And that is a problem.
What is the role of an API design reviewer?
Distort API designs to their liking or objectively analyze them based on facts?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;that-annoying-feeling&quot;&gt;That annoying feeling&lt;/h1&gt;

&lt;p&gt;As an API design reviewer, I analyze, more often than, not designs that must be fixed because of wrong needs, some blatant violation of our guidelines, use of totally cryptic vocabulary, unnecessary steps in an API call flow or missing operations, use of non extensible array of string, or a simple typo.
But sometimes, they’re just “not good” and I can’t really explain it unless by saying I would have done it differently.
Sometimes, it’s so different from what I would have done it becomes a really annoying feeling.&lt;/p&gt;

&lt;p&gt;If I try to keep a professional stance, I could say It becomes annoying because I feel in my guts that the designers are heading the wrong way and I want to help them avoid falling into some terrible trap… 
But, to be honest, it’s just because I want to scream “it’s different from my idea, I hate it, that sucks!”.&lt;/p&gt;

&lt;p&gt;Engaging the discussion on such a feeling and with such a state of mind can lead to a sterile argument, because the designers feel that their design is “good”.
And they probably are right to think so, because there’s no problem, no trap.
Hopefully, I’ve learned to avoid such arguments and overcome that really annoying feeling.&lt;/p&gt;

&lt;h1 id=&quot;how-to-live-with-it&quot;&gt;How to live with it&lt;/h1&gt;

&lt;p&gt;I do not remember fondly of the time I was a manager, I’m not made for that, but I learned a few things that are still useful in my daily expert/coach job.
I’ve learned that when you give a task to someone, you don’t tell them how to do it, you describe the expected outcomes.
I have also learned that all people do not think/work the same way and so how the task is done can be different from how you would have done it.
The solution could also be different because you don’t have all the context when giving the task.
All you have to do is actually evaluate if the expected outcome are there to judge the quality of what has been done.&lt;/p&gt;

&lt;p&gt;So, when I have that annoying feeling, just because an API is different from what I would have done, I rethink to what are the expected outcomes of an API design.
An API design is supposed to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fulfill the right needs&lt;/li&gt;
  &lt;li&gt;Be easy to understand&lt;/li&gt;
  &lt;li&gt;Be easy to use&lt;/li&gt;
  &lt;li&gt;Be easily evolvable&lt;/li&gt;
  &lt;li&gt;Conforms to guidelines and common practices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the design currently reviewed objectively checks all those items, there’s no need to argue.
But you can still propose your alternative design just to propose another perspective, but don’t forget to precise that the provided is design is actually correct.
Sometimes designer will says “oh yes, I prefer your version”, or maybe make a counter proposition mixing the 2 options and sometimes they’ll keep their design.
In that case, don’t take that as an insult, be a grown up person, it’s actually their API, not yours (and it’s normal if that still stings a little, you’ll be less an less annoyed as you practice).&lt;/p&gt;

&lt;p&gt;Reviewing that checklist may help you to factually figure the real problem you were feeling in your guts.
If something is factually not checked, then you can dig into that based on facts not just an opinion.
And that is the real job of an API design reviewer.&lt;/p&gt;

&lt;h1 id=&quot;help-people--dont-do-their-job&quot;&gt;Help people , don’t do their job&lt;/h1&gt;

&lt;p&gt;So as an API designer reviewer, you may have feelings and opinions like other humans.
But learn to overcome them by factually thinking about what makes an API design objectively good.
Indeed, you’re not here to design an API but to help people design it.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">If you’re an API design reviewer and, like the Who, you got a feeling inside that you can’t explain during an API design review, maybe you’re falling in love with the API designer… or more probably: you’re on the verge of giving an opinion. And that is a problem. What is the role of an API design reviewer? Distort API designs to their liking or objectively analyze them based on facts?</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 5</title><link href="https://apihandyman.io/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 5" /><published>2021-09-01T00:00:00-05:00</published><updated>2021-09-01T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-5</id><content type="html" xml:base="https://apihandyman.io/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/">&lt;p&gt;Fifth and last post about my first ever (recorded) live coding session given at the Manning API Conference.
Thanks to all the work done, I had a good setup, great visual style, titles over VS Code, speaker’s notes and was able to code at light speed.
But I was hesitant and not fast enough when presenting, I needed to train myself and fine tune, optimize or remove content to make things smooth and keep in given time frame.
And once again VS Code went to the rescue.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference: &lt;a href=&quot;/supercharge-openapi-to-efficiently-describe-apis/&quot;&gt;Supercharge OpenAPI to efficiently describe APIs (click to what it!)&lt;/a&gt;.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;training-as-usual-was-not-easy&quot;&gt;Training as usual was not easy&lt;/h1&gt;

&lt;p&gt;It’s not specific to this coding session, but when I prepare a talk there are always parts that needs more training than others.
It is quite easy when working on slides to just jump to the first slide of the part I need to work on, and again, and again until satisfied.
I can go 1 or 2 slides back if I want.
And I can work on parts almost randomly depending on my mood.
While training, I can also adapt content to shorten/remove some element because it’s too long.&lt;/p&gt;

&lt;p&gt;It was not that easy to do that here.
Jump back and forth was complicated and modifying the content also.&lt;/p&gt;

&lt;h1 id=&quot;jumping-back-and-forth-to-any-step&quot;&gt;Jumping back and forth to any step&lt;/h1&gt;

&lt;p&gt;Jumping to any part of the presentation was complicated in the beginning because when I wanted to practice a specific part I had to re-prepare the OpenAPI file to put it in the state needed for this part. 
If I wanted to go “1 or 2 slides” back I had to carefully remember what to remove in my OpenAPI file.&lt;/p&gt;

&lt;p&gt;At first I thought using branches or tagged commits, but based on a previous experience (for my JQ and OpenAPI series) I knew this was not going to work here.
Indeed, it’s complicated to do a “replace all” across files in separate branches, while it’s dead simple to do that on multiple files in a folder (even when there are sub folders).&lt;/p&gt;

&lt;p&gt;And I already had a good part of the solution: I just had to create a &lt;code&gt;motu.yaml&lt;/code&gt; file in each &lt;code&gt;steps/step-X&lt;/code&gt; folder.
Thanks to the “Next step” task, the OpenAPI file corresponding to the step was copied to the root folder just like index and todo files.
VS Code handled the &lt;code&gt;motu.yaml&lt;/code&gt; file reloading totally seamlessly.
That trick also allowed to magically add code (actual code or comments) when switching to a new step, that was really convenient. 
That also ensured that when switching to a new step, the OpenAPI file was in the expected status even if I had to skip something in previous step.&lt;/p&gt;

&lt;p&gt;I also added new bash scripts and new tasks to be able to go to previous step and restart.
That way I could easily go to the step I wanted to practice.
After a while, once content has been stabilized I also added other scripts and tasks and ended with the followings:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Script triggered&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Go to step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/go.sh $step&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/step-{$step}&lt;/code&gt; content to root level (does nothing if step doesn’t exist). The &lt;code&gt;$step&lt;/code&gt; can be either a number or the step’s name coming from the todo.html files, &lt;code&gt;&quot;More accurate data description (4/15)&quot;&lt;/code&gt; for instance. The tasks shows the list of available steps (hardcoded in &lt;code&gt;tasks.json&lt;/code&gt; file)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Next step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/next.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/step-{current step + 1}&lt;/code&gt; content to root level (does nothing if step doesn’t exist)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Previous step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/previous.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/step-{current step - 1}&lt;/code&gt; content to root level (does nothing if step doesn’t exist)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reload step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/reload.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/step-{current step}&lt;/code&gt; content to root level (useful to check modifications done on current step)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reset step&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/reset.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Copy &lt;code&gt;steps/reset&lt;/code&gt; content to root level (to restart from the beginning)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clean before commit&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;steps/clean.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Remove &lt;code&gt;index.css&lt;/code&gt;, &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;todo.html&lt;/code&gt;, &lt;code&gt;motu.yaml&lt;/code&gt; files from root folder&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I only defined key bindings for Next and Previous step tasks.
The “Go to step” is quite convenient but unfortunately the step list is hardcoded and I only had the idea after the recording (I added it so people using the repo could go to the step they want).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/go-to-step.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;removing-stuff-was-a-pain&quot;&gt;Removing stuff was a pain&lt;/h1&gt;

&lt;p&gt;As I was able to work on each step, I could easily train myself on each steap and evaluate the best possible time for each step.
And so I came to the conclusion that I was still not fitting into the time frame, though I had an extra 5 minutes granted by conference organizers, saperlipopette! (french polite curse word).
Thanks to my list of steps and their timing, I had a better vision of what I should modify and so I:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shorten some steps, by for instance starting with a pre-filled basic OpenAPI files or adding snippets&lt;/li&gt;
  &lt;li&gt;Removed some steps not bringing interesting information (like spending 30s explaining the various use of the OpenAPI Spec)&lt;/li&gt;
  &lt;li&gt;Removed some steps that were kind of duplicating other steps or not bringing interesting information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The modifications were easy to do on my list … but handling the impacts on my various files was a bit laborious.
Especially the todo files containing the useful “step X/Y” information.
If I was not in a rush I would have redo everything in order to make such modification simpler …
But sometimes it is better to leave well enough alone (“the best is the enemy of good” as we say in french), it took me less time to fix all that the ugly way than rethink the entire system.&lt;/p&gt;

&lt;h1 id=&quot;recording-celebrating-and-recovering&quot;&gt;Recording, celebrating and recovering&lt;/h1&gt;

&lt;p&gt;And after all that, working weekends and nights (I have a day job and a blog to handle), I was able to do the recording at last, and that went well on second take (the first one was 95% good but I forgot something just in the end… saperlipopette again).
I did not really practiced the full session before the actual recording, as I worked more on separated steps, but with more time to practice I should be able to do this session totally live without problem.
By the way, final tips: don’t forget to put you phone AND you computer in do not disturb mode in order to avoid unwanted notifications when giving or recording a presentation.&lt;/p&gt;

&lt;p&gt;I was really happy when it was at last done.
I was quite proud of this very first coding session though it did not looked as expected and I always see some imperfections and possible improvements.
Being able to talk without having my word for word speech was a also great achievement.&lt;/p&gt;

&lt;p&gt;I was happy but that left me totally exhausted.
I felt just like if I had traveled to the other side of earth, spoke and attended at a in person 2 days conference and suffered jet lag.
It took me more than a week to recover.&lt;/p&gt;

&lt;h1 id=&quot;sharing-successes-and-failures&quot;&gt;Sharing successes and failures&lt;/h1&gt;

&lt;p&gt;But all this was worth the cost; I learned a lot, attendees were happy and I hope that this 5 posts series will help others doing coding sessions!
I hope also that I was able to show you that behind what may look like total perfection, total mastery, there is practice, simple tools but also failures, doubts, curse words … and magic tricks.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Fifth and last post about my first ever (recorded) live coding session given at the Manning API Conference. Thanks to all the work done, I had a good setup, great visual style, titles over VS Code, speaker’s notes and was able to code at light speed. But I was hesitant and not fast enough when presenting, I needed to train myself and fine tune, optimize or remove content to make things smooth and keep in given time frame. And once again VS Code went to the rescue.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 4</title><link href="https://apihandyman.io/live-coding-at-light-speed-with-vs-code/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 4" /><published>2021-08-25T00:00:00-05:00</published><updated>2021-08-25T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-4</id><content type="html" xml:base="https://apihandyman.io/live-coding-at-light-speed-with-vs-code/">&lt;p&gt;This is the fourth post about my first ever (recorded) live coding session given at the Manning API conference.
In this series &lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;second post&lt;/a&gt;, I listed some problems I encountered and started to solve them in &lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;previous post&lt;/a&gt;.
But there are other problems to solve, one of them was that I was not coding and using VS Code fast enough.
In this post, I’ll show you how I solved that using a few VS Code tricks, the most important one being: the absolutely &lt;a href=&quot;https://aarongilbreath.medium.com/a-brief-history-of-the-word-rad-972a989617c8&quot;&gt;rad&lt;/a&gt; custom code snippet feature.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference: &lt;a href=&quot;/supercharge-openapi-to-efficiently-describe-apis/&quot;&gt;Supercharge OpenAPI to efficiently describe APIs (click to what it!)&lt;/a&gt;.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;4 - Live coding at light speed with VS Code&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;mastering-the-command-palette&quot;&gt;Mastering the command palette&lt;/h1&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/palette.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If there is one thing you need to master with VS Code, it’s the command palette.
This is what allows to access all VS Code and its extensions functions quickly.
Use &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on Windows to open it.
Then type what you want to do, the palette will show you relevant actions.&lt;/p&gt;

&lt;p&gt;Once you have used some actions, the palette will show them first, so you just have to use the arrow keys to move down to the one you want.
That allowed me to quickly show the Redoc or SwaggerUI renderings coming with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&quot;&gt;42 Crunch OpenAPI Editor extension&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;copypaste-and-indent&quot;&gt;Copy/Paste and indent&lt;/h1&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/copy-paste-indent.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;At some moment, I had to copy/paste sections of code but that requires fixing indentation, and I was not good at that.
In the beginning I was relying to the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&quot;&gt;Indent Rainbow extension&lt;/a&gt; to give me indications on how to indent after pasting (that extension can really save your life when working with indent-based formats), but it was taking too much time.
Hopefully, I found a faster way to fix indentation on copy/paste:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the lines, but carefully include the full first list. It’s easier to start by the end of selection of go up (do not start selecting at the first word of first line)&lt;/li&gt;
  &lt;li&gt;Put cursor at the beginning of the line where you need to paste&lt;/li&gt;
  &lt;li&gt;Paste&lt;/li&gt;
  &lt;li&gt;Format whole file using &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt; (MacOS) or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt; (Windows). This will fix indentation based on the line above the one where you pasted. But that only works if the whole pasted block is already correctly indenting (relatively).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While writing this post, I realized that I could probably have defined keybindings (as I did to run my custom tasks) to show Redoc or SwaggerUI and gain a few milliseconds.&lt;/p&gt;

&lt;h1 id=&quot;the-tip-you-need-when-openingclosing-terminal&quot;&gt;The tip you need when opening/closing terminal&lt;/h1&gt;

&lt;p&gt;Showing and hiding the terminal can be done with the &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt; shortcut.
That seems quite simple but strangely I had hard time showing and hiding the terminal.
Sometimes it was working, and sometimes not; and that was making me loosing precious seconds.
I was starting to get mad until I figured out what the problem was.
The problem is if the terminal is shown, but has not the focus, the &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt; shortcut will just give it focus. 
Once I started to take care about that and NOT clicking elsewhere than in the terminal when using it, I no more had this problem.&lt;/p&gt;

&lt;h1 id=&quot;the-magic-of-code-snippets&quot;&gt;The magic of code snippets&lt;/h1&gt;

&lt;p&gt;The trick that made me gain much time while coding is &lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets&quot;&gt;user defined snippets&lt;/a&gt;.
That’s a totally rad feature.
Thanks to some configuration, just type “some magic keyword” and boom a complex regex or 20 lines of code appears magically.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/rad.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You can define global or local snippets.
I used local ones defined in &lt;code&gt;.vscode/supercharged-openapi.code-snippets&lt;/code&gt; which is a json file.
A snippet can be a static text but you can also use variables and even choices list (probably among other awesome things I didn’t used yet, check the &lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets&quot;&gt;documentation&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/live-coding-at-light-speed-with-vs-code/snippets.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The following example allows to add a “Read an element” operation in the form of the &lt;code&gt;GET /somethings/{somethingId}&lt;/code&gt;.
It is triggered when typing “Read” (&lt;code&gt;prefix&lt;/code&gt;) then hitting the tab key.
There are two variables &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; to provide, note how &lt;code&gt;$1&lt;/code&gt; appears multiple times.
Once you hit tab, you type the first variable value which is filled wherever there’s a &lt;code&gt;$1&lt;/code&gt; in the body.
Hit tab to set &lt;code&gt;$2&lt;/code&gt;.
And don’t forget to hit tab another time to finish.
If you don’t do that last tab, you’ll be unable to use another snippet, it took me a moment to figure that.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;A snippet with variables&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
	&amp;quot;Read an element&amp;quot;: {
		&amp;quot;scope&amp;quot;: &amp;quot;yaml&amp;quot;,
		&amp;quot;prefix&amp;quot;: &amp;quot;Read&amp;quot;,
		&amp;quot;body&amp;quot;: [
			&amp;quot;/$1s/{$1Id}:&amp;quot;,
			&amp;quot;\tget:&amp;quot;,
			&amp;quot;\t\tsummary: Read a $1&amp;quot;,
			&amp;quot;\t\tparameters:&amp;quot;,
			&amp;quot;\t\t\t- name: $1Id&amp;quot;,
			&amp;quot;\t\t\t  in: path&amp;quot;,
			&amp;quot;\t\t\t  required: true&amp;quot;,
			&amp;quot;\t\t\t  schema:&amp;quot;,
			&amp;quot;\t\t\t  \ttype: $2&amp;quot;,
			&amp;quot;\t\tresponses:&amp;quot;,
			&amp;quot;\t\t\t&amp;#39;200&amp;#39;:&amp;quot;,
			&amp;quot;\t\t\t\tdescription: OK&amp;quot;,
			&amp;quot;\t\t\t\tcontent:&amp;quot;,
			&amp;quot;\t\t\t\t\tapplication/json:&amp;quot;,
			&amp;quot;\t\t\t\t\t\tschema:&amp;quot;,
			&amp;quot;\t\t\t\t\t\t\ttype: object&amp;quot;
		]
	},
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Beware of tabs count, the snippet will be magically indented correctly based on where you put it, so there’s no need to add extra tabs.
The example above is supposed to go into &lt;code&gt;paths:&lt;/code&gt; which is at the root level of the document.
So I thought the first line would need a tab (and all the the other ones below too), but no.
The whole body is indented based on first line having no indentation.&lt;/p&gt;

&lt;p&gt;Note also that multiple snippets can match a keyword/key sentence, there will be a drop list to let you choose the one you want (with a full view of the body).
Just don’t forget to look at the one that is chosen to add the right snippet to your code.&lt;/p&gt;

&lt;p&gt;Using snippets generator such as &lt;a href=&quot;https://snippet-generator.app/?description=&amp;amp;tabtrigger=&amp;amp;snippet=&amp;amp;mode=vscode&quot;&gt;this one&lt;/a&gt; can be useful to turn your code template into a snippet.&lt;/p&gt;

&lt;h1 id=&quot;heading-to-last-problem&quot;&gt;Heading to last problem!&lt;/h1&gt;

&lt;p&gt;VS Code never stops to amaze.
I remember that I was totally skeptical at the beginning but as I was using Atom which was not totally meeting my expectations and had huge problem when VS Code showed up (it was 5 years ago I think), I decided to gave it a try and never left it since. 
With all of the extensions, tasks, snippets that’s not only a coding tool but a huge problem solver as you can see in this post series.
And VS Code actually helped me to solve my last problem: rehearsing and fine tuning the presentation before recording.
But that’s a story you’ll see in next and final post of this Surviving my first (recorded) live session series.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">This is the fourth post about my first ever (recorded) live coding session given at the Manning API conference. In this series second post, I listed some problems I encountered and started to solve them in previous post. But there are other problems to solve, one of them was that I was not coding and using VS Code fast enough. In this post, I’ll show you how I solved that using a few VS Code tricks, the most important one being: the absolutely rad custom code snippet feature.</summary></entry><entry><title type="html">Electro Monkeys Podcast - Le Design des APIs Web</title><link href="https://apihandyman.io/electro-monkeys-podcast-le-design-des-apis-web/" rel="alternate" type="text/html" title="Electro Monkeys Podcast - Le Design des APIs Web" /><published>2021-08-25T00:00:00-05:00</published><updated>2021-08-25T00:00:00-05:00</updated><id>https://apihandyman.io/electro-monkeys-podcast--le-design-des-apis-web</id><content type="html" xml:base="https://apihandyman.io/electro-monkeys-podcast-le-design-des-apis-web/">&lt;p&gt;C’est avec un grand plaisir que j’ai répondu à l’invitation de Stéphane Beuret pour parler d’API (en français pour une fois) dans son podcast Electro Monkeys.
On y parle de lavabo, de mon livre (The Design of Web APIs, en anglais lui) mais aussi et surtout de design d’API, de sécurité, cycle de vie et gestion des erreurs.
Toutes ces choses auxquelles il faut penser pour faire de bonnes API Web.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>Stéphane Beuret &amp; Arnaud Lauret</name></author><category term="talk" /><summary type="html">C’est avec un grand plaisir que j’ai répondu à l’invitation de Stéphane Beuret pour parler d’API (en français pour une fois) dans son podcast Electro Monkeys. On y parle de lavabo, de mon livre (The Design of Web APIs, en anglais lui) mais aussi et surtout de design d’API, de sécurité, cycle de vie et gestion des erreurs. Toutes ces choses auxquelles il faut penser pour faire de bonnes API Web.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 3</title><link href="https://apihandyman.io/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 3" /><published>2021-08-18T00:00:00-05:00</published><updated>2021-08-18T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-3</id><content type="html" xml:base="https://apihandyman.io/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/">&lt;p&gt;Third post about my first ever (recorded) live coding session given at the Manning API conference.
In &lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;previous post&lt;/a&gt;, I encountered various problems.
Two of them were related to not delivering the session like one of my regular slide deck presentation.
I wanted to add titles and have speaker’s notes.
In this post, I’ll show you how I solved those two problems with OBS, VS Code and a little bit of magic.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference: &lt;a href=&quot;/supercharge-openapi-to-efficiently-describe-apis/&quot;&gt;Supercharge OpenAPI to efficiently describe APIs (click to what it!)&lt;/a&gt;.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;adding-titles-to-avoid-loosing-attendees&quot;&gt;Adding titles to avoid loosing attendees&lt;/h1&gt;

&lt;p&gt;OK, that was not the most important problem, but I care a lot about how my presentations look like: how they can be beautiful but also readable. 
So though this was a no slides session, I wanted to provide some indications about what was happening.
I needed to show some title, like “Describe once (EXPERT): Read/Write with same schema”, as I have on my regular slide.
But this time, I was not showing pre-made slides using Google Slides but coding in VS Code.
How to add good looking titles in that context?
By taking advantage of both OBS and VS Code features.&lt;/p&gt;

&lt;h2 id=&quot;showing-titles-above-vs-code&quot;&gt;Showing titles above VS Code&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/magic.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In OBS, you can add various sources in a scene, I already had 3 in my Macbook scene:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An &lt;em&gt;Image&lt;/em&gt; source: the foreground Manning provided to me&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;Video Capture Device&lt;/em&gt; source: my webcam (or my IPhone)&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;Display Capture&lt;/em&gt; source: my MacBook display cropped on VS Code window titled “Supercharged OpenAPI” (By the way, regarding capturing VS Code, during my tests I also tried the &lt;em&gt;Window Capture&lt;/em&gt; source and was not really satisfied with it. There was a huge lag, especially when I was scrolling.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But there are other types of sources, as you can see in the screen capture above, the one that caught my eye when trying to find a solution for my idea was the &lt;em&gt;Browser&lt;/em&gt; source.
I created a simple &lt;code&gt;index.html&lt;/code&gt; file containing a “WTF it works!” level 1 header in the body (yes, I tend to curse in my code when testing) then started a &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;simple web server&lt;/a&gt; in the folder containing that file. 
In OBS, I added a &lt;em&gt;Browser&lt;/em&gt; source to my Macbook scene.
In the configuration window, I set up the URL to target &lt;code&gt;http://localhost:8080/index.html&lt;/code&gt;, and set width to 1980 (pixels) and height to 100.
There’s some custom CSS that comes by default, I didn’t modify it and hit OK.
Once added, I moved the new source in the scene on top of the zone for my screen and resized it to fit in the reserved space.
Finally in the “Sources” panel, I renamed the new source to “Title” (by right clicking on it and choosing rename).
And I reordered the sources to put “Title” in the “Template” folder, putting above the Display Capture Source (the new source hiding the VS Code window title) but below the Image source.&lt;/p&gt;

&lt;p&gt;So I had my title, but it was a static one.&lt;/p&gt;

&lt;h2 id=&quot;updating-titles-poc&quot;&gt;Updating titles POC&lt;/h2&gt;

&lt;p&gt;I thought I could find a configuration to trigger a refresh at regular interval in OBS, but there’s actually no such configuration.
Hopefully, I remembered that while I was reading some post about useful VS Code extensions, the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Live Server&lt;/a&gt; extension caught my eye.
This extension allows to start a web server in your workspace and it includes a live refresh out of the box.
That means a webpage loaded through this web server will be updated automatically in the browser when something change in the workspace.
So once the extension installed and started, I modified the Browser source configuration in OBS to target this web server, and I was still able to see the “WTF it works!” title.
Then I modified the HTML file by replacing the title with “WTF it has been updated!”, hit save …
And the title has been updated in OBS seamlessly!&lt;/p&gt;

&lt;p&gt;Now that my proof of concept (POC) worked, I needed to show the real titles and switch to the next one when needed but without the attendees noticing anything.&lt;/p&gt;

&lt;h2 id=&quot;updating-titles-magically-during-the-session&quot;&gt;Updating titles magically during the session&lt;/h2&gt;

&lt;p&gt;What I did is quite ugly, it’s a very first solution that would deserve to be improved (it will be improved!).
But it works.
The solution is based on static files, an ugly shell script, VS Code custom tasks and custom key bindings.&lt;/p&gt;

&lt;h3 id=&quot;first-write-some-ugly-shell&quot;&gt;First, write some ugly shell&lt;/h3&gt;

&lt;p&gt;In a &lt;code&gt;steps&lt;/code&gt; folder, I created sub-folders named &lt;code&gt;step-1&lt;/code&gt; to &lt;code&gt;step-19&lt;/code&gt; (because there were 19 steps in my TOC … at that time) and then put an &lt;code&gt;index.html&lt;/code&gt; file in each one.
Obviously, each file contained the title to be shown at each step (title coming from my TOC).&lt;/p&gt;

&lt;p&gt;Then I wrote the ugliest possible bash script named &lt;code&gt;next.sh&lt;/code&gt; (in &lt;code&gt;steps&lt;/code&gt;).
In its most basic version, this script did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checking if a &lt;code&gt;current.txt&lt;/code&gt; file exists, if not creating it and putting &lt;code&gt;0&lt;/code&gt; in it&lt;/li&gt;
  &lt;li&gt;Reading the &lt;code&gt;current.txt&lt;/code&gt; file, adding &lt;code&gt;1&lt;/code&gt; to its value and updating it&lt;/li&gt;
  &lt;li&gt;Copying the content of &lt;code&gt;step-{new value}&lt;/code&gt; to workspace root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Afterward, I added some controls to do nothing and output some warning when the next step actually doesn’t exist in the &lt;code&gt;steps&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;The ugly next.sh script&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary border-0 rounded-0 code-expandcollapse-btn&quot; aria-label=&quot;expand or shrink&quot; onclick=&quot;expandCollapseCode(this)&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Expand/Shrink&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/maximize.svg&quot; /&gt;&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-bash line-numbers code-collapsed code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;# That&amp;#39;s a trick I use in all my shell script
# To get the script actual folder
SCRIPT_DIR=&amp;quot;$( cd &amp;quot;$( dirname &amp;quot;${BASH_SOURCE[0]}&amp;quot; )&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; pwd )&amp;quot;

# Setting root dir and current.txt variables
ROOT_DIR=$SCRIPT_DIR/..
CURRENT_FILE=$SCRIPT_DIR/current.txt

# If current.txt doesn&amp;#39;t exist, creating it
if [[ -f $CURRENT_FILE ]]
then
    echo &amp;quot;not first step&amp;quot;
else
    echo &amp;quot;first step&amp;quot;
    echo &amp;quot;0&amp;quot; &amp;gt; $CURRENT_FILE
fi

# Adding 1 to current.txt value
CURRENT_STEP=`cat $CURRENT_FILE`
CURRENT_STEP=$((CURRENT_STEP+1))
CURRENT_DIR=&amp;quot;$SCRIPT_DIR/step-$CURRENT_STEP&amp;quot;
echo $CURRENT_STEP &amp;gt; $CURRENT_FILE
echo &amp;quot;step $CURRENT_STEP, DIR $CURRENT_DIR&amp;quot;

# Checking the next step actually exists
if [[ -d &amp;quot;$CURRENT_DIR&amp;quot; ]]
then
    # Copying everything in step-X folder to root folder
    echo &amp;quot;step exists&amp;quot;
    cp &amp;quot;$CURRENT_DIR&amp;quot;/* &amp;quot;$ROOT_DIR&amp;quot;
else
    echo &amp;quot;no more steps&amp;quot;
fi&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So, running the &lt;code&gt;steps/next.sh&lt;/code&gt; script (don’t forget to &lt;code&gt;chmod u+x&lt;/code&gt; it, like I always do) I could change title from step X to step X+1.&lt;br /&gt;
But how to run this script while doing the session?
I couldn’t open a terminal and run it when needed, that wouldn’t be very convenient.&lt;/p&gt;

&lt;h3 id=&quot;second-automate-with-vs-code-task&quot;&gt;Second, automate with VS Code task&lt;/h3&gt;

&lt;p&gt;Hopefully, I already partially knew how to solve that because in order to optimize my Jekyll workspace for the apihandyman.io blog I use &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks#_custom-tasks&quot;&gt;VS Code Custom tasks&lt;/a&gt; to run bach scripts.
So I created a &lt;code&gt;.vscode&lt;/code&gt; folder (its the standard folder holding VS Code stuff) and added the following &lt;code&gt;tasks.json&lt;/code&gt; file. 
This file define the custom tasks that will be available when this workspace/folder is opened in VS Code.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;.vscode/tasks.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;2.0.0&amp;quot;,
  &amp;quot;tasks&amp;quot;: [
    {
      &amp;quot;label&amp;quot;: &amp;quot;Next step&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;steps/next.sh&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
        &amp;quot;reveal&amp;quot;: &amp;quot;never&amp;quot;,
        &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;
      },
      &amp;quot;problemMatcher&amp;quot;: []
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now instead of opening a terminal and typing a command line to run the script, I could open VS Code command palette (&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt; on Windows) and choose &lt;code&gt;Tasks: Run task&lt;/code&gt;, then choose the “Next step” one.
That actually runs the shell command &lt;code&gt;steps/next.sh&lt;/code&gt; and that is done silently thanks to the &lt;code&gt;presentation.reveal: never&lt;/code&gt;.
In the beginning, I actually set &lt;code&gt;presentation.reveal: always&lt;/code&gt; to be sure that something was actually happening.
That’s better but still cumbersome, I didn’t want people watching me do that even if that’s really quick.&lt;/p&gt;

&lt;h3 id=&quot;third-add-a-little-bit-of-shortcut-magic&quot;&gt;Third, add a little bit of shortcut magic&lt;/h3&gt;

&lt;p&gt;VS Code allows to customize keyboard shortcuts and even define ones to trigger tasks (check &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks#_binding-keyboard-shortcuts-to-tasks&quot;&gt;documentation here&lt;/a&gt;).
Note that unlike tasks that can be configured locally inside a workspace/folder, key bindings are only defined globally.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/shortcuts.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To show shortcuts configuration use &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt; on MacOs or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt; on Windows.
Then click on the file icon on top right corner to see the json content of your custom configuration (&lt;code&gt;keybindings.json&lt;/code&gt; file).&lt;/p&gt;

&lt;p&gt;In order to trigger my “Next step” task when typing &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, I modified my configuration as follow:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;keybindings.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;// Place your key bindings in this file to override the defaults
[
    {
        &amp;quot;key&amp;quot;: &amp;quot;ctrl+m&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.action.tasks.runTask&amp;quot;,
        &amp;quot;args&amp;quot;: &amp;quot;Next step&amp;quot;
    }
]&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that before choosing &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;, I actually tested a few other shortcuts before finding one that was not already used.
To check if a key binding already exists, type it in the text field above the lists as shown in the screenshot above.&lt;/p&gt;

&lt;p&gt;That way, I could be like “blah blah blah, and now &lt;em&gt;next topic&lt;/em&gt;” … while magically changing the title with &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;styling-titles&quot;&gt;Styling titles&lt;/h2&gt;

&lt;p&gt;I could change my title but it was simple black text on white background, I wanted something with more style and if possible matching VS Code Style.
Hopefully, while configuring VS Code to use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=webrender.synthwave-x-fluoromachine&quot;&gt;Synthwave x Fluoromachine theme&lt;/a&gt;, I discovered that VS Code theming relies on good old CSS and that this theme CSS was located in &lt;code&gt;$HOME/.vscode/extensions/webrender.synthwave-x-fluoromachine-0.0.12/synthwave-x-fluoromachine.css&lt;/code&gt;.
I copy/pasted the file’s content into a &lt;code&gt;index.css&lt;/code&gt; file in my workspace and added it to my index.html files then used some css classes defined for this theme: &lt;code&gt;monaco-editor&lt;/code&gt; on body then &lt;code&gt;mtk6&lt;/code&gt;, &lt;code&gt;mtk7&lt;/code&gt; and &lt;code&gt;mtk8&lt;/code&gt; on the various elements in my title, et voilà!
I now had shiny neon styled titles.&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Styling index.html&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-html line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;index.css&amp;quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class=&amp;quot;monaco-editor&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;
            &amp;lt;span class=&amp;quot;mtk7&amp;quot;&amp;gt;@apihandyman&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;mtk6&amp;quot;&amp;gt; Supercharged OpenAPI&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;quot;section&amp;quot; class=&amp;quot;mtk8&amp;quot;&amp;gt;A basic OpenAPI File&amp;lt;/span&amp;gt;
        &amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I was quite satisfied until I realized that the blue text (&lt;code&gt;mtk6&lt;/code&gt;) had not the neon effect (attention to details is both my super power and my curse).
I’m definitely not a CSS expert, but I’m damn good at copy/pasting.
So, I compared its definition with the two other &lt;code&gt;mtk&lt;/code&gt;, and notice a difference: the &lt;code&gt;text-shadow&lt;/code&gt; of the blue class had less parameters.
The neon effect is actually achieved by adding shadows of different colors. 
So I added the missing values, struggle a bit to choose the various colors but I ended with the following &lt;code&gt;text-shadow&lt;/code&gt; that looked great!&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;Styling index.html&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-html line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;text-shadow: 0 0 2px #100c0f, 0 0 3px #61e2ff, 0 0 5px #61e2ff, 0 0 10px #03edf933;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;adding-speakers-note-to-avoid-forgetting-something&quot;&gt;Adding speaker’s note to avoid forgetting something&lt;/h1&gt;

&lt;p&gt;When I do a “regular” presentation, you may not notice it when seeing me on stage or watching me on a video, but I heavily rely on my speaker’s notes.
There’s my full speech there on each slide with some other information such as timing or “CLICK” when there is an animation or a transition to trigger at a specific moment in a sentence.
The more I practice a talk, the less I need them but I’m relieved to just know they are there if needed.&lt;/p&gt;

&lt;p&gt;Unfortunately, there are no “speaker’s notes” in VS Code and I was struggling to not forget something to say or to do.&lt;/p&gt;

&lt;h2 id=&quot;the-todo-attempt&quot;&gt;The Todo+ attempt&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/todo-v1.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;My first attempt in order to avoid forgetting something was to use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-todo-plus&quot;&gt;Todo+&lt;/a&gt; extension.
I created a steps.todo file basically containing my TOC.
The idea was to have the Todo+ panel opened while coding the OpenAPI file.
But that was not really convenient because it was visible to attendees and occupying space that I desperately needed.
I though to hide it by cropping the VS Code window in OBS but that would have possible hidden a space where I could have wanted to show something.
It was also not really convenient as, in order to keep the todo list usable for me, I had to open/close tasks folders.&lt;/p&gt;

&lt;h2 id=&quot;the-todohtml--ipad-solution&quot;&gt;The todo.html + iPad solution&lt;/h2&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/todo-v2.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;My second idea was to use almost the same trick as for the titles.
I added a &lt;code&gt;todo.html&lt;/code&gt; file in each &lt;code&gt;steps/step-x&lt;/code&gt; folder.
That way when I was using the “Next step” task, not only it was copying the &lt;code&gt;index.html&lt;/code&gt; file of the step to the root folder, it was also copying the &lt;code&gt;todo.html&lt;/code&gt; file too.
Having a browser showing &lt;code&gt;http://localhost:5500/todo.html&lt;/code&gt; allowed to me have speaker’s notes updated at each step just like titles.&lt;/p&gt;

&lt;p&gt;In order to keep those notes out of the way but still allowing me to look at them without loosing eye contact with my main screen and its web cam, I used the “sidecar” feature of my iPad.
All that is needed is to plug the iPad to the Macbook with a USB cable then go to display preferences, choose the iPad as an Airplay display.
Don’t forget to position it relatively to other screens as it is in reality in order to keep moving mouse to it simple.
And you’re done you have a third (or second) display screen.
Note that sidecar can be used over wifi but I never had satisfying result with it (maybe my wifi is not fast enough).&lt;/p&gt;

&lt;p&gt;Note that as OBS is able to crop on a specific window, I probably could had both VS Code and todo on my MacBook display.
But I wanted to test the side car, and it was working, so I moved on to next problem to solve.&lt;/p&gt;

&lt;p&gt;I choose to use the same style as for the titles though is was only visible to my eyes.
I also used various emojis to “type” the actions to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✏️ (pen) to write code&lt;/li&gt;
  &lt;li&gt;⌨️ (keyboard) to use the terminal&lt;/li&gt;
  &lt;li&gt;📺 (old TV) to show a rendering og the file (with Redoc or SwaggerUI)&lt;/li&gt;
  &lt;li&gt;💬 (Speech bubble) to say something&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-to-next-problem&quot;&gt;Heading to next problem&lt;/h1&gt;

&lt;p&gt;With all that I was totally satisfied with the style of the session and I was as comfortable as delivering a regular slide deck session thanks to my speaker’s note.
In next post, I’ll show you how I was able to code at light speed.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Third post about my first ever (recorded) live coding session given at the Manning API conference. In previous post, I encountered various problems. Two of them were related to not delivering the session like one of my regular slide deck presentation. I wanted to add titles and have speaker’s notes. In this post, I’ll show you how I solved those two problems with OBS, VS Code and a little bit of magic.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 2</title><link href="https://apihandyman.io/preparing-session-content-and-realizing-its-not-working-well/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 2" /><published>2021-08-11T00:00:00-05:00</published><updated>2021-08-11T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-2</id><content type="html" xml:base="https://apihandyman.io/preparing-session-content-and-realizing-its-not-working-well/">&lt;p&gt;Second post about my first ever (recorded) live coding session.
So, here I was in my &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;previous post&lt;/a&gt;: ready to record myself coding and talking without any slides…
But I didn’t told the whole story, I actually struggled a lot before actually being able to record myself coding and talking.
In the beginning, I had planned to do far more stuff and differently than what people had seen.
In this post, I’ll talk about how I prepared content and realized that it was not working well.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference: &lt;a href=&quot;/supercharge-openapi-to-efficiently-describe-apis/&quot;&gt;Supercharge OpenAPI to efficiently describe APIs (click to what it!)&lt;/a&gt;.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;preparing-content-almost-as-usual&quot;&gt;Preparing content almost as usual&lt;/h1&gt;

&lt;p&gt;I actually worked on the content before tinkering with OBS, VS Code and all other stuff.
I treated this session’s content almost like I usually do for my regular slides-based talks.&lt;/p&gt;

&lt;p&gt;Usually, I list the topics I want to talk about and then sort them in order to tell a story with a beginning and an end.
I go deeper into the story by writing a detailed table of content.
Then I write my full speech exactly as I will say it.
It need to be precise because (Fr)English is a second language for me and I want to avoid stumble on words.
After that, I do the slides using a (pop culture) theme that usually had popped in my mind while working on topics, toc or speech.&lt;/p&gt;

&lt;p&gt;Here, the topics were the OpenAPI Specification features and tools I wanted to show.
Building the story was made first by organizing the features in two categories: interface contract features and documentation features.
Then in each category, I sorted the features from simple/beginner to complex/advanced.
I added some extra entries in both categories to showcase various tools. 
With that, I had my table of content.&lt;/p&gt;

&lt;p&gt;Then instead of writing my speech, I wrote an OpenAPI file adding each feature one by one.
I had to think about an example. 
I wanted to keep things simple in order to have a simple CRUD API, but as always I added some pop culture reference … and ended with the Masters of the Universe API, an API providing information about characters and toys from the franchise.&lt;/p&gt;

&lt;p&gt;The OpenAPI file did not came right at first try, I had to rework it several times.
I improved it while working the “how to show that”, but it was more complicated than expected.
Indeed, my original plan for “how to show that” had not worked well.&lt;/p&gt;

&lt;h1 id=&quot;too-much-too-complicated-a-bit-off-topic&quot;&gt;Too much, too complicated, a bit off topic&lt;/h1&gt;

&lt;p&gt;The plan was to write the OpenAPI document using &lt;a href=&quot;https://stoplight.io/studio/&quot;&gt;Stoplight Studio&lt;/a&gt;, not for its GUI feature that allows to NOT write OpenAPI code (and that I use everyday).&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/preparing-session-content-and-realizing-its-not-working-well/stoplight-studio.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;But because it provides a cool renderer that updates itself smartly as you write code.
Indeed when using renderers such as &lt;a href=&quot;https://github.com/Redocly/redoc&quot;&gt;Redoc&lt;/a&gt; or &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot;&gt;Swagger UI&lt;/a&gt;, even embedded in VS Code (using the really good &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&quot;&gt;42 Crunch OpenAPI Editor extension&lt;/a&gt;), the experience is not so good.
For instance in Swagger UI, if you had opened an operation and selected the schema panel, modify something and the page is reloaded, still on the operation but you’ll have to re-switch to schema panel yourself.
There’s no such problem in Studio.&lt;/p&gt;

&lt;p&gt;I also wanted to show how the API I was designing would work.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/preparing-session-content-and-realizing-its-not-working-well/postman.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Studio comes with an embedded mock server powered by &lt;a href=&quot;https://stoplight.io/open-source/prism/&quot;&gt;Stoplight Prism&lt;/a&gt;.
Prism is quite cool, feed it an OpenAPI file and it will magically generate a (basic) API mock server simulating the API described in the OpenAPI file.
The idea was to call this mocked API in &lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman&lt;/a&gt; one of the best API GUI playground out there.&lt;/p&gt;

&lt;p&gt;I made a few test, writing code in Studio, importing the created OpenAPI file in Postman so it generated a ready to use collection targeting the Prism mock.
Mostly to showcase various ways of using an OpenAPI document.&lt;/p&gt;

&lt;p&gt;While all those tools are great and all this actually worked … it was too long, too complicated to switch between tools.
And on top of that, my research for the best zoom level to use in order to keep code readable ended with being unable to have both code and rendering visible in Studio.
All that actually helped me realized that I was probably also going a bit off topic in the way of presenting things.&lt;/p&gt;

&lt;h1 id=&quot;focusing-on-the-real-topic&quot;&gt;Focusing on the real topic&lt;/h1&gt;

&lt;p&gt;What I wanted to show was more the OpenAPI Specification itself and its inner possibilities rather than showing tools using it just to show them using it.
I needed to focus on the real topic of the session and do that efficiently using tools only to showcase the features I was using.&lt;/p&gt;

&lt;p&gt;So, that’s why I chose to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use only &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;, showing only OpenAPI code most of the time without anything else&lt;/li&gt;
  &lt;li&gt;Show rendering with &lt;a href=&quot;https://github.com/Redocly/redoc&quot;&gt;Redoc&lt;/a&gt; or &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot;&gt;Swagger UI&lt;/a&gt; only when actually needed (using &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&quot;&gt;42 Crunch OpenAPI Editor extension&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://stoplight.io/open-source/prism/&quot;&gt;Stoplight Prism&lt;/a&gt; and &lt;a href=&quot;https://httpie.io/&quot;&gt;httpie&lt;/a&gt; in VS Code embedded terminal only to illustrate OpenAPI features I was actually using with dummy API calls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That way I was able to do everything inside VS Code with a clean (but stylish, see &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;previous post&lt;/a&gt;) interface focusing on code.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/preparing-session-content-and-realizing-its-not-working-well/code-only.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Being able to open two terminals side by side revealed to be convenient when comparing API calls result to talk about inconsistencies.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/preparing-session-content-and-realizing-its-not-working-well/two-terminals.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;still-not-working-well-and-terrible-new-idea&quot;&gt;Still not working well and terrible new idea&lt;/h1&gt;

&lt;p&gt;But even taking those decisions, it was still hard to deliver the session smoothly and in the given time frame.
There was still probably too much content.
Also, it was taking me an awfully long time to type everything or do copy/paste and fix indentation.
I was struggling to switch between writing code and going to the terminal.&lt;/p&gt;

&lt;p&gt;I realized that I was often forgetting things to do or not doing them the right way.
During a rehearsal that was starting very well, I lost all my means because I forget to do a modification and so was totally puzzled, not understanding at all why it was not working suddenly.&lt;/p&gt;

&lt;p&gt;It was not going well and as it was difficult to work on specific sections of the sessions to train myself or improve the content, I was starting to loose my temper and my confidence.&lt;/p&gt;

&lt;p&gt;And as if I didn’t have enough problems, I had a terrible new idea.
I was really missing having titles like on my slides.
I feared attendees would be lost without visual indication about what was happening.
I decided to do something about that.&lt;/p&gt;

&lt;p&gt;In the next posts, I’ll explain how I solved all those problems.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">Second post about my first ever (recorded) live coding session. So, here I was in my previous post: ready to record myself coding and talking without any slides… But I didn’t told the whole story, I actually struggled a lot before actually being able to record myself coding and talking. In the beginning, I had planned to do far more stuff and differently than what people had seen. In this post, I’ll talk about how I prepared content and realized that it was not working well.</summary></entry><entry><title type="html">Surviving My First Recorded Live Coding Session Part 1</title><link href="https://apihandyman.io/setting-up-everything-to-record-myself-coding-and-talking/" rel="alternate" type="text/html" title="Surviving My First Recorded Live Coding Session Part 1" /><published>2021-08-04T00:00:00-05:00</published><updated>2021-08-04T00:00:00-05:00</updated><id>https://apihandyman.io/surviving-my-first-recorded-live-coding-session-part-1</id><content type="html" xml:base="https://apihandyman.io/setting-up-everything-to-record-myself-coding-and-talking/">&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference.
During 30 minutes I talked and coded … without any slides; that was totally new to me.
While it started well, preparing and recording this session turned out to be quite complicated.
At some moment, I was totally desperate and I thought I wasn’t going to make it.
But I did it and learned a lot of stuff that deserves to be shared.
In this first post, I’ll talk about how “it started well”: setting up OBS, mic, cam and VS Code to record myself speaking and coding.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;card series-toc&quot;&gt;
  &lt;div class=&quot;card-header series-toc-title&quot;&gt;
    &lt;h5 id=&quot;series&quot;&gt;Surviving my first (recorded) live coding session Series&lt;/h5&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row series-toc_content&quot;&gt;
    &lt;div class=&quot;col-md-7 series-toc-summary&quot;&gt;
      &lt;div class=&quot;card-body&quot;&gt;
        &lt;p class=&quot;card-text&quot;&gt;&lt;p&gt;I did my first ever (recorded) live coding session at the Manning API conference: &lt;a href=&quot;/supercharge-openapi-to-efficiently-describe-apis/&quot;&gt;Supercharge OpenAPI to efficiently describe APIs (click to what it!)&lt;/a&gt;.
It was about the OpenAPI Specification, how to use it efficiently when designing and documenting API.
The idea was to write an OpenAPI Specification document and show the spec basic to advanced features, tips and tricks and use a few tools around all that.
This post series aim to share all what I’ve learned preparing this session.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Spoiler alert!&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;You can get all VS Code stuff explained in this series in my &lt;a href=&quot;https://github.com/arno-di-loreto/supercharged-openapi&quot;&gt;supercharged-openapi&lt;/a&gt; github repository.
It is the one that I actually used during the session.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5 series-toc-list&quot;&gt;
      
      &lt;ul class=&quot;list-group list-group-flush&quot;&gt;
        
          
          &lt;li class=&quot;list-group-item active&quot;&gt;1 - Setting up everything to record myself coding and talking&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/preparing-session-content-and-realizing-its-not-working-well/&quot;&gt;2 - Preparing session content and realizing it's not working well&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/slide-deck-like-live-coding-with-titles-and-speaker-s-notes-using-obs-and-vs-code/&quot;&gt;3 - Slide deck like live coding with titles and speaker's notes using OBS and VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/live-coding-at-light-speed-with-vs-code/&quot;&gt;4 - Live coding at light speed with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
          
          &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;/improving-live-coding-session-tuning-and-rehearsing-with-vs-code/&quot;&gt;5 - Improving live coding session tuning and rehearsing with VS Code&lt;/a&gt;&lt;/li&gt;
          
        
        
          
          
          
        
          
          
          
        
          
          
          
        
          
          
          
        
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;discovering-obs-studio&quot;&gt;Discovering OBS Studio&lt;/h1&gt;

&lt;p&gt;Manning recommended using &lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS Studio&lt;/a&gt; to record the session.
It is a &lt;em&gt;free and open source software for video recording and live streaming&lt;/em&gt;.
It comes out of the box with many features that will be enough to start but it can be easily extended with &lt;a href=&quot;OBS can be extended with [plugins](https://obsproject.com/forum/resources/categories/obs-studio-plugins.6/)&quot;&gt;plugins&lt;/a&gt; for powerusers.
Besides being used to stream or record a video, OBS can also be used as a virtual camera in tools such as Zoom ou Teams for instance.
Note that a company called Streamlabs does a fork of OBS, called &lt;a href=&quot;https://streamlabs.com/streamlabs-obs-live-streaming-software&quot;&gt;Streamlabs OBS&lt;/a&gt;, adding some features but apparently also adding some CPU usage (I did not verify it myself though).&lt;/p&gt;

&lt;p&gt;I already tinkered with OBS briefly a few month ago but did not do much with it.
With this session to record, I could put my hands on it more seriously and I was quite impressed.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/obs.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;scenes-and-sources&quot;&gt;Scenes and sources&lt;/h2&gt;

&lt;p&gt;You can create various scenes, each one showing different sources such as your webcam (or any other camera plugged to your computer), static text or images, browser window and display capture. 
You can place and size each item as you wish.
In a matter of seconds I was able to create a few scenes mixing display capture cropped on specific windows, image, text and my webcam.&lt;/p&gt;

&lt;p&gt;For this session, Manning provided me a PNG image with 3 black (transparent) zones, my cam going on the top right zone and what I want to show on the big left one as you can see in the capture above.
The image, “Manning front” in sources, is above the “Camera” (MBP webcam) and “MacbookDisplay” sources, that way nothing overflows outside of the reserved spaces.&lt;/p&gt;

&lt;h2 id=&quot;automatic-advanced-scene-switching&quot;&gt;&lt;del&gt;Automatic&lt;/del&gt; Advanced scene switching&lt;/h2&gt;

&lt;p&gt;Though I didn’t keep that in the final version of my session, I tested using multiple scenes.
When handling multiple scenes, you can switch from one to another using keyboard shortcuts, but you can also use automatic switching (in menu bar choose Tools → Automatic Scene Switcher).
It allows to switch to a scene based on active window title.
It’s really impressive, you feel like a TV show director AND a magician doing so!&lt;/p&gt;

&lt;p&gt;While testing the standard Automatic Scene Switcher, I was a little bit annoyed by some limitations especially one regarding its activation.
Indeed, you have to not forget to start it before starting a recording.
Hopefully, everything was solved once I found the &lt;a href=&quot;https://obsproject.com/forum/resources/advanced-scene-switcher.395/&quot;&gt;Advanced Scene Switcher&lt;/a&gt; plugin.
This one propose more powerful features but also a simple one: “start advanced scene switch when recording/streaming starts”.&lt;/p&gt;

&lt;h2 id=&quot;reusable-group-of-sources&quot;&gt;Reusable group of sources&lt;/h2&gt;

&lt;p&gt;Also because I tested using multiple scenes reusing the same sources (foreground image and webcam), I created a folder containing both of them.
That way I could reuse them across various scene being sure they were always placed and sized in the same way.&lt;/p&gt;

&lt;h2 id=&quot;audio-mixer&quot;&gt;Audio mixer&lt;/h2&gt;

&lt;p&gt;Last but not least, the audio mixer allows to capture audio from different sources and set volume for each one (like any mixer).
Icing on the cake, OBS allow to add some audio filters on any audio source, just hit the ⚙️ icon on the audio source to open the filters configuration.
And for those who regularly use some &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_audio_workstation&quot;&gt;DAWs&lt;/a&gt;, know you can even use &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_Studio_Technology&quot;&gt;VST plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;sounding-better&quot;&gt;Sounding better&lt;/h1&gt;

&lt;p&gt;Speaking of audio, I did a few recording test While tinkering with OBS and realized that my sound was just terrible.&lt;/p&gt;

&lt;h2 id=&quot;trying-obs-noise-suppression&quot;&gt;Trying OBS noise suppression&lt;/h2&gt;

&lt;p&gt;I’m using a 16” MacBook Pro (MBP) and when using a second screen and some CPU consuming apps its fans start to make some noise.
This background noise was clearly audible on the recording.
I gave a try to the OBS noise suppression audio filter, it actually suppressed the fan noise but I had some strange sound variation and distortion when it was activated.
To make it short: my audio sucked.&lt;/p&gt;

&lt;h2 id=&quot;choosing-a-new-mic&quot;&gt;Choosing a new mic&lt;/h2&gt;

&lt;p&gt;As I wanted to buy a decent mic for a long time for future audio/video projects, it didn’t took me long to decide to buy one.
Manning recommended the very reasonably priced &lt;a href=&quot;https://www.audio-technica.com/en-us/at2005usb&quot;&gt;Audio Technica AT2005USB&lt;/a&gt; and I also asked my Twitter friends and had the following recommendations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluemic.com/en-us/products/yeti/&quot;&gt;Blue Yeti&lt;/a&gt;: A reference for Podcasters&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tulamics.com&quot;&gt;Tula Mic&lt;/a&gt;: A mic and autonomous audio recorder with an incredible look (though my wife took it for a cheese rasp)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.shure.com/en-US/products/microphones/mv7&quot;&gt;Shure MV7&lt;/a&gt;: Recommended by someone who was not happy with the Yeti picking too much background noise&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.shure.com/en-MEA/products/microphones/sm7b&quot;&gt;Shure SM7B&lt;/a&gt;: A studio &lt;a href=&quot;https://www.shure.com/pt-BR/shows-e-producoes/louder/twenty-thousand-hertz-podcast-what-makes-the-sm7b-so-special&quot;&gt;legend&lt;/a&gt; which is also used by many podcasters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After making some research, I was hesitating between both Shure, and the winner was … the Shure SM7B.
This &lt;a href=&quot;https://internetfolks.com/shure-sm7b-review/&quot;&gt;review&lt;/a&gt; helped me make my mind, it’s full of very interesting information.
I choose the pricier SM7B because of its quality and because I already had all that was need to use it.
Indeed this mic requires a 60db amplifier and my &lt;a href=&quot;https://line6.com/helix/helix-floor-rack.html&quot;&gt;Line 6 Helix Floor&lt;/a&gt; guitar effect and amp simulator has a mic input that can handle that.
For a lower budget, the MV7 seems very good (and is more plug and play).&lt;/p&gt;

&lt;p&gt;To hold it, I bought the &lt;a href=&quot;https://www.rode.com/accessories/stands/psa1&quot;&gt;Rode PSA1&lt;/a&gt; boom arm based on a good friend recommendation and hundreds of good reviews.
Be careful when manipulating this boom, its spring are strong and the arm can cause some damage when you remove the mic from it without holding the arm firmly.
I almost destroyed my guitar which is hanging on the wall doing so 😱, hopefully the arm hit the wall a few centimeters away.
Also, if you consider buying this boom, double check if your mic weights enough, if it’s not the case, it will be complicated to adjust its position (because of the strong springs).
There’s no such problem with the Shure SM7B which weights enough.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/mic.jpg&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Once I recovered from my emotions and finished fixing, plugin and configuring the mic (the 60db gain),
I realized that I could use all of the Helix effects, such as input gate (to filter background noises below a given level), compressor (dyn, to keep audio level in a given db range by boosting or reducing volume) or preamp (pre, to add/remove bass or medium for instance).
In order to avoid hurting my back by bending in two under the desk, I use the HX Edit application (shown below) to configure the Helix.
My audio can still probably be improved as I didn’t took much time to tweak it but it definitely rocked (compared to MBP mic) even without any effect activated but the input gate.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/hxedit.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;looking-good-enough&quot;&gt;Looking good enough&lt;/h1&gt;

&lt;p&gt;That’s not a secret, the MBP webcam is not the best one to say the least.
It’s probably the same hardware on all Macbooks since more than 10 years&lt;/p&gt;

&lt;h2 id=&quot;iphone-as-webcam--or-not&quot;&gt;IPhone as webcam … or not&lt;/h2&gt;

&lt;p&gt;I did a few tests using my iPhone as a webcam using the &lt;a href=&quot;https://apps.apple.com/us/app/epoccam-webcam-for-mac-and-pc/id449133483&quot;&gt;EpocCam application&lt;/a&gt;.
It was not working well over wifi, there we some random deconnections.
But when plugged on my MBP with a lightning to USB cable it worked perfectly.
The image was far better than with the webcam BUT positioning the iPhone on my desk was complicated.
I put it on top of a stack of books behind my MBP but I was not satisfied.&lt;/p&gt;

&lt;p&gt;I thought buying a stand for it but realized that as the zone for the camera on the Manning template was small, the difference between the “not so good but well placed webcam” and “the better but complicated to position iPhone” was not so noticeable so I used the webcam (I also gave up because I was in rush to do the recording, but that’s a story for next post).&lt;/p&gt;

&lt;h2 id=&quot;virtual-green-screen--or-not&quot;&gt;(Virtual) Green screen … or not&lt;/h2&gt;

&lt;p&gt;I finally did not used it but EpocCam provides a virtual green screen that do the trick.
You can take advantage of it in OBS using the chroma key effect filter on your video source.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/chroma.gif&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To do what you see above:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Activate virtual green screen on your camera (or put a real one behind you)&lt;/li&gt;
  &lt;li&gt;Open the (Effect) filters configuration screen by selecting your camera source and clicking on “Filters” above the source panel (or right-click on camera source and select filters)&lt;/li&gt;
  &lt;li&gt;Click on + in “Effect Filters” and select “Chroma Key”&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;coding-with-style&quot;&gt;Coding with style&lt;/h1&gt;

&lt;p&gt;I always try to do beautiful and readable slides for my sessions … but this time I was going to use VS Code.&lt;/p&gt;

&lt;div class=&quot;image &quot;&gt;
    &lt;figure class=&quot;figure&quot;&gt;
        &lt;img src=&quot;/images/setting-up-everything-to-record-myself-coding-and-talking/style.png&quot; class=&quot;figure-img img-fluid&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;zooming-enough&quot;&gt;Zooming enough&lt;/h2&gt;

&lt;p&gt;What worried me the most at that stage was the font size.
Indeed if you capture your 36K hyper-ultra-mage-wide screen with regular font size, nobody will be able to read what you type on a 1920x1080 video which may not be viewed in full screen.
In my case, I also had to be careful because the actual place reserved for my screen capture was smaller than the video size, only 1340x750.&lt;/p&gt;

&lt;p&gt;In VS Code (like in many Electron apps), you can use &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;+&lt;/kbd&gt; (Mac) or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;+&lt;/kbd&gt; (Windows) to zoom in (make things bigger) and  &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt; (Mac) or &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt; (Windows) to zoom out (make things smaller).&lt;/p&gt;

&lt;p&gt;In order to set an adapted zoom level, I made some test recording and compared them with someone writing code at a previous Manning conference available on YouTube.
I tried to keep thing readable even the video is not in full screen (regular YouTube embedded video size).&lt;/p&gt;

&lt;p&gt;I also tinkered with the Accessibility zoom feature of MacOS, you can make appear or zooming lens zone (the size you want) using a keyboard shortcut.
I finally didn’t needed it but I keep that in mind for another time.&lt;/p&gt;

&lt;h2 id=&quot;styling-vs-code&quot;&gt;Styling VS Code&lt;/h2&gt;

&lt;p&gt;I wanted something that look different from my good old VS Code standard theme and discovered many 80s theme in the marketplace.
I finally choose &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=webrender.synthwave-x-fluoromachine&quot;&gt;Synthwave x Fluoromachine&lt;/a&gt; which comes with a nice background image for the editor.
To make it fully work you’ll need &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=be5invis.vscode-custom-css&quot;&gt;Custom CSS and JS Loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I have done many tests, I don’t remember if that theme was the actual cause but as I had some standard VS code CSS customized, “Unsupported” appeared in the window’s title.
To get rid of it, I used &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=lehni.vscode-fix-checksums&quot;&gt;Fix VSCodeCheckums&lt;/a&gt;, it fixes VS code files checksum and make the “Unsupported” disappear.&lt;/p&gt;

&lt;p&gt;And I also use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&quot;&gt;Indent Rainbow&lt;/a&gt; extension that obviously colors indentations. Besides being pretty that’s very useful.&lt;/p&gt;

&lt;h2 id=&quot;drawing-on-screen&quot;&gt;Drawing on screen&lt;/h2&gt;

&lt;p&gt;And last but not least, the mouse cursor is not always that visible when you want to show something.
So I looked for a tool allowing to draw on screen.
I found &lt;a href=&quot;https://apps.apple.com/us/app/screenbrush/id1233965871?mt=12&quot;&gt;ScreenBrush&lt;/a&gt; which is totally amazing and was a perfect match with the Synthwave x Fluoromachine theme.
I didn’t used it extensively during the session, I only drew a few rectangles, but it has some many cool features that I will probably use in th future.
If you’re on MacOs and looking for a tool to draw on screen, this is the one.&lt;/p&gt;

&lt;h2 id=&quot;setting-vs-code-window-title-useful-for-obs&quot;&gt;Setting VS Code window title (useful for OBS)&lt;/h2&gt;

&lt;p&gt;You can’t see it in the recording but I have customized the VS Code window title to make it static and show the session’s title.
This is done by adding a &lt;code&gt;.vscode/settings.json&lt;/code&gt; file in your workspace containing the following configuration:&lt;/p&gt;

&lt;div class=&quot;card card-code text-white bg-dark border-dark&quot;&gt;
  
  &lt;div class=&quot;card-header&quot;&gt;
    &lt;div class=&quot;row m-0&quot;&gt;
      &lt;div class=&quot;col align-self-center&quot;&gt;
        &lt;p class=&quot;m-0 title&quot;&gt;.vscode/settings.json&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;col col-auto pr-0&quot;&gt;
        &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;code snippet control&quot;&gt;
          &lt;a role=&quot;button&quot; class=&quot;btn btn-secondary code-copy-btn border-0 rounded-0&quot; aria-label=&quot;copy&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;Copy&quot;&gt;&lt;img class=&quot;btn-icon&quot; src=&quot;/images/commons/icons/copy.svg&quot; /&gt;&lt;/a&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;card-body&quot;&gt;
    &lt;pre class=&quot;language-json line-numbers code-copy&quot;&gt;&lt;code class=&quot;code-block&quot;&gt;{
    &amp;quot;window.title&amp;quot;: &amp;quot;Supercharged OpenAPI&amp;quot;,
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Check VS code &lt;a href=&quot;https://code.visualstudio.com/docs/getstarted/settings&quot;&gt;documentation&lt;/a&gt; to see all what you can do with &lt;code&gt;window.title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the beginning I did that to have my session’s title there but that was actually useful for OBS configuration.
Indeed, you can crop screen capture to a window by using its name.
But if the window’s name changes … problem starts.
So making it static solves the problem.&lt;/p&gt;

&lt;h1 id=&quot;to-be-continued&quot;&gt;To be continued&lt;/h1&gt;

&lt;p&gt;Besides the mic and cam “problems”, which were not a real problems, it was starting well.
I was ready to record myself coding and talking.
So I started to actually work on the content for the recording and realized it was more than just coding and talking.
But it’s a story that will be told in &lt;a href=&quot;/it-was-more-complicated-than-just-coding-and-talking/&quot;&gt;next post&lt;/a&gt;.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">I did my first ever (recorded) live coding session at the Manning API conference. During 30 minutes I talked and coded … without any slides; that was totally new to me. While it started well, preparing and recording this session turned out to be quite complicated. At some moment, I was totally desperate and I thought I wasn’t going to make it. But I did it and learned a lot of stuff that deserves to be shared. In this first post, I’ll talk about how “it started well”: setting up OBS, mic, cam and VS Code to record myself speaking and coding.</summary></entry><entry><title type="html">Supercharge OpenAPI to efficiently describe APIs</title><link href="https://apihandyman.io/supercharge-openapi-to-efficiently-describe-apis/" rel="alternate" type="text/html" title="Supercharge OpenAPI to efficiently describe APIs" /><published>2021-08-03T00:00:00-05:00</published><updated>2021-08-03T00:00:00-05:00</updated><id>https://apihandyman.io/supercharge-openapi-to-efficiently-describe-apis</id><content type="html" xml:base="https://apihandyman.io/supercharge-openapi-to-efficiently-describe-apis/">&lt;p&gt;If you want to discover the OpenAPI Specification format, this video is for you!
In my first ever (recorded) live coding session, given at the 2021 Manning API Conference,
I demonstrate basic, advanced, and even hidden features that will help you to efficiently create complete, accurate, and maintainable API descriptions when designing documenting APIs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;h4 class=&quot;alert-heading&quot;&gt;Making Of&lt;/h4&gt;&lt;hr /&gt;
&lt;p&gt;If you want to learn how I did that session, you can read my &lt;a href=&quot;/setting-up-everything-to-record-myself-coding-and-talking/&quot;&gt;Surviving my first (recorded) live code session post series&lt;/a&gt;.
I share all what I’ve learned preparing it: how I prepared the content, the tools I used, and the struggles and doubts I had.&lt;/p&gt;

&lt;/div&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;The OpenAPI Specification has become an industry standard to describe Web APIs during design phase or to create API documentation. During this session, Arnaud Lauret will demonstrate how to take advantage of OpenAPI specification’s basic to advanced features to efficiently create complete, accurate, maintainable and user friendly API descriptions.&lt;/p&gt;

&lt;h1 id=&quot;video&quot;&gt;Video&lt;/h1&gt;

&lt;div id=&quot;-ZhrJzGjJQE&quot; class=&quot;third-party-content third-party-content-youtube&quot;&gt;
    &lt;div class=&quot;card third-party-content-warning&quot;&gt;
        &lt;img class=&quot;card-img&quot; src=&quot;/images/thirdpartycontents/supercharge-openapi-manning-api-conference.jpg&quot; alt=&quot;Card image&quot; /&gt;
        &lt;div class=&quot;card-img-overlay d-flex&quot;&gt;
            &lt;div class=&quot;my-auto mx-auto text-center&quot;&gt;
                &lt;p&gt;This content is hosted on youtube.com.&lt;/p&gt;
                &lt;p&gt;By showing this third party content you accept YouTube (Google)'s 
                    &lt;a class=&quot;privacy-policy&quot; href=&quot;https://policies.google.com/privacy&quot; target=&quot;_blank&quot;&gt;privacy policy&lt;/a&gt;.
                &lt;/p&gt;
                &lt;form&gt;
                    &lt;a href=&quot;javascript:thirdPartyConsent('-ZhrJzGjJQE', 'youtube')&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;Show third party content&lt;/a&gt;
                    &lt;div class=&quot;form-check&quot;&gt;
                        &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input third-party-content-remember&quot; /&gt;
                        &lt;label class=&quot;form-check-label&quot; for=&quot;exampleCheck1&quot;&gt;Remember my choice&lt;/label&gt;
                        &lt;p&gt;(can be changed in &lt;a class=&quot;privacy-policy&quot; href=&quot;/privacy/&quot;&gt;privacy settings&lt;/a&gt;)&lt;/p&gt;
                      &lt;/div&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;iframe-container third-party-content-iframe third-party-content-iframe-disabled&quot;&gt;
        &lt;iframe class=&quot;iframe-responsive&quot; data-src=&quot;https://www.youtube-nocookie.com/embed/-ZhrJzGjJQE?color=white&amp;amp;theme=light&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
        &lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;</content><author><name>Arnaud Lauret</name></author><category term="talk" /><summary type="html">If you want to discover the OpenAPI Specification format, this video is for you! In my first ever (recorded) live coding session, given at the 2021 Manning API Conference, I demonstrate basic, advanced, and even hidden features that will help you to efficiently create complete, accurate, and maintainable API descriptions when designing documenting APIs.</summary></entry><entry><title type="html">An API gateway must be a dumb pipe</title><link href="https://apihandyman.io/an-api-gateway-must-be-a-dumb-pipe/" rel="alternate" type="text/html" title="An API gateway must be a dumb pipe" /><published>2021-07-28T00:00:00-05:00</published><updated>2021-07-28T00:00:00-05:00</updated><id>https://apihandyman.io/an-api-gateway-must-be-a-dumb-pipe</id><content type="html" xml:base="https://apihandyman.io/an-api-gateway-must-be-a-dumb-pipe/">&lt;p&gt;An API gateway is a proxy that sits between API providers and their consumers.
Its main role is to ensure that only authorized consumers consume some APIs.
But API gateways usually come also with features such as request/response transformation and some of them even allow to code complex orchestration.
Such transformation features can be very useful if used wisely.
But they also can give terrible ideas with terrible consequences.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;good-transformation-and-orchestration&quot;&gt;Good transformation and orchestration&lt;/h1&gt;

&lt;p&gt;The most basic API gateway will allow to expose an API on &lt;code&gt;https://api.motu.com/v1&lt;/code&gt; while it’s implementation is exposed on &lt;code&gt;https/under.lying.server.prod/whatever/path&lt;/code&gt;.
Before transmitting the request to the underlying server &lt;code&gt;https/under.lying.server.prod&lt;/code&gt;, it will modify the path, replacing &lt;code&gt;v1&lt;/code&gt; by &lt;code&gt;/whatever/path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As security is probably not handled the same way before and after the gateway, it may remove the original Authorization header containing a meaningless access token and replace by another one containing a JWT token holding information such as which consumer app made this call and in the name of who.&lt;/p&gt;

&lt;p&gt;If it takes advantage of an API description format such as the OpenAPI Specification, it may strip the a &lt;code&gt;GET https://api.motu.com/v1/characters?unknownFilter=skeletor&lt;/code&gt; request from the &lt;code&gt;unknownFilter&lt;/code&gt; query parameter which is not declared in the interface contract.
It may does the same on the response and strip any undeclared headers.&lt;/p&gt;

&lt;p&gt;Possibly, it may seamlessly handle a &lt;code&gt;POST /whatever&lt;/code&gt; request coming with a &lt;code&gt;X-HTTP-Method-Override: PUT&lt;/code&gt; header and turn it into a &lt;code&gt;PUT /whatever&lt;/code&gt;. (See &lt;a class=&quot;post-link&quot; href=&quot;/api-design-tips-and-tricks-what-if-consumers-cant-do-patch-put-or-delete/&quot;&gt;API Design Tips And Tricks - What if consumers can’t do PATCH, PUT or DELETE?&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Beyond simple transformation, an API gateway may do some orchestration like sending request and response logs somewhere for instance.&lt;/p&gt;

&lt;h1 id=&quot;bad-transformation-and-orchestration&quot;&gt;Bad transformation and orchestration&lt;/h1&gt;

&lt;p&gt;All that basically means an API gateway allows to “write code”, real code using JavaScript, Java, Groovy or whatever language and/or pseudo-code using box and arrow based GUIs.
And seeing that, some may have terrible ideas.&lt;/p&gt;

&lt;p&gt;When returning the response of &lt;code&gt;GET /characters/he-man&lt;/code&gt; why not transforming &lt;code&gt;&quot;type&quot;: &quot;H&quot;&lt;/code&gt; to &lt;code&gt;&quot;side&quot;: &quot;hero&quot;&lt;/code&gt;?
Why not taking the USD &lt;code&gt;price&lt;/code&gt; in &lt;code&gt;GET /toys/he-man&lt;/code&gt; response and convert it into EUR calling a third party API?
Why not returning a subset of &lt;code&gt;GET /characters/he-man&lt;/code&gt; and &lt;code&gt;GET /toys/he-man&lt;/code&gt; when responding to &lt;code&gt;GET /action-figures/he-man&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Why not indeed?&lt;/p&gt;

&lt;p&gt;If you do that, you put business logic outside of its original domain, its original implementation.
It’s not uncommon to have business logic split across various components but putting it in an API gateway can be a problem.&lt;/p&gt;

&lt;p&gt;It may simply introduce complexity in the development workflow.
Coding on this component may be easy … but coding with all the CI/CD, quality checks, … stuff may not be that simple.&lt;/p&gt;

&lt;p&gt;Also, coding in that component may require special skills that the team owning the business logic, the team actually implementing the original underlying APIs may not have.
So this team may have to delegate that code to someone else.
And that may lead to organizational issue and a lack of ownership.
The original team may think they don’t own that code and not really care about it.
The other team coding on the gateway may not care as much as the original team, and even if it’s not the case, as they may not know the underlying business rules that can cause some bugs.&lt;/p&gt;

&lt;h1 id=&quot;an-api-gateway-is-a-smart-dumb-pipe&quot;&gt;An API gateway is a smart-dumb pipe&lt;/h1&gt;

&lt;p&gt;Introducing business logic in an API gateway basically transforms it into a good (or very bad I should say) old ESB.
Remember them?
Those bloated too smart pipes that ruined many information systems because they were so complicated to manage.
So don’t do that, keep API gateways dumb.
Well, not so dumb; as long as an API gateway do smart “API exposition related stuff” and stays dumb from a business perspective, that’s totally ok.&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">An API gateway is a proxy that sits between API providers and their consumers. Its main role is to ensure that only authorized consumers consume some APIs. But API gateways usually come also with features such as request/response transformation and some of them even allow to code complex orchestration. Such transformation features can be very useful if used wisely. But they also can give terrible ideas with terrible consequences.</summary></entry><entry><title type="html">An API Gateway alone will not secure your API</title><link href="https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api/" rel="alternate" type="text/html" title="An API Gateway alone will not secure your API" /><published>2021-07-21T00:00:00-05:00</published><updated>2021-07-21T00:00:00-05:00</updated><id>https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api</id><content type="html" xml:base="https://apihandyman.io/an-api-gateway-alone-will-not-secure-your-api/">&lt;p&gt;How many times people realized that an API was not so secured despite being exposed on an API gateway?
Too many times.
While being a must have to securely expose APIs, an API gateway will not do all the security work for you.
Security in general, and API security in particular, is a matter for everyone.
Let’s see what is the job of an API gateway and what you still have to do to actually securely expose APIs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;whats-an-api-gateways-job&quot;&gt;What’s an API gateway’s job?&lt;/h1&gt;

&lt;p&gt;In its most usual form, an API gateway is a proxy that sits between server applications exposing APIs and their consumer applications (they could be other server applications, mobile applications, web applications or whatever).
An API gateway may bring features such as logging, monitoring, rate limiting, simple connection to API catalogue or API developer portal (sometimes bundled with it), request/response transformations (we’ll talk more about that terrible idea in a later post) and more.
But these are only &lt;em&gt;additional&lt;/em&gt; features, an API gateway’s core job is security.&lt;/p&gt;

&lt;h2 id=&quot;a-guard-at-the-gate&quot;&gt;A guard at the gate&lt;/h2&gt;

&lt;p&gt;An API gateway’s fundamental role is to ensure that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only registered consumer applications can consume the exposed APIs&lt;/li&gt;
  &lt;li&gt;Each registered consumer application only consumes the API(s) it is allowed to&lt;/li&gt;
  &lt;li&gt;And each registered consumer application only use an API’s operations it is allowed to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, if an API gateway exposes a CRM (Customer Relationship Management) and a Contract APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unregistered consumers won’t be able to consume any of those APIs&lt;/li&gt;
  &lt;li&gt;A registered consumer may be allowed to consume only the CRM API and not the Contract one.&lt;/li&gt;
  &lt;li&gt;This registered consumer allowed to consume the CRM API may be allowed to only call “Search customers” and “Read customer” operations but not the “Create customer” one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-security-languages-interpret&quot;&gt;A “security languages” interpret&lt;/h2&gt;

&lt;p&gt;In order to make API calls, a consumer must provide a valid access token along with its requests.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
    &lt;p class=&quot;mb-0&quot;&gt;You must return here with a shrubbery... or else you will never pass through this wood... &lt;/p&gt;&lt;footer class=&quot;blockquote-footer&quot;&gt;
        &lt;cite title=&quot;Source Title&quot;&gt;Knight of Ni, Monty Python's and The Holy Grail&lt;/cite&gt;
    &lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;A registered consumer request an access token using its credentials, if end users are involved the API gateway will talk to an identity provider to authenticate them.
The obtained access token is a proof that this consumer is allowed to consume some APIs exposed on the gateway in the name of someone.
On every call, the consumer sends this access token along with its request.
A call will only be transmitted to the implementation if the token is still valid (it may have expired) and linked to a consumer being allowed to use the API’s operation mentioned in the request.&lt;/p&gt;

&lt;p&gt;To achieve that, an API gateway may have to speak “Oauth 1.0”, “Oauth 2.0”, “Oauth 2.1”, “SAML”, “OpenID Connect”, etc… with consumer applications and/or identity providers.
It handles that complexity on the behalf of the server application exposing the API.
This server application, the API’s implementation, will receive only authorized calls without having to care about which “security languages” are involved.&lt;/p&gt;

&lt;h1 id=&quot;whats-your-job&quot;&gt;What’s your job?&lt;/h1&gt;

&lt;p&gt;An API gateway simplifies heavily the work for teams building the server applications exposing APIs as they don’t have to code to manage complex security protocols or frameworks.
But it does not mean at all that an API gateway handles ALL security aspects.
Yes, I’m deeply sorry, but even when using an API gateway, you still have to work on security.&lt;/p&gt;

&lt;h2 id=&quot;configure-and-administrate-consumers&quot;&gt;Configure and administrate consumers&lt;/h2&gt;

&lt;p&gt;It’s still up to you to actually configure and administrate consumers.
Indeed, you must ensure that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adapted granularity is used when declaring consumers. For a “customer mobile application” will you declare a single consumer (terrible idea), or one for each mobile OS (less terrible but still terrible) or one for each OS and application version (better) or …&lt;/li&gt;
  &lt;li&gt;Only the API owners can actually let consumers use their APIs. It’s not unusual to forget that when building more or less centralized API gateway platform.&lt;/li&gt;
  &lt;li&gt;Consumers access rights are revoked when they should. When an old version of a mobile application becomes unsupported for instance.&lt;/li&gt;
  &lt;li&gt;Adapted security mode are used. Letting people use the Oauth 2.0 Customer Credentials flow in a mobile application or single page web application is a terrible idea that is too often seen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But even doing that is not enough, there is still work to do beyond the API gateway.&lt;/p&gt;

&lt;h2 id=&quot;build-secured-implementations&quot;&gt;Build secured implementations&lt;/h2&gt;

&lt;p&gt;When the API’s implementation receives a call from the API gateway that means the API gateway considers it’s a valid one.
But that does not means it’s actually valid from the implementation’s perspective.
Basically, at implementation level you have to check every single piece of data to ensure that it is coherent with what you know about the consumer and end user.&lt;/p&gt;

&lt;p&gt;If a consumer sends a &lt;code&gt;GET /crm/customers/12345&lt;/code&gt;, the gateway checks the access token is linked to a consumer that is allowed to call the CRM API and more precisely the “Read customer” operation, hence &lt;code&gt;GET /crm/customers/{customerId}&lt;/code&gt;.
But the API gateway will not check that the consumer or the end user (if any) are actually allowed to get information about that specific &lt;code&gt;12345&lt;/code&gt; customer.
It’s up to the implementation to check that.
This can be done as long as the API gateway provides information about the consumer and end user along the transmitted request.
And just in case: no, replacing &lt;code&gt;12345&lt;/code&gt; by a more complex id such as &lt;code&gt;7a31bfa6-463e-47e0-bf20-193086d5a29d&lt;/code&gt;, does not allow to not do this check.&lt;/p&gt;

&lt;p&gt;And the same goes for a &lt;code&gt;POST /contract/contracts&lt;/code&gt; request which is supposed to create a 1 billion Euros life insurance contract.
It’s up to the implementation to check that consumer or end user are allowed to create a contract with such amount and not the API gateway.&lt;/p&gt;

&lt;p&gt;By the way, do we actually need to expose those two features?&lt;/p&gt;

&lt;h2 id=&quot;design-secured-apis&quot;&gt;Design secured APIs&lt;/h2&gt;

&lt;p&gt;Before API implementation and API gateway, security must be dealt with during the design of APIs.&lt;/p&gt;

&lt;p&gt;It’s up to you to choose if you’ll create an API or not and which feature you’ll put in it or not.
You’re under no obligation to create APIs for everything and expose every feature of any system.&lt;/p&gt;

&lt;p&gt;And once you’re sure about what you want to expose, be sure sure to choose secured design and representation.
For instance avoid putting sensitive data such as personal data in path or query parameters, indeed a &lt;code&gt;GET /customers/{socialSecurityNumber}&lt;/code&gt; will be logged by any equipment between consumer and provider.&lt;/p&gt;

&lt;p&gt;And last but not least, it is also up to you to choose how the access to the API will be partitioned.
You have to design the scopes that grants access to all of or a subset of the API’s operations.
These scopes will be used by the gateway to decide if a consumer is allowed to use an operation or not.
For instance, you can put all of the read operations of the CRM API under the “crm:read_only” scope, the “Create customer” operation under the “crm:partner” and the “Create customer”, “Update customer” and “Delete customer” under the “crm:admin” scope.
A consumer which has been granted the “crm:partner” scope can only do “Create customer” and not do “Search customers” or “Delete customer”.&lt;/p&gt;

&lt;h1 id=&quot;an-api-gateway-is-not-the-api-security-panacea&quot;&gt;An API gateway is not the API security panacea&lt;/h1&gt;

&lt;p&gt;So, putting an API gateway in front of your API’s implementation may makes your life easier but don’t be fooled, you’ll still have to actively work on security yourself.
API security concerns the API gateway configuration (consumers, security mode, lifecycle), the implementation (application/fine grained security) and the design (what you expose and how you expose it).&lt;/p&gt;</content><author><name>Arnaud Lauret</name></author><category term="post" /><summary type="html">How many times people realized that an API was not so secured despite being exposed on an API gateway? Too many times. While being a must have to securely expose APIs, an API gateway will not do all the security work for you. Security in general, and API security in particular, is a matter for everyone. Let’s see what is the job of an API gateway and what you still have to do to actually securely expose APIs.</summary></entry></feed>